// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerBasicInfo {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "4")]
    pub stamina: u32,
    #[prost(uint32, tag = "5")]
    pub mcoin: u32,
    #[prost(uint32, tag = "6")]
    pub hcoin: u32,
    #[prost(uint32, tag = "7")]
    pub scoin: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AmountInfo {
    #[prost(uint32, tag = "1")]
    pub cur_amount: u32,
    #[prost(uint32, tag = "2")]
    pub max_amount: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlackInfo {
    #[prost(int64, tag = "1")]
    pub begin_time: i64,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub limit_level: u32,
    #[prost(uint32, tag = "4")]
    pub ban_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeverTimeAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VersionCount {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadData {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(int64, tag = "2")]
    pub time: i64,
    /// uint32 ghkpbpdfijh = 4;
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjDownloadData {
    #[prost(bytes = "vec", tag = "1")]
    pub iiecaooijbn: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub client_obj_download_data: ::core::option::Option<ClientDownloadData>,
    #[prost(message, repeated, tag = "3")]
    pub eloefhgkdfg: ::prost::alloc::vec::Vec<ClientDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientUploadData {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchParam {
    #[prost(uint32, repeated, tag = "1")]
    pub switch_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchInfo {
    #[prost(enumeration = "FeatureSwitchType", tag = "1")]
    pub r#type: i32,
    #[prost(message, repeated, tag = "2")]
    pub switch_list: ::prost::alloc::vec::Vec<FeatureSwitchParam>,
    #[prost(bool, tag = "3")]
    pub is_all_closed: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtraDeviceInfo {
    #[prost(string, tag = "1")]
    pub mmfbanghmhl: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub mdomlikdlih: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub jbocchafhlh: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub oeomjechnbi: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub meiegkjddcb: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub bhndmmdkfee: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub mac: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplayInfo {
    #[prost(uint64, tag = "1")]
    pub mnojpieebco: u64,
    #[prost(enumeration = "ReplayType", tag = "2")]
    pub replay_type: i32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(string, tag = "5")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub head_icon: u32,
    #[prost(string, tag = "7")]
    pub replay_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub create_time: u64,
    #[prost(uint32, tag = "9")]
    pub inepcgkdobl: u32,
    #[prost(uint32, tag = "10")]
    pub acocbgccece: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordBattleAvatar {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleRecord {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub damage_hp: u32,
    #[prost(bool, tag = "3")]
    pub is_final_hit: bool,
    #[prost(uint32, tag = "4")]
    pub over_kill_damage_hp: u32,
    #[prost(string, tag = "5")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<PunkLordBattleAvatar>,
    #[prost(uint32, tag = "7")]
    pub assist_score: u32,
    #[prost(uint32, tag = "8")]
    pub damage_score: u32,
    #[prost(uint32, tag = "9")]
    pub final_hit_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleRecordList {
    #[prost(message, repeated, tag = "1")]
    pub battle_record_list: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordMonsterKey {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordMonsterBasicInfo {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub config_id: u32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(int64, tag = "5")]
    pub create_time: i64,
    #[prost(uint32, tag = "6")]
    pub left_hp: u32,
    #[prost(uint32, tag = "7")]
    pub lppoobipgmk: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "8")]
    pub gagnibbldff: i32,
    #[prost(bool, tag = "9")]
    pub jcnedegkkja: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleReplay {
    #[prost(string, tag = "1")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub replay_info: ::core::option::Option<ReplayInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fjlhhgacngd {
    #[prost(uint64, tag = "1")]
    pub bgefjacaeka: u64,
    #[prost(uint32, tag = "2")]
    pub mggmpkighbm: u32,
    #[prost(uint32, tag = "3")]
    pub dbgddenjcia: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cdgpkijbfdk {
    #[prost(oneof = "cdgpkijbfdk::Hcchfobggfd", tags = "101")]
    pub hcchfobggfd: ::core::option::Option<cdgpkijbfdk::Hcchfobggfd>,
}
/// Nested message and enum types in `CDGPKIJBFDK`.
pub mod cdgpkijbfdk {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Hcchfobggfd {
        #[prost(message, tag = "101")]
        Jbeoeflhdpm(super::Fjlhhgacngd),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerData {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub dispatch_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub env_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalDispatchData {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub top_sever_region_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub server_list: ::prost::alloc::vec::Vec<ServerData>,
    #[prost(string, tag = "5")]
    pub stop_desc: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanSettings {
    #[prost(uint32, tag = "1")]
    pub rarity_bitset: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub relic_set_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub body_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub foot_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub sphere_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub rope_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub is_include_filter_sub_property: bool,
    #[prost(uint32, tag = "8")]
    pub sub_property_num: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub sub_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub head_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub hand_main_property_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleOp {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub action_entity_id: u32,
    #[prost(uint32, tag = "4")]
    pub target_entity_id: u32,
    #[prost(uint32, tag = "5")]
    pub op_type: u32,
    #[prost(uint32, tag = "6")]
    pub skill_index: u32,
    #[prost(uint32, tag = "7")]
    pub operation_counter: u32,
    #[prost(string, tag = "8")]
    pub ckkopnhbfom: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleEquipment {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRelic {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub main_affix_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "5")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub set_id: u32,
    #[prost(uint32, tag = "7")]
    pub r#type: u32,
    #[prost(uint32, tag = "8")]
    pub rarity: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarSkillTree {
    #[prost(uint32, tag = "1")]
    pub point_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicAffix {
    #[prost(uint32, tag = "1")]
    pub affix_id: u32,
    #[prost(uint32, tag = "2")]
    pub cnt: u32,
    #[prost(uint32, tag = "3")]
    pub step: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ephioeimepb {
    #[prost(bool, tag = "1")]
    pub apjgenoipnb: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub hbcpoddmcpo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub ojkjhgejlek: u32,
    #[prost(uint32, tag = "4")]
    pub lejnkcjgbec: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(message, repeated, tag = "6")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "7")]
    pub equipment_list: ::prost::alloc::vec::Vec<BattleEquipment>,
    #[prost(uint32, tag = "8")]
    pub hp: u32,
    #[prost(uint32, tag = "10")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "11")]
    pub relic_list: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub assist_uid: u32,
    #[prost(message, optional, tag = "15")]
    pub nlcjclfgmin: ::core::option::Option<Ephioeimepb>,
    #[prost(message, optional, tag = "16")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "17")]
    pub pgijnibedfo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleMonsterParam {
    #[prost(uint32, tag = "1")]
    pub hard_level_group: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub elite_group: u32,
    #[prost(uint32, tag = "4")]
    pub cbiaoplipkj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleMonster {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "3")]
    pub max_hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleMonsterWave {
    #[prost(message, repeated, tag = "1")]
    pub monster_list: ::prost::alloc::vec::Vec<BattleMonster>,
    #[prost(message, optional, tag = "2")]
    pub wave_param: ::core::option::Option<BattleMonsterParam>,
    #[prost(uint32, tag = "3")]
    pub battle_stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub battle_wave_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleBuff {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub owner_index: u32,
    #[prost(uint32, tag = "4")]
    pub wave_flag: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub target_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "string, float", tag = "6")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpbcfaencga {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub bmjckoiomgp: u32,
    #[prost(uint32, tag = "3")]
    pub ljmgfglaiji: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmkaecdmhop {
    #[prost(uint32, tag = "1")]
    pub pamdjgmndma: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbfonbjfede {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub bmjckoiomgp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghgepnbhmne {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleTarget {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
    #[prost(uint32, tag = "3")]
    pub total_progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleTargetList {
    #[prost(message, repeated, tag = "1")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleLineup {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<BattleMonsterWave>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
    #[prost(map = "uint32, message", tag = "9")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, optional, tag = "10")]
    pub igpipnaaebj: ::core::option::Option<Nmkaecdmhop>,
    #[prost(message, repeated, tag = "11")]
    pub pkkdlclifac: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, optional, tag = "12")]
    pub adafaohflma: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "13")]
    pub gddalcgoobg: ::core::option::Option<Olgkjdlmeio>,
    #[prost(message, optional, tag = "14")]
    pub battle_rogue_magic_info: ::core::option::Option<BattleRogueMagicInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olgkjdlmeio {
    #[prost(map = "uint32, uint32", tag = "1")]
    pub fmohpibgbka: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub dkhgchahomk: u32,
    #[prost(uint32, tag = "3")]
    pub ldlkicepblb: u32,
    #[prost(uint32, tag = "4")]
    pub kkhmdcjoimb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherAvatarInfo {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub passive_skill: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "AetherdivideSpiritLineupType", tag = "5")]
    pub spirit_lineup_type: i32,
    #[prost(message, optional, tag = "6")]
    pub sp_bar: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpneebpmhid {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<AetherAvatarInfo>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<BattleMonsterWave>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientTurnSnapshot {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub random_counter: u32,
    #[prost(uint32, tag = "3")]
    pub anim_event_counter: u32,
    #[prost(message, repeated, tag = "4")]
    pub snapshot_list: ::prost::alloc::vec::Vec<CharacterSnapshot>,
    #[prost(message, repeated, tag = "5")]
    pub anim_event_list: ::prost::alloc::vec::Vec<AnimEventSnapshot>,
    #[prost(uint32, tag = "6")]
    pub accfcdcfgnl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GamecoreConfig {
    #[prost(bool, tag = "1")]
    pub is_skip_verify: bool,
    #[prost(uint32, tag = "2")]
    pub max_turn_cnt: u32,
    #[prost(bool, tag = "3")]
    pub is_auto_fight: bool,
    #[prost(string, tag = "4")]
    pub csv_path: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub cpghfddhdah: bool,
    #[prost(bool, tag = "6")]
    pub bplaapfgnbi: bool,
    #[prost(uint32, tag = "7")]
    pub deefbboiclj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleBuffMsg {
    #[prost(uint32, repeated, tag = "1")]
    pub buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub buff_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub buff_level_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub buff_flag_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ldcpmbinoeo {
    #[prost(uint32, tag = "1")]
    pub mnjceidpaal: u32,
    #[prost(uint32, tag = "2")]
    pub abphopmgnlh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hapeobjjpaf {
    #[prost(bool, tag = "1")]
    pub afepjbiopdl: bool,
    #[prost(map = "string, message", tag = "2")]
    pub kmibbnglipc: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Ldcpmbinoeo,
    >,
    #[prost(bytes = "vec", tag = "3")]
    pub dfemmlkbabk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnkepmfpbaj {
    #[prost(message, repeated, tag = "1")]
    pub jglkgmmieee: ::prost::alloc::vec::Vec<ClientTurnSnapshot>,
    #[prost(string, tag = "2")]
    pub chehljekonk: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub debug_extra_info: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub fpblkiemanp: ::prost::alloc::vec::Vec<BattleReplayStringHash>,
    #[prost(uint32, tag = "5")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
    #[prost(uint32, tag = "7")]
    pub fbklolcjipk: u32,
    #[prost(uint32, tag = "8")]
    pub leegnifhgdh: u32,
    #[prost(message, optional, tag = "9")]
    pub ibojjfgbmak: ::core::option::Option<Hapeobjjpaf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleReplay {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub logic_random_seed: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<BattleLineup>,
    #[prost(message, repeated, tag = "5")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(bytes = "vec", tag = "6")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "7")]
    pub maze_plane_id: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub extra_ability_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub is_ai_consider_ultra_skill: bool,
    #[prost(enumeration = "BattleCheckStrategyType", tag = "10")]
    pub check_strategy: i32,
    #[prost(enumeration = "BattleModuleType", tag = "11")]
    pub battle_module_type: i32,
    #[prost(message, repeated, tag = "12")]
    pub battle_event: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub cycle_count: u32,
    #[prost(message, optional, tag = "15")]
    pub config: ::core::option::Option<GamecoreConfig>,
    #[prost(bytes = "vec", tag = "16")]
    pub game_core_log_encode: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "17")]
    pub client_version: u32,
    #[prost(uint32, tag = "18")]
    pub makigfemknm: u32,
    #[prost(message, optional, tag = "19")]
    pub ofcbeehliil: ::core::option::Option<Jpneebpmhid>,
    #[prost(message, optional, tag = "100")]
    pub maeipfdfdco: ::core::option::Option<Gnkepmfpbaj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleReplayStringHash {
    #[prost(int32, tag = "1")]
    pub hash: i32,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub speed: f64,
    #[prost(double, tag = "5")]
    pub left_hp: f64,
    #[prost(double, tag = "6")]
    pub left_sp: f64,
    #[prost(double, tag = "7")]
    pub max_amount: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipmentProperty {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttackDamageProperty {
    #[prost(string, tag = "1")]
    pub attack_type: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SkillUseProperty {
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(string, tag = "2")]
    pub skill_type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub skill_level: u32,
    #[prost(uint32, tag = "4")]
    pub skill_use_count: u32,
    #[prost(uint32, tag = "5")]
    pub hnikocpbkai: u32,
    #[prost(uint32, tag = "6")]
    pub gbcbaoleckp: u32,
    #[prost(uint32, tag = "7")]
    pub ehknagaoghb: u32,
    #[prost(uint32, tag = "8")]
    pub njmamcpgeik: u32,
    #[prost(uint32, tag = "9")]
    pub dmphgmkhlng: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjhnhakohmj {
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(double, tag = "2")]
    pub ekapbeehomb: f64,
    #[prost(uint32, repeated, tag = "3")]
    pub battle_target_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(double, tag = "4")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpAddSource {
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub sp_add: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AbilityUseStt {
    #[prost(string, tag = "1")]
    pub ndiefpcnbdh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(double, tag = "3")]
    pub total_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarBattleInfo {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub avatar_level: u32,
    #[prost(uint32, tag = "4")]
    pub avatar_rank: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_promotion: u32,
    #[prost(message, optional, tag = "6")]
    pub avatar_status: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "7")]
    pub avatar_skill: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "8")]
    pub avatar_equipment: ::prost::alloc::vec::Vec<EquipmentProperty>,
    #[prost(uint32, tag = "9")]
    pub total_turns: u32,
    #[prost(double, tag = "10")]
    pub total_damage: f64,
    #[prost(double, tag = "11")]
    pub total_heal: f64,
    #[prost(double, tag = "12")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "13")]
    pub total_hp_recover: f64,
    #[prost(double, tag = "14")]
    pub total_sp_cost: f64,
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "16")]
    pub stage_type: u32,
    #[prost(double, tag = "17")]
    pub total_break_damage: f64,
    #[prost(message, repeated, tag = "18")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "19")]
    pub attack_type_break_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "20")]
    pub attack_type_max_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "21")]
    pub skill_times: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(double, tag = "22")]
    pub delay_cumulate: f64,
    #[prost(uint32, tag = "23")]
    pub total_sp_add: u32,
    #[prost(message, repeated, tag = "24")]
    pub sp_add_source: ::prost::alloc::vec::Vec<SpAddSource>,
    #[prost(uint32, tag = "25")]
    pub total_bp_cost: u32,
    #[prost(uint32, tag = "26")]
    pub die_times: u32,
    #[prost(uint32, tag = "27")]
    pub revive_times: u32,
    #[prost(uint32, tag = "28")]
    pub break_times: u32,
    #[prost(uint32, tag = "29")]
    pub extra_turns: u32,
    #[prost(double, tag = "30")]
    pub total_shield: f64,
    #[prost(double, tag = "31")]
    pub total_shield_taken: f64,
    #[prost(double, tag = "32")]
    pub total_shield_damage: f64,
    #[prost(message, optional, tag = "33")]
    pub initial_status: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "34")]
    pub relics: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "35")]
    pub assist_uid: u32,
    #[prost(message, repeated, tag = "36")]
    pub jeabmcjmhkg: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(double, tag = "37")]
    pub lnapaonggii: f64,
    #[prost(double, tag = "38")]
    pub dagbcmappeb: f64,
    #[prost(double, tag = "39")]
    pub lamjenicfpi: f64,
    #[prost(double, tag = "40")]
    pub fbpnbccjacl: f64,
    #[prost(message, repeated, tag = "41")]
    pub hciihbfjife: ::prost::alloc::vec::Vec<AbilityUseStt>,
    #[prost(uint32, tag = "42")]
    pub joobdaimbje: u32,
    #[prost(uint32, tag = "43")]
    pub oajackjjcgp: u32,
    #[prost(double, tag = "44")]
    pub jkehimgbdaf: f64,
    #[prost(double, tag = "45")]
    pub hhcmonkjlkc: f64,
    #[prost(double, tag = "46")]
    pub okdnaipleaj: f64,
    #[prost(double, tag = "47")]
    pub mjdbamikpmm: f64,
    #[prost(double, tag = "48")]
    pub bfddmnhacdo: f64,
    #[prost(uint32, tag = "49")]
    pub nkeemlhkool: u32,
    #[prost(uint32, tag = "50")]
    pub cklndlilipl: u32,
    #[prost(uint32, tag = "51")]
    pub ajfdedllakn: u32,
    #[prost(double, tag = "52")]
    pub gbmebhpdicg: f64,
    #[prost(uint32, tag = "53")]
    pub jheahkhkcgj: u32,
    #[prost(uint32, tag = "54")]
    pub ijnjffhonai: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub shield: f64,
    #[prost(double, tag = "5")]
    pub speed: f64,
    #[prost(double, tag = "6")]
    pub left_hp: f64,
    #[prost(double, tag = "7")]
    pub enter_battle_hp: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterPhaseStt {
    #[prost(uint32, tag = "1")]
    pub jdhaibldfih: u32,
    #[prost(double, tag = "2")]
    pub djkjcbcjiol: f64,
    #[prost(uint32, tag = "3")]
    pub jdooapbehjh: u32,
    #[prost(uint32, tag = "4")]
    pub break_times: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonsterBattleInfo {
    #[prost(uint32, tag = "1")]
    pub entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub gnjipbnhphn: u32,
    #[prost(uint32, tag = "4")]
    pub bkogbkgnggg: u32,
    #[prost(message, optional, tag = "5")]
    pub gmihiipecpa: ::core::option::Option<MonsterProperty>,
    #[prost(uint32, tag = "6")]
    pub total_turns: u32,
    #[prost(double, tag = "7")]
    pub total_damage: f64,
    #[prost(double, tag = "8")]
    pub total_heal: f64,
    #[prost(double, tag = "9")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "10")]
    pub pjnenikmpoi: f64,
    #[prost(double, tag = "11")]
    pub total_hp_recover: f64,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub battle_id: u32,
    #[prost(uint32, tag = "14")]
    pub ncpmbjneofh: u32,
    #[prost(message, repeated, tag = "15")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "16")]
    pub skill_times: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(uint32, tag = "17")]
    pub stage_type: u32,
    #[prost(double, tag = "18")]
    pub febhblfmiod: f64,
    #[prost(double, tag = "19")]
    pub delay_cumulate: f64,
    #[prost(enumeration = "DeathSource", tag = "20")]
    pub chpcdcnfjbf: i32,
    #[prost(uint32, tag = "21")]
    pub wave: u32,
    #[prost(int32, tag = "22")]
    pub gkibdakhboe: i32,
    #[prost(uint32, tag = "23")]
    pub phase: u32,
    #[prost(uint32, tag = "24")]
    pub blgkiogoeid: u32,
    #[prost(enumeration = "BattleTag", tag = "25")]
    pub nniioemfhcd: i32,
    #[prost(message, repeated, tag = "26")]
    pub skill_info: ::prost::alloc::vec::Vec<Pjhnhakohmj>,
    #[prost(uint32, tag = "27")]
    pub hliojkmadlm: u32,
    #[prost(message, repeated, tag = "28")]
    pub jojcimncgmp: ::prost::alloc::vec::Vec<MonsterPhaseStt>,
    #[prost(uint32, tag = "29")]
    pub djjnpchoklc: u32,
    #[prost(uint32, tag = "30")]
    pub gbflihnnped: u32,
    #[prost(enumeration = "Deggbdogegg", tag = "31")]
    pub lkpoclabgee: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleEventProperty {
    #[prost(message, optional, tag = "2")]
    pub sp_bar: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleEventBattleInfo {
    #[prost(uint32, tag = "1")]
    pub battle_event_id: u32,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<BattleEventProperty>,
    #[prost(message, repeated, tag = "3")]
    pub skill_info: ::prost::alloc::vec::Vec<Pjhnhakohmj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScoreInfo {
    #[prost(uint32, tag = "1")]
    pub ikhioiiojha: u32,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bknhohpnclg {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub hocibkaedll: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub source: u32,
    #[prost(double, tag = "4")]
    pub damage: f64,
    #[prost(uint32, repeated, tag = "5")]
    pub ehjhncjnmdo: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "6")]
    pub fonpdaelofa: i32,
    #[prost(double, tag = "7")]
    pub jhofclmchjm: f64,
    #[prost(uint32, tag = "8")]
    pub gdhmpkiaego: u32,
    #[prost(uint32, tag = "9")]
    pub wave: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cklkpnbjbgn {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(int32, tag = "2")]
    pub oielnbaaifi: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khklckledal {
    #[prost(uint32, tag = "1")]
    pub bkbenaeiadb: u32,
    #[prost(uint32, tag = "2")]
    pub jbanbpbcjpi: u32,
    #[prost(uint32, tag = "3")]
    pub entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oncgadjdpno {
    #[prost(uint32, tag = "1")]
    pub jdhaibldfih: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub okkdbkagoao: ::prost::alloc::vec::Vec<Cklkpnbjbgn>,
    #[prost(uint32, tag = "4")]
    pub ekapbeehomb: u32,
    #[prost(message, repeated, tag = "5")]
    pub nfelfacjogf: ::prost::alloc::vec::Vec<Khklckledal>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cajbbbdbcap {
    #[prost(enumeration = "BattleStaticticEventType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub ljknddlajji: u32,
    #[prost(uint32, tag = "3")]
    pub cgnkhekhiml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhoochkmpbp {
    #[prost(uint32, tag = "1")]
    pub boajepbgkll: u32,
    #[prost(uint32, tag = "2")]
    pub gapnmboffoh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bafdpjpggog {
    #[prost(uint32, tag = "1")]
    pub kifljlfnkpl: u32,
    #[prost(bool, tag = "2")]
    pub khknacfljnf: bool,
    #[prost(message, optional, tag = "3")]
    pub oedndgjfkhb: ::core::option::Option<Dhoochkmpbp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akpejlaibla {
    #[prost(uint32, tag = "1")]
    pub card_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildGearDamageInfo {
    #[prost(uint32, tag = "1")]
    pub gear_id: u32,
    #[prost(double, tag = "2")]
    pub damage: f64,
    #[prost(double, tag = "3")]
    pub hp_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Andfbodmgfk {
    #[prost(uint32, repeated, tag = "1")]
    pub ddmkjocdcgi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cifenmdkaco {
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
    #[prost(uint32, tag = "3")]
    pub oknnblmcjaa: u32,
    #[prost(message, repeated, tag = "4")]
    pub kihlfoepamm: ::prost::alloc::vec::Vec<Dhoochkmpbp>,
    #[prost(float, tag = "5")]
    pub ekapbeehomb: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojgeiandjoe {
    #[prost(uint32, tag = "1")]
    pub miieidjdddo: u32,
    #[prost(message, repeated, tag = "2")]
    pub peeliikfgfk: ::prost::alloc::vec::Vec<Cifenmdkaco>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildBattleInfo {
    #[prost(uint32, tag = "1")]
    pub cur_level_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_period: u32,
    #[prost(uint32, tag = "3")]
    pub cur_coin: u32,
    #[prost(message, repeated, tag = "4")]
    pub weapon_slot_list: ::prost::alloc::vec::Vec<Bafdpjpggog>,
    #[prost(message, repeated, tag = "5")]
    pub accessory_slot_list: ::prost::alloc::vec::Vec<Bafdpjpggog>,
    #[prost(uint32, repeated, tag = "6")]
    pub ban_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub collection: ::core::option::Option<Andfbodmgfk>,
    #[prost(uint32, repeated, tag = "8")]
    pub allowed_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub cur_exp: u32,
    #[prost(uint32, tag = "10")]
    pub cur_reroll: u32,
    #[prost(uint32, tag = "11")]
    pub cur_treasure_miss_cnt: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub cur_gear_lost_cnt: u32,
    #[prost(uint32, tag = "14")]
    pub cur_wave: u32,
    #[prost(bool, tag = "15")]
    pub is_unlock_gear_reroll: bool,
    #[prost(bool, tag = "16")]
    pub is_unlock_gear_ban: bool,
    #[prost(message, repeated, tag = "17")]
    pub card_list: ::prost::alloc::vec::Vec<Akpejlaibla>,
    #[prost(message, repeated, tag = "18")]
    pub gear_damage_list: ::prost::alloc::vec::Vec<EvolveBuildGearDamageInfo>,
    #[prost(uint32, repeated, tag = "19")]
    pub stat_params: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "20")]
    pub is_giveup: bool,
    #[prost(uint32, tag = "21")]
    pub cur_unused_round_cnt: u32,
    #[prost(message, optional, tag = "22")]
    pub stat_log_info: ::core::option::Option<Ojgeiandjoe>,
    #[prost(uint32, tag = "23")]
    pub period_first_random_seed: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clnohaglfkh {
    #[prost(string, tag = "1")]
    pub phase: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub khobmbjafoa: f32,
    #[prost(float, tag = "3")]
    pub jjlcepcnngb: f32,
    #[prost(uint32, tag = "4")]
    pub ihegahmpfcd: u32,
    #[prost(uint32, tag = "5")]
    pub ndgkfgaoggg: u32,
    #[prost(uint32, tag = "6")]
    pub heifhkkaeoe: u32,
    #[prost(uint32, tag = "7")]
    pub ildhmnelfej: u32,
    #[prost(uint32, tag = "8")]
    pub nbjaapeafbh: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub mlkpobolkjm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub ifmfbegfndg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maoccapkjne {
    #[prost(uint32, tag = "1")]
    pub gjipkccieml: u32,
    #[prost(uint32, tag = "2")]
    pub iaoeomfhleb: u32,
    #[prost(uint32, tag = "3")]
    pub decaemjponm: u32,
    #[prost(uint32, tag = "4")]
    pub nmjofbddlal: u32,
    #[prost(uint32, tag = "5")]
    pub lecbngdigbd: u32,
    #[prost(uint32, tag = "6")]
    pub cmnfkidhnge: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub boss_info: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub gecpcopjpna: ::prost::alloc::vec::Vec<Clnohaglfkh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekcjebjlgcg {
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(double, tag = "2")]
    pub nemeghneclf: f64,
    #[prost(double, tag = "3")]
    pub fcpljiekgbk: f64,
    #[prost(uint32, tag = "4")]
    pub epnhgojgagg: u32,
    #[prost(uint32, tag = "5")]
    pub jlmojbkdolj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgjeladpncm {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicModifierInfo {
    #[prost(uint32, tag = "1")]
    pub rogue_magic_battle_const: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicRoundCount {
    #[prost(uint32, tag = "1")]
    pub battle_standard_round_limit: u32,
    #[prost(uint32, tag = "2")]
    pub battle_extra_round_limit: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicUnit {
    #[prost(uint32, tag = "1")]
    pub magic_unit_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(bool, tag = "3")]
    pub khknacfljnf: bool,
    #[prost(uint32, tag = "4")]
    pub dice_slot_id: u32,
    #[prost(map = "uint32, uint32", tag = "5")]
    pub hgklofgmlmn: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicScepter {
    #[prost(uint32, tag = "1")]
    pub scepter_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub rogue_magic_unit_info_list: ::prost::alloc::vec::Vec<BattleRogueMagicUnit>,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub trench_count: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicItemInfo {
    #[prost(message, optional, tag = "1")]
    pub battle_round_count: ::core::option::Option<BattleRogueMagicRoundCount>,
    #[prost(message, repeated, tag = "2")]
    pub battle_scepter_list: ::prost::alloc::vec::Vec<BattleRogueMagicScepter>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicDetailInfo {
    #[prost(oneof = "battle_rogue_magic_detail_info::ContentCase", tags = "1")]
    pub content_case: ::core::option::Option<
        battle_rogue_magic_detail_info::ContentCase,
    >,
}
/// Nested message and enum types in `BattleRogueMagicDetailInfo`.
pub mod battle_rogue_magic_detail_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ContentCase {
        #[prost(message, tag = "1")]
        BattleMagicItemInfo(super::BattleRogueMagicItemInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRogueMagicInfo {
    #[prost(message, optional, tag = "1")]
    pub bgfhgkmpfnh: ::core::option::Option<BattleRogueMagicModifierInfo>,
    #[prost(message, optional, tag = "2")]
    pub detail_info: ::core::option::Option<BattleRogueMagicDetailInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjgnhpiecee {
    #[prost(uint32, tag = "1")]
    pub scepter_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(double, tag = "3")]
    pub total_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfejidgffho {
    #[prost(uint32, tag = "1")]
    pub khjbiabkjop: u32,
    #[prost(uint32, tag = "2")]
    pub mobnijkecna: u32,
    #[prost(message, repeated, tag = "3")]
    pub pndnphbpmfi: ::prost::alloc::vec::Vec<Bjgnhpiecee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhpljamdbkl {
    #[prost(message, optional, tag = "1")]
    pub apbpepohdao: ::core::option::Option<Cfejidgffho>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghfepncenod {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub dlkcblhgbpf: u32,
    #[prost(uint32, tag = "3")]
    pub epnhgojgagg: u32,
    #[prost(uint32, tag = "4")]
    pub jlmojbkdolj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbjkalnlpdm {
    #[prost(uint32, tag = "1")]
    pub dglanfamddd: u32,
    #[prost(double, tag = "2")]
    pub gjapjlchmfd: f64,
    #[prost(double, tag = "3")]
    pub iimimhiibll: f64,
    #[prost(uint32, tag = "4")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub dlkcblhgbpf: u32,
    #[prost(double, tag = "6")]
    pub bkgmfmojecf: f64,
    #[prost(double, tag = "7")]
    pub mpkifckfhde: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbflbbokhmk {
    #[prost(uint32, tag = "1")]
    pub ibadnmdajod: u32,
    #[prost(uint32, tag = "2")]
    pub hddlnlfpbgk: u32,
    #[prost(double, tag = "3")]
    pub pbjjogcdmgn: f64,
    #[prost(uint32, tag = "4")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub dlkcblhgbpf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcbokoipbbc {
    #[prost(message, repeated, tag = "1")]
    pub nfengaigebk: ::prost::alloc::vec::Vec<Ghfepncenod>,
    #[prost(message, repeated, tag = "2")]
    pub cjjdnnojlkn: ::prost::alloc::vec::Vec<Bbjkalnlpdm>,
    #[prost(message, repeated, tag = "3")]
    pub apcbdieeghn: ::prost::alloc::vec::Vec<Lbflbbokhmk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekjmgdmbjjc {
    #[prost(message, optional, tag = "1")]
    pub jalmgplehbn: ::core::option::Option<Kcbokoipbbc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikehmomijdg {
    #[prost(uint32, tag = "1")]
    pub pjgleccanhi: u32,
    #[prost(double, tag = "2")]
    pub gjapjlchmfd: f64,
    #[prost(double, tag = "3")]
    pub iimimhiibll: f64,
    #[prost(uint32, tag = "4")]
    pub pmblbojgaij: u32,
    #[prost(uint32, tag = "5")]
    pub oangdlmmfmh: u32,
    #[prost(uint32, tag = "6")]
    pub jegmjplkolm: u32,
    #[prost(uint32, tag = "7")]
    pub acdddkcgfjd: u32,
    #[prost(double, tag = "8")]
    pub bkgmfmojecf: f64,
    #[prost(uint32, tag = "9")]
    pub ajkolloglce: u32,
    #[prost(uint32, tag = "10")]
    pub necjfbelkhj: u32,
    #[prost(double, tag = "11")]
    pub mpkifckfhde: f64,
    #[prost(uint32, tag = "12")]
    pub decaemjponm: u32,
    #[prost(uint32, tag = "13")]
    pub lecbngdigbd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhofbakneof {
    #[prost(uint32, tag = "1")]
    pub decaemjponm: u32,
    #[prost(uint32, tag = "2")]
    pub lecbngdigbd: u32,
    #[prost(uint32, tag = "3")]
    pub albaofljple: u32,
    #[prost(message, repeated, tag = "4")]
    pub cjjdnnojlkn: ::prost::alloc::vec::Vec<Ikehmomijdg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebjpelaonkh {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub bkbenaeiadb: u32,
    #[prost(uint32, tag = "3")]
    pub total_turns: u32,
    #[prost(double, tag = "4")]
    pub pihkhgjeplc: f64,
    #[prost(message, repeated, tag = "5")]
    pub skill_times: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(double, tag = "6")]
    pub total_damage: f64,
    #[prost(double, tag = "7")]
    pub total_break_damage: f64,
    #[prost(message, repeated, tag = "8")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "9")]
    pub attack_type_break_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "10")]
    pub attack_type_max_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(double, tag = "11")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "12")]
    pub total_heal: f64,
    #[prost(double, tag = "13")]
    pub total_hp_recover: f64,
    #[prost(double, tag = "14")]
    pub total_shield: f64,
    #[prost(double, tag = "15")]
    pub total_shield_taken: f64,
    #[prost(double, tag = "16")]
    pub total_shield_damage: f64,
    #[prost(uint32, tag = "17")]
    pub break_times: u32,
    #[prost(uint32, tag = "18")]
    pub bccmhajkiof: u32,
    #[prost(uint32, tag = "19")]
    pub joobdaimbje: u32,
    #[prost(uint32, tag = "20")]
    pub oajackjjcgp: u32,
    #[prost(double, tag = "21")]
    pub jkehimgbdaf: f64,
    #[prost(uint32, tag = "22")]
    pub entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkejppiekke {
    #[prost(message, repeated, tag = "1")]
    pub pelpfkpfleb: ::prost::alloc::vec::Vec<Ebjpelaonkh>,
    #[prost(uint32, tag = "2")]
    pub egdjnchdhhm: u32,
    #[prost(uint32, tag = "3")]
    pub dnefenpiikm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleStatistics {
    #[prost(uint32, tag = "1")]
    pub total_battle_turns: u32,
    #[prost(uint32, tag = "2")]
    pub total_auto_turns: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub ultra_cnt: u32,
    #[prost(double, tag = "5")]
    pub total_delay_cumulate: f64,
    #[prost(double, tag = "6")]
    pub cost_time: f64,
    #[prost(message, repeated, tag = "7")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<AvatarBattleInfo>,
    #[prost(message, repeated, tag = "8")]
    pub monster_list: ::prost::alloc::vec::Vec<MonsterBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub round_cnt: u32,
    #[prost(uint32, tag = "10")]
    pub cocoon_dead_wave: u32,
    #[prost(uint32, tag = "11")]
    pub avatar_battle_turns: u32,
    #[prost(uint32, tag = "12")]
    pub monster_battle_turns: u32,
    #[prost(map = "string, float", tag = "13")]
    pub custom_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint32, tag = "14")]
    pub challenge_score: u32,
    #[prost(message, repeated, tag = "16")]
    pub dolglijaigd: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(enumeration = "BattleEndReason", tag = "19")]
    pub end_reason: i32,
    #[prost(message, repeated, tag = "21")]
    pub pcilcjilfph: ::prost::alloc::vec::Vec<Bknhohpnclg>,
    #[prost(int32, repeated, tag = "22")]
    pub endmhkffphm: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "23")]
    pub ehgbiogifba: ::prost::alloc::vec::Vec<Oncgadjdpno>,
    #[prost(message, repeated, tag = "26")]
    pub bdmgnlokbmk: ::prost::alloc::vec::Vec<Cajbbbdbcap>,
    #[prost(message, repeated, tag = "27")]
    pub mebhhfjlpaf: ::prost::alloc::vec::Vec<Ikljphjlpfg>,
    #[prost(map = "uint32, message", tag = "28")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, repeated, tag = "29")]
    pub ggbdodlghlm: ::prost::alloc::vec::Vec<Oeiihfpfkjj>,
    #[prost(message, optional, tag = "30")]
    pub adafaohflma: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "31")]
    pub ojjnmpmjcon: ::core::option::Option<Maoccapkjne>,
    #[prost(bool, tag = "32")]
    pub jhfcbeekkfe: bool,
    #[prost(message, repeated, tag = "33")]
    pub peeliikfgfk: ::prost::alloc::vec::Vec<Ekcjebjlgcg>,
    #[prost(message, repeated, tag = "34")]
    pub cpjonndmmfb: ::prost::alloc::vec::Vec<Pgjeladpncm>,
    #[prost(uint32, tag = "35")]
    pub hjabngmolmh: u32,
    #[prost(message, optional, tag = "36")]
    pub kpjlijcmmmk: ::core::option::Option<Jhpljamdbkl>,
    #[prost(message, optional, tag = "37")]
    pub mkpngjekgjl: ::core::option::Option<Ekjmgdmbjjc>,
    #[prost(message, optional, tag = "38")]
    pub aehakhdcccc: ::core::option::Option<Nhofbakneof>,
    #[prost(message, optional, tag = "39")]
    pub aiabhjniale: ::core::option::Option<Pkejppiekke>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oeiihfpfkjj {
    #[prost(uint32, tag = "1")]
    pub kmnjimmoakp: u32,
    #[prost(uint32, tag = "2")]
    pub akeklkgonno: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikljphjlpfg {
    #[prost(enumeration = "AetherdivideSpiritLineupType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(message, optional, tag = "3")]
    pub sp_bar: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiPath {
    #[prost(uint32, tag = "1")]
    pub multi_path_type: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abclmmjagcd {
    #[prost(enumeration = "BattleCheckResultType", tag = "1")]
    pub retcode: i32,
    #[prost(enumeration = "BattleEndStatus", tag = "2")]
    pub end_status: i32,
    #[prost(message, optional, tag = "3")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(bytes = "vec", tag = "4")]
    pub game_core_log_encode: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, uint32", tag = "5")]
    pub mjpepgcieeh: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "6")]
    pub mismatch_turn_count: u32,
    #[prost(uint32, tag = "7")]
    pub gfomjfkicba: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CharacterSnapshot {
    #[prost(uint32, tag = "1")]
    pub runtime_id: u32,
    #[prost(uint64, repeated, tag = "2")]
    pub properties: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnimEventSnapshot {
    #[prost(string, tag = "1")]
    pub event_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fomdhpehadf {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub ialngpaikch: u32,
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform: i32,
    #[prost(string, tag = "6")]
    pub pdciladmjij: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub iheomnbpmkm: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub version: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ljkjpmhccih {
    #[prost(enumeration = "LobbyCharacterType", tag = "1")]
    pub fjaelbdggph: i32,
    #[prost(enumeration = "LobbyCharacterStatus", tag = "2")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iafaleblmid {
    #[prost(uint32, tag = "1")]
    pub egjbcbeiiii: u32,
    #[prost(bool, tag = "2")]
    pub pmnbeficdeg: bool,
    #[prost(uint32, tag = "3")]
    pub inhpgafkfmf: u32,
    #[prost(uint32, tag = "4")]
    pub pmmmlgjgpan: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Empbnbjldni {
    #[prost(string, repeated, tag = "1")]
    pub pegmnmcdabo: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub cclgbfchkdo: bool,
    #[prost(oneof = "empbnbjldni::Afnpljlbfff", tags = "1001")]
    pub afnpljlbfff: ::core::option::Option<empbnbjldni::Afnpljlbfff>,
}
/// Nested message and enum types in `EMPBNBJLDNI`.
pub mod empbnbjldni {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Afnpljlbfff {
        #[prost(message, tag = "1001")]
        Aijhfogjihl(super::Iafaleblmid),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdohnmgabge {
    #[prost(message, optional, tag = "1")]
    pub basic_info: ::core::option::Option<Fomdhpehadf>,
    #[prost(message, optional, tag = "2")]
    pub bgpkjnfadef: ::core::option::Option<Ljkjpmhccih>,
    #[prost(message, optional, tag = "3")]
    pub ext_info: ::core::option::Option<Empbnbjldni>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cokmefolddh {
    #[prost(uint32, tag = "1")]
    pub obepjidjdcn: u32,
    #[prost(uint32, tag = "2")]
    pub dgkcnkgfdfh: u32,
    #[prost(uint32, tag = "3")]
    pub aoamagdfgpd: u32,
    #[prost(uint32, tag = "4")]
    pub gekmlhbeaon: u32,
    #[prost(uint32, tag = "5")]
    pub hgacejkhjlk: u32,
    #[prost(uint32, tag = "6")]
    pub bmemahbffim: u32,
    #[prost(uint32, tag = "7")]
    pub oamkcddngcg: u32,
    #[prost(uint32, tag = "8")]
    pub mifpooajfam: u32,
    #[prost(uint32, tag = "9")]
    pub hpackbolbnl: u32,
    #[prost(uint32, tag = "10")]
    pub pmehdeklgia: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gciboeobjjh {
    #[prost(uint64, tag = "1")]
    pub pmfflmdckeb: u64,
    #[prost(enumeration = "FightGameMode", tag = "2")]
    pub cckiobhjfbi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gooeahpaeae {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(enumeration = "FightGameMode", tag = "2")]
    pub pcooolkcjod: i32,
    #[prost(message, repeated, tag = "3")]
    pub ilcadhlkkhh: ::prost::alloc::vec::Vec<Gdohnmgabge>,
    #[prost(enumeration = "MatchUnitType", tag = "4")]
    pub r#type: i32,
    #[prost(uint64, tag = "5")]
    pub bgefjacaeka: u64,
    #[prost(uint64, tag = "6")]
    pub jddkpcechem: u64,
    #[prost(uint32, tag = "7")]
    pub dfhdbejmkke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginActivityData {
    #[prost(uint32, tag = "11")]
    pub login_days: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub obeamnonhmk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoginActivityCsReq {}
/// FFGFBPBCIAM (2695)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginActivityScRsp {
    #[prost(message, repeated, tag = "4")]
    pub login_activity_list: ::prost::alloc::vec::Vec<LoginActivityData>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// LMCMJBJKEJO (2684)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeLoginActivityRewardCsReq {
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "7")]
    pub take_days: u32,
}
/// FBGFCAGCDCJ (2627)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeLoginActivityRewardScRsp {
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub take_days: u32,
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub panel_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityScheduleData {
    #[prost(uint32, tag = "10")]
    pub activity_id: u32,
    #[prost(int64, tag = "3")]
    pub begin_time: i64,
    #[prost(int64, tag = "9")]
    pub end_time: i64,
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
}
/// GKDJMNBEGHC (2667)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActivityScheduleConfigCsReq {}
/// PIAACGNEGNF (2628)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityScheduleConfigScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub schedule_data: ::prost::alloc::vec::Vec<ActivityScheduleData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialActivityInfo {
    #[prost(bool, tag = "11")]
    pub taken_reward: bool,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
}
/// FDPBAIDBMHO (2694)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrialActivityDataCsReq {}
/// BMPMEDHEHJE (2692)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrialActivityDataScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub activity_stage_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub trial_activity_info_list: ::prost::alloc::vec::Vec<TrialActivityInfo>,
}
/// KBPJMAKDBGM (2660)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialActivityDataChangeScNotify {
    #[prost(message, optional, tag = "12")]
    pub trial_activity_info: ::core::option::Option<TrialActivityInfo>,
}
/// CDMMLBFCMOC (2645)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterTrialActivityStageCsReq {
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
}
/// KPBPGNEFIKB (2664)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTrialActivityStageScRsp {
    #[prost(message, optional, tag = "12")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// IKPECCFDNNM (2672)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTrialActivityRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
}
/// IKHAMOJIKGF (2699)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTrialActivityRewardScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub stage_id: u32,
}
/// AKJOLMJKIBL (2603)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrialActivityCsReq {
    #[prost(uint32, tag = "10")]
    pub stage_id: u32,
}
/// LHHLLGLLKKF (2640)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrialActivityScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub stage_id: u32,
}
/// FICABMHOOEO (2661)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveTrialActivityCsReq {
    #[prost(uint32, tag = "9")]
    pub stage_id: u32,
}
/// KDNOIIGODKA (2630)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveTrialActivityScRsp {
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// IJLGMGBDOAF (2633)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurTrialActivityScNotify {
    #[prost(enumeration = "TrialActivityStatus", tag = "3")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub activity_stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcofdipbjme {
    #[prost(uint32, tag = "6")]
    pub panel_id: u32,
    #[prost(bool, tag = "12")]
    pub ajimomgleco: bool,
    #[prost(bool, tag = "14")]
    pub is_taken_reward: bool,
    #[prost(uint32, tag = "2")]
    pub chhlbiofbef: u32,
}
/// CONPKEGKENO (2675)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMaterialSubmitActivityDataCsReq {}
/// HHGHLKPKNIF (2619)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaterialSubmitActivityDataScRsp {
    #[prost(message, repeated, tag = "3")]
    pub lpajkdbhjai: ::prost::alloc::vec::Vec<Jcofdipbjme>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// IGEHLOJHLCP (2626)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitMaterialSubmitActivityMaterialCsReq {
    #[prost(uint32, tag = "5")]
    pub chhlbiofbef: u32,
}
/// HGBLDCADMGM (2607)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitMaterialSubmitActivityMaterialScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub cfdepejiggg: ::core::option::Option<Jcofdipbjme>,
}
/// JEHMAMCKLPP (2653)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeMaterialSubmitActivityRewardCsReq {
    #[prost(uint32, tag = "8")]
    pub chhlbiofbef: u32,
}
/// FIEIGCONDNJ (2690)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMaterialSubmitActivityRewardScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub chhlbiofbef: u32,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
}
/// EDKIDMOOMPJ (1336)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAdventureCsReq {
    #[prost(uint32, tag = "2")]
    pub map_id: u32,
}
/// NPKHHEPCLNE (1395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterAdventureScRsp {
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FarmStageGachaInfo {
    #[prost(int64, tag = "15")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub gacha_id: u32,
    #[prost(int64, tag = "9")]
    pub begin_time: i64,
}
/// CDNMHFOMNIG (1384)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFarmStageGachaInfoCsReq {
    #[prost(uint32, repeated, tag = "2")]
    pub farm_stage_gacha_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// BGCFOIEIKLA (1327)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFarmStageGachaInfoScRsp {
    #[prost(message, repeated, tag = "1")]
    pub farm_stage_gacha_info_list: ::prost::alloc::vec::Vec<FarmStageGachaInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// IEJOOPKJOOF (1367)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuickStartCocoonStageCsReq {
    #[prost(uint32, tag = "11")]
    pub dfpaikajkal: u32,
    #[prost(uint32, tag = "13")]
    pub wave: u32,
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
}
/// OGGILCEKBIE (1328)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuickStartCocoonStageScRsp {
    #[prost(uint32, tag = "1")]
    pub dfpaikajkal: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "10")]
    pub wave: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// IHEPLDPPMFA (1352)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuickStartFarmElementCsReq {
    #[prost(uint32, tag = "9")]
    pub kidmdefnaak: u32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
}
/// PKICEIJHCGN (1374)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuickStartFarmElementScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub world_level: u32,
    #[prost(uint32, tag = "1")]
    pub kidmdefnaak: u32,
}
/// MBMNOJOGOHJ (4836)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAetherDivideSceneCsReq {
    #[prost(uint32, tag = "9")]
    pub ibccplkogfd: u32,
}
/// GKFNNFOPNNE (4895)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAetherDivideSceneScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub ibccplkogfd: u32,
}
/// JKHBPMBEDAI (4884)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveAetherDivideSceneCsReq {}
/// DAGLKJDEDJI (4827)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveAetherDivideSceneScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// PGLJDBNINOP (4867)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideSceneBattleCsReq {
    #[prost(uint32, tag = "11")]
    pub caster_id: u32,
    #[prost(uint32, tag = "5")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "2")]
    pub skill_index: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub assist_monster_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub assist_monster_entity_info: ::prost::alloc::vec::Vec<AssistMonsterEntityInfo>,
}
/// INAKMGPOPMN (4828)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideSceneBattleScRsp {
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<AetherDivideBattleInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub attacked_group_id: u32,
}
/// MBCFOCGILJJ (4852)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAetherDivideChallengeBattleCsReq {
    #[prost(uint32, tag = "11")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "13")]
    pub lineup_index: u32,
}
/// ABDOLOFFKBF (4874)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideChallengeBattleScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub battle_info: ::core::option::Option<AetherDivideBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PassiveSkillItem {
    #[prost(uint32, tag = "13")]
    pub slot: u32,
    #[prost(uint32, tag = "5")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritInfo {
    #[prost(uint32, tag = "7")]
    pub aether_avatar_id: u32,
    #[prost(message, optional, tag = "8")]
    pub sp_bar: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "9")]
    pub exp: u32,
    #[prost(uint32, tag = "3")]
    pub elbfodanmcp: u32,
    #[prost(message, repeated, tag = "11")]
    pub passive_skill: ::prost::alloc::vec::Vec<PassiveSkillItem>,
    #[prost(uint32, tag = "1")]
    pub promotion: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideLineupInfo {
    #[prost(uint32, repeated, tag = "6")]
    pub aether_avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub slot: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherSkillInfo {
    #[prost(uint32, tag = "15")]
    pub num: u32,
    #[prost(uint32, tag = "4")]
    pub skill_dress_avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
}
/// PFLBDMMMMIO (4834)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAetherDivideInfoCsReq {}
/// OOFDMJLDDAA (4843)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAetherDivideInfoScRsp {
    #[prost(uint32, tag = "7")]
    pub ajfghjkdmlk: u32,
    #[prost(message, repeated, tag = "6")]
    pub aboocdhapaf: ::prost::alloc::vec::Vec<AetherDivideSpiritInfo>,
    #[prost(uint32, tag = "13")]
    pub gfimlbecjlc: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub skill_list: ::prost::alloc::vec::Vec<AetherSkillInfo>,
    #[prost(uint32, tag = "3")]
    pub cecnpiokeoh: u32,
    #[prost(uint32, tag = "8")]
    pub pebjfclbmgc: u32,
    #[prost(message, repeated, tag = "4")]
    pub lineup_list: ::prost::alloc::vec::Vec<AetherDivideLineupInfo>,
    #[prost(uint32, tag = "15")]
    pub obhcochafaa: u32,
}
/// FNKEKFOGGJO (4846)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAetherDivideLineUpCsReq {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
/// CEKBFJMMGIB (4825)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAetherDivideLineUpScRsp {
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// DMGIGDEGAMK (4896)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipAetherDividePassiveSkillCsReq {
    #[prost(uint32, tag = "4")]
    pub slot: u32,
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
    #[prost(uint32, tag = "9")]
    pub aether_avatar_id: u32,
}
/// LIPMNGACPEE (4805)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipAetherDividePassiveSkillScRsp {
    #[prost(message, optional, tag = "7")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(message, optional, tag = "4")]
    pub aether_skill_info: ::core::option::Option<AetherSkillInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// BODHBDMEAIL (4875)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearAetherDividePassiveSkillCsReq {
    #[prost(uint32, tag = "8")]
    pub aether_avatar_id: u32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
}
/// PEFBNPFEDFH (4819)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClearAetherDividePassiveSkillScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(message, optional, tag = "10")]
    pub aether_skill_info: ::core::option::Option<AetherSkillInfo>,
}
/// NCFDNDEIMCF (4859)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritExpUpCsReq {
    #[prost(uint32, tag = "7")]
    pub aether_avatar_id: u32,
    #[prost(uint32, tag = "13")]
    pub ipjlcfammdb: u32,
    #[prost(uint32, tag = "5")]
    pub gfimlbecjlc: u32,
}
/// DIFPFDFJBPE (4812)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritExpUpScRsp {
    #[prost(uint32, tag = "14")]
    pub gfimlbecjlc: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
}
/// KMBKCMMJMPD (4826)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchAetherDivideLineUpSlotCsReq {
    #[prost(uint32, tag = "9")]
    pub lineup_index: u32,
}
/// IHFPCPDOEAE (4807)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchAetherDivideLineUpSlotScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub lineup_index: u32,
}
/// FFGCMJCOCFP (4853)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAetherDivideStageBattleCsReq {
    #[prost(uint32, tag = "3")]
    pub event_id: u32,
}
/// EMHANAFCHIC (4890)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideStageBattleScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub battle_info: ::core::option::Option<AetherDivideBattleInfo>,
}
/// HBGNJMOHKPL (4876)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideLineupScNotify {
    #[prost(message, optional, tag = "12")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
/// CCNAOPOBCHF (4878)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritInfoScNotify {
    #[prost(uint32, tag = "14")]
    pub gfimlbecjlc: u32,
    #[prost(message, optional, tag = "5")]
    pub aether_info: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(message, repeated, tag = "7")]
    pub pnnmohfkibn: ::prost::alloc::vec::Vec<AetherDivideSpiritInfo>,
}
/// OHKDGBEGBMG (4829)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAetherDivideChallengeInfoCsReq {}
/// AAAIOBHPHHG (4850)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAetherDivideChallengeInfoScRsp {
    #[prost(uint32, tag = "13")]
    pub bfibkfebcna: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub cmmmjekgojp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub ciflenfecfc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// CDNFANBIDFH (4848)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideFinishChallengeScNotify {
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
}
/// FCLGAALAINA (4888)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideTainerInfoScNotify {
    #[prost(uint32, tag = "4")]
    pub obhcochafaa: u32,
}
/// MBEBNDDEFKI (4858)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideSkillItemScNotify {
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
    #[prost(uint32, tag = "4")]
    pub num: u32,
}
/// OJNCGKAMHCG (4835)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideRefreshEndlessCsReq {}
/// JEOPLOPCIOG (4873)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideRefreshEndlessScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub pebjfclbmgc: u32,
}
/// LEJAFIKNBID (4817)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideRefreshEndlessScNotify {
    #[prost(uint32, tag = "11")]
    pub pebjfclbmgc: u32,
}
/// MNOHCJOBNDN (4813)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideTakeChallengeRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
}
/// FJAFFLMLNAF (4821)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideTakeChallengeRewardScRsp {
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
}
/// JKFLLBPLJAJ (4736)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAlleyInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgelhhciidp {
    #[prost(uint32, tag = "10")]
    pub hohbliidafj: u32,
    #[prost(uint32, tag = "2")]
    pub map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nooeecmcdpc {
    #[prost(uint32, tag = "2")]
    pub shop_id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knknokonjjd {
    #[prost(message, repeated, tag = "11")]
    pub kcohmmblcgh: ::prost::alloc::vec::Vec<Gfdcmebgchi>,
    #[prost(message, repeated, tag = "3")]
    pub ciihfigjlbj: ::prost::alloc::vec::Vec<Pgelhhciidp>,
    #[prost(uint32, repeated, tag = "14")]
    pub deifiemckld: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub hhdoomjlggc: ::prost::alloc::vec::Vec<LogisticsScore>,
}
/// JMFKPCBKMIH (4795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAlleyInfoScRsp {
    #[prost(message, optional, tag = "14")]
    pub dbpcglolbjb: ::core::option::Option<Knknokonjjd>,
    #[prost(uint32, tag = "15")]
    pub coin_cost: u32,
    #[prost(message, repeated, tag = "1")]
    pub jpgocegdlol: ::prost::alloc::vec::Vec<Fbmjmhiiodf>,
    #[prost(map = "uint32, uint32", tag = "11")]
    pub oamofncmdhj: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "10")]
    pub cbpmpdggjcp: u32,
    #[prost(message, optional, tag = "6")]
    pub afinlclfcka: ::core::option::Option<Okfbifcdjhl>,
    #[prost(uint32, repeated, tag = "13")]
    pub ncophnjnmgl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub dbimhgddfgl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub dbafeacgkpp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub bmbedghcnkj: ::core::option::Option<Medpamloemc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfgamhdhelb {
    #[prost(uint32, tag = "14")]
    pub jkpbdmddlml: u32,
    #[prost(uint32, tag = "7")]
    pub pcmmdjjobin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngfbpkjegpf {
    #[prost(uint32, tag = "13")]
    pub goods_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub ppogdknkjkj: ::prost::alloc::vec::Vec<Bfgamhdhelb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyPlacingShip {
    #[prost(message, repeated, tag = "13")]
    pub goods_list: ::prost::alloc::vec::Vec<Ngfbpkjegpf>,
    #[prost(uint32, tag = "4")]
    pub ship_id: u32,
}
/// BOLGOGHAEPB (4746)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyPlacingGameCsReq {
    #[prost(uint32, tag = "9")]
    pub kfnmapnilog: u32,
    #[prost(uint32, tag = "11")]
    pub hbienmcgonc: u32,
    #[prost(uint32, tag = "7")]
    pub lbccmfhgmhc: u32,
    #[prost(uint32, tag = "13")]
    pub cifdomcabdb: u32,
    #[prost(uint32, tag = "1")]
    pub efpnpkpkcpo: u32,
    #[prost(uint32, tag = "10")]
    pub nkcdckmipjm: u32,
    #[prost(uint32, tag = "8")]
    pub pipkahifdod: u32,
    #[prost(message, optional, tag = "14")]
    pub ijinmkbopcb: ::core::option::Option<AlleyPlacingShip>,
    #[prost(uint32, tag = "5")]
    pub cost_time: u32,
}
/// LJCNNJCJLGH (4725)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyPlacingGameScRsp {
    #[prost(uint32, tag = "3")]
    pub mgcpablikee: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub mjeojalilaj: u32,
    #[prost(uint32, tag = "11")]
    pub obcpiebbkij: u32,
    #[prost(uint32, tag = "9")]
    pub nnalloifkjo: u32,
    #[prost(uint32, tag = "8")]
    pub iaigcclpnne: u32,
    #[prost(uint32, tag = "7")]
    pub ifolkfampdj: u32,
    #[prost(uint32, tag = "4")]
    pub event_id: u32,
}
/// JDAKJBPNHNF (4718)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityRaidPlacingGameCsReq {
    #[prost(message, optional, tag = "9")]
    pub ijinmkbopcb: ::core::option::Option<AlleyPlacingShip>,
    #[prost(oneof = "activity_raid_placing_game_cs_req::Gmpiekagkgj", tags = "6, 7")]
    pub gmpiekagkgj: ::core::option::Option<
        activity_raid_placing_game_cs_req::Gmpiekagkgj,
    >,
}
/// Nested message and enum types in `ActivityRaidPlacingGameCsReq`.
pub mod activity_raid_placing_game_cs_req {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Gmpiekagkgj {
        #[prost(uint32, tag = "6")]
        Jmpddbkclhi(u32),
        #[prost(uint32, tag = "7")]
        Lbccmfhgmhc(u32),
    }
}
/// LBNMFLOPMBL (4737)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityRaidPlacingGameScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(oneof = "activity_raid_placing_game_sc_rsp::Gmpiekagkgj", tags = "3, 8")]
    pub gmpiekagkgj: ::core::option::Option<
        activity_raid_placing_game_sc_rsp::Gmpiekagkgj,
    >,
}
/// Nested message and enum types in `ActivityRaidPlacingGameScRsp`.
pub mod activity_raid_placing_game_sc_rsp {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Gmpiekagkgj {
        #[prost(uint32, tag = "3")]
        Jmpddbkclhi(u32),
        #[prost(uint32, tag = "8")]
        Lbccmfhgmhc(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okfbifcdjhl {
    #[prost(uint32, tag = "7")]
    pub edkmjofpfhk: u32,
    #[prost(bool, tag = "11")]
    pub abedikboelg: bool,
    #[prost(uint32, tag = "15")]
    pub necfmnfaffe: u32,
    #[prost(uint32, tag = "8")]
    pub pecaimhapdn: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub bkbonjbgmkb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub nieaacecncp: ::prost::alloc::vec::Vec<u32>,
}
/// LIJNKPJEOLB (4726)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyOrderChangedScNotify {
    #[prost(message, optional, tag = "14")]
    pub pbocddmcejb: ::core::option::Option<Okfbifcdjhl>,
}
/// INKGKDFAHBB (4778)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyShipUnlockScNotify {
    #[prost(uint32, tag = "11")]
    pub kjfdomeeble: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmeilaignfb {
    #[prost(uint32, tag = "11")]
    pub kohjeeamogf: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub gahnbbfaden: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub shop_id: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub oimdmohbkba: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub hcghpbnmnea: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub nnkekkfniap: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub hnakfaekpgj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfdcmebgchi {
    #[prost(message, repeated, tag = "2")]
    pub fakegaiiiia: ::prost::alloc::vec::Vec<Fmeilaignfb>,
    #[prost(uint32, tag = "4")]
    pub map_id: u32,
    #[prost(uint32, tag = "6")]
    pub cost_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsScore {
    #[prost(uint32, tag = "1")]
    pub max_score: u32,
    #[prost(uint32, tag = "4")]
    pub map_id: u32,
    #[prost(uint32, tag = "14")]
    pub last_max_score: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub cur_score: u32,
    #[prost(uint32, tag = "11")]
    pub last_level: u32,
    #[prost(uint32, tag = "10")]
    pub unlock_level: u32,
}
/// ONBJDDPKLFO (4784)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsGameCsReq {
    #[prost(bool, tag = "10")]
    pub jkiknfagbgc: bool,
    #[prost(message, repeated, tag = "14")]
    pub aikfmpkanea: ::prost::alloc::vec::Vec<Gfdcmebgchi>,
}
/// BHDKMLDHHAK (4708)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsScoreRewardSyncInfoScNotify {
    #[prost(message, repeated, tag = "8")]
    pub hhdoomjlggc: ::prost::alloc::vec::Vec<LogisticsScore>,
}
/// IHHFGJLMKMG (4727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsGameScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub hhdoomjlggc: ::prost::alloc::vec::Vec<LogisticsScore>,
    #[prost(bool, tag = "6")]
    pub jkiknfagbgc: bool,
    #[prost(uint32, tag = "3")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbmjmhiiodf {
    #[prost(uint32, tag = "12")]
    pub lgalficmhho: u32,
    #[prost(uint32, tag = "3")]
    pub event_id: u32,
    #[prost(enumeration = "AlleyEventState", tag = "1")]
    pub state: i32,
}
/// PBNMPBECPKM (4752)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAlleyEventCsReq {
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
/// PJEMOLJIIDG (4774)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAlleyEventScRsp {
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// PLHAMFKIDGC (4724)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyEventChangeNotify {
    #[prost(uint32, tag = "12")]
    pub ophmnnhhnei: u32,
    #[prost(message, optional, tag = "1")]
    pub hoknnhdkmhp: ::core::option::Option<Fbmjmhiiodf>,
}
/// PHJKOOJFHEE (4793)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyEventEffectNotify {
    #[prost(uint32, tag = "11")]
    pub nagchgbanmp: u32,
}
/// GKHLJJAIBCE (4734)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePrestigeRewardCsReq {
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
/// HDKAHEAKNFD (4743)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePrestigeRewardScRsp {
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// LKBNCBHIFLB (4753)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PrestigeLevelUpCsReq {}
/// EEAEICLGFHM (4790)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PrestigeLevelUpScRsp {
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// DAIECPMCFKC (4759)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyFundsScNotify {
    #[prost(uint32, tag = "2")]
    pub coin_cost: u32,
}
/// PDNEBJCJKMO (4729)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveLogisticsCsReq {
    #[prost(message, repeated, tag = "13")]
    pub aikfmpkanea: ::prost::alloc::vec::Vec<Gfdcmebgchi>,
}
/// HAINBIKDNMN (4750)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveLogisticsScRsp {
    #[prost(message, repeated, tag = "2")]
    pub aikfmpkanea: ::prost::alloc::vec::Vec<Gfdcmebgchi>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// GLGNCBFAAIN (4748)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsInfoScNotify {
    #[prost(message, optional, tag = "2")]
    pub dbpcglolbjb: ::core::option::Option<Knknokonjjd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Medpamloemc {
    #[prost(uint32, tag = "13")]
    pub fleciglmfdp: u32,
    #[prost(uint32, tag = "2")]
    pub kdcjgfanjdg: u32,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub eldncgealki: ::std::collections::HashMap<u32, u32>,
}
/// LHJMGHNGKIP (4788)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyShipmentEventEffectsScNotify {
    #[prost(message, optional, tag = "9")]
    pub ldocjaliemg: ::core::option::Option<Medpamloemc>,
}
/// MBBLJIIGGNJ (4758)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSaveLogisticsMapCsReq {}
/// JBODBOPJOLO (4710)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSaveLogisticsMapScRsp {
    #[prost(message, repeated, tag = "10")]
    pub kcohmmblcgh: ::prost::alloc::vec::Vec<Gfdcmebgchi>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// BMLPEMIKJHO (4776)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyShipUsedCountScNotify {
    #[prost(map = "uint32, uint32", tag = "15")]
    pub oamofncmdhj: ::std::collections::HashMap<u32, u32>,
}
/// BGOMHMKLKKH (4735)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyGuaranteedFundsCsReq {}
/// MIFKDLMPBAA (4773)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyGuaranteedFundsScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub gfhdankdppc: u32,
}
/// EGAIGKLFCGM (4717)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyTakeEventRewardCsReq {
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
}
/// NBIOJCLKICB (4713)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyTakeEventRewardScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
/// IFIGALDOKLN (4721)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogisticsDetonateStarSkiffCsReq {}
/// GLLDLEOAADH (4765)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogisticsDetonateStarSkiffScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicList {
    #[prost(uint32, tag = "15")]
    pub set_id: u32,
    #[prost(uint32, tag = "8")]
    pub r#type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterList {
    #[prost(uint32, tag = "9")]
    pub monster_id: u32,
    #[prost(uint32, tag = "15")]
    pub num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveData {
    #[prost(uint32, repeated, tag = "14")]
    pub edhmchmfhhn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub ahcgclklgib: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub kill_monster_list: ::prost::alloc::vec::Vec<MonsterList>,
    #[prost(message, repeated, tag = "12")]
    pub relic_list: ::prost::alloc::vec::Vec<RelicList>,
    #[prost(uint32, repeated, tag = "13")]
    pub fhonfjhlgek: ::prost::alloc::vec::Vec<u32>,
}
/// JNDODDLGPIK (2336)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetArchiveDataCsReq {}
/// IGKGJMKOHAE (2395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetArchiveDataScRsp {
    #[prost(message, optional, tag = "6")]
    pub archive_data: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// GIBILPHLLLG (2384)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetUpdatedArchiveDataCsReq {}
/// FOGHDMNCPGK (2327)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUpdatedArchiveDataScRsp {
    #[prost(message, optional, tag = "13")]
    pub archive_data: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// EGAFMMCGFMA (336)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataCsReq {
    #[prost(uint32, repeated, tag = "4")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "3")]
    pub is_get_all: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipRelic {
    #[prost(uint32, tag = "9")]
    pub r#type: u32,
    #[prost(uint32, tag = "2")]
    pub relic_unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Avatar {
    #[prost(uint64, tag = "7")]
    pub first_met_time_stamp: u64,
    #[prost(message, repeated, tag = "8")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
    #[prost(uint32, tag = "1")]
    pub exp: u32,
    #[prost(uint32, tag = "12")]
    pub equipment_unique_id: u32,
    #[prost(uint32, tag = "15")]
    pub rank: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(message, repeated, tag = "4")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(bool, tag = "5")]
    pub is_marked: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub has_taken_reward_level_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub dressed_skin_id: u32,
    #[prost(uint32, tag = "14")]
    pub promotion: u32,
    #[prost(uint32, tag = "9")]
    pub base_avatar_id: u32,
}
/// FNBHODIONNN (395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataScRsp {
    #[prost(uint32, tag = "15")]
    pub pkmghnblipb: u32,
    #[prost(bool, tag = "5")]
    pub is_get_all: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub oicjbbphanb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
}
/// OMIEBPNDFBC (384)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarExpUpCsReq {
    #[prost(uint32, tag = "2")]
    pub base_avatar_id: u32,
    #[prost(message, optional, tag = "10")]
    pub item_cost: ::core::option::Option<ItemCostData>,
}
/// KJIBPEBFOMO (327)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarExpUpScRsp {
    #[prost(message, repeated, tag = "2")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// LJDKMKENECK (367)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockSkilltreeCsReq {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(message, repeated, tag = "14")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
    #[prost(uint32, tag = "6")]
    pub point_id: u32,
}
/// HOJFLBKBGLE (328)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockSkilltreeScRsp {
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub point_id: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// DECPLLJKFGO (352)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteAvatarCsReq {
    #[prost(uint32, tag = "2")]
    pub base_avatar_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
/// ONMFNOAFAJB (374)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PromoteAvatarScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// CKBNGMMBBCN (324)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarCsReq {
    #[prost(uint32, tag = "1")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "3")]
    pub equipment_unique_id: u32,
}
/// DEPKJLPDPHG (393)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// IAFNPFJBKPJ (334)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentCsReq {
    #[prost(uint32, tag = "15")]
    pub equip_avatar_id: u32,
}
/// DNCHKFKJGPM (343)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// EOHMPKFOPID (346)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddAvatarScNotify {
    #[prost(uint32, tag = "11")]
    pub base_avatar_id: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(enumeration = "AddAvatarSrcState", tag = "12")]
    pub src: i32,
    #[prost(bool, tag = "1")]
    pub is_new: bool,
}
/// ECFIBBFDBPH (388)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMultiPathAvatarScNotify {
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
    #[prost(bool, tag = "7")]
    pub is_new: bool,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
}
/// GNJHGKLKPEF (325)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankUpAvatarCsReq {
    #[prost(message, optional, tag = "5")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "11")]
    pub rank: u32,
}
/// IDOJDCNBKEE (396)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankUpAvatarScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressRelicParam {
    #[prost(uint32, tag = "11")]
    pub relic_slot: u32,
    #[prost(uint32, tag = "9")]
    pub relic_unique_id: u32,
}
/// LOKAPJMDGOG (305)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarCsReq {
    #[prost(uint32, tag = "2")]
    pub equip_avatar_id: u32,
    #[prost(message, repeated, tag = "5")]
    pub param_list: ::prost::alloc::vec::Vec<DressRelicParam>,
}
/// CBHEONAKPIM (375)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// OCOADIHLPIN (319)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOffRelicCsReq {
    #[prost(uint32, tag = "15")]
    pub equip_avatar_id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub relic_type_list: ::prost::alloc::vec::Vec<u32>,
}
/// FGDDKIIDBMG (326)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffRelicScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// EJIEJDOEJJI (307)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePromotionRewardCsReq {
    #[prost(uint32, tag = "10")]
    pub promotion: u32,
    #[prost(uint32, tag = "5")]
    pub base_avatar_id: u32,
}
/// IAJGJJOKMBH (353)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePromotionRewardScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub reward_list: ::core::option::Option<ItemList>,
}
/// BJFMNLBABOC (390)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarSkinCsReq {
    #[prost(uint32, tag = "8")]
    pub skin_id: u32,
    #[prost(uint32, tag = "15")]
    pub avatar_id: u32,
}
/// LFEJKKACDJJ (359)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarSkinScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// PKFGIKPOMPH (312)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffAvatarSkinCsReq {
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
}
/// NOCNCMGAJIN (378)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffAvatarSkinScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// JFIOAHFAMCL (329)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockAvatarSkinScNotify {
    #[prost(uint32, tag = "10")]
    pub skin_id: u32,
}
/// IEBIDEFJDDL (350)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkAvatarCsReq {
    #[prost(uint32, tag = "6")]
    pub avatar_id: u32,
    #[prost(bool, tag = "4")]
    pub is_marked: bool,
}
/// HNMKPPOPEKM (348)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkAvatarScRsp {
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(bool, tag = "1")]
    pub is_marked: bool,
}
/// DNIHHPCANNG (358)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGrowthTargetAvatarCsReq {
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
}
/// JHHKBKBPHIC (310)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGrowthTargetAvatarScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub bljfjnplkhi: u32,
    #[prost(uint32, tag = "5")]
    pub pkmghnblipb: u32,
}
/// JAELLKBJKJI (376)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GrowthTargetAvatarChangedScNotify {
    #[prost(uint32, tag = "9")]
    pub pkmghnblipb: u32,
}
/// DNKDEFFMJNL (136)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultCsReq {
    #[prost(bool, tag = "1")]
    pub is_ai_consider_ultra_skill: bool,
    #[prost(bool, tag = "11")]
    pub hggiodcbeab: bool,
    #[prost(uint32, tag = "5")]
    pub cost_time: u32,
    #[prost(uint32, tag = "3")]
    pub client_res_version: u32,
    #[prost(message, optional, tag = "14")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
    #[prost(string, tag = "7")]
    pub debug_extra_info: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "9")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(map = "string, uint32", tag = "8")]
    pub kbahkphagjo: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "4")]
    pub client_version: u32,
    #[prost(uint32, tag = "10")]
    pub dfembeanppf: u32,
    #[prost(bytes = "vec", tag = "15")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub battle_id: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "13")]
    pub end_status: i32,
    #[prost(bool, tag = "12")]
    pub is_auto_fight: bool,
}
/// MEGOKLANKFO (195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultScRsp {
    #[prost(string, tag = "15")]
    pub clebbkoiohj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "1")]
    pub end_status: i32,
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
    #[prost(bool, tag = "4")]
    pub mfjljkcmiol: bool,
    #[prost(uint32, tag = "9")]
    pub gcmfmldnldm: u32,
    #[prost(uint32, tag = "3")]
    pub mismatch_turn_count: u32,
    #[prost(uint32, tag = "5")]
    pub battle_id: u32,
    #[prost(message, optional, tag = "8")]
    pub ieinoefbllp: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "7")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(string, tag = "12")]
    pub lfhbhkhmned: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "1392")]
    pub ifjljadpfdg: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub njghcpijdgi: u32,
    #[prost(message, optional, tag = "2")]
    pub cllokodkpap: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "11")]
    pub eebbmnlacmg: ::core::option::Option<ItemList>,
}
/// HCOGHKCBCGJ (184)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitBattleCsReq {
    #[prost(enumeration = "RebattleType", tag = "15")]
    pub rebattle_type: i32,
    #[prost(message, optional, tag = "7")]
    pub stt: ::core::option::Option<BattleStatistics>,
}
/// LIOABJJEGAL (127)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitBattleScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// NDHHCAJBLEL (167)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurBattleInfoCsReq {}
/// JPDJAGLHCOA (128)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurBattleInfoScRsp {
    #[prost(uint32, tag = "1")]
    pub oejahhkbkng: u32,
    #[prost(message, optional, tag = "7")]
    pub aether_battle_info: ::core::option::Option<AetherDivideBattleInfo>,
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(enumeration = "BattleEndStatus", tag = "9")]
    pub last_end_status: i32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// INHCALIAKMO (152)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncClientResVersionCsReq {
    #[prost(uint32, tag = "13")]
    pub client_res_version: u32,
}
/// MMPFKFGCDMO (174)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncClientResVersionScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub client_res_version: u32,
}
/// GLMADOFIOJO (124)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitBattleScNotify {}
/// FJAMDDBCAGM (193)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleLogReportCsReq {}
/// GKHKOHHCDDC (134)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleLogReportScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(bool, tag = "10")]
    pub is_battle_log_report: bool,
}
/// ALCALNFHOKH (143)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServerSimulateBattleFinishScNotify {}
/// EDOBKGFNHLN (146)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReBattleAfterBattleLoseCsNotify {
    #[prost(bool, tag = "6")]
    pub ejgpcipheed: bool,
}
/// FOJMDJNGEOM (125)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RebattleByClientCsNotify {
    #[prost(enumeration = "RebattleType", tag = "7")]
    pub rebattle_type: i32,
    #[prost(message, optional, tag = "1")]
    pub stt: ::core::option::Option<BattleStatistics>,
}
/// PMJBDEONFIP (5736)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBattleCollegeDataCsReq {}
/// KGLDKBECLBN (5795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBattleCollegeDataScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub finished_college_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub lbdmholpjke: u32,
}
/// IHOGOBMMOJC (5784)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleCollegeDataChangeScNotify {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub lbdmholpjke: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub finished_college_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// ALGLPMFCNKD (5727)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartBattleCollegeCsReq {
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
/// LGKHCGHIMDA (5767)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartBattleCollegeScRsp {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, optional, tag = "14")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// MBMBGEPFGHD (3036)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattlePassInfoNotify {
    #[prost(uint64, tag = "13")]
    pub kcdlogocbia: u64,
    #[prost(uint64, tag = "15")]
    pub ieblheiebcp: u64,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
    #[prost(uint32, tag = "12")]
    pub ceoekkklneh: u32,
    #[prost(uint64, tag = "3")]
    pub koidcifmogg: u64,
    #[prost(uint64, tag = "10")]
    pub ghmfioclbmb: u64,
    #[prost(enumeration = "BpTierType", tag = "14")]
    pub nolcaklmpeg: i32,
    #[prost(uint64, tag = "1")]
    pub cpohgjlgcph: u64,
    #[prost(uint32, tag = "7")]
    pub iiipcopgjhj: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint64, tag = "2")]
    pub dnbmkbmapce: u64,
    #[prost(uint64, tag = "5")]
    pub pkagdaldbik: u64,
    #[prost(uint64, tag = "8")]
    pub lfgkipccmhm: u64,
}
/// GICIAIHLJKM (3027)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeBpRewardCsReq {
    #[prost(uint32, tag = "14")]
    pub optional_reward_id: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(enumeration = "BpRewardType", tag = "3")]
    pub r#type: i32,
}
/// EKJBIENLPCA (3067)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeBpRewardScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
}
/// MBJHHBODFPN (3028)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyBpLevelCsReq {
    #[prost(uint32, tag = "15")]
    pub llileghkigk: u32,
}
/// GGFNLDFIJDI (3052)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyBpLevelScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalReward {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub optional_reward_id: u32,
}
/// JPACMOOCPKH (3074)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAllRewardCsReq {
    #[prost(message, repeated, tag = "6")]
    pub kdhakpndegi: ::prost::alloc::vec::Vec<OptionalReward>,
}
/// GOGCODENOND (3024)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAllRewardScRsp {
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pahlimcjbeb {
    #[prost(enumeration = "AvatarType", tag = "5")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "15")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkocaaohibk {
    #[prost(uint32, tag = "13")]
    pub pddfkaelhmp: u32,
    #[prost(uint32, tag = "1")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "12")]
    pub biidjgdiejd: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub fehjibildmm: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub gkfibaeohem: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub niodmidciim: bool,
    #[prost(uint32, tag = "5")]
    pub ifefgdnfkno: u32,
    #[prost(uint32, tag = "4")]
    pub fjdmbjkdcki: u32,
    #[prost(message, repeated, tag = "6")]
    pub liiamdgkpaf: ::prost::alloc::vec::Vec<Pahlimcjbeb>,
}
/// NNGKPEPCDHB (4236)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBoxingClubInfoCsReq {}
/// IBEMGGMAPAP (4295)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBoxingClubInfoScRsp {
    #[prost(message, repeated, tag = "9")]
    pub challenge_list: ::prost::alloc::vec::Vec<Dkocaaohibk>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njmgkbhdgbd {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
}
/// GBOHLOLOFBD (4284)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchBoxingClubOpponentCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub liiamdgkpaf: ::prost::alloc::vec::Vec<Njmgkbhdgbd>,
    #[prost(uint32, tag = "12")]
    pub challenge_id: u32,
}
/// GFKGLOONIBI (4227)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchBoxingClubOpponentScRsp {
    #[prost(message, optional, tag = "11")]
    pub challenge: ::core::option::Option<Dkocaaohibk>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// MCGAODMNFII (4234)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubResonanceCsReq {
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "3")]
    pub ifefgdnfkno: u32,
}
/// KKKOHOPHBFB (4243)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubResonanceScRsp {
    #[prost(message, optional, tag = "14")]
    pub challenge: ::core::option::Option<Dkocaaohibk>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// GMHBPDKBFEB (4246)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBoxingClubResonanceLineupCsReq {
    #[prost(message, repeated, tag = "14")]
    pub liiamdgkpaf: ::prost::alloc::vec::Vec<Njmgkbhdgbd>,
    #[prost(uint32, tag = "1")]
    pub challenge_id: u32,
}
/// GJAPJEGAOIF (4225)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBoxingClubResonanceLineupScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub challenge: ::core::option::Option<Dkocaaohibk>,
}
/// FMOHNOOJMDG (4296)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubStageOptionalBuffCsReq {
    #[prost(uint32, tag = "2")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "4")]
    pub mmodfbbcmcl: u32,
}
/// LJCOIOOKAPB (4205)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubStageOptionalBuffScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub challenge: ::core::option::Option<Dkocaaohibk>,
}
/// EKABNIBMDHG (4267)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartBoxingClubBattleCsReq {
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
}
/// ABKHLOEHPBO (4228)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartBoxingClubBattleScRsp {
    #[prost(uint32, tag = "9")]
    pub challenge_id: u32,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// JJEJLJCKLNE (4252)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GiveUpBoxingClubChallengeCsReq {
    #[prost(bool, tag = "4")]
    pub lnfbmlncehm: bool,
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
}
/// JFKLHJFJJGO (4274)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GiveUpBoxingClubChallengeScRsp {
    #[prost(message, optional, tag = "8")]
    pub challenge: ::core::option::Option<Dkocaaohibk>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// CDIEOAEEPPD (4224)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoxingClubRewardScNotify {
    #[prost(uint32, tag = "4")]
    pub biidjgdiejd: u32,
    #[prost(uint32, tag = "15")]
    pub challenge_id: u32,
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "3")]
    pub is_win: bool,
}
/// PJAOOCFJDHD (4293)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoxingClubChallengeUpdateScNotify {
    #[prost(message, optional, tag = "14")]
    pub challenge: ::core::option::Option<Dkocaaohibk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Challenge {
    #[prost(uint32, tag = "7")]
    pub score_id: u32,
    #[prost(bool, tag = "12")]
    pub bgfekhfmeih: bool,
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
    #[prost(message, optional, tag = "11")]
    pub ext_info: ::core::option::Option<ChallengeExtInfo>,
    #[prost(uint32, tag = "2")]
    pub score_two: u32,
    #[prost(uint32, tag = "1")]
    pub record_id: u32,
    #[prost(uint32, tag = "6")]
    pub taken_reward: u32,
    #[prost(uint32, tag = "13")]
    pub star: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeGroup {
    #[prost(uint64, tag = "2")]
    pub taken_stars_count_reward: u64,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ealbgfmgceg {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub reward_display_type: u32,
}
/// MKMMCBMKLBC (1736)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeCsReq {}
/// HNNLBGFFGCB (1795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeScRsp {
    #[prost(uint32, tag = "10")]
    pub nfdjgajbmdo: u32,
    #[prost(message, repeated, tag = "15")]
    pub challenge_list: ::prost::alloc::vec::Vec<Challenge>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub caolnaiijck: ::prost::alloc::vec::Vec<Ealbgfmgceg>,
    #[prost(message, repeated, tag = "5")]
    pub challenge_group_list: ::prost::alloc::vec::Vec<ChallengeGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeStoryBuffInfo {
    #[prost(uint32, tag = "1")]
    pub buff_one: u32,
    #[prost(uint32, tag = "4")]
    pub buff_two: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeBossBuffInfo {
    #[prost(uint32, tag = "3")]
    pub buff_one: u32,
    #[prost(uint32, tag = "14")]
    pub buff_two: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeInfo {
    #[prost(message, optional, tag = "3")]
    pub story_buff_info: ::core::option::Option<StartChallengeStoryBuffInfo>,
    #[prost(message, optional, tag = "12")]
    pub boss_buff_info: ::core::option::Option<StartChallengeBossBuffInfo>,
}
/// DGDHBDFODAG (1784)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartChallengeCsReq {
    #[prost(message, optional, tag = "15")]
    pub ext_info: ::core::option::Option<StartChallengeInfo>,
    #[prost(uint32, tag = "1")]
    pub challenge_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub first_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub second_half_lineup: ::prost::alloc::vec::Vec<u32>,
}
/// INFDFJBHMND (1727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartChallengeScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(message, optional, tag = "12")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, optional, tag = "2")]
    pub ext_info: ::core::option::Option<ChallengeExtInfo>,
    #[prost(message, optional, tag = "8")]
    pub scene: ::core::option::Option<SceneInfo>,
}
/// PMAGKCBJAJK (1726)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartPartialChallengeCsReq {
    #[prost(uint32, tag = "10")]
    pub buff_id: u32,
    #[prost(uint32, tag = "4")]
    pub challenge_id: u32,
    #[prost(bool, tag = "14")]
    pub is_first_half: bool,
}
/// GNMFHDJAHEG (1707)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartPartialChallengeScRsp {
    #[prost(message, optional, tag = "8")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, optional, tag = "13")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
/// NOENGBJDELE (1767)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveChallengeCsReq {}
/// LOBKJIFKDBL (1728)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveChallengeScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// GIKNBNHCAPO (1752)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeSettleNotify {
    #[prost(uint32, tag = "4")]
    pub nfdjgajbmdo: u32,
    #[prost(message, optional, tag = "14")]
    pub pcnophbpgjk: ::core::option::Option<Ealbgfmgceg>,
    #[prost(message, optional, tag = "12")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(uint32, tag = "15")]
    pub score_two: u32,
    #[prost(uint32, tag = "1")]
    pub star: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub npjgdnmiblp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "9")]
    pub challenge_score: u32,
    #[prost(bool, tag = "2")]
    pub is_win: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct KillMonster {
    #[prost(uint32, tag = "4")]
    pub monster_id: u32,
    #[prost(uint32, tag = "8")]
    pub kill_num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryBuffInfo {
    #[prost(uint32, repeated, tag = "2")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossBuffInfo {
    #[prost(uint32, repeated, tag = "14")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub boss_buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBuffInfo {
    #[prost(message, optional, tag = "1")]
    pub story_buff_list: ::core::option::Option<ChallengeStoryBuffInfo>,
    #[prost(message, optional, tag = "15")]
    pub boss_buff_list: ::core::option::Option<ChallengeBossBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeInfo {
    #[prost(enumeration = "ChallengeStatus", tag = "8")]
    pub status: i32,
    #[prost(message, repeated, tag = "1")]
    pub kill_monster_list: ::prost::alloc::vec::Vec<KillMonster>,
    #[prost(uint32, tag = "15")]
    pub score_two: u32,
    #[prost(uint32, tag = "11")]
    pub challenge_id: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "14")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "3")]
    pub round_count: u32,
    #[prost(uint32, tag = "4")]
    pub dead_avatar_num: u32,
    #[prost(uint32, tag = "12")]
    pub score: u32,
    #[prost(message, optional, tag = "7")]
    pub ext_buff_info: ::core::option::Option<ChallengeBuffInfo>,
}
/// DAEEENCLKHC (1793)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurChallengeCsReq {}
/// FHMFLDHADPB (1734)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurChallengeScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(message, optional, tag = "2")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
}
/// APODBICDKOC (1743)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeLineupNotify {
    #[prost(enumeration = "ExtraLineupType", tag = "4")]
    pub extra_lineup_type: i32,
}
/// DNLJKIBHOEI (1796)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeChallengeRewardCsReq {
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
}
/// GAOEIJAJOKP (1705)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeChallengeRewardScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub taken_reward_list: ::prost::alloc::vec::Vec<TakenChallengeRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakenChallengeRewardInfo {
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub star_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStatistics {
    #[prost(message, optional, tag = "13")]
    pub stage_tertinggi: ::core::option::Option<ChallengeStageTertinggi>,
    #[prost(uint32, tag = "7")]
    pub record_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryStatistics {
    #[prost(message, optional, tag = "3")]
    pub stage_tertinggi: ::core::option::Option<ChallengeStoryStageTertinggi>,
    #[prost(uint32, tag = "13")]
    pub record_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossStatistics {
    #[prost(message, optional, tag = "1")]
    pub stage_tertinggi: ::core::option::Option<ChallengeBossStageTertinggi>,
    #[prost(uint32, tag = "15")]
    pub record_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStageTertinggi {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub njldipkclbp: u32,
    #[prost(message, repeated, tag = "4")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "10")]
    pub round_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryStageTertinggi {
    #[prost(uint32, tag = "11")]
    pub buff_one: u32,
    #[prost(message, repeated, tag = "12")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub njldipkclbp: u32,
    #[prost(uint32, tag = "4")]
    pub buff_two: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossStageTertinggi {
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "11")]
    pub buff_two: u32,
    #[prost(uint32, tag = "8")]
    pub buff_one: u32,
    #[prost(uint32, tag = "6")]
    pub njldipkclbp: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeLineupList {
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<ChallengeAvatarInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeAvatarInfo {
    #[prost(uint32, tag = "6")]
    pub index: u32,
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
}
/// OKJNDDKLNLK (1775)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeGroupStatisticsCsReq {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
/// LENOIBCPJHE (1719)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeGroupStatisticsScRsp {
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(
        oneof = "get_challenge_group_statistics_sc_rsp::ChallengeSttCase",
        tags = "12, 1, 7"
    )]
    pub challenge_stt_case: ::core::option::Option<
        get_challenge_group_statistics_sc_rsp::ChallengeSttCase,
    >,
}
/// Nested message and enum types in `GetChallengeGroupStatisticsScRsp`.
pub mod get_challenge_group_statistics_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeSttCase {
        #[prost(message, tag = "12")]
        ChallengeDefault(super::ChallengeStatistics),
        #[prost(message, tag = "1")]
        ChallengeStory(super::ChallengeStoryStatistics),
        #[prost(message, tag = "7")]
        ChallengeBoss(super::ChallengeBossStatistics),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeBossSingleNodeInfo {
    #[prost(uint32, tag = "2")]
    pub buff_id: u32,
    #[prost(bool, tag = "1")]
    pub is_win: bool,
    #[prost(bool, tag = "11")]
    pub pekpichopml: bool,
    #[prost(uint32, tag = "10")]
    pub max_score: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeBossEquipmentInfo {
    #[prost(uint32, tag = "15")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "5")]
    pub unique_id: u32,
    #[prost(uint32, tag = "11")]
    pub tid: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossRelicInfo {
    #[prost(uint32, tag = "15")]
    pub tid: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub unique_id: u32,
    #[prost(message, repeated, tag = "12")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "8")]
    pub main_affix_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossAvatarRelicInfo {
    #[prost(map = "uint32, message", tag = "3")]
    pub avatar_relic_slot_map: ::std::collections::HashMap<u32, ChallengeBossRelicInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossInfo {
    #[prost(message, optional, tag = "2")]
    pub first_node: ::core::option::Option<ChallengeBossSingleNodeInfo>,
    #[prost(message, optional, tag = "14")]
    pub second_node: ::core::option::Option<ChallengeBossSingleNodeInfo>,
    #[prost(uint32, repeated, tag = "12")]
    pub second_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub first_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "uint32, message", tag = "4")]
    pub challenge_avatar_equipment_map: ::std::collections::HashMap<
        u32,
        ChallengeBossEquipmentInfo,
    >,
    #[prost(map = "uint32, message", tag = "10")]
    pub kfokoccaejc: ::std::collections::HashMap<u32, ChallengeBossAvatarRelicInfo>,
    #[prost(bool, tag = "7")]
    pub njkcjbloibk: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeExtInfo {
    #[prost(oneof = "challenge_ext_info::InfoCase", tags = "12")]
    pub info_case: ::core::option::Option<challenge_ext_info::InfoCase>,
}
/// Nested message and enum types in `ChallengeExtInfo`.
pub mod challenge_ext_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "12")]
        BossInfo(super::ChallengeBossInfo),
    }
}
/// DNJCLCLIHBP (1790)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestartChallengePhaseCsReq {}
/// EHFGGJMPHHK (1759)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestartChallengePhaseScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub scene: ::core::option::Option<SceneInfo>,
}
/// AAFGBPIPJFB (1712)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterChallengeNextPhaseCsReq {}
/// ODEMCMGLDBN (1778)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterChallengeNextPhaseScRsp {
    #[prost(message, optional, tag = "10")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// FMIMCFOHNLO (1729)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossPhaseSettleNotify {
    #[prost(uint32, tag = "12")]
    pub challenge_score: u32,
    #[prost(uint32, tag = "10")]
    pub phase: u32,
    /// ?
    #[prost(bool, tag = "6")]
    pub is_reward: bool,
    #[prost(uint32, tag = "1")]
    pub llgaldinkop: u32,
    /// ?
    #[prost(bool, tag = "14")]
    pub is_remaining_action: bool,
    #[prost(uint32, tag = "8")]
    pub star: u32,
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
    #[prost(uint32, tag = "7")]
    pub score_two: u32,
    #[prost(bool, tag = "4")]
    pub is_win: bool,
}
/// JPHGMIGJGPO (3936)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgCsReq {
    #[prost(enumeration = "ChatType", tag = "13")]
    pub chat_type: i32,
    #[prost(enumeration = "MsgType", tag = "6")]
    pub message_type: i32,
    #[prost(uint32, tag = "10")]
    pub extra_id: u32,
    #[prost(message, optional, tag = "2")]
    pub lekpnlapced: ::core::option::Option<Cdgpkijbfdk>,
    #[prost(uint32, repeated, tag = "8")]
    pub target_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "11")]
    pub message_text: ::prost::alloc::string::String,
}
/// NFJBEBOKGLO (3995)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendMsgScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint64, tag = "1")]
    pub end_time: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageData {
    #[prost(string, tag = "15")]
    pub content: ::prost::alloc::string::String,
    #[prost(enumeration = "MsgType", tag = "10")]
    pub message_type: i32,
    #[prost(uint32, tag = "14")]
    pub extra_id: u32,
    #[prost(uint32, tag = "13")]
    pub sender_uid: u32,
    #[prost(message, optional, tag = "12")]
    pub lekpnlapced: ::core::option::Option<Cdgpkijbfdk>,
    #[prost(uint64, tag = "6")]
    pub timestamp: u64,
}
/// DIFKGIOIJFF (3984)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevcMsgScNotify {
    /// ?
    #[prost(uint32, tag = "12")]
    pub to_uid: u32,
    #[prost(message, optional, tag = "11")]
    pub lekpnlapced: ::core::option::Option<Cdgpkijbfdk>,
    #[prost(uint32, tag = "15")]
    pub extra_id: u32,
    #[prost(enumeration = "MsgType", tag = "8")]
    pub message_type: i32,
    #[prost(enumeration = "ChatType", tag = "2")]
    pub chat_type: i32,
    #[prost(string, tag = "6")]
    pub message_text: ::prost::alloc::string::String,
    /// ?
    #[prost(uint32, tag = "10")]
    pub sender_uid: u32,
}
/// PPIGGEKCEMF (3927)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateMsgOfflineUsersScNotify {
    #[prost(uint32, repeated, tag = "11")]
    pub contact_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// HBFFEIHAHGC (3967)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryCsReq {
    #[prost(uint32, tag = "2")]
    pub contact_side: u32,
    #[prost(uint32, tag = "9")]
    pub target_side: u32,
}
/// GGHCHPAIEPC (3928)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryScRsp {
    #[prost(uint32, tag = "9")]
    pub contact_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub chat_message_list: ::prost::alloc::vec::Vec<ChatMessageData>,
    #[prost(uint32, tag = "2")]
    pub target_side: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FriendHistoryInfo {
    #[prost(int64, tag = "3")]
    pub last_send_time: i64,
    #[prost(uint32, tag = "7")]
    pub contact_side: u32,
}
/// BOHDPFLOGKJ (3952)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChatFriendHistoryCsReq {}
/// BLKCIJOCAOJ (3974)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChatFriendHistoryScRsp {
    #[prost(message, repeated, tag = "9")]
    pub friend_history_info: ::prost::alloc::vec::Vec<FriendHistoryInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// MLNBPHKAOKC (3924)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChatEmojiListCsReq {}
/// CIHPMHBBFLD (3993)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChatEmojiListScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub chat_emoji_list: ::prost::alloc::vec::Vec<u32>,
}
/// FOGDLPFBEKC (3934)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkChatEmojiCsReq {
    #[prost(bool, tag = "12")]
    pub is_remove_id: bool,
    #[prost(uint32, tag = "11")]
    pub extra_id: u32,
}
/// CGKOFAPILIF (3943)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkChatEmojiScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub extra_id: u32,
    #[prost(bool, tag = "8")]
    pub is_remove_id: bool,
}
/// ELJAAPLBDOM (3946)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMarkChatEmojiCsReq {
    #[prost(uint32, repeated, tag = "8")]
    pub marked_emoji_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// ANFPMEPPIKP (3925)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMarkChatEmojiScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub marked_emoji_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// FPDENMDJIHA (3996)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoginChatInfoCsReq {}
/// FDIADJOCNJB (3905)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginChatInfoScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub contact_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueAvatarReviveCost {
    #[prost(message, optional, tag = "1")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueInfo {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "4")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mokcffgffpc {
    #[prost(uint32, repeated, tag = "15")]
    pub dfighclmmaa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khhcloocomi {
    #[prost(message, repeated, tag = "2")]
    pub mlhfciifefp: ::prost::alloc::vec::Vec<Mokcffgffpc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueDiceInfo {
    #[prost(int32, tag = "534")]
    pub ojcmgoilfcf: i32,
    #[prost(uint32, tag = "3")]
    pub biloiomnadc: u32,
    #[prost(bool, tag = "1")]
    pub fklmffjfhne: bool,
    #[prost(uint32, tag = "7")]
    pub gghlkcmnepe: u32,
    #[prost(uint32, tag = "14")]
    pub hpbljjbfcbn: u32,
    #[prost(message, optional, tag = "1505")]
    pub omcldmobebc: ::core::option::Option<RogueModifier>,
    #[prost(uint32, tag = "12")]
    pub ncgjidngibe: u32,
    #[prost(enumeration = "Lmfhfmebakb", tag = "5")]
    pub kefhkelpbhc: i32,
    #[prost(uint32, tag = "6")]
    pub daibnmgpbfc: u32,
    #[prost(uint32, tag = "13")]
    pub cfhhnmmmihm: u32,
    #[prost(message, optional, tag = "1462")]
    pub lmbdaabgipc: ::core::option::Option<Hjpejblbdik>,
    #[prost(bool, tag = "1781")]
    pub aoglmoliapn: bool,
    #[prost(message, optional, tag = "1695")]
    pub olgaoibgchh: ::core::option::Option<Eboioikflfj>,
    #[prost(uint32, repeated, tag = "1190")]
    pub helngdnkcld: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Ojkkcjdfmhc", tag = "11")]
    pub nnaapjkohdf: i32,
    #[prost(uint32, tag = "10")]
    pub fioecjmckam: u32,
    #[prost(uint32, tag = "15")]
    pub ckjpajfakab: u32,
}
/// AMHBFKMFDLK (5485)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueRollDiceCsReq {
    #[prost(uint32, tag = "14")]
    pub jlmieohmlja: u32,
}
/// OAMEMLLDGDL (5425)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueRollDiceScRsp {
    #[prost(message, optional, tag = "12")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub nckmcijckgb: u32,
}
/// JFFBJOPNHNF (5520)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGoAheadCsReq {
    #[prost(uint32, tag = "8")]
    pub cell_id: u32,
}
/// AMOFJKFDBFN (5578)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGoAheadScRsp {
    #[prost(uint32, tag = "12")]
    pub cell_id: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CellMonster {
    #[prost(uint32, tag = "15")]
    pub boss_decay_id: u32,
    #[prost(uint32, tag = "6")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CellMonsterInfo {
    #[prost(message, repeated, tag = "12")]
    pub cell_monster_list: ::prost::alloc::vec::Vec<CellMonster>,
    #[prost(bool, tag = "13")]
    pub confirm: bool,
    #[prost(uint32, tag = "8")]
    pub select_boss_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CellMonsterSelectInfo {
    #[prost(uint32, repeated, tag = "9")]
    pub select_decay_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub maze_buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CellFinalMonsterInfo {
    #[prost(message, optional, tag = "14")]
    pub cell_boss_info: ::core::option::Option<CellMonsterInfo>,
    #[prost(message, optional, tag = "3")]
    pub select_boss_info: ::core::option::Option<CellMonsterSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CellAdvanceInfo {
    #[prost(oneof = "cell_advance_info::AdvanceCase", tags = "11, 10, 12")]
    pub advance_case: ::core::option::Option<cell_advance_info::AdvanceCase>,
}
/// Nested message and enum types in `CellAdvanceInfo`.
pub mod cell_advance_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AdvanceCase {
        #[prost(message, tag = "11")]
        CellBossInfo(super::CellMonsterInfo),
        #[prost(message, tag = "10")]
        SelectBossInfo(super::CellMonsterSelectInfo),
        #[prost(message, tag = "12")]
        FinalBossInfo(super::CellFinalMonsterInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueCell {
    #[prost(uint32, tag = "15")]
    pub room_id: u32,
    #[prost(uint32, tag = "7")]
    pub nobioiifnlf: u32,
    #[prost(enumeration = "Diodbaolfdn", tag = "2")]
    pub eccnjodahio: i32,
    #[prost(enumeration = "Lnbeaahbnaj", tag = "10")]
    pub hpjbihgmkmn: i32,
    #[prost(uint32, tag = "12")]
    pub khigakjclli: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub bfcbdenmeld: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub ext_info: ::core::option::Option<CellAdvanceInfo>,
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(uint32, tag = "6")]
    pub obaeolckbfi: u32,
    #[prost(bool, tag = "11")]
    pub ifpkhglpall: bool,
    #[prost(uint32, tag = "8")]
    pub aelgpbejjni: u32,
    #[prost(bool, tag = "9")]
    pub kphgmoidfnd: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CellInfo {
    #[prost(uint32, tag = "4")]
    pub ggknjdmfjik: u32,
    #[prost(uint32, tag = "11")]
    pub amenodioblj: u32,
    #[prost(uint32, tag = "6")]
    pub dgiacajmefn: u32,
    #[prost(uint32, tag = "8")]
    pub nafapmckfbb: u32,
    #[prost(message, repeated, tag = "13")]
    pub bodgiilmdpn: ::prost::alloc::vec::Vec<ChessRogueCell>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueHistoryCellInfo {
    #[prost(uint32, tag = "12")]
    pub cell_id: u32,
    #[prost(uint32, tag = "4")]
    pub room_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phbmajpcnlb {
    #[prost(message, optional, tag = "15")]
    pub oakngnkalpi: ::core::option::Option<Eboioikflfj>,
    #[prost(uint32, tag = "3")]
    pub oodpbkdjafe: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueAreaInfo {
    #[prost(message, optional, tag = "15")]
    pub goigdicglnm: ::core::option::Option<Phbmajpcnlb>,
    #[prost(uint32, repeated, tag = "3")]
    pub allow_select_cell_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub eicppjjlgdk: u32,
    #[prost(enumeration = "Lnbeaahbnaj", tag = "10")]
    pub ghljddligim: i32,
    #[prost(message, repeated, tag = "13")]
    pub history_cell: ::prost::alloc::vec::Vec<ChessRogueHistoryCellInfo>,
    #[prost(uint32, tag = "5")]
    pub eacjonnihkp: u32,
    #[prost(message, optional, tag = "2")]
    pub kglpmnhmnmm: ::core::option::Option<CellInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueLevelInfo {
    #[prost(uint32, tag = "7")]
    pub kchegpecmhm: u32,
    #[prost(int32, tag = "14")]
    pub olidjodakka: i32,
    #[prost(message, optional, tag = "1")]
    pub area_info: ::core::option::Option<ChessRogueAreaInfo>,
    #[prost(uint32, tag = "15")]
    pub gcceggbeicj: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub mkejbephkkb: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "11")]
    pub bliakakfkfk: i32,
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub hdahahdpkmp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub eeaplnkdklo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryAeon {
    #[prost(uint32, tag = "10")]
    pub lbdmholpjke: u32,
    #[prost(uint32, tag = "2")]
    pub aeon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryAeonInfo {
    #[prost(message, repeated, tag = "11")]
    pub aeon_list: ::prost::alloc::vec::Vec<ChessRogueQueryAeon>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueAeonInfo {
    #[prost(uint32, tag = "9")]
    pub game_aeon_id: u32,
    #[prost(int32, tag = "14")]
    pub hhdabofomec: i32,
    #[prost(message, optional, tag = "6")]
    pub oakngnkalpi: ::core::option::Option<Eboioikflfj>,
    #[prost(message, optional, tag = "4")]
    pub chess_aeon_info: ::core::option::Option<ChessRogueQueryAeonInfo>,
    #[prost(uint32, repeated, tag = "7")]
    pub aeon_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueLineupAvatarInfo {
    #[prost(uint32, tag = "4")]
    pub fdhaleelkbn: u32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueLineupInfo {
    #[prost(message, optional, tag = "10")]
    pub revive_info: ::core::option::Option<RogueAvatarReviveCost>,
    #[prost(message, repeated, tag = "11")]
    pub chess_avatar_list: ::prost::alloc::vec::Vec<ChessRogueLineupAvatarInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngejecdnaeo {
    #[prost(uint32, tag = "11")]
    pub inbgenaaibg: u32,
    #[prost(bool, tag = "15")]
    pub mhfnambhgkk: bool,
    #[prost(uint32, tag = "1")]
    pub fjiecbgmbno: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub igpgdkiclcj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pkpkdhenpmn {
    #[prost(int32, tag = "2")]
    pub gfbihcimjkb: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngnpfhgbpld {
    #[prost(uint32, repeated, tag = "12")]
    pub hdagdlocpfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nomdndhhela {
    #[prost(message, optional, tag = "1")]
    pub game_miracle_info: ::core::option::Option<Gfmelemcjna>,
    #[prost(message, optional, tag = "5")]
    pub eelbepmnpgi: ::core::option::Option<ChessRogueLineupInfo>,
    #[prost(message, optional, tag = "177")]
    pub mmohllkalak: ::core::option::Option<Ngnpfhgbpld>,
    #[prost(message, optional, tag = "9")]
    pub story_info: ::core::option::Option<Ngejecdnaeo>,
    #[prost(message, optional, tag = "2")]
    pub lmpnoceabnh: ::core::option::Option<Lojnaekienp>,
    #[prost(message, optional, tag = "10")]
    pub ijopankcekj: ::core::option::Option<ChessRogueAeonInfo>,
    #[prost(message, optional, tag = "6")]
    pub lcfanolipij: ::core::option::Option<Defibaeneff>,
    #[prost(message, optional, tag = "7")]
    pub jmngdhgbofl: ::core::option::Option<Ifimehhnapl>,
    #[prost(message, optional, tag = "11")]
    pub level_info: ::core::option::Option<ChessRogueLevelInfo>,
    #[prost(message, optional, tag = "4")]
    pub hdadnbflock: ::core::option::Option<Pkpkdhenpmn>,
    #[prost(message, optional, tag = "8")]
    pub rogue_buff_info: ::core::option::Option<Eaammpjfkib>,
    #[prost(message, repeated, tag = "12")]
    pub hcoapfagbei: ::prost::alloc::vec::Vec<Idondchfkhg>,
    #[prost(message, optional, tag = "3")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
    #[prost(message, optional, tag = "13")]
    pub mjkpcdjjeml: ::core::option::Option<Blimedcmhmn>,
    #[prost(uint32, tag = "15")]
    pub nkpdmckfppp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldacemendgo {
    #[prost(uint32, repeated, tag = "12")]
    pub hdahahdpkmp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "14")]
    pub pkhijecbkha: ::core::option::Option<Apgebmndcbd>,
    #[prost(message, optional, tag = "9")]
    pub lmpnoceabnh: ::core::option::Option<Lojnaekienp>,
    #[prost(uint32, repeated, tag = "15")]
    pub mkejbephkkb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub chess_aeon_info: ::core::option::Option<ChessRogueQueryAeonInfo>,
    #[prost(message, optional, tag = "8")]
    pub mmohllkalak: ::core::option::Option<Bbecljofgpm>,
    #[prost(message, optional, tag = "3")]
    pub lgofoilnonl: ::core::option::Option<Heepkphclgb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Diedgiedkhm {
    #[prost(uint32, tag = "5")]
    pub nkpdmckfppp: u32,
    #[prost(message, repeated, tag = "13")]
    pub hcoapfagbei: ::prost::alloc::vec::Vec<Idondchfkhg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akkdhbhlnak {
    #[prost(message, optional, tag = "11")]
    pub chess_aeon_info: ::core::option::Option<ChessRogueQueryAeonInfo>,
    #[prost(uint32, repeated, tag = "1")]
    pub mkejbephkkb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "6")]
    pub pkhijecbkha: ::core::option::Option<Apgebmndcbd>,
    #[prost(message, optional, tag = "12")]
    pub mmohllkalak: ::core::option::Option<Bbecljofgpm>,
    #[prost(message, optional, tag = "9")]
    pub lgofoilnonl: ::core::option::Option<Heepkphclgb>,
    #[prost(uint32, repeated, tag = "5")]
    pub hdahahdpkmp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgamdjdfppg {
    #[prost(uint32, tag = "6")]
    pub nofjglfkgfi: u32,
    #[prost(enumeration = "Jloepepjmdp", tag = "2")]
    pub nolnafhgnic: i32,
    #[prost(message, optional, tag = "3")]
    pub rogue_buff_info: ::core::option::Option<ChessRogueBuff>,
    #[prost(bool, tag = "11")]
    pub is_finish: bool,
    #[prost(message, optional, tag = "9")]
    pub iiblfljdpmd: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "7")]
    pub jndjolalapk: u32,
    #[prost(uint32, tag = "14")]
    pub iloocodiejo: u32,
    #[prost(uint32, tag = "1446")]
    pub gdippjbknbp: u32,
    #[prost(uint32, tag = "1511")]
    pub nkpdmckfppp: u32,
    #[prost(uint32, tag = "10")]
    pub cgfkkakjfca: u32,
    #[prost(message, optional, tag = "5")]
    pub game_miracle_info: ::core::option::Option<Bkllpgceecm>,
    #[prost(message, optional, tag = "462")]
    pub jmngdhgbofl: ::core::option::Option<Ifimehhnapl>,
    #[prost(uint32, tag = "1163")]
    pub score_id: u32,
    #[prost(uint32, tag = "12")]
    pub jonfaggcglo: u32,
    #[prost(uint32, tag = "1308")]
    pub daliinmblad: u32,
    #[prost(message, optional, tag = "4")]
    pub ogmmoleeopl: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "698")]
    pub endeljgplab: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub lgkajganehi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub addnfognppg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anhjcgdpcam {
    #[prost(uint32, tag = "2")]
    pub dpomjdoncdh: u32,
    #[prost(message, repeated, tag = "8")]
    pub bodgiilmdpn: ::prost::alloc::vec::Vec<ChessRogueCell>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehgladidice {
    #[prost(uint32, tag = "5")]
    pub jndjolalapk: u32,
    #[prost(uint32, tag = "9")]
    pub ndpbpkoafgb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aanehjbnfbm {
    #[prost(uint32, tag = "4")]
    pub dngmfiodock: u32,
    #[prost(uint32, tag = "3")]
    pub inbgenaaibg: u32,
}
/// PCJCLMEKIML (5492)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryCsReq {}
/// CGCNCAMLGHM (5565)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryScRsp {
    #[prost(message, optional, tag = "11")]
    pub rogue_get_info: ::core::option::Option<Akkdhbhlnak>,
    #[prost(message, optional, tag = "7")]
    pub dpaedjdcfpd: ::core::option::Option<Fgamdjdfppg>,
    #[prost(message, optional, tag = "3")]
    pub hfgddeokcdg: ::core::option::Option<Ldacemendgo>,
    #[prost(message, optional, tag = "4")]
    pub rogue_current_info: ::core::option::Option<Diedgiedkhm>,
    #[prost(message, optional, tag = "1")]
    pub lddcaaekfob: ::core::option::Option<Nomdndhhela>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// EPHEHGPMGPE (5581)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterCellCsReq {
    #[prost(uint32, tag = "9")]
    pub cell_id: u32,
    #[prost(uint32, tag = "13")]
    pub hdpmifbijkl: u32,
}
/// FOBDLNNJHFN (5556)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterCellScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub rogue_current_info: ::core::option::Option<Diedgiedkhm>,
    #[prost(message, optional, tag = "2")]
    pub lddcaaekfob: ::core::option::Option<Nomdndhhela>,
    #[prost(uint32, tag = "11")]
    pub cell_id: u32,
    #[prost(message, optional, tag = "9")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
}
/// AJOGMJBBKDK (5441)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterCsReq {
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
/// HCOCHEEMEAL (5510)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterScRsp {
    #[prost(message, optional, tag = "1")]
    pub rogue_current_info: ::core::option::Option<Diedgiedkhm>,
    #[prost(message, optional, tag = "4")]
    pub lddcaaekfob: ::core::option::Option<Nomdndhhela>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(uint32, tag = "8")]
    pub id: u32,
}
/// GLFBFEKFFGD (5558)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueLeaveCsReq {}
/// DBKHHIAGBOM (5562)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueLeaveScRsp {
    #[prost(message, optional, tag = "8")]
    pub rogue_get_info: ::core::option::Option<Akkdhbhlnak>,
    #[prost(message, optional, tag = "14")]
    pub hfgddeokcdg: ::core::option::Option<Ldacemendgo>,
    #[prost(message, optional, tag = "1")]
    pub ijopankcekj: ::core::option::Option<ChessRogueAeonInfo>,
    #[prost(message, optional, tag = "15")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// FJMEMOCJJLJ (5460)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGiveUpCsReq {}
/// NDLDNALBPNG (5433)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueGiveUpScRsp {
    #[prost(message, optional, tag = "1")]
    pub ijopankcekj: ::core::option::Option<ChessRogueAeonInfo>,
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub rogue_get_info: ::core::option::Option<Akkdhbhlnak>,
    #[prost(message, optional, tag = "14")]
    pub dpaedjdcfpd: ::core::option::Option<Fgamdjdfppg>,
    #[prost(message, optional, tag = "13")]
    pub hfgddeokcdg: ::core::option::Option<Ldacemendgo>,
}
/// GJKOBFGOONC (5452)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueStartCsReq {
    #[prost(uint32, tag = "3")]
    pub aeon_id: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub cngepabgdlm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub bpdlimhclic: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub hobkomgbibl: ::prost::alloc::vec::Vec<u32>,
}
/// LBOPCNPOKDF (5582)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueStartScRsp {
    #[prost(message, optional, tag = "13")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "8")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lddcaaekfob: ::core::option::Option<Nomdndhhela>,
    #[prost(message, optional, tag = "9")]
    pub rogue_current_info: ::core::option::Option<Diedgiedkhm>,
    #[prost(message, optional, tag = "5")]
    pub mgbbkhhaheh: ::core::option::Option<Anhjcgdpcam>,
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<SceneInfo>,
}
/// IKKOGFOFLLH (5518)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryAeonDimensionsCsReq {}
/// IODDDFPFGBA (5463)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryAeonDimensionsScRsp {
    #[prost(message, optional, tag = "10")]
    pub lddcaaekfob: ::core::option::Option<ChessRogueQueryAeonInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// ADEONMPPKJH (5437)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueChangeyAeonDimensionNotify {
    #[prost(message, optional, tag = "1")]
    pub lddcaaekfob: ::core::option::Option<ChessRogueQueryAeon>,
}
/// AJFJMFCFMAG (5506)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectCellCsReq {
    #[prost(uint32, tag = "4")]
    pub cell_id: u32,
    #[prost(uint32, tag = "2")]
    pub hdpmifbijkl: u32,
}
/// ALEPGNNBCLI (5419)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectCellScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub hdpmifbijkl: u32,
    #[prost(uint32, tag = "10")]
    pub cell_id: u32,
    #[prost(message, optional, tag = "13")]
    pub pfapbjgpdnj: ::core::option::Option<Lpoopbgngld>,
}
/// NCOCDAPKKMO (5545)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryBpCsReq {}
/// GCGAPFIGPHO (5431)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryBpScRsp {
    #[prost(message, optional, tag = "1")]
    pub lddcaaekfob: ::core::option::Option<Khhcloocomi>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// MBNFAKAFBOH (5572)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectBpCsReq {
    #[prost(uint32, tag = "10")]
    pub blchbomacio: u32,
}
/// APAMOMGLHFH (5465)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectBpScRsp {
    #[prost(uint32, tag = "10")]
    pub blchbomacio: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub iimcijeijnf: ::core::option::Option<Mokcffgffpc>,
}
/// EHEHDOOBECO (5586)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueLayerAccountInfoNotify {
    #[prost(uint32, tag = "7")]
    pub kchegpecmhm: u32,
    #[prost(uint32, tag = "14")]
    pub nofjglfkgfi: u32,
    #[prost(message, optional, tag = "2")]
    pub dpaedjdcfpd: ::core::option::Option<Fgamdjdfppg>,
    #[prost(message, optional, tag = "13")]
    pub level_info: ::core::option::Option<ChessRogueLevelInfo>,
    #[prost(uint32, repeated, tag = "15")]
    pub lgkajganehi: ::prost::alloc::vec::Vec<u32>,
}
/// EIHJNAAGGFG (5457)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChessRogueBuffEnhanceInfoCsReq {}
/// FIADGIIPLJG (5414)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChessRogueBuffEnhanceInfoScRsp {
    #[prost(message, optional, tag = "7")]
    pub npbamcnhafj: ::core::option::Option<Cfannkoknca>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// NOEBKJPHOLA (5550)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnhanceChessRogueBuffCsReq {
    #[prost(uint32, tag = "13")]
    pub maze_buff_id: u32,
}
/// LMGCDENJPHI (5541)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnhanceChessRogueBuffScRsp {
    #[prost(message, optional, tag = "5")]
    pub iileadjpaem: ::core::option::Option<RogueCommonBuff>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub npbamcnhafj: ::core::option::Option<Cfannkoknca>,
    #[prost(bool, tag = "13")]
    pub is_succ: bool,
}
/// HGKEEANENFB (5580)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRoguePickAvatarCsReq {
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// DEGBOFPPAMN (5406)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRoguePickAvatarScRsp {
    #[prost(uint32, repeated, tag = "4")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub eelbepmnpgi: ::core::option::Option<ChessRogueLineupInfo>,
}
/// EEJAPAKPAMP (5473)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueReviveAvatarCsReq {
    #[prost(uint32, repeated, tag = "8")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub interacted_prop_entity_id: u32,
}
/// IALCGOBIAKG (5434)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueReviveAvatarScRsp {
    #[prost(uint32, repeated, tag = "11")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub revive_info: ::core::option::Option<RogueAvatarReviveCost>,
}
/// KPLEKCLHPCJ (5576)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateReviveInfoScNotify {
    #[prost(message, optional, tag = "15")]
    pub revive_info: ::core::option::Option<RogueAvatarReviveCost>,
}
/// GFCGAPBGCJG (5501)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateMoneyInfoScNotify {
    #[prost(message, optional, tag = "4")]
    pub mjkpcdjjeml: ::core::option::Option<Blimedcmhmn>,
}
/// IIEBCCJEAIN (5536)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateDiceInfoScNotify {
    #[prost(message, optional, tag = "14")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
}
/// PLJLHPHCIDI (5469)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateLevelBaseInfoScNotify {
    #[prost(enumeration = "Anehjmafblj", tag = "15")]
    pub reason: i32,
    #[prost(enumeration = "Lmibfmlfcgo", tag = "12")]
    pub gcceggbeicj: i32,
}
/// BNBBHHNHBGF (5521)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateAllowedSelectCellScNotify {
    #[prost(uint32, repeated, tag = "3")]
    pub allow_select_cell_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub hedddekoolb: u32,
}
/// JLEPPLENOEF (5490)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateBoardScNotify {
    #[prost(message, optional, tag = "4")]
    pub hppgcagngmm: ::core::option::Option<CellInfo>,
}
/// IDEJKIHKNAJ (5438)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateAeonModifierValueScNotify {
    #[prost(int32, tag = "14")]
    pub hhdabofomec: i32,
    #[prost(uint32, tag = "13")]
    pub aeon_id: u32,
}
/// NGJGCAMJHMM (5454)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateDicePassiveAccumulateValueScNotify {
    #[prost(int32, tag = "11")]
    pub npemiliabae: i32,
}
/// DBJEBBKKBGF (5528)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueSkipTeachingLevelCsReq {}
/// ChessRogueSkipTeachingLevelScRsp (5577)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSkipTeachingLevelScRsp {
    #[prost(message, optional, tag = "14")]
    pub skip_reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// ANPMPDGPNJF (5533)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateUnlockLevelScNotify {
    #[prost(uint32, repeated, tag = "2")]
    pub hdahahdpkmp: ::prost::alloc::vec::Vec<u32>,
}
/// LCEJLHOFDNO (5440)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterNextLayerCsReq {
    #[prost(uint32, tag = "6")]
    pub prop_entity_id: u32,
}
/// AJPPGKFPFNK (5583)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterNextLayerScRsp {
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(message, optional, tag = "6")]
    pub rogue_game_info: ::core::option::Option<Nomdndhhela>,
    #[prost(message, optional, tag = "2")]
    pub rogue_current_info: ::core::option::Option<Diedgiedkhm>,
    #[prost(message, optional, tag = "11")]
    pub mgbbkhhaheh: ::core::option::Option<Anhjcgdpcam>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// PGIPEFOLNIL (5423)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueReRollDiceCsReq {
    #[prost(uint32, tag = "12")]
    pub jlmieohmlja: u32,
}
/// GBOONCCLJDN (5477)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueReRollDiceScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
}
/// DJEMACDGENJ (5591)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueConfirmRollCsReq {
    #[prost(uint32, tag = "2")]
    pub jlmieohmlja: u32,
}
/// BBPACEPLIBK (5514)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueConfirmRollScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
}
/// AIGBNEJACBP (5595)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueCheatRollCsReq {
    #[prost(uint32, tag = "14")]
    pub lojfkmkmmlc: u32,
    #[prost(uint32, tag = "13")]
    pub jlmieohmlja: u32,
}
/// LEAIMLAGBLK (5411)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueCheatRollScRsp {
    #[prost(message, optional, tag = "10")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
    #[prost(uint32, tag = "1")]
    pub lojfkmkmmlc: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub bdmjajmffhm: u32,
}
/// MKELENDGNFL (5445)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGiveUpRollCsReq {}
/// FBJDDOJHKKK (5509)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueGiveUpRollScRsp {
    #[prost(message, optional, tag = "7")]
    pub rogue_dice_info: ::core::option::Option<ChessRogueDiceInfo>,
    #[prost(message, optional, tag = "1")]
    pub icmjokihcjj: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// GJEOEOAEFGL (5563)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQuitCsReq {}
/// EPKKMFBJIEE (5435)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQuitScRsp {
    #[prost(message, optional, tag = "1")]
    pub rogue_current_info: ::core::option::Option<Diedgiedkhm>,
    #[prost(message, optional, tag = "11")]
    pub dpaedjdcfpd: ::core::option::Option<Fgamdjdfppg>,
    #[prost(message, optional, tag = "9")]
    pub hfgddeokcdg: ::core::option::Option<Ldacemendgo>,
    #[prost(message, optional, tag = "6")]
    pub ijopankcekj: ::core::option::Option<ChessRogueAeonInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub rogue_get_info: ::core::option::Option<Akkdhbhlnak>,
    #[prost(message, optional, tag = "2")]
    pub lddcaaekfob: ::core::option::Option<Nomdndhhela>,
    #[prost(message, optional, tag = "4")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(message, optional, tag = "8")]
    pub level_info: ::core::option::Option<ChessRogueLevelInfo>,
}
/// IKNAMJANCNK (5564)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueFinishCurRoomNotify {
    #[prost(message, optional, tag = "7")]
    pub level_info: ::core::option::Option<ChessRogueLevelInfo>,
}
/// MOKKJMCDMKN (5456)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueMoveCellNotify {
    #[prost(uint32, tag = "11")]
    pub lfmnhhmdfhg: u32,
    #[prost(message, optional, tag = "4")]
    pub kglpmnhmnmm: ::core::option::Option<CellInfo>,
    #[prost(uint32, tag = "8")]
    pub ckekjpglfeg: u32,
}
/// JBFHKJGILEJ (5442)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueCellUpdateNotify {
    #[prost(enumeration = "Pjdemlinngf", tag = "15")]
    pub jnpgebhaohl: i32,
    #[prost(enumeration = "Fapfdnfccih", tag = "11")]
    pub reason: i32,
    #[prost(uint32, tag = "7")]
    pub hedddekoolb: u32,
    #[prost(message, repeated, tag = "8")]
    pub bodgiilmdpn: ::prost::alloc::vec::Vec<ChessRogueCell>,
}
/// DPJLIBDPFOF (5539)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQuestFinishNotify {
    #[prost(uint32, tag = "5")]
    pub hcopmgfadoo: u32,
    #[prost(uint32, tag = "3")]
    pub quest_id: u32,
}
/// FJBBNHPPJOO (5557)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChessRogueStoryInfoCsReq {}
/// HJGDCAPCAMF (5530)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChessRogueStoryInfoScRsp {
    #[prost(message, repeated, tag = "12")]
    pub pdbkoclfplg: ::prost::alloc::vec::Vec<Aanehjbnfbm>,
    #[prost(message, repeated, tag = "14")]
    pub clahdhblajm: ::prost::alloc::vec::Vec<Ehgladidice>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// APCJLILEICP (5496)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChessRogueSubStoryCsReq {
    #[prost(uint32, tag = "3")]
    pub inbgenaaibg: u32,
    #[prost(uint32, tag = "1")]
    pub bhondmalhbo: u32,
    #[prost(uint32, tag = "13")]
    pub cedpklpefmj: u32,
    #[prost(uint32, tag = "11")]
    pub rogue_dialogue_event_id: u32,
}
/// PENLPDPIEKJ (5405)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChessRogueSubStoryScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub cedpklpefmj: u32,
    #[prost(uint32, tag = "14")]
    pub inbgenaaibg: u32,
    #[prost(uint32, tag = "13")]
    pub rogue_dialogue_event_id: u32,
    #[prost(uint32, tag = "9")]
    pub bhondmalhbo: u32,
}
/// HOBKMBFNEIH (5516)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishChessRogueSubStoryCsReq {
    #[prost(uint32, tag = "11")]
    pub inbgenaaibg: u32,
    #[prost(uint32, tag = "8")]
    pub bhondmalhbo: u32,
    #[prost(uint32, tag = "3")]
    pub cedpklpefmj: u32,
}
/// BPNLIBEKFIN (5479)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishChessRogueSubStoryScRsp {
    #[prost(uint32, tag = "13")]
    pub jndjolalapk: u32,
    #[prost(uint32, tag = "1")]
    pub bhondmalhbo: u32,
    #[prost(uint32, tag = "7")]
    pub inbgenaaibg: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub cedpklpefmj: u32,
}
/// KJDCEKCPBCO (5543)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateActionPointScNotify {
    #[prost(int32, tag = "4")]
    pub olidjodakka: i32,
}
/// ADNNJCBPBBE (5482)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterChessRogueAeonRoomCsReq {}
/// IMFBFCEABOF (5552)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterChessRogueAeonRoomScRsp {
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<ChessRogueInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// JGPBCJGKFED (5483)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChessRogueStoryAeonTalkInfoCsReq {
    #[prost(uint32, tag = "3")]
    pub talk_dialogue_id: u32,
}
/// KEODILCHHDP (5553)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChessRogueStoryAeonTalkInfoScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "6")]
    pub oamjlnboleg: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "11")]
    pub talk_dialogue_id: u32,
}
/// OEFODGACGAH (5429)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncChessRogueMainStoryFinishScNotify {
    #[prost(uint32, tag = "5")]
    pub ndpbpkoafgb: u32,
    #[prost(uint32, tag = "11")]
    pub jndjolalapk: u32,
}
/// ABLKBEDHLAB (5589)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncChessRogueNousValueScNotify {
    #[prost(message, optional, tag = "4")]
    pub hdadnbflock: ::core::option::Option<Pkpkdhenpmn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oinnkhcdacc {
    #[prost(uint32, tag = "6")]
    pub jndjolalapk: u32,
    #[prost(enumeration = "Mihbdjcmcbg", tag = "3")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdgbamhhklf {
    #[prost(uint32, tag = "12")]
    pub cedpklpefmj: u32,
}
/// KBENGIEHMAA (5422)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChessRogueNousStoryInfoCsReq {}
/// APIKMBKFKPD (5567)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChessRogueNousStoryInfoScRsp {
    #[prost(message, repeated, tag = "9")]
    pub pdbkoclfplg: ::prost::alloc::vec::Vec<Gdgbamhhklf>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub clahdhblajm: ::prost::alloc::vec::Vec<Oinnkhcdacc>,
}
/// KLNBGPDEOKB (5409)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChessRogueNousSubStoryCsReq {
    #[prost(uint32, tag = "2")]
    pub rogue_dialogue_event_id: u32,
    #[prost(uint32, tag = "12")]
    pub cedpklpefmj: u32,
    #[prost(uint32, tag = "7")]
    pub bhondmalhbo: u32,
}
/// NAHDHHLGOJB (5529)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChessRogueNousSubStoryScRsp {
    #[prost(uint32, tag = "4")]
    pub bhondmalhbo: u32,
    #[prost(uint32, tag = "9")]
    pub cedpklpefmj: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub rogue_dialogue_event_id: u32,
}
/// FJICAJHPKFF (5519)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishChessRogueNousSubStoryCsReq {
    #[prost(uint32, tag = "10")]
    pub cedpklpefmj: u32,
    #[prost(uint32, tag = "3")]
    pub bhondmalhbo: u32,
}
/// CCDHMGHGDJN (5584)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishChessRogueNousSubStoryScRsp {
    #[prost(uint32, tag = "12")]
    pub bhondmalhbo: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub cedpklpefmj: u32,
}
/// PFPFOIIGBCD (5498)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncChessRogueNousSubStoryScNotify {
    #[prost(uint32, tag = "6")]
    pub cedpklpefmj: u32,
}
/// PNPOEMJAGEA (5497)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncChessRogueNousMainStoryScNotify {
    #[prost(message, repeated, tag = "15")]
    pub clahdhblajm: ::prost::alloc::vec::Vec<Oinnkhcdacc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifimehhnapl {
    #[prost(uint32, tag = "3")]
    pub jndjolalapk: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub fbfjolijonc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub kdblpcoojin: u32,
    #[prost(bool, tag = "12")]
    pub emdeohimdpd: bool,
    #[prost(uint32, tag = "1")]
    pub cedpklpefmj: u32,
    #[prost(bool, tag = "10")]
    pub mhfnambhgkk: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub khinjllppjd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub edmjacfdglj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mldoeclfmmh {
    #[prost(uint32, tag = "13")]
    pub lojfkmkmmlc: u32,
    #[prost(uint32, tag = "1")]
    pub dice_slot_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjpejblbdik {
    #[prost(uint32, tag = "11")]
    pub lomeckpence: u32,
    #[prost(uint32, tag = "8")]
    pub nmipeedhmmd: u32,
    #[prost(message, repeated, tag = "12")]
    pub oofbeogbgkj: ::prost::alloc::vec::Vec<Mldoeclfmmh>,
    #[prost(uint32, tag = "3")]
    pub bpdlimhclic: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apgebmndcbd {
    #[prost(map = "uint32, bool", tag = "5")]
    pub gifceeiclml: ::std::collections::HashMap<u32, bool>,
    #[prost(message, repeated, tag = "9")]
    pub cchckblajkd: ::prost::alloc::vec::Vec<Hjpejblbdik>,
    #[prost(enumeration = "ChessRogueNousDicePhase", tag = "10")]
    pub fmpmmddnomo: i32,
    #[prost(uint32, repeated, tag = "12")]
    pub dnodpcljamn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lojnaekienp {
    #[prost(uint32, tag = "10")]
    pub fjifnmbdjem: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Heepkphclgb {
    #[prost(message, optional, tag = "9")]
    pub comcfjgpamj: ::core::option::Option<Kfddofkhkdj>,
    #[prost(uint32, tag = "1")]
    pub fjifnmbdjem: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbecljofgpm {
    #[prost(uint32, repeated, tag = "13")]
    pub icnenejhclk: ::prost::alloc::vec::Vec<u32>,
}
/// NDHPNGPEHNK (5472)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueNousEditDiceCsReq {
    #[prost(message, optional, tag = "11")]
    pub pkhijecbkha: ::core::option::Option<Hjpejblbdik>,
}
/// BIAFIPFHDFL (5443)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueNousEditDiceScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub pkhijecbkha: ::core::option::Option<Hjpejblbdik>,
}
/// MJGOEGHIMNA (5585)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueNousDiceUpdateNotify {
    #[prost(message, optional, tag = "11")]
    pub lkimkececji: ::core::option::Option<Apgebmndcbd>,
}
/// OKLLDANJFLD (5568)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueNousDiceSurfaceUnlockNotify {
    #[prost(uint32, tag = "5")]
    pub gkfkfkjpeon: u32,
}
/// MDKABJMAEMG (5513)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueNousGetRogueTalentInfoCsReq {}
/// HCBKGINIKCG (5432)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueNousGetRogueTalentInfoScRsp {
    #[prost(message, optional, tag = "9")]
    pub lgofoilnonl: ::core::option::Option<Kfddofkhkdj>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub fjifnmbdjem: u32,
}
/// PDEEPPEMJIJ (5493)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueNousEnableRogueTalentCsReq {
    #[prost(uint32, tag = "10")]
    pub talent_id: u32,
}
/// KJEOELHAGNF (5596)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueNousEnableRogueTalentScRsp {
    #[prost(uint32, tag = "13")]
    pub fjifnmbdjem: u32,
    #[prost(message, optional, tag = "8")]
    pub lgofoilnonl: ::core::option::Option<Kfddofkhkdj>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// CFIPFNEIJGD (7212)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkGetInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmgfoajbmma {
    #[prost(uint32, tag = "2")]
    pub script_id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub gleddkponkp: ::prost::alloc::vec::Vec<u32>,
}
/// PPNPKOMMNBD (7250)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkGetInfoScRsp {
    #[prost(uint32, repeated, tag = "12")]
    pub ajmhbdmnlmn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
    #[prost(message, repeated, tag = "14")]
    pub ljpobcflecc: ::prost::alloc::vec::Vec<Kmgfoajbmma>,
    #[prost(uint32, tag = "3")]
    pub cjppogffpae: u32,
    #[prost(uint32, tag = "8")]
    pub lcicdlkpgan: u32,
}
/// GEGEGKCAMPA (7215)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkUnlockTalentCsReq {
    #[prost(uint32, tag = "6")]
    pub talent_id: u32,
}
/// GHBGBLENIOJ (7249)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkUnlockTalentScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub talent_id: u32,
}
/// IJBAPOJKAMC (7209)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkStartScriptCsReq {
    #[prost(uint32, tag = "3")]
    pub script_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub dbcmobkpkji: ::prost::alloc::vec::Vec<u32>,
}
/// FOPHFIAHBOF (7243)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkStartScriptScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub script_id: u32,
}
/// BGBILGGDEOB (7247)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkGetOngoingScriptInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oonhckkbhie {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjlnlgcbofl {
    #[prost(uint32, tag = "5")]
    pub gjfccahnfco: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub kmnmoacaenj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub card_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdfgfdncfdg {
    #[prost(uint32, repeated, tag = "6")]
    pub kmnmoacaenj: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub train_party_card_info: ::prost::alloc::vec::Vec<Gjlnlgcbofl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpfgliedoib {
    #[prost(message, optional, tag = "8")]
    pub lknagoklogi: ::core::option::Option<Gdfgfdncfdg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbcnnejjked {
    #[prost(message, optional, tag = "14")]
    pub lknagoklogi: ::core::option::Option<Gdfgfdncfdg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgpgbdpnndl {
    #[prost(message, optional, tag = "8")]
    pub lknagoklogi: ::core::option::Option<Gdfgfdncfdg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Liofepioedb {
    #[prost(message, optional, tag = "5")]
    pub lknagoklogi: ::core::option::Option<Gdfgfdncfdg>,
    #[prost(uint32, tag = "4")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "3")]
    pub mfcibncdadg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mljpdnbendf {
    #[prost(message, optional, tag = "5")]
    pub lknagoklogi: ::core::option::Option<Gdfgfdncfdg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdebcfjihka {
    #[prost(bool, tag = "10")]
    pub gmbmeinoami: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjiiankenho {
    #[prost(uint32, tag = "6")]
    pub emcjnofilkp: u32,
    #[prost(oneof = "jjiiankenho::Heakemdigjh", tags = "12, 11, 5, 14, 10, 1, 13, 9")]
    pub heakemdigjh: ::core::option::Option<jjiiankenho::Heakemdigjh>,
}
/// Nested message and enum types in `JJIIANKENHO`.
pub mod jjiiankenho {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Heakemdigjh {
        #[prost(message, tag = "12")]
        Hdgbgomehga(super::Oonhckkbhie),
        #[prost(message, tag = "11")]
        Hecgagdmheg(super::Gpfgliedoib),
        #[prost(message, tag = "5")]
        Emffgbbjmdm(super::Lbcnnejjked),
        #[prost(message, tag = "14")]
        Jcnfomennhm(super::Cgpgbdpnndl),
        #[prost(message, tag = "10")]
        Aidnomlgemh(super::Liofepioedb),
        #[prost(message, tag = "1")]
        Himgofacmcl(super::Mljpdnbendf),
        #[prost(message, tag = "13")]
        Dboajocedjd(super::Hdebcfjihka),
        #[prost(bool, tag = "9")]
        Gdbfccoipdc(bool),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eoiapefedge {
    #[prost(int32, tag = "15")]
    pub jfgjgceonbl: i32,
    #[prost(int32, tag = "12")]
    pub bkijgebhaia: i32,
    #[prost(int32, tag = "3")]
    pub nhiginhahpk: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmhgelfomhi {
    #[prost(uint32, tag = "3")]
    pub buff_id: u32,
    #[prost(uint64, tag = "6")]
    pub unique_id: u64,
    #[prost(uint32, tag = "4")]
    pub ngmdcnkoeek: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnklpcleofc {
    #[prost(message, repeated, tag = "9")]
    pub buff_list: ::prost::alloc::vec::Vec<Kmhgelfomhi>,
}
/// BOOMAGLHPDD (7246)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkGetOngoingScriptInfoScRsp {
    #[prost(message, optional, tag = "13")]
    pub fhfifpmijch: ::core::option::Option<Jjiiankenho>,
    #[prost(uint32, tag = "5")]
    pub ldheanpnkln: u32,
    #[prost(string, tag = "8")]
    pub gigghhfceok: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub hoimhjhjcke: u32,
    #[prost(uint32, tag = "4")]
    pub cojbebincml: u32,
    #[prost(message, optional, tag = "7")]
    pub gcpafpndpda: ::core::option::Option<Eoiapefedge>,
    #[prost(uint32, tag = "12")]
    pub script_id: u32,
    #[prost(message, optional, tag = "6")]
    pub rogue_buff_info: ::core::option::Option<Pnklpcleofc>,
    #[prost(uint32, tag = "1")]
    pub ambcbclhihj: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub fehdaiojlpn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub nohadgimnip: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdcfffahdoj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgljhlinhhl {
    #[prost(message, optional, tag = "6")]
    pub lknagoklogi: ::core::option::Option<Gdfgfdncfdg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lkgcfdcefik {
    #[prost(bool, tag = "7")]
    pub is_win: bool,
    #[prost(uint32, tag = "15")]
    pub daelnjignjc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Menheekgdad {
    #[prost(uint32, repeated, tag = "15")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eplnmmhblal {
    #[prost(bool, tag = "13")]
    pub amcfkhmmjca: bool,
    #[prost(uint32, tag = "2")]
    pub gacha_random: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkbpncmhlfp {
    #[prost(bool, tag = "11")]
    pub is_win: bool,
    #[prost(uint32, tag = "8")]
    pub daelnjignjc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfieffgoohk {}
/// JMFGBHJAEEO (7245)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkHandleWaitOperationCsReq {
    #[prost(uint32, tag = "10")]
    pub emcjnofilkp: u32,
    #[prost(uint32, tag = "2")]
    pub script_id: u32,
    #[prost(
        oneof = "clock_park_handle_wait_operation_cs_req::Balnohocmlm",
        tags = "5, 1, 8, 13, 6, 3, 12, 14"
    )]
    pub balnohocmlm: ::core::option::Option<
        clock_park_handle_wait_operation_cs_req::Balnohocmlm,
    >,
}
/// Nested message and enum types in `ClockParkHandleWaitOperationCsReq`.
pub mod clock_park_handle_wait_operation_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Balnohocmlm {
        #[prost(message, tag = "5")]
        Elljmefgpde(super::Bdcfffahdoj),
        #[prost(message, tag = "1")]
        Lkifmdigfpb(super::Fgljhlinhhl),
        #[prost(message, tag = "8")]
        Dpkeipmampi(super::Lkgcfdcefik),
        #[prost(message, tag = "13")]
        Blhklnjiklj(super::Menheekgdad),
        #[prost(message, tag = "6")]
        Hficfnbidbn(super::Eplnmmhblal),
        #[prost(message, tag = "3")]
        Hfncognbbgd(super::Dkbpncmhlfp),
        #[prost(message, tag = "12")]
        Mfkdkbominf(super::Jfieffgoohk),
        #[prost(uint32, tag = "14")]
        Ldheanpnkln(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npafmppkndd {
    #[prost(bool, tag = "12")]
    pub bgfekhfmeih: bool,
    #[prost(uint32, tag = "5")]
    pub progress: u32,
    #[prost(bool, tag = "10")]
    pub cafinjlacpj: bool,
    #[prost(uint32, tag = "3")]
    pub script_id: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub ambcbclhihj: u32,
    #[prost(uint32, tag = "6")]
    pub cojbebincml: u32,
}
/// AJKIDGFELPA (7228)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkHandleWaitOperationScRsp {
    #[prost(uint32, tag = "4")]
    pub khbpeiddifd: u32,
    #[prost(enumeration = "ClockParkPlayStatus", tag = "7")]
    pub akbdfepanim: i32,
    #[prost(uint32, tag = "15")]
    pub clpdjjocich: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub emcjnofilkp: u32,
}
/// CFCNEAJGACD (7210)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkQuitScriptCsReq {
    #[prost(bool, tag = "2")]
    pub hjcoaohmohk: bool,
    #[prost(uint32, tag = "5")]
    pub script_id: u32,
}
/// ILCFIKELNND (7248)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkQuitScriptScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// LFCPNEKAPHK (7204)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkBattleEndScNotify {
    #[prost(uint32, tag = "6")]
    pub emcjnofilkp: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// EHKHHMLFHFL (7211)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkUseBuffCsReq {
    #[prost(uint32, tag = "9")]
    pub emcjnofilkp: u32,
    #[prost(uint64, tag = "12")]
    pub unique_id: u64,
    #[prost(uint32, tag = "1")]
    pub script_id: u32,
}
/// GBBNCCNFHNN (7206)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkUseBuffScRsp {
    #[prost(uint32, tag = "3")]
    pub emcjnofilkp: u32,
    #[prost(uint32, tag = "1")]
    pub script_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub rogue_buff_info: ::core::option::Option<Pnklpcleofc>,
    #[prost(oneof = "clock_park_use_buff_sc_rsp::Empoglpmaed", tags = "324, 99")]
    pub empoglpmaed: ::core::option::Option<clock_park_use_buff_sc_rsp::Empoglpmaed>,
}
/// Nested message and enum types in `ClockParkUseBuffScRsp`.
pub mod clock_park_use_buff_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Empoglpmaed {
        #[prost(message, tag = "324")]
        Lknagoklogi(super::Gdfgfdncfdg),
        #[prost(message, tag = "99")]
        Gcpafpndpda(super::Eoiapefedge),
    }
}
/// EEJAPGGOCBD (7235)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkFinishScriptScNotify {
    #[prost(message, optional, tag = "4")]
    pub rogue_finish_info: ::core::option::Option<Npafmppkndd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, tag = "14")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "7")]
    pub promotion: u32,
    #[prost(uint32, tag = "13")]
    pub unique_id: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
    #[prost(uint32, tag = "15")]
    pub num: u32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemList {
    #[prost(message, repeated, tag = "4")]
    pub item_list: ::prost::alloc::vec::Vec<Item>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PileItem {
    #[prost(uint32, tag = "15")]
    pub item_num: u32,
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemCost {
    #[prost(oneof = "item_cost::ItemCase", tags = "10, 5, 4")]
    pub item_case: ::core::option::Option<item_cost::ItemCase>,
}
/// Nested message and enum types in `ItemCost`.
pub mod item_cost {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ItemCase {
        #[prost(message, tag = "10")]
        PileItem(super::PileItem),
        #[prost(uint32, tag = "5")]
        EquipmentUniqueId(u32),
        #[prost(uint32, tag = "4")]
        RelicUniqueId(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemCostData {
    #[prost(message, repeated, tag = "14")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgbdlopnmaa {
    #[prost(uint32, tag = "5")]
    pub item_count: u32,
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjpldenopen {
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub tid: u32,
    #[prost(uint32, tag = "12")]
    pub promotion: u32,
    #[prost(uint32, tag = "10")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpgpgkjdfii {
    #[prost(message, repeated, tag = "1")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "12")]
    pub exp: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub tid: u32,
    #[prost(uint32, tag = "14")]
    pub main_affix_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aplmidijffa {
    #[prost(oneof = "aplmidijffa::Ipfiehlneon", tags = "8, 9, 13")]
    pub ipfiehlneon: ::core::option::Option<aplmidijffa::Ipfiehlneon>,
}
/// Nested message and enum types in `APLMIDIJFFA`.
pub mod aplmidijffa {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ipfiehlneon {
        #[prost(message, tag = "8")]
        Kohgaokngji(super::Bgbdlopnmaa),
        #[prost(message, tag = "9")]
        Dcccihekhfo(super::Gjpldenopen),
        #[prost(message, tag = "13")]
        Ghpghllemfg(super::Kpgpgkjdfii),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpmecebahoa {
    #[prost(message, repeated, tag = "13")]
    pub item_list: ::prost::alloc::vec::Vec<Aplmidijffa>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Vector {
    #[prost(sint32, tag = "7")]
    pub y: i32,
    #[prost(sint32, tag = "3")]
    pub z: i32,
    #[prost(sint32, tag = "6")]
    pub x: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MotionInfo {
    #[prost(message, optional, tag = "11")]
    pub rot: ::core::option::Option<Vector>,
    #[prost(message, optional, tag = "12")]
    pub pos: ::core::option::Option<Vector>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Vector4 {
    #[prost(float, tag = "4")]
    pub x: f32,
    #[prost(float, tag = "3")]
    pub y: f32,
    #[prost(float, tag = "15")]
    pub z: f32,
    #[prost(float, tag = "6")]
    pub w: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneMonsterWaveParam {
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub elite_group: u32,
    #[prost(uint32, tag = "5")]
    pub cbiaoplipkj: u32,
    #[prost(uint32, tag = "13")]
    pub hard_level_group: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneMonsterData {
    #[prost(uint32, tag = "13")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "14")]
    pub max_hp: u32,
    #[prost(uint32, tag = "15")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMonsterWave {
    #[prost(message, repeated, tag = "3")]
    pub olfgemadaco: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "5")]
    pub battle_wave_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub monster_list: ::prost::alloc::vec::Vec<SceneMonsterData>,
    #[prost(uint32, tag = "15")]
    pub battle_stage_id: u32,
    #[prost(message, optional, tag = "11")]
    pub wave_param: ::core::option::Option<SceneMonsterWaveParam>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneBattleInfo {
    #[prost(uint32, tag = "1")]
    pub world_level: u32,
    #[prost(message, repeated, tag = "928")]
    pub battle_event: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(message, repeated, tag = "13")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(message, optional, tag = "1079")]
    pub adafaohflma: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(bool, tag = "3")]
    pub nbgogjjojma: bool,
    #[prost(uint32, tag = "9")]
    pub battle_id: u32,
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "14")]
    pub cycle_count: u32,
    #[prost(message, repeated, tag = "4")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
    #[prost(message, optional, tag = "1993")]
    pub battle_rogue_magic_info: ::core::option::Option<BattleRogueMagicInfo>,
    #[prost(message, repeated, tag = "10")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, optional, tag = "796")]
    pub gddalcgoobg: ::core::option::Option<Olgkjdlmeio>,
    #[prost(map = "uint32, message", tag = "1840")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(uint32, tag = "12")]
    pub logic_random_seed: u32,
    #[prost(uint32, tag = "5")]
    pub makigfemknm: u32,
    #[prost(message, optional, tag = "1824")]
    pub igpipnaaebj: ::core::option::Option<Nmkaecdmhop>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideBattleInfo {
    #[prost(uint32, tag = "11")]
    pub logic_random_seed: u32,
    #[prost(message, repeated, tag = "9")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<AetherAvatarInfo>,
    #[prost(bool, tag = "4")]
    pub nbgogjjojma: bool,
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
    #[prost(uint32, tag = "8")]
    pub battle_id: u32,
    #[prost(message, repeated, tag = "14")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(message, repeated, tag = "5")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckhgfcabifi {
    #[prost(uint32, tag = "11")]
    pub assist_uid: u32,
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "12")]
    pub id: u32,
}
/// ODIKBIEFAMP (7512)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageGetDataCsReq {}
/// DGHPIMKHCMK (7550)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageGetDataScRsp {
    #[prost(message, optional, tag = "9")]
    pub data: ::core::option::Option<ContentPackageData>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageInfo {
    #[prost(uint32, tag = "15")]
    pub content_id: u32,
    #[prost(enumeration = "ContentPackageStatus", tag = "1")]
    pub status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageData {
    #[prost(uint32, tag = "1")]
    pub cur_content_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub content_package_list: ::prost::alloc::vec::Vec<ContentPackageInfo>,
}
/// JAMCGCANOAH (7530)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageSyncDataScNotify {
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<ContentPackageData>,
}
/// FHLLOBGLHBH (7523)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageUnlockCsReq {
    #[prost(uint32, tag = "6")]
    pub content_id: u32,
}
/// OFHNOBIAIPE (7515)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageUnlockScRsp {
    #[prost(uint32, tag = "6")]
    pub content_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// NPMEAAEJMPM (7549)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageTransferScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyActivityInfo {
    #[prost(bool, tag = "9")]
    pub moiglinhnma: bool,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "13")]
    pub hpidkaddamd: u32,
}
/// EBHFNEHDLLB (3336)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeApRewardCsReq {
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
/// OIEOMLJCMKD (3395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeApRewardScRsp {
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
}
/// HCMFOAMAOBG (3384)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDailyActiveInfoCsReq {}
/// FAMIKBPHPCD (3327)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDailyActiveInfoScRsp {
    #[prost(uint32, tag = "5")]
    pub hpidkaddamd: u32,
    #[prost(message, repeated, tag = "10")]
    pub gahgdklgncn: ::prost::alloc::vec::Vec<DailyActivityInfo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub bjgfkfdlgjp: ::prost::alloc::vec::Vec<u32>,
}
/// CJPOANKFHIL (3367)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DailyActiveInfoNotify {
    #[prost(uint32, tag = "13")]
    pub hpidkaddamd: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub bjgfkfdlgjp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub gahgdklgncn: ::prost::alloc::vec::Vec<DailyActivityInfo>,
}
/// IGAIEDFOOAA (3328)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeAllApRewardCsReq {}
/// DHFDKFCGOBD (3352)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAllApRewardScRsp {
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "6")]
    pub pfhlbogfblc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerGuest {
    #[prost(uint32, repeated, tag = "8")]
    pub unlocked_favor_tag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub faith: u32,
    #[prost(uint32, tag = "1")]
    pub guest_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhiinbepcpi {
    #[prost(uint32, tag = "10")]
    pub ikgomibbenf: u32,
    #[prost(uint32, tag = "8")]
    pub opkeenhpkeo: u32,
    #[prost(uint32, tag = "5")]
    pub omghahgggfa: u32,
    #[prost(uint32, tag = "15")]
    pub cnlldmcogbp: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub jaodopdgogl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agdodapfdhd {
    #[prost(bool, tag = "3")]
    pub is_succ: bool,
    #[prost(uint32, tag = "6")]
    pub echmcjcaooh: u32,
}
/// ICDCMNGOLBJ (7000)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDrinkMakerDataCsReq {}
/// HLDMELLMFEO (6995)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDrinkMakerDataScRsp {
    #[prost(message, repeated, tag = "10")]
    pub hbkbpabjfmp: ::prost::alloc::vec::Vec<DrinkMakerGuest>,
    #[prost(uint32, tag = "11")]
    pub exp: u32,
    #[prost(uint32, tag = "9")]
    pub bifaoeinimi: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub dlgekhmihjk: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub ahcajgliomj: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub lmpbdddeblc: ::core::option::Option<Hhiinbepcpi>,
    #[prost(uint32, tag = "14")]
    pub gaibjdoaimd: u32,
    #[prost(uint32, tag = "3")]
    pub pbaidonbjek: u32,
}
/// EALONFOJBDG (6987)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeDrinkCsReq {
    #[prost(message, optional, tag = "11")]
    pub jbhnfhocffp: ::core::option::Option<Hhiinbepcpi>,
    #[prost(uint32, tag = "15")]
    pub gaibjdoaimd: u32,
}
/// MakeDrinkScRsp (6983)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MakeDrinkScRsp {
    #[prost(bool, tag = "13")]
    pub is_succ: bool,
    #[prost(uint32, tag = "4")]
    pub next_chat_id: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// AEIDPEHEAOL (6997)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndDrinkMakerSequenceCsReq {}
/// EndDrinkMakerSequenceScRsp (6986)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndDrinkMakerSequenceScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub guest: ::core::option::Option<DrinkMakerGuest>,
    #[prost(message, repeated, tag = "15")]
    pub request_list: ::prost::alloc::vec::Vec<Agdodapfdhd>,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub exp: u32,
    #[prost(uint32, tag = "5")]
    pub tips: u32,
    #[prost(uint32, tag = "10")]
    pub next_sequence_id: u32,
}
/// GJCJEAEKFEN (6985)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeMissionDrinkCsReq {
    #[prost(bool, tag = "14")]
    pub is_save: bool,
    #[prost(message, optional, tag = "9")]
    pub jbhnfhocffp: ::core::option::Option<Hhiinbepcpi>,
    #[prost(uint32, tag = "13")]
    pub echmcjcaooh: u32,
}
/// MakeMissionDrinkScRsp (6990)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeMissionDrinkScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(bool, tag = "6")]
    pub is_succ: bool,
    #[prost(bool, tag = "10")]
    pub is_save: bool,
    #[prost(message, optional, tag = "1")]
    pub custom_drink: ::core::option::Option<Hhiinbepcpi>,
}
/// IPBHGKNKOMB (6982)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DrinkMakerDayEndScNotify {
    #[prost(uint32, tag = "1")]
    pub diflohdmggk: u32,
}
/// DKIHMJEJNPJ (6988)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerChallengeCsReq {
    #[prost(message, optional, tag = "15")]
    pub jbhnfhocffp: ::core::option::Option<Hhiinbepcpi>,
    #[prost(uint32, tag = "2")]
    pub challenge_id: u32,
}
/// LHBBPIAJJCA (6992)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerChallengeScRsp {
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "15")]
    pub is_succ: bool,
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// COEIKJNFFCD (6996)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DrinkMakerUpdateTipsNotify {
    #[prost(uint32, tag = "9")]
    pub dlgekhmihjk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afojljplncj {
    #[prost(uint32, tag = "1")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub fdggllhcpli: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Booedabnmmb {
    #[prost(message, repeated, tag = "1")]
    pub epimpaieogi: ::prost::alloc::vec::Vec<Afojljplncj>,
}
/// AMECNOPGJJO (6562)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEraFlipperDataCsReq {}
/// BKMBHAPLBEB (6600)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEraFlipperDataScRsp {
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<Booedabnmmb>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// MJMBPIDCICL (6580)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEraFlipperDataCsReq {
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<Booedabnmmb>,
}
/// FJAHLAAAFBO (6573)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEraFlipperDataScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<Booedabnmmb>,
}
/// CFCCCBKINHP (6565)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetEraFlipperDataCsReq {
    #[prost(bool, tag = "15")]
    pub opilecflapf: bool,
}
/// FJJOLNANOLD (6599)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetEraFlipperDataScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub data: ::core::option::Option<Booedabnmmb>,
    #[prost(bool, tag = "8")]
    pub opilecflapf: bool,
}
/// CEDCFKLCBAN (6559)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterEraFlipperRegionCsReq {
    #[prost(uint32, tag = "13")]
    pub state: u32,
    #[prost(uint32, tag = "15")]
    pub fdggllhcpli: u32,
}
/// HBHEFGCCHDL (6593)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterEraFlipperRegionScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub fdggllhcpli: u32,
}
/// LKLEIDPHDIN (6597)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EraFlipperDataChangeScNotify {
    #[prost(uint32, tag = "11")]
    pub floor_id: u32,
    #[prost(message, optional, tag = "13")]
    pub data: ::core::option::Option<Booedabnmmb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildAvatar {
    #[prost(enumeration = "AvatarType", tag = "10")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "3")]
    pub avatar_id: u32,
    #[prost(double, tag = "2")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildLevelInfo {
    #[prost(message, repeated, tag = "1")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, repeated, tag = "5")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(uint32, tag = "11")]
    pub round_cnt: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub cur_game_exp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmdekcefmjc {
    #[prost(uint32, tag = "2")]
    pub max_score: u32,
    #[prost(uint32, tag = "3")]
    pub level_id: u32,
    #[prost(uint32, tag = "10")]
    pub daofmfkknba: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enpcbhhgegj {
    #[prost(uint32, tag = "9")]
    pub dhdkhmfcjma: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcndmgbjhpn {
    #[prost(bool, tag = "15")]
    pub hinobhhibaa: bool,
    #[prost(uint32, tag = "3")]
    pub level_id: u32,
    #[prost(bool, tag = "8")]
    pub ohdlmbegcib: bool,
    #[prost(uint32, repeated, tag = "13")]
    pub lmhdmedoocp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odabnndoige {
    #[prost(bool, tag = "14")]
    pub bohcemclfll: bool,
    #[prost(uint32, tag = "1")]
    pub item_value: u32,
    #[prost(uint32, tag = "12")]
    pub cbfncmiaonh: u32,
    #[prost(uint32, tag = "9")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub mdppfpbfkfm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub jpnmhgfimbm: ::prost::alloc::vec::Vec<Gcndmgbjhpn>,
    #[prost(message, repeated, tag = "15")]
    pub hiidnfafcbp: ::prost::alloc::vec::Vec<Lmdekcefmjc>,
    #[prost(message, repeated, tag = "8")]
    pub lahjfgaglem: ::prost::alloc::vec::Vec<Enpcbhhgegj>,
    #[prost(bool, tag = "11")]
    pub fcnknboicoh: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub joibikheooh: ::prost::alloc::vec::Vec<u32>,
}
/// IAIODMJEMOD (7112)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildQueryInfoCsReq {}
/// BAEHAEOFPDF (7150)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildQueryInfoScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub rogue_current_info: ::core::option::Option<Odabnndoige>,
    #[prost(message, optional, tag = "15")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
}
/// CBAMOEOLLED (7130)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartLevelCsReq {
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(message, optional, tag = "12")]
    pub cieghnpgpgi: ::core::option::Option<Dhoochkmpbp>,
    #[prost(uint32, tag = "9")]
    pub level_id: u32,
}
/// LGDAJLHJCKK (7123)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartLevelScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub fdkkjodddlf: ::core::option::Option<SceneBattleInfo>,
    #[prost(message, optional, tag = "15")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
}
/// AMAICBBJNFB (7115)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartStageCsReq {
    #[prost(uint32, tag = "9")]
    pub level_id: u32,
}
/// BBABIJNGGOD (7149)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartStageScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub fdkkjodddlf: ::core::option::Option<SceneBattleInfo>,
    #[prost(message, optional, tag = "12")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
}
/// EHKPFBGAMEH (7109)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildGiveupCsReq {}
/// ACKIFJDOPKN (7143)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildGiveupScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
}
/// NMPBIHJNFLP (7147)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildLeaveCsReq {}
/// GFENNLHONCE (7146)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildLeaveScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
}
/// EvolveBuildFinishScNotify (7145)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildFinishScNotify {
    #[prost(uint32, tag = "14")]
    pub score: u32,
    #[prost(enumeration = "Ljgiadhjlhp", tag = "8")]
    pub battle_result_type: i32,
    #[prost(uint32, tag = "2")]
    pub coin: u32,
    #[prost(uint32, tag = "11")]
    pub cur_period_type: u32,
    #[prost(message, optional, tag = "7")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(bool, tag = "12")]
    pub is_lose: bool,
    #[prost(uint32, tag = "4")]
    pub exp: u32,
    #[prost(uint32, tag = "1")]
    pub level_id: u32,
    #[prost(uint32, tag = "6")]
    pub wave: u32,
}
/// HEANGCFNDFL (7128)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildReRandomStageCsReq {
    #[prost(uint32, tag = "9")]
    pub level_id: u32,
}
/// GPPGHLDNKIN (7110)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildReRandomStageScRsp {
    #[prost(message, optional, tag = "14")]
    pub hepbeglclbp: ::core::option::Option<Gcndmgbjhpn>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// JOJDKKAECFJ (7117)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityUpCsReq {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub dhdkhmfcjma: u32,
}
/// BDIOKBBLDFB (7104)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityUpScRsp {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub dhdkhmfcjma: u32,
}
/// ACELGIAKFBB (7140)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityDownCsReq {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub dhdkhmfcjma: u32,
}
/// ILJAPCDBHLG (7111)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityDownScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub dhdkhmfcjma: u32,
}
/// DKFLLOCCFLL (7106)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildTakeExpRewardCsReq {}
/// HOGJAEFBOFP (7135)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildTakeExpRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub cbfncmiaonh: u32,
}
/// MPPOHOCNMCH (7118)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityResetCsReq {}
/// DOLLPPDAOBF (7122)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityResetScRsp {
    #[prost(uint32, tag = "5")]
    pub item_value: u32,
    #[prost(message, repeated, tag = "8")]
    pub lahjfgaglem: ::prost::alloc::vec::Vec<Enpcbhhgegj>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// FEFPKDJDIAA (7114)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildCoinNotify {
    #[prost(uint32, tag = "15")]
    pub item_value: u32,
}
/// CMPJOMONDJJ (7142)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildUnlockInfoNotify {
    #[prost(bool, tag = "10")]
    pub fcnknboicoh: bool,
    #[prost(bool, tag = "8")]
    pub bohcemclfll: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpeditionInfo {
    #[prost(uint32, repeated, tag = "5")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub total_duration: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(int64, tag = "4")]
    pub start_expedition_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityExpedition {
    #[prost(uint32, tag = "11")]
    pub kjajhhlobhc: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "14")]
    pub start_expedition_time: i64,
    #[prost(uint32, tag = "10")]
    pub bdndenhpded: u32,
    #[prost(uint32, tag = "13")]
    pub ddchlmkamhb: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
/// PFFKOMBLLBJ (2536)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetExpeditionDataCsReq {}
/// NHAOEANLIHK (2595)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetExpeditionDataScRsp {
    #[prost(uint32, repeated, tag = "13")]
    pub opkhgkibjjh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1")]
    pub activity_expedition_info: ::prost::alloc::vec::Vec<ActivityExpedition>,
    #[prost(uint32, repeated, tag = "11")]
    pub cnekkkondbn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub expedition_info: ::prost::alloc::vec::Vec<ExpeditionInfo>,
    #[prost(uint32, repeated, tag = "15")]
    pub jbfnfgbpldb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub total_expedition_count: u32,
}
/// OMCBPJFAIEE (2584)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptExpeditionCsReq {
    #[prost(message, optional, tag = "12")]
    pub accept_expedition: ::core::option::Option<ExpeditionInfo>,
}
/// IFJBKOMEKIK (2527)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptExpeditionScRsp {
    #[prost(message, optional, tag = "3")]
    pub accept_expedition: ::core::option::Option<ExpeditionInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// FDNDGJPNBIL (2505)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptMultipleExpeditionCsReq {
    #[prost(message, repeated, tag = "14")]
    pub expedition: ::prost::alloc::vec::Vec<ExpeditionInfo>,
}
/// DPEAKDDPAHJ (2575)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptMultipleExpeditionScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub accept_multi_expedition: ::prost::alloc::vec::Vec<ExpeditionInfo>,
}
/// JBLOGGGLFEK (2567)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelExpeditionCsReq {
    #[prost(uint32, tag = "8")]
    pub expedition_id: u32,
}
/// CHPMLOKGOFI (2528)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelExpeditionScRsp {
    #[prost(uint32, tag = "6")]
    pub expedition_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// IKDJKNDLNJH (2552)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeExpeditionRewardCsReq {
    #[prost(uint32, tag = "11")]
    pub expedition_id: u32,
}
/// IGCGEOBCCAE (2574)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeExpeditionRewardScRsp {
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "12")]
    pub extra_reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub expedition_id: u32,
}
/// JHKNMNFPKDI (2519)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMultipleExpeditionRewardCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub take_multi_expedition: ::prost::alloc::vec::Vec<u32>,
}
/// MLFPJOENOJP (2526)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMultipleExpeditionRewardScRsp {
    #[prost(message, repeated, tag = "9")]
    pub jlgdcnhnkkb: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub extra_reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "5")]
    pub dkmcblihgkh: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, repeated, tag = "13")]
    pub reward_expedition: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// EBCALHPEOFC (2524)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpeditionDataChangeScNotify {
    #[prost(uint32, tag = "7")]
    pub total_expedition_count: u32,
    #[prost(message, repeated, tag = "10")]
    pub activity_expedition_info: ::prost::alloc::vec::Vec<ActivityExpedition>,
    #[prost(uint32, repeated, tag = "9")]
    pub jbfnfgbpldb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub opkhgkibjjh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "12")]
    pub expedition_info: ::prost::alloc::vec::Vec<ExpeditionInfo>,
}
/// MENFFJPPMPM (2593)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptActivityExpeditionCsReq {
    #[prost(message, optional, tag = "13")]
    pub kkjjnpcjjmb: ::core::option::Option<ActivityExpedition>,
}
/// MACEHJDJCEA (2534)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptActivityExpeditionScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub kkjjnpcjjmb: ::core::option::Option<ActivityExpedition>,
}
/// JNODIOPIDGD (2543)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelActivityExpeditionCsReq {
    #[prost(uint32, tag = "4")]
    pub jiegakieclj: u32,
}
/// IFONJILLACJ (2546)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelActivityExpeditionScRsp {
    #[prost(uint32, tag = "4")]
    pub jiegakieclj: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// FFAJMKFPFJA (2525)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeActivityExpeditionRewardCsReq {
    #[prost(uint32, tag = "11")]
    pub jiegakieclj: u32,
}
/// AAOKODGHNCK (2596)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeActivityExpeditionRewardScRsp {
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub jiegakieclj: u32,
    #[prost(message, optional, tag = "3")]
    pub extra_reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// PHKEPDAKLNL (2507)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMultipleActivityExpeditionRewardCsReq {
    #[prost(uint32, repeated, tag = "5")]
    pub jjnnkjhfakj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjicfeeejdk {
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub jiegakieclj: u32,
    #[prost(message, optional, tag = "15")]
    pub extra_reward: ::core::option::Option<ItemList>,
}
/// JEAIKCIFDPE (2553)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMultipleActivityExpeditionRewardScRsp {
    #[prost(message, repeated, tag = "12")]
    pub hcbflbjmgjj: ::prost::alloc::vec::Vec<Hjicfeeejdk>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chdbookcobe {
    #[prost(uint32, repeated, tag = "11")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<Olhljphenmo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecedilglgik {
    #[prost(uint32, repeated, tag = "12")]
    pub afpfienhgma: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub lomdpgjifab: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "uint32, uint32", tag = "3")]
    pub eipcjkbfpfl: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub ahfnoadpenj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub hemobibindg: u32,
    #[prost(map = "uint32, message", tag = "2")]
    pub kcdafhdlhoj: ::std::collections::HashMap<u32, Chdbookcobe>,
    #[prost(uint32, repeated, tag = "13")]
    pub fpnabdepphi: ::prost::alloc::vec::Vec<u32>,
}
/// EJNMNOIFDAO (4936)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFantasticStoryActivityDataCsReq {
    #[prost(uint32, tag = "9")]
    pub hemobibindg: u32,
}
/// FCFGIBEKEGJ (4995)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFantasticStoryActivityDataScRsp {
    #[prost(message, optional, tag = "4")]
    pub ljnodemaecd: ::core::option::Option<Ecedilglgik>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// FGEOBNDMGEM (4984)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishChapterScNotify {
    #[prost(message, optional, tag = "10")]
    pub ljnodemaecd: ::core::option::Option<Ecedilglgik>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Olhljphenmo {
    #[prost(enumeration = "AvatarType", tag = "5")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
/// JPOGEJCENLD (4927)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFantasticStoryActivityStageCsReq {
    #[prost(uint32, tag = "5")]
    pub battle_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<Olhljphenmo>,
    #[prost(uint32, tag = "8")]
    pub hemobibindg: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
/// PMDJHPAPNNG (4967)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFantasticStoryActivityStageScRsp {
    #[prost(uint32, tag = "7")]
    pub hemobibindg: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub battle_id: u32,
}
/// OGDMFBHJILK (4928)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FantasticStoryActivityBattleEndScNotify {
    #[prost(uint32, tag = "8")]
    pub hemobibindg: u32,
    #[prost(uint32, tag = "9")]
    pub battle_id: u32,
    #[prost(uint32, tag = "11")]
    pub cgmjpfnkccj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odmgnjfgmlp {
    #[prost(uint32, tag = "14")]
    pub fieadmgafnn: u32,
    #[prost(enumeration = "Khlnfkmnpgn", tag = "13")]
    pub opjidonmken: i32,
    #[prost(uint32, tag = "1")]
    pub nffdgoljohi: u32,
}
/// OHBCFPMFAGL (7158)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFeverTimeActivityDataCsReq {}
/// AKFNMHFLMEM (7151)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFeverTimeActivityDataScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub omlnmddlkkm: ::prost::alloc::vec::Vec<Odmgnjfgmlp>,
}
/// ODMNFBJPKBO (7153)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeverTimeActivityBattleEndScNotify {
    #[prost(uint32, tag = "8")]
    pub ehbclghnjgb: u32,
    #[prost(enumeration = "Khlnfkmnpgn", tag = "2")]
    pub oojpbkmhjac: i32,
    #[prost(uint32, tag = "4")]
    pub bfjaifdedbe: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
/// KBKMNOOPKOG (7159)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFeverTimeActivityStageCsReq {
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<FeverTimeAvatar>,
    #[prost(uint32, tag = "7")]
    pub nbhbdnajfmc: u32,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub gmfdhajcemh: u32,
}
/// PANKDAGMMGC (7160)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFeverTimeActivityStageScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// PCBHACGGLFH (30036)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEnterCsReq {
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(uint64, tag = "10")]
    pub jcohkliloki: u64,
    #[prost(uint32, tag = "12")]
    pub aodjndcpdid: u32,
    #[prost(uint32, tag = "4")]
    pub client_res_version: u32,
    #[prost(uint32, tag = "11")]
    pub nmlggombpok: u32,
    #[prost(uint32, tag = "6")]
    pub platform: u32,
    #[prost(uint32, tag = "1")]
    pub fclcccnbdlb: u32,
    #[prost(string, tag = "7")]
    pub lnfophgbmgb: ::prost::alloc::string::String,
}
/// HPHCNFGJJLA (30095)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightEnterScRsp {
    #[prost(bool, tag = "12")]
    pub goepmaljcmi: bool,
    #[prost(uint64, tag = "15")]
    pub server_timestamp_ms: u64,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint64, tag = "7")]
    pub secret_key_seed: u64,
    #[prost(uint32, tag = "4")]
    pub nmlggombpok: u32,
}
/// AICDONLEDKD (30084)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightLeaveScNotify {
    #[prost(uint32, tag = "9")]
    pub hgleadlijig: u32,
}
/// CPGAOCANJDH (30027)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightKickOutScNotify {
    #[prost(enumeration = "FightKickoutType", tag = "2")]
    pub kick_type: i32,
}
/// JNJHNBOHGGF (30067)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeartBeatCsReq {
    #[prost(uint64, tag = "13")]
    pub client_time_ms: u64,
}
/// DGKNFMIPLKG (30028)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeartBeatScRsp {
    #[prost(uint64, tag = "13")]
    pub client_time_ms: u64,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint64, tag = "14")]
    pub server_time_ms: u64,
}
/// OMHOPCOOFOM (30052)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightSessionStopScNotify {
    #[prost(message, optional, tag = "8")]
    pub kcpfmjcknln: ::core::option::Option<Gciboeobjjh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivityGroup {
    #[prost(uint32, tag = "13")]
    pub passed_max_difficulty_level: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub taken_difficulty_level_reward_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "4")]
    pub endless_max_wave: u32,
}
/// ALDLEMKEHHN (3636)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightActivityDataCsReq {}
/// CADGGLDLNCM (3695)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightActivityDataScRsp {
    #[prost(message, repeated, tag = "5")]
    pub ebkemiejmkm: ::prost::alloc::vec::Vec<FightActivityGroup>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub cplolhnjaho: bool,
    #[prost(map = "uint32, uint32", tag = "3")]
    pub khgbgllgbfe: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
}
/// JJDOLEBPCFE (3684)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivityDataChangeScNotify {
    #[prost(map = "uint32, uint32", tag = "13")]
    pub khgbgllgbfe: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "6")]
    pub ebkemiejmkm: ::prost::alloc::vec::Vec<FightActivityGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hgnkioalcbh {
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
}
/// BIFNJCLGAPN (3627)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFightActivityStageCsReq {
    #[prost(uint32, repeated, tag = "10")]
    pub item_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub ibafdobbegd: u32,
    #[prost(message, repeated, tag = "5")]
    pub lpdmjmcockk: ::prost::alloc::vec::Vec<Hgnkioalcbh>,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
/// DCNPKGHMECF (3667)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFightActivityStageScRsp {
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub ibafdobbegd: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
/// DNBLJEGDGBA (3628)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeFightActivityRewardCsReq {
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub ibafdobbegd: u32,
}
/// KIFHBDGECED (3652)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeFightActivityRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub ibafdobbegd: u32,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfemdepjefi {
    #[prost(enumeration = "Ljcpebpibfl", tag = "10")]
    pub opjidonmken: i32,
    #[prost(uint32, tag = "2")]
    pub nffdgoljohi: u32,
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "11")]
    pub gnamjnppnfd: u32,
}
/// OPCKDFDOFLM (7262)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFightFestDataCsReq {}
/// PEAFPKEPABO (7300)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFightFestDataScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub bjamhdaaeha: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub item_value: u32,
    #[prost(message, repeated, tag = "3")]
    pub challenge_list: ::prost::alloc::vec::Vec<Dfemdepjefi>,
    #[prost(uint32, tag = "14")]
    pub score_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Japoebkhhdl {
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "13")]
    pub id: u32,
}
/// MAEDGOBLCAF (7280)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartFightFestCsReq {
    #[prost(enumeration = "Nodacjnflib", tag = "8")]
    pub r#type: i32,
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub bjamhdaaeha: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<Japoebkhhdl>,
    #[prost(uint32, tag = "15")]
    pub id: u32,
}
/// LPMBKBOBAKB (7273)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartFightFestScRsp {
    #[prost(message, optional, tag = "11")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
    #[prost(enumeration = "Nodacjnflib", tag = "7")]
    pub r#type: i32,
    #[prost(uint32, tag = "12")]
    pub id: u32,
}
/// NKHCGHLADOF (7265)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightFestScoreUpdateNotify {
    #[prost(uint32, tag = "12")]
    pub score_id: u32,
    #[prost(uint32, tag = "13")]
    pub ddbidgekhfk: u32,
}
/// KCGBCIKCFBH (7299)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightFestUnlockSkillNotify {
    #[prost(uint32, tag = "2")]
    pub jkccniodmga: u32,
}
/// ONOGPNDIDPI (7259)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightFestUpdateChallengeRecordNotify {
    #[prost(uint32, tag = "9")]
    pub nffdgoljohi: u32,
    #[prost(enumeration = "Ljcpebpibfl", tag = "13")]
    pub rank: i32,
    #[prost(enumeration = "Ljcpebpibfl", tag = "2")]
    pub jdfnljflmfj: i32,
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "4")]
    pub bfjaifdedbe: u32,
}
/// AJMAGHCAKBL (7293)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightFestUpdateCoinNotify {
    #[prost(uint32, tag = "15")]
    pub item_value: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfndbkogaac {
    #[prost(uint32, tag = "3")]
    pub hp: u32,
    #[prost(uint32, tag = "2")]
    pub jfapdndchjc: u32,
    #[prost(uint32, tag = "4")]
    pub fokmjkdgeme: u32,
    #[prost(uint32, tag = "10")]
    pub score_id: u32,
    #[prost(uint32, tag = "9")]
    pub rank: u32,
    #[prost(enumeration = "Ckmjgcgaeei", tag = "8")]
    pub state: i32,
    #[prost(bool, tag = "12")]
    pub kbaeiekokng: bool,
    #[prost(uint32, tag = "13")]
    pub bcbjkkaojhl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkjacobacdl {
    #[prost(message, repeated, tag = "3")]
    pub aahlhaglanp: ::prost::alloc::vec::Vec<Jfndbkogaac>,
    #[prost(enumeration = "Oboichhnoaa", tag = "5")]
    pub egppeoiopbh: i32,
    #[prost(uint32, tag = "7")]
    pub dbcemiifomi: u32,
    #[prost(uint64, tag = "13")]
    pub ohjndokponf: u64,
    #[prost(uint32, repeated, tag = "11")]
    pub faadiigpged: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub iohaooialbo: ::core::option::Option<Aboifbhjjjh>,
    #[prost(int32, tag = "2")]
    pub migjlajogil: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcokpnbkacp {
    #[prost(uint32, tag = "9")]
    pub bieencfaaam: u32,
    #[prost(uint32, tag = "6")]
    pub emhfkcicpbo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aboifbhjjjh {
    #[prost(uint32, repeated, tag = "4")]
    pub dilimncaeko: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub bnpfgbeclde: ::core::option::Option<Cokmefolddh>,
    #[prost(uint32, tag = "10")]
    pub kbmflpnpkoj: u32,
    #[prost(uint32, tag = "11")]
    pub bnpdieghdmo: u32,
    #[prost(uint32, tag = "9")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "1")]
    pub cpegehhhiai: u32,
    #[prost(uint32, tag = "3")]
    pub npohcfojamh: u32,
    #[prost(uint32, tag = "7")]
    pub fjgjpjnnehj: u32,
    #[prost(uint32, tag = "13")]
    pub score_id: u32,
    #[prost(uint32, tag = "14")]
    pub nfllmhoeiip: u32,
    #[prost(enumeration = "Ckmjgcgaeei", tag = "8")]
    pub bfmibfpfpmg: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kajagmgiebg {
    #[prost(message, optional, tag = "5")]
    pub cilceklcdib: ::core::option::Option<Aboifbhjjjh>,
    #[prost(enumeration = "Gmbhheielfc", tag = "11")]
    pub gahceokfdlm: i32,
}
/// DEKJMDLMKNA (30136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightMatch3DataCsReq {
    #[prost(int32, tag = "6")]
    pub bjinfjnfonl: i32,
}
/// BPKDEADIJMM (30195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3DataScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub data: ::core::option::Option<Hkjacobacdl>,
    #[prost(message, repeated, tag = "1")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
}
/// PDNFCALCFAI (30184)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3StartCountDownScNotify {
    #[prost(message, optional, tag = "6")]
    pub data: ::core::option::Option<Hkjacobacdl>,
}
/// COCNDPFFNIG (30127)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3TurnStartScNotify {
    #[prost(message, optional, tag = "5")]
    pub ldpomnnkhfn: ::core::option::Option<Hkjacobacdl>,
}
/// PEOCOJMKOGH (30167)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3TurnEndScNotify {
    #[prost(message, optional, tag = "8")]
    pub lfmiodiklle: ::core::option::Option<Hkjacobacdl>,
    #[prost(message, optional, tag = "6")]
    pub bniigbgpbfd: ::core::option::Option<Hkjacobacdl>,
}
/// KHMEMPPJCFP (30128)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3SwapCsReq {
    #[prost(message, repeated, tag = "10")]
    pub ciidepdhnda: ::prost::alloc::vec::Vec<Kajagmgiebg>,
    #[prost(message, optional, tag = "12")]
    pub ffemncnhifp: ::core::option::Option<Hcokpnbkacp>,
    #[prost(message, optional, tag = "9")]
    pub cdbkaigobnc: ::core::option::Option<Hcokpnbkacp>,
    #[prost(uint32, tag = "6")]
    pub lhflcfnaopb: u32,
}
/// GMMJOJIHKHA (30152)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3SwapScRsp {
    #[prost(bool, tag = "6")]
    pub gjhbhnbpkmg: bool,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub idkjpdgjcdk: ::core::option::Option<Aboifbhjjjh>,
    #[prost(uint32, tag = "9")]
    pub lhflcfnaopb: u32,
}
/// KKDNJKBOGDB (30174)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightMatch3OpponentDataScNotify {
    #[prost(enumeration = "Ckmjgcgaeei", tag = "1")]
    pub state: i32,
    #[prost(uint32, tag = "3")]
    pub score_id: u32,
    #[prost(uint32, tag = "2")]
    pub hp: u32,
    #[prost(uint32, tag = "4")]
    pub dbcemiifomi: u32,
    #[prost(uint32, tag = "8")]
    pub bcbjkkaojhl: u32,
}
/// HLMLHBIOIKJ (30124)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightMatch3ChatCsReq {
    #[prost(uint32, tag = "8")]
    pub neokoljpkkp: u32,
}
/// GPLCIPMFMMK (30193)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightMatch3ChatScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub neokoljpkkp: u32,
}
/// EOONNCMOHHB (30134)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightMatch3ChatScNotify {
    #[prost(uint32, tag = "13")]
    pub neokoljpkkp: u32,
    #[prost(uint32, tag = "1")]
    pub mecopjahcdn: u32,
}
/// MBNCCCCPHIH (30143)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightMatch3ForceUpdateNotify {
    #[prost(message, optional, tag = "15")]
    pub data: ::core::option::Option<Hkjacobacdl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AssistSimpleInfo {
    #[prost(uint32, tag = "14")]
    pub pos: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub dressed_skin_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lainaiklkcb {
    #[prost(uint32, tag = "7")]
    pub eecemipjjgh: u32,
    #[prost(uint32, tag = "1")]
    pub dkjbdcjjjeh: u32,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(uint32, tag = "12")]
    pub ppjgpminmhj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngklikhiopb {
    #[prost(uint32, tag = "9")]
    pub hepkmkajngb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijppjabalil {
    #[prost(uint32, repeated, tag = "12")]
    pub kbbjbmfgfmj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub hepkmkajngb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpodnodipii {
    #[prost(message, optional, tag = "14")]
    pub imkpcliboke: ::core::option::Option<Ijppjabalil>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmfpbbgnlio {
    #[prost(oneof = "lmfpbbgnlio::Ajbmbgjmcld", tags = "11, 8")]
    pub ajbmbgjmcld: ::core::option::Option<lmfpbbgnlio::Ajbmbgjmcld>,
}
/// Nested message and enum types in `LMFPBBGNLIO`.
pub mod lmfpbbgnlio {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ajbmbgjmcld {
        #[prost(message, tag = "11")]
        Ollodgfkoco(super::Ngklikhiopb),
        #[prost(message, tag = "8")]
        Ngekgdbhalb(super::Kpodnodipii),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apoibbglipm {
    #[prost(enumeration = "BattleRecordType", tag = "13")]
    pub knpgfikpmfc: i32,
    #[prost(message, optional, tag = "10")]
    pub kjplakmkjmn: ::core::option::Option<Lmfpbbgnlio>,
    #[prost(message, optional, tag = "11")]
    pub ljnbdjhehaj: ::core::option::Option<Lainaiklkcb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerSimpleInfo {
    #[prost(int64, tag = "1")]
    pub last_active_time: i64,
    #[prost(string, tag = "12")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "15")]
    pub aeohjingifk: ::prost::alloc::string::String,
    #[prost(enumeration = "PlatformType", tag = "13")]
    pub platform: i32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(bool, tag = "5")]
    pub is_banned: bool,
    #[prost(uint32, tag = "14")]
    pub chat_bubble_id: u32,
    #[prost(string, tag = "8")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub pdciladmjij: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "7")]
    pub assist_simple_info_list: ::prost::alloc::vec::Vec<AssistSimpleInfo>,
    #[prost(uint32, tag = "11")]
    pub head_icon: u32,
    #[prost(enumeration = "FriendOnlineStatus", tag = "2")]
    pub online_status: i32,
    #[prost(uint32, tag = "10")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayEquipmentInfo {
    #[prost(uint32, tag = "14")]
    pub promotion: u32,
    #[prost(uint32, tag = "2")]
    pub tid: u32,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "12")]
    pub rank: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayRelicInfo {
    #[prost(uint32, tag = "6")]
    pub main_affix_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "13")]
    pub exp: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub r#type: u32,
    #[prost(uint32, tag = "15")]
    pub tid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarDetailInfo {
    #[prost(uint32, tag = "15")]
    pub rank: u32,
    #[prost(uint32, tag = "12")]
    pub pos: u32,
    #[prost(message, repeated, tag = "1")]
    pub relic_list: ::prost::alloc::vec::Vec<DisplayRelicInfo>,
    #[prost(uint32, tag = "6")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "9")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "8")]
    pub exp: u32,
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(message, optional, tag = "13")]
    pub equipment: ::core::option::Option<DisplayEquipmentInfo>,
    #[prost(uint32, tag = "10")]
    pub dressed_skin_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerCollectionInfo {
    #[prost(uint32, tag = "3")]
    pub eafceffhdph: u32,
    #[prost(uint32, tag = "6")]
    pub okcenobmljp: u32,
    #[prost(uint32, tag = "7")]
    pub ohegabmbomi: u32,
    #[prost(uint32, tag = "13")]
    pub dlcfellanek: u32,
    #[prost(uint32, tag = "5")]
    pub aekgeclgfjl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerRecordInfo {
    #[prost(uint32, tag = "3")]
    pub jgkijcjpfaa: u32,
    #[prost(message, optional, tag = "5")]
    pub collection_info: ::core::option::Option<PlayerCollectionInfo>,
    #[prost(uint32, tag = "13")]
    pub mndjlcmgmhj: u32,
    #[prost(uint32, tag = "10")]
    pub abhgdmemfma: u32,
    #[prost(uint32, tag = "8")]
    pub eekfjoldhlk: u32,
    #[prost(uint32, tag = "15")]
    pub cpbbnjnmnhg: u32,
    #[prost(uint32, tag = "7")]
    pub banbdlipjfp: u32,
    #[prost(uint32, tag = "14")]
    pub ebpdgificnh: u32,
    #[prost(uint32, tag = "4")]
    pub aodkpopjeaf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PrivacySettings {
    #[prost(bool, tag = "10")]
    pub kmcckimhbbj: bool,
    #[prost(bool, tag = "8")]
    pub khkaapacgjf: bool,
    #[prost(bool, tag = "11")]
    pub kkhhcopengm: bool,
    #[prost(bool, tag = "6")]
    pub kmacdmafffn: bool,
    #[prost(bool, tag = "12")]
    pub oigipmeoekb: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerDisplaySettings {
    #[prost(message, repeated, tag = "5")]
    pub challenge_list: ::prost::alloc::vec::Vec<Lainaiklkcb>,
    #[prost(message, optional, tag = "7")]
    pub kjplakmkjmn: ::core::option::Option<Lmfpbbgnlio>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerDetailInfo {
    #[prost(uint32, tag = "8")]
    pub oapjdhglpno: u32,
    #[prost(message, repeated, tag = "12")]
    pub ljfffilhfac: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(message, optional, tag = "614")]
    pub mdgodkokbkk: ::core::option::Option<PrivacySettings>,
    #[prost(string, tag = "1")]
    pub signature: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub world_level: u32,
    #[prost(message, optional, tag = "273")]
    pub kdpkmjokgeb: ::core::option::Option<PlayerDisplaySettings>,
    #[prost(uint32, tag = "5")]
    pub head_icon: u32,
    #[prost(string, tag = "2")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub jlnoeglajaa: bool,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(message, repeated, tag = "1594")]
    pub pgdmkcocjgj: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(message, optional, tag = "15")]
    pub nmbommjjmmb: ::core::option::Option<PlayerRecordInfo>,
    #[prost(enumeration = "PlatformType", tag = "9")]
    pub platform: i32,
    #[prost(string, tag = "13")]
    pub pdciladmjij: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub aeohjingifk: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub is_banned: bool,
    #[prost(uint32, tag = "6")]
    pub djaejinckfm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendInfo {
    #[prost(message, optional, tag = "5")]
    pub nlahmobfpib: ::core::option::Option<Apoibbglipm>,
    #[prost(enumeration = "PlayingState", tag = "15")]
    pub playing_state: i32,
    #[prost(bool, tag = "2")]
    pub is_marked: bool,
    #[prost(message, optional, tag = "10")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(int64, tag = "11")]
    pub create_time: i64,
    #[prost(string, tag = "12")]
    pub remark_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendApplyInfo {
    #[prost(message, optional, tag = "7")]
    pub player_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(int64, tag = "4")]
    pub apply_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendRecommendInfo {
    #[prost(message, optional, tag = "15")]
    pub player_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(bool, tag = "9")]
    pub icgmfoodeii: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerAssistInfo {
    #[prost(message, optional, tag = "14")]
    pub player_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(message, optional, tag = "9")]
    pub assist_avatar: ::core::option::Option<DisplayAvatarDetailInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bokgbggohnm {
    #[prost(uint32, tag = "11")]
    pub nfpkmonkkih: u32,
    #[prost(string, tag = "2")]
    pub aeohjingifk: ::prost::alloc::string::String,
    #[prost(enumeration = "PlatformType", tag = "3")]
    pub platform: i32,
    #[prost(uint32, tag = "14")]
    pub head_icon: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(string, tag = "6")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghhlfkbchpc {
    #[prost(message, optional, tag = "14")]
    pub player_info: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(message, repeated, tag = "8")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineupList>,
    #[prost(uint32, tag = "12")]
    pub buff_two: u32,
    #[prost(uint32, tag = "13")]
    pub score_id: u32,
    #[prost(uint32, tag = "7")]
    pub njldipkclbp: u32,
    #[prost(string, tag = "15")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub buff_one: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmcbmmdgnpi {
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub dkjbdcjjjeh: u32,
    #[prost(oneof = "nmcbmmdgnpi::ChallengeSttCase", tags = "1408, 1373, 360")]
    pub challenge_stt_case: ::core::option::Option<nmcbmmdgnpi::ChallengeSttCase>,
}
/// Nested message and enum types in `NMCBMMDGNPI`.
pub mod nmcbmmdgnpi {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeSttCase {
        #[prost(message, tag = "1408")]
        ChallengeDefault(super::ChallengeStatistics),
        #[prost(message, tag = "1373")]
        ChallengeStory(super::ChallengeStoryStatistics),
        #[prost(message, tag = "360")]
        ChallengeBoss(super::ChallengeBossStatistics),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffookabhhff {
    #[prost(uint32, tag = "12")]
    pub map_id: u32,
    #[prost(message, optional, tag = "4")]
    pub rogue_finish_info: ::core::option::Option<RogueFinishInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebfjcbgdcfl {
    #[prost(message, optional, tag = "4")]
    pub inppfdjhejn: ::core::option::Option<Ionnolihaag>,
    #[prost(uint32, tag = "12")]
    pub pfkhhkimnbp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlhhehmbhfd {
    #[prost(uint32, tag = "6")]
    pub obfaaccnoai: u32,
    #[prost(uint32, tag = "2")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "3")]
    pub ejoicbniabc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fobddflbebp {
    #[prost(uint32, tag = "10")]
    pub chlhninnchp: u32,
    #[prost(uint32, tag = "4")]
    pub locnkonomhm: u32,
    #[prost(uint32, tag = "1")]
    pub fijfhmngkao: u32,
    #[prost(uint32, tag = "3")]
    pub kjkpmffamfk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kiigoogkagc {
    #[prost(uint32, tag = "12")]
    pub ebkgcmaoehl: u32,
    #[prost(uint32, tag = "4")]
    pub faolilobhjn: u32,
    #[prost(uint32, tag = "9")]
    pub ciicghhllbb: u32,
    #[prost(uint32, tag = "2")]
    pub kjkpmffamfk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agcpkkeonoo {
    #[prost(message, optional, tag = "3")]
    pub jnilgibncao: ::core::option::Option<Kiigoogkagc>,
    #[prost(message, optional, tag = "7")]
    pub egohgfdmfbf: ::core::option::Option<Fobddflbebp>,
    #[prost(message, optional, tag = "4")]
    pub clmnpbblekl: ::core::option::Option<Mlhhehmbhfd>,
    #[prost(oneof = "agcpkkeonoo::Hmanchjjdik", tags = "1221, 1682")]
    pub hmanchjjdik: ::core::option::Option<agcpkkeonoo::Hmanchjjdik>,
}
/// Nested message and enum types in `AGCPKKEONOO`.
pub mod agcpkkeonoo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Hmanchjjdik {
        #[prost(message, tag = "1221")]
        Bnckkfjmgai(super::Ffookabhhff),
        #[prost(message, tag = "1682")]
        Mobpgidpgag(super::Ebfjcbgdcfl),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pamilfcbmon {
    #[prost(uint32, tag = "9")]
    pub kjkpmffamfk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfekfeglcko {
    #[prost(uint32, tag = "8")]
    pub odenkailked: u32,
    #[prost(uint32, tag = "3")]
    pub kjkpmffamfk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agffnjmnnig {
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhbedkjmned {
    #[prost(enumeration = "DevelopmentType", tag = "7")]
    pub ceakhdfaclk: i32,
    #[prost(int64, tag = "4")]
    pub time: i64,
    #[prost(
        oneof = "bhbedkjmned::Egpbhejbepn",
        tags = "1358, 1581, 1915, 206, 228, 1174, 953"
    )]
    pub egpbhejbepn: ::core::option::Option<bhbedkjmned::Egpbhejbepn>,
}
/// Nested message and enum types in `BHBEDKJMNED`.
pub mod bhbedkjmned {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Egpbhejbepn {
        #[prost(message, tag = "1358")]
        Eigkbdfeibf(super::Pamilfcbmon),
        #[prost(message, tag = "1581")]
        Gkcpjlhfadi(super::Agffnjmnnig),
        #[prost(uint32, tag = "1915")]
        AvatarId(u32),
        #[prost(uint32, tag = "206")]
        Gcomeogcken(u32),
        #[prost(uint32, tag = "228")]
        Kcjajdgnpgb(u32),
        #[prost(message, tag = "1174")]
        Oiggbfalbla(super::Dfekfeglcko),
        #[prost(uint32, tag = "953")]
        PanelId(u32),
    }
}
/// IGHJDDKFIOO (2936)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoCsReq {}
/// PEBDAPGHFFP (2995)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub black_list: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
    #[prost(message, repeated, tag = "13")]
    pub friend_info_list: ::prost::alloc::vec::Vec<FriendInfo>,
}
/// AEJMDKIJIHF (2984)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerDetailInfoCsReq {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
/// LJFPIKEDMCC (2927)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerDetailInfoScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub detail_info: ::core::option::Option<PlayerDetailInfo>,
}
/// LFCNOPGEPJD (2967)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendApplyListInfoCsReq {}
/// OLPAEFDPDIP (2928)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendApplyListInfoScRsp {
    #[prost(uint32, repeated, tag = "4")]
    pub send_apply_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub receive_apply_list: ::prost::alloc::vec::Vec<FriendApplyInfo>,
}
/// PDGOBAHBLHI (2952)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApplyFriendCsReq {
    #[prost(enumeration = "FriendApplySource", tag = "5")]
    pub source: i32,
    #[prost(uint32, tag = "15")]
    pub uid: u32,
}
/// GBFKOAMHKDE (2974)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApplyFriendScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
/// OACPMCLEPBF (2924)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncApplyFriendScNotify {
    #[prost(message, optional, tag = "9")]
    pub apply_info: ::core::option::Option<FriendApplyInfo>,
}
/// IINBBNLOPJN (2993)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandleFriendCsReq {
    #[prost(bool, tag = "10")]
    pub is_accept: bool,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
/// IKKDADEDECD (2934)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleFriendScRsp {
    #[prost(message, optional, tag = "14")]
    pub friend_info: ::core::option::Option<FriendInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(bool, tag = "3")]
    pub is_accept: bool,
}
/// PLACPLPCPFI (2943)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncHandleFriendScNotify {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(message, optional, tag = "13")]
    pub friend_info: ::core::option::Option<FriendInfo>,
    #[prost(bool, tag = "8")]
    pub is_accept: bool,
}
/// LJICHHELNOI (2946)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteFriendCsReq {
    #[prost(uint32, tag = "7")]
    pub icgghnnhbec: u32,
    #[prost(uint32, tag = "12")]
    pub uid: u32,
}
/// FCNPAKLAPBF (2925)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteFriendScRsp {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// KOFFFNFOCKG (2996)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncDeleteFriendScNotify {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
}
/// ICNAAMLBBIL (2905)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddBlacklistCsReq {
    #[prost(uint32, tag = "2")]
    pub uid: u32,
}
/// GGBGBBPAKOI (2975)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddBlacklistScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub black_info: ::core::option::Option<PlayerSimpleInfo>,
}
/// CKJPCLCPJCF (2919)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncAddBlacklistScNotify {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
}
/// PLCDPNEDPPN (2926)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendRecommendListInfoCsReq {
    #[prost(bool, tag = "2")]
    pub ncchmlnhndi: bool,
}
/// DCGNGCJMEPK (2907)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendRecommendListInfoScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub player_info_list: ::prost::alloc::vec::Vec<FriendRecommendInfo>,
}
/// HJKODAOEBNH (2953)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFriendRemarkNameCsReq {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(uint32, tag = "3")]
    pub reason: u32,
    #[prost(string, tag = "6")]
    pub remark_name: ::prost::alloc::string::String,
}
/// FAJLOFIDMOO (2990)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFriendRemarkNameScRsp {
    #[prost(string, tag = "15")]
    pub remark_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
/// CLICFNKBHFE (2959)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportPlayerCsReq {
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(uint32, tag = "4")]
    pub nkdaefbkhbi: u32,
    #[prost(string, tag = "15")]
    pub kleonnfgbpm: ::prost::alloc::string::String,
}
/// HLNABDKJFIG (2912)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReportPlayerScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// MMAPBMNOFAI (2978)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteBlacklistCsReq {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
/// OLJHABGMMON (2929)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteBlacklistScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub uid: u32,
}
/// PGPDFKOLBJJ (2950)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPlayerCsReq {
    #[prost(bool, tag = "12")]
    pub ncchmlnhndi: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub uid_list: ::prost::alloc::vec::Vec<u32>,
}
/// AKEODLPIKJL (2948)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPlayerScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub simple_info_list: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
    #[prost(uint32, repeated, tag = "10")]
    pub result_uid_list: ::prost::alloc::vec::Vec<u32>,
}
/// JDBAHOGNAGF (2988)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAssistListCsReq {
    #[prost(bool, tag = "13")]
    pub lbhbknimfpn: bool,
    #[prost(bool, tag = "2")]
    pub ncchmlnhndi: bool,
}
/// NPJDMBNLIBG (2958)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAssistListScRsp {
    #[prost(message, repeated, tag = "2")]
    pub assist_list: ::prost::alloc::vec::Vec<PlayerAssistInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// OOPBOHBMALM (2910)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAssistCsReq {
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
/// ABKEAFIKBHA (2976)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAssistScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub uid: u32,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
/// HGICDKGPBCO (2935)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurAssistCsReq {}
/// EFCANOOKANM (2973)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurAssistScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub assist_info: ::core::option::Option<PlayerAssistInfo>,
}
/// HFPEFKFMGCE (2917)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAssistHistoryCsReq {}
/// CJAKIKCLIOO (2913)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAssistHistoryScRsp {
    #[prost(uint32, repeated, tag = "14")]
    pub today_use_uid_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub ifclfpgcked: u32,
    #[prost(uint32, tag = "3")]
    pub meghkdmaoeb: u32,
    #[prost(uint32, tag = "12")]
    pub kefkaopkjbn: u32,
}
/// OFGIHLJEJPC (2921)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NewAssistHistoryNotify {
    #[prost(uint32, tag = "8")]
    pub ifclfpgcked: u32,
}
/// ODHEGKNGCGM (2965)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeAssistRewardCsReq {}
/// DFNOFIPNOGJ (2908)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAssistRewardScRsp {
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "6")]
    pub obkjpniigpk: ::prost::alloc::vec::Vec<Bokgbggohnm>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// ACJGKIOEBCI (2918)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurAssistChangedNotify {
    #[prost(message, optional, tag = "6")]
    pub assist_info: ::core::option::Option<PlayerAssistInfo>,
}
/// PBMMHBPPGFJ (2937)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlatformPlayerInfoCsReq {
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform: i32,
    #[prost(string, repeated, tag = "7")]
    pub ndbcddkknfc: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// BEEGGKENDBJ (2911)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlatformPlayerInfoScRsp {
    #[prost(message, repeated, tag = "1")]
    pub player_info_list: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// FNCEMGKCPIM (2979)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendLoginInfoCsReq {}
/// KNNBINNNILF (2981)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendLoginInfoScRsp {
    #[prost(uint32, repeated, tag = "7")]
    pub bdmljjdidbo: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub ocbkebjgcnh: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub jbcncfacpoc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(bool, tag = "15")]
    pub diapipdfind: bool,
}
/// KDMNGANCAIL (2939)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetForbidOtherApplyFriendCsReq {
    #[prost(bool, tag = "3")]
    pub cnimhjpfadc: bool,
}
/// KDBCMOMGEHN (2955)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetForbidOtherApplyFriendScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(bool, tag = "7")]
    pub cnimhjpfadc: bool,
}
/// BKMKPGFHEFE (2922)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetFriendMarkCsReq {
    #[prost(uint32, tag = "14")]
    pub reason: u32,
    #[prost(bool, tag = "1")]
    pub gajokfhigfe: bool,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
/// PBPNGEODAHB (3000)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetFriendMarkScRsp {
    #[prost(uint32, tag = "5")]
    pub uid: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(bool, tag = "3")]
    pub gajokfhigfe: bool,
}
/// MBPLLNGNLFF (2941)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendAssistListCsReq {
    #[prost(uint32, tag = "3")]
    pub target_side: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub nlnbnhpbjcn: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "AssistAvatarType", tag = "6")]
    pub nmiopghifje: i32,
    #[prost(uint32, repeated, tag = "2")]
    pub belkboophim: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub ncchmlnhndi: bool,
}
/// GEDPGEMCJMN (2994)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendAssistListScRsp {
    #[prost(message, repeated, tag = "7")]
    pub assist_list: ::prost::alloc::vec::Vec<PlayerAssistInfo>,
    #[prost(uint32, tag = "6")]
    pub target_side: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// KLPEJACAFEA (2992)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeLineupCsReq {
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
}
/// CDPGGMFLDHK (2960)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeLineupScRsp {
    #[prost(bool, tag = "9")]
    pub pbojodgepng: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub hobeflekpfg: ::prost::alloc::vec::Vec<Ghhlfkbchpc>,
}
/// IELGMGBBFBH (2945)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeDetailCsReq {
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
/// EBCLLOKBBGA (2964)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeDetailScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub meajllaofam: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(uint32, tag = "15")]
    pub challenge_id: u32,
}
/// DCLCDMNOCEK (2972)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendBattleRecordDetailCsReq {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
}
/// KIOFJEHIKAP (2999)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendBattleRecordDetailScRsp {
    #[prost(message, repeated, tag = "1")]
    pub nhciagienbn: ::prost::alloc::vec::Vec<Nmcbmmdgnpi>,
    #[prost(message, optional, tag = "13")]
    pub mlkeoiableg: ::core::option::Option<Agcpkkeonoo>,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// EBODNKINPPC (2903)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendDevelopmentInfoCsReq {
    #[prost(uint32, tag = "15")]
    pub uid: u32,
}
/// LKDMHNABMLN (2940)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendDevelopmentInfoScRsp {
    #[prost(message, repeated, tag = "10")]
    pub emdgmamejkb: ::prost::alloc::vec::Vec<Bhbedkjmned>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
/// CNIBIGEBOLI (1936)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGachaInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GachaCeilingAvatar {
    #[prost(uint32, tag = "9")]
    pub repeated_cnt: u32,
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaCeiling {
    #[prost(bool, tag = "14")]
    pub is_claimed: bool,
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<GachaCeilingAvatar>,
    #[prost(uint32, tag = "11")]
    pub ceiling_num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaInfo {
    #[prost(uint32, tag = "14")]
    pub hjjmaaffiko: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub dcfkplenjaj: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "15")]
    pub end_time: i64,
    #[prost(int64, tag = "8")]
    pub begin_time: i64,
    #[prost(message, optional, tag = "11")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
    #[prost(uint32, tag = "1")]
    pub einkplbkapk: u32,
    #[prost(string, tag = "7")]
    pub fcicnlkhafc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub gacha_id: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub nclapmfcnmf: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "13")]
    pub cofmjadcbel: ::prost::alloc::string::String,
}
/// HENAADKJPHB (1995)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGachaInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub gacha_random: u32,
    #[prost(message, repeated, tag = "8")]
    pub gacha_info_list: ::prost::alloc::vec::Vec<GachaInfo>,
    #[prost(uint32, tag = "13")]
    pub ejoffjnomla: u32,
    #[prost(uint32, tag = "3")]
    pub ofdkdoidahb: u32,
    #[prost(uint32, tag = "5")]
    pub ndjagnbnbgi: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// BLPEGGAIHGO (1984)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoGachaCsReq {
    #[prost(uint32, tag = "6")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "11")]
    pub simulate_magic: u32,
    #[prost(uint32, tag = "8")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "7")]
    pub gacha_num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaItem {
    #[prost(message, optional, tag = "10")]
    pub gacha_item: ::core::option::Option<Item>,
    #[prost(message, optional, tag = "3")]
    pub transfer_item_list: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "15")]
    pub token_item: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "8")]
    pub is_new: bool,
}
/// AMLJPFJMDCI (1927)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoGachaScRsp {
    #[prost(uint32, tag = "12")]
    pub ofdkdoidahb: u32,
    #[prost(uint32, tag = "14")]
    pub hjjmaaffiko: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "5")]
    pub dncjdoodmlg: u32,
    #[prost(message, repeated, tag = "7")]
    pub gacha_item_list: ::prost::alloc::vec::Vec<GachaItem>,
    #[prost(uint32, tag = "1")]
    pub ceiling_num: u32,
    #[prost(uint32, tag = "8")]
    pub einkplbkapk: u32,
    #[prost(uint32, tag = "11")]
    pub gacha_num: u32,
}
/// JIBPCEBPOHB (1967)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGachaCeilingCsReq {
    #[prost(uint32, tag = "1")]
    pub gacha_type: u32,
}
/// OKHHELLHHPC (1928)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGachaCeilingScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
    #[prost(uint32, tag = "14")]
    pub gacha_type: u32,
}
/// JPOEJILEAEJ (1952)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeGachaCeilingCsReq {
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "13")]
    pub gacha_type: u32,
}
/// CFJNIICNOMF (1974)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeGachaCeilingScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub transfer_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub gacha_type: u32,
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
    #[prost(message, optional, tag = "5")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhgcojomgbn {
    #[prost(bool, tag = "3")]
    pub adlepllifgm: bool,
    #[prost(uint32, tag = "10")]
    pub lmjaeipjaom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jhmalogkgbl {
    #[prost(bool, tag = "3")]
    pub bjonnkpchcm: bool,
    #[prost(uint32, tag = "14")]
    pub script_id: u32,
    #[prost(enumeration = "Ikhdnpgokfg", tag = "4")]
    pub step: i32,
    #[prost(bool, tag = "10")]
    pub jdbllkcadan: bool,
    #[prost(enumeration = "Licpimfidgf", tag = "7")]
    pub lemijffklgi: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abmifmmdlmk {
    #[prost(uint32, tag = "4")]
    pub script_id: u32,
    #[prost(uint32, tag = "13")]
    pub idfamanemkc: u32,
}
/// JJHIPLAIPBF (6336)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetHeartDialInfoCsReq {}
/// JIGNNAOPKOL (6395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeartDialInfoScRsp {
    #[prost(message, repeated, tag = "13")]
    pub jfifoaecdfk: ::prost::alloc::vec::Vec<Jhmalogkgbl>,
    #[prost(enumeration = "Gnphjapojjm", tag = "2")]
    pub mlfgakmimin: i32,
    #[prost(message, repeated, tag = "1")]
    pub cnidmifkpcc: ::prost::alloc::vec::Vec<Hhgcojomgbn>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub hpkcjdejlgb: ::prost::alloc::vec::Vec<Abmifmmdlmk>,
}
/// KKOLNGFJJJH (6384)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeScriptEmotionCsReq {
    #[prost(uint32, tag = "7")]
    pub script_id: u32,
    #[prost(enumeration = "Licpimfidgf", tag = "14")]
    pub dangbnbclkj: i32,
    #[prost(uint32, tag = "5")]
    pub bkidmgpjnak: u32,
}
/// OBACMOAJEMI (6327)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeScriptEmotionScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(enumeration = "Licpimfidgf", tag = "9")]
    pub opkjacnhphf: i32,
    #[prost(uint32, tag = "6")]
    pub script_id: u32,
}
/// BHIPMDGOOHN (6367)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitEmotionItemCsReq {
    #[prost(uint32, tag = "14")]
    pub bkidmgpjnak: u32,
    #[prost(uint32, tag = "12")]
    pub script_id: u32,
    #[prost(message, optional, tag = "1")]
    pub item_list: ::core::option::Option<ItemList>,
}
/// GDLKJMJMPDK (6328)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitEmotionItemScRsp {
    #[prost(uint32, tag = "15")]
    pub script_id: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// MCCHFNLGMBA (6352)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishEmotionDialoguePerformanceCsReq {
    #[prost(uint32, tag = "4")]
    pub lmjaeipjaom: u32,
    #[prost(uint32, tag = "8")]
    pub bkidmgpjnak: u32,
    #[prost(uint32, tag = "5")]
    pub script_id: u32,
}
/// HHBGCKALNMN (6374)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishEmotionDialoguePerformanceScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub lmjaeipjaom: u32,
    #[prost(uint32, tag = "5")]
    pub script_id: u32,
}
/// OKCEBPMAKDP (6324)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartDialScriptChangeScNotify {
    #[prost(message, repeated, tag = "15")]
    pub paldnlfjjnh: ::prost::alloc::vec::Vec<Hhgcojomgbn>,
    #[prost(enumeration = "Gnphjapojjm", tag = "13")]
    pub mlfgakmimin: i32,
    #[prost(message, repeated, tag = "11")]
    pub hpkcjdejlgb: ::prost::alloc::vec::Vec<Abmifmmdlmk>,
    #[prost(message, repeated, tag = "10")]
    pub ghhdieehkdp: ::prost::alloc::vec::Vec<Jhmalogkgbl>,
}
/// AHHGLHFCPJN (6393)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartDialTraceScriptCsReq {
    #[prost(message, optional, tag = "7")]
    pub hdboajofegi: ::core::option::Option<Abmifmmdlmk>,
}
/// OCFHAKNGBIL (6334)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartDialTraceScriptScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub hdboajofegi: ::core::option::Option<Abmifmmdlmk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njonfdlnkcm {
    #[prost(uint32, tag = "8")]
    pub cckaekmoppp: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ckmcagllhfl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkdiaidlgpp {
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
    #[prost(bool, tag = "12")]
    pub bnmocbdnbdo: bool,
    #[prost(uint32, tag = "9")]
    pub star: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusChallengeLineup {
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// PGLDNIOEIEK (5836)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusActivityDataCsReq {}
/// HOPGDDLAFJE (5895)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusActivityDataScRsp {
    #[prost(message, repeated, tag = "14")]
    pub bklhfmkehpf: ::prost::alloc::vec::Vec<HeliobusChallengeLineup>,
    #[prost(message, repeated, tag = "2")]
    pub challenge_list: ::prost::alloc::vec::Vec<Nkdiaidlgpp>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub lmbpkeobmhk: u32,
    #[prost(uint32, tag = "6")]
    pub phase: u32,
    #[prost(uint32, tag = "10")]
    pub dhgipohdopm: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub kmioceodnom: u32,
    #[prost(message, optional, tag = "13")]
    pub skill_info: ::core::option::Option<Njonfdlnkcm>,
    #[prost(message, repeated, tag = "15")]
    pub mcpejldgggh: ::prost::alloc::vec::Vec<Fhhcifjocbp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhgihcamfde {
    #[prost(message, repeated, tag = "9")]
    pub anellobhdbk: ::prost::alloc::vec::Vec<Bhgihcamfde>,
    #[prost(uint32, tag = "10")]
    pub ldbkmpfbced: u32,
    #[prost(uint32, tag = "1")]
    pub falhenmllpb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhhcifjocbp {
    #[prost(bool, tag = "6")]
    pub aedohpbmjkh: bool,
    #[prost(uint32, tag = "14")]
    pub njalfepfddk: u32,
    #[prost(uint32, tag = "4")]
    pub efbpgpjbnef: u32,
    #[prost(uint32, tag = "13")]
    pub ojdpndcppgf: u32,
    #[prost(uint32, tag = "12")]
    pub lbpafkhbbbi: u32,
    #[prost(uint32, tag = "10")]
    pub pcfdhoheaoo: u32,
    #[prost(message, repeated, tag = "15")]
    pub ibikcimjgpl: ::prost::alloc::vec::Vec<Bhgihcamfde>,
    #[prost(bool, tag = "8")]
    pub djgbmgpbaao: bool,
}
/// DIOANANPJOL (5884)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSnsReadCsReq {
    #[prost(uint32, tag = "3")]
    pub ojdpndcppgf: u32,
}
/// KGKEOGGDDIM (5827)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSnsReadScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub ojdpndcppgf: u32,
}
/// OFENBNOPGKF (5867)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSnsPostCsReq {
    #[prost(uint32, tag = "12")]
    pub ojdpndcppgf: u32,
    #[prost(uint32, tag = "9")]
    pub njalfepfddk: u32,
    #[prost(uint32, tag = "10")]
    pub lbpafkhbbbi: u32,
}
/// PEFKFIDELGL (5828)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusSnsPostScRsp {
    #[prost(message, optional, tag = "5")]
    pub dfbmpijlofa: ::core::option::Option<Fhhcifjocbp>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// BMJBIPALBLE (5852)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSnsLikeCsReq {
    #[prost(uint32, tag = "2")]
    pub ojdpndcppgf: u32,
}
/// ALKBBFFCHMD (5874)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSnsLikeScRsp {
    #[prost(uint32, tag = "10")]
    pub ojdpndcppgf: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(bool, tag = "5")]
    pub djgbmgpbaao: bool,
}
/// HKOCLKLHIEF (5824)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSnsCommentCsReq {
    #[prost(uint32, tag = "1")]
    pub ojdpndcppgf: u32,
    #[prost(uint32, tag = "13")]
    pub ldbkmpfbced: u32,
    #[prost(uint32, tag = "11")]
    pub eokolobbjli: u32,
}
/// MFLDHADDKCI (5893)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusSnsCommentScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub dfbmpijlofa: ::core::option::Option<Fhhcifjocbp>,
}
/// OKEMNILJBCA (5834)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusSnsUpdateScNotify {
    #[prost(message, repeated, tag = "7")]
    pub bnjidmeannm: ::prost::alloc::vec::Vec<Fhhcifjocbp>,
}
/// FEMNFEBOLIM (5843)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusInfoChangedScNotify {
    #[prost(uint32, tag = "6")]
    pub kmioceodnom: u32,
    #[prost(uint32, tag = "9")]
    pub lmbpkeobmhk: u32,
    #[prost(message, repeated, tag = "3")]
    pub bnjidmeannm: ::prost::alloc::vec::Vec<Fhhcifjocbp>,
    #[prost(uint32, tag = "1")]
    pub phase: u32,
}
/// FAEGPKGLAKG (5846)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusUpgradeLevelCsReq {}
/// PNKPANCFKKM (5825)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusUpgradeLevelScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
/// DEGLNMKAPJE (5896)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusUnlockSkillScNotify {
    #[prost(uint32, tag = "14")]
    pub skill_id: u32,
    #[prost(uint32, tag = "4")]
    pub cckaekmoppp: u32,
}
/// FBBJJNLGNEO (5807)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusEnterBattleCsReq {
    #[prost(uint32, tag = "9")]
    pub event_id: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub skill_id: u32,
}
/// GDCPFGPAFJO (5853)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusEnterBattleScRsp {
    #[prost(message, optional, tag = "14")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// FNLEKANIPFP (5805)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSelectSkillCsReq {
    #[prost(uint32, tag = "14")]
    pub skill_id: u32,
}
/// GJPACLDPLPP (5875)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusSelectSkillScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub skill_id: u32,
}
/// KCFOFEFEPJI (5812)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeliobusChallengeUpdateScNotify {
    #[prost(message, optional, tag = "12")]
    pub challenge: ::core::option::Option<Nkdiaidlgpp>,
}
/// FJAMDAFCMIM (5878)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusLineupUpdateScNotify {
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<HeliobusChallengeLineup>,
}
/// BJPFIMKPGHH (5890)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusStartRaidCsReq {
    #[prost(bool, tag = "13")]
    pub is_save: bool,
    #[prost(uint32, tag = "2")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "6")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub skill_id: u32,
    #[prost(uint32, tag = "7")]
    pub akjkbekakcn: u32,
}
/// BJOLFGEBOOI (5859)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusStartRaidScRsp {
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<Chmbnfjjijn>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// PBDHGADHIBI (536)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBagCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Equipment {
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "6")]
    pub tid: u32,
    #[prost(uint32, tag = "4")]
    pub exp: u32,
    #[prost(uint32, tag = "2")]
    pub promotion: u32,
    #[prost(uint32, tag = "12")]
    pub rank: u32,
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(bool, tag = "3")]
    pub is_protected: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relic {
    #[prost(bool, tag = "10")]
    pub is_protected: bool,
    #[prost(message, repeated, tag = "9")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "7")]
    pub unique_id: u32,
    #[prost(message, repeated, tag = "15")]
    pub fnnglgifbbe: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(bool, tag = "6")]
    pub is_discarded: bool,
    #[prost(uint32, tag = "11")]
    pub exp: u32,
    #[prost(uint32, tag = "13")]
    pub tid: u32,
    #[prost(uint32, tag = "12")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "1")]
    pub equip_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Material {
    #[prost(uint64, tag = "7")]
    pub expire_time: u64,
    #[prost(uint32, tag = "14")]
    pub tid: u32,
    #[prost(uint32, tag = "6")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaitDelResource {
    #[prost(uint32, tag = "8")]
    pub num: u32,
    #[prost(uint32, tag = "3")]
    pub tid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Material0 {
    #[prost(uint64, tag = "9")]
    pub expire_time: u64,
    #[prost(uint32, tag = "14")]
    pub num: u32,
    #[prost(uint32, tag = "10")]
    pub tid: u32,
}
/// LLDLOPGPNKL (595)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBagScRsp {
    #[prost(message, repeated, tag = "14")]
    pub mdcccjhgfkp: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(message, repeated, tag = "2")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub bplaencojnn: ::prost::alloc::vec::Vec<Material0>,
    #[prost(message, repeated, tag = "10")]
    pub gamealbkaad: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "4")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "3")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(message, repeated, tag = "13")]
    pub mokcdmcaknl: ::prost::alloc::vec::Vec<Material0>,
    #[prost(uint32, repeated, tag = "8")]
    pub dooakaaicfp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub facgjdachom: u32,
    #[prost(message, repeated, tag = "15")]
    pub wait_del_resource_list: ::prost::alloc::vec::Vec<WaitDelResource>,
    #[prost(uint32, repeated, tag = "1")]
    pub bblohhgadgd: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "TurnFoodSwitch", repeated, tag = "12")]
    pub admnoiakief: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "6")]
    pub jldgljdhecb: ::prost::alloc::vec::Vec<u32>,
}
/// HPOBLNINIMF (584)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteEquipmentCsReq {
    #[prost(message, optional, tag = "1")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "13")]
    pub equipment_unique_id: u32,
}
/// JJPDPGAPFHK (527)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PromoteEquipmentScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// OBOODOOEOEP (567)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockEquipmentCsReq {
    #[prost(bool, tag = "7")]
    pub kgaaphohmja: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub cddhnkppclo: ::prost::alloc::vec::Vec<u32>,
}
/// OMKFPHJGCDK (528)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockEquipmentScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// BHKJNKNKPHC (552)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseItemCsReq {
    #[prost(uint32, tag = "6")]
    pub use_item_id: u32,
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub enpcgjbkmgj: i32,
    #[prost(uint32, tag = "9")]
    pub use_item_count: u32,
    #[prost(uint32, tag = "15")]
    pub optional_reward_id: u32,
    #[prost(bool, tag = "14")]
    pub dbiohfljcjf: bool,
}
/// MCEBLFPKDKL (574)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseItemScRsp {
    #[prost(uint32, tag = "14")]
    pub use_item_id: u32,
    #[prost(uint64, tag = "5")]
    pub omllghpolah: u64,
    #[prost(uint32, tag = "2")]
    pub use_item_count: u32,
    #[prost(message, optional, tag = "12")]
    pub foncpacjimb: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub pbmfnjcglbg: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// FJNNLGCPGGF (524)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankUpEquipmentCsReq {
    #[prost(message, optional, tag = "1")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "7")]
    pub equipment_unique_id: u32,
}
/// NLGDOLCFGCJ (593)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankUpEquipmentScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// OAONBEMJKLM (534)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpEquipmentCsReq {
    #[prost(uint32, tag = "3")]
    pub equipment_unique_id: u32,
    #[prost(message, optional, tag = "15")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
/// LADEDOFGJOC (543)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpEquipmentScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
}
/// HOGEFIHINHJ (546)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeItemCsReq {
    #[prost(message, optional, tag = "10")]
    pub compose_item_list: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "12")]
    pub compose_id: u32,
    #[prost(uint32, tag = "11")]
    pub count: u32,
}
/// DFLMFJMIMGM (525)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeItemScRsp {
    #[prost(uint32, tag = "13")]
    pub count: u32,
    #[prost(message, optional, tag = "3")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub compose_id: u32,
}
/// LMEJEBEIJDF (512)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeSelectedRelicCsReq {
    #[prost(uint32, tag = "10")]
    pub count: u32,
    #[prost(uint32, tag = "1")]
    pub compose_id: u32,
    #[prost(message, optional, tag = "6")]
    pub ocefmjhekkm: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "12")]
    pub main_affix_id: u32,
    #[prost(message, optional, tag = "2")]
    pub ejcefpjnopa: ::core::option::Option<ItemCostData>,
    #[prost(uint32, repeated, tag = "13")]
    pub plfglpnfnbh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub kgekgbgcjnk: u32,
}
/// FJGOGAJMMJJ (578)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeSelectedRelicScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub compose_id: u32,
    #[prost(message, optional, tag = "3")]
    pub return_item_list: ::core::option::Option<ItemList>,
}
/// KHLGMDJDEPE (596)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpRelicCsReq {
    #[prost(uint32, tag = "13")]
    pub relic_unique_id: u32,
    #[prost(message, optional, tag = "12")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
/// PICDPGBIIKF (505)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpRelicScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
}
/// KLCBJOMLHII (575)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockRelicCsReq {
    #[prost(bool, tag = "1")]
    pub phjdeanebbp: bool,
    #[prost(bool, tag = "11")]
    pub kgaaphohmja: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub akneopoeadm: ::prost::alloc::vec::Vec<u32>,
}
/// GDBLBNPPBGN (519)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockRelicScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// IDBMFCFLINB (511)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscardRelicCsReq {
    #[prost(bool, tag = "13")]
    pub nkmgammogbe: bool,
    #[prost(bool, tag = "15")]
    pub phjdeanebbp: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub akneopoeadm: ::prost::alloc::vec::Vec<u32>,
}
/// DLJMDKDFAPM (579)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DiscardRelicScRsp {
    #[prost(bool, tag = "5")]
    pub nkmgammogbe: bool,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// LAOHMODLGEB (526)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellItemCsReq {
    #[prost(message, optional, tag = "3")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "1")]
    pub gpppofiidog: bool,
}
/// GGKHKAKGOLF (507)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellItemScRsp {
    #[prost(message, optional, tag = "13")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// RechargeSuccNotify (553)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RechargeSuccNotify {
    #[prost(uint64, tag = "14")]
    pub month_card_outdate_time: u64,
    #[prost(string, tag = "1")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "15")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(string, tag = "2")]
    pub channel_order_no: ::prost::alloc::string::String,
}
/// ENGHAHLMAML (590)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeHcoinCsReq {
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
/// ExchangeHcoinScRsp (559)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeHcoinScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub num: u32,
}
/// LAJLPECBHDP (529)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddEquipmentScNotify {
    #[prost(uint32, tag = "7")]
    pub gcomeogcken: u32,
}
/// FMDKAALHAFL (550)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecyleTimeCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub logpfngfilm: ::prost::alloc::vec::Vec<u32>,
}
/// IINMIJDFPJM (548)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecyleTimeScRsp {
    #[prost(message, repeated, tag = "10")]
    pub bplaencojnn: ::prost::alloc::vec::Vec<Material0>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nknmcfaligm {
    #[prost(uint32, tag = "9")]
    pub formula_id: u32,
    #[prost(uint32, tag = "10")]
    pub aoibomnegea: u32,
}
/// CLDFOHGLLBB (588)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeLimitNumCompleteNotify {
    #[prost(message, repeated, tag = "15")]
    pub jnjamajnlhe: ::prost::alloc::vec::Vec<Nknmcfaligm>,
}
/// EGJJDBEOAEI (558)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ComposeLimitNumUpdateNotify {
    #[prost(message, optional, tag = "3")]
    pub japcccbhloh: ::core::option::Option<Nknmcfaligm>,
}
/// LEJCPIFPADI (510)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestroyItemCsReq {
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
    #[prost(uint32, tag = "10")]
    pub item_count: u32,
    #[prost(uint32, tag = "14")]
    pub cur_item_count: u32,
}
/// HKCAKPMPBNN (576)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestroyItemScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub cur_item_count: u32,
}
/// HDGAMHMAEBB (535)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMarkItemListCsReq {}
/// ALCPNDPKIND (573)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarkItemListScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub ankcabigdbn: ::prost::alloc::vec::Vec<u32>,
}
/// KCPLFHMBLBK (517)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkItemCsReq {
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
    #[prost(bool, tag = "8")]
    pub lkigjaojlep: bool,
}
/// DJIJNPPOPJP (513)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkItemScRsp {
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "10")]
    pub lkigjaojlep: bool,
}
/// DMDAELPGMPC (521)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelMarkItemNotify {
    #[prost(uint32, tag = "5")]
    pub item_id: u32,
}
/// NKIBPDPMIOB (565)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTurnFoodNotify {
    #[prost(uint32, repeated, tag = "8")]
    pub dooakaaicfp: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "TurnFoodSwitch", repeated, tag = "11")]
    pub admnoiakief: ::prost::alloc::vec::Vec<i32>,
}
/// DIDCIOCNIAE (508)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetTurnFoodSwitchCsReq {
    #[prost(bool, tag = "1")]
    pub dpjehjcdbcm: bool,
    #[prost(enumeration = "TurnFoodSwitch", tag = "7")]
    pub nifnpblkjbe: i32,
}
/// KOFOFDCPONC (518)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetTurnFoodSwitchScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(enumeration = "TurnFoodSwitch", tag = "4")]
    pub nifnpblkjbe: i32,
    #[prost(bool, tag = "3")]
    pub dpjehjcdbcm: bool,
}
/// GMGBAJMPIME (537)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeneralVirtualItemDataNotify {
    #[prost(bool, tag = "6")]
    pub pgfachcoiej: bool,
    #[prost(message, repeated, tag = "11")]
    pub gpbmhebnofh: ::prost::alloc::vec::Vec<PileItem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanIcon {
    #[prost(bool, tag = "3")]
    pub is_avatar_icon: bool,
    #[prost(uint32, tag = "6")]
    pub icon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlan {
    #[prost(uint32, tag = "2")]
    pub slot_index: u32,
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "15")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(message, optional, tag = "8")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(int64, tag = "13")]
    pub update_timestamp: i64,
    #[prost(bool, tag = "4")]
    pub is_marked: bool,
    #[prost(uint32, tag = "9")]
    pub avatar_id_on_create: u32,
}
/// BBMLCBOJJPE (600)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRelicFilterPlanCsReq {}
/// GetRelicFilterPlanScRsp (541)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRelicFilterPlanScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub relic_filter_plan_list: ::prost::alloc::vec::Vec<RelicFilterPlan>,
}
/// AddRelicFilterPlanCsReq (594)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanCsReq {
    #[prost(message, optional, tag = "2")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(bool, tag = "5")]
    pub is_marked: bool,
    #[prost(uint32, tag = "7")]
    pub avatar_id_on_create: u32,
    #[prost(string, tag = "15")]
    pub name: ::prost::alloc::string::String,
}
/// AddRelicFilterPlanScRsp (592)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanScRsp {
    #[prost(message, optional, tag = "5")]
    pub plan: ::core::option::Option<RelicFilterPlan>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// ModifyRelicFilterPlanCsReq (560)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanCsReq {
    #[prost(uint32, tag = "1")]
    pub slot_index: u32,
    #[prost(oneof = "modify_relic_filter_plan_cs_req::InfoCase", tags = "9, 14, 4")]
    pub info_case: ::core::option::Option<modify_relic_filter_plan_cs_req::InfoCase>,
}
/// Nested message and enum types in `ModifyRelicFilterPlanCsReq`.
pub mod modify_relic_filter_plan_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(string, tag = "9")]
        Name(::prost::alloc::string::String),
        #[prost(message, tag = "14")]
        Icon(super::RelicFilterPlanIcon),
        #[prost(message, tag = "4")]
        Settings(super::RelicFilterPlanSettings),
    }
}
/// ModifyRelicFilterPlanScRsp (545)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub slot_index: u32,
    #[prost(int64, tag = "1")]
    pub update_timestamp: i64,
    #[prost(oneof = "modify_relic_filter_plan_sc_rsp::InfoCase", tags = "12, 9, 6")]
    pub info_case: ::core::option::Option<modify_relic_filter_plan_sc_rsp::InfoCase>,
}
/// Nested message and enum types in `ModifyRelicFilterPlanScRsp`.
pub mod modify_relic_filter_plan_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(string, tag = "12")]
        Name(::prost::alloc::string::String),
        #[prost(message, tag = "9")]
        Icon(super::RelicFilterPlanIcon),
        #[prost(message, tag = "6")]
        Settings(super::RelicFilterPlanSettings),
    }
}
/// DeleteRelicFilterPlanCsReq (564)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRelicFilterPlanCsReq {
    #[prost(bool, tag = "14")]
    pub is_batch_op: bool,
    #[prost(uint32, repeated, tag = "6")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
}
/// PIAAAKNDLPG (572)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRelicFilterPlanScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(bool, tag = "3")]
    pub phjdeanebbp: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub mopamihdind: ::prost::alloc::vec::Vec<u32>,
}
/// MarkRelicFilterPlanCsReq (599)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanCsReq {
    #[prost(bool, tag = "2")]
    pub is_batch_op: bool,
    #[prost(uint32, repeated, tag = "12")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub is_mark: bool,
}
/// MarkRelicFilterPlanScRsp (503)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanScRsp {
    #[prost(bool, tag = "11")]
    pub is_batch_op: bool,
    #[prost(uint32, repeated, tag = "9")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "3")]
    pub is_mark: bool,
}
/// HOOOPADABIM (540)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanClearNameScNotify {
    #[prost(uint32, tag = "10")]
    pub hhlnghknbfe: u32,
}
/// FDIFMKDGDKL (561)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicReforgeCsReq {
    #[prost(uint32, tag = "2")]
    pub relic_unique_id: u32,
}
/// ONEJAABJCFO (530)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicReforgeScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// HAGNBMIGKON (533)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicReforgeConfirmCsReq {
    #[prost(uint32, tag = "13")]
    pub relic_unique_id: u32,
    #[prost(bool, tag = "1")]
    pub okpbfpilfmd: bool,
}
/// JPAGGJLCKIM (597)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicReforgeConfirmScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicData {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(bool, tag = "10")]
    pub is_played: bool,
}
/// NECMJOGJKFB (3136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetJukeboxDataCsReq {}
/// OMPCOFKABHB (3195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetJukeboxDataScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub unlocked_music_list: ::prost::alloc::vec::Vec<MusicData>,
    #[prost(uint32, tag = "10")]
    pub current_music_id: u32,
}
/// FPJPDAMHOCF (3184)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayBackGroundMusicCsReq {
    #[prost(uint32, tag = "8")]
    pub play_music_id: u32,
}
/// DGMDKOMABNF (3127)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayBackGroundMusicScRsp {
    #[prost(uint32, tag = "7")]
    pub current_music_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub play_music_id: u32,
}
/// NMFEGICCDHO (3167)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockBackGroundMusicCsReq {
    #[prost(uint32, repeated, tag = "2")]
    pub unlock_ids: ::prost::alloc::vec::Vec<u32>,
}
/// GPPCFGJGKPO (3128)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockBackGroundMusicScRsp {
    #[prost(message, repeated, tag = "1")]
    pub unlocked_music_list: ::prost::alloc::vec::Vec<MusicData>,
    #[prost(uint32, repeated, tag = "5")]
    pub iodbkgnhgpo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// EANANOFFKKD (3152)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialBackGroundMusicCsReq {
    #[prost(uint32, tag = "3")]
    pub iihlejhpkdm: u32,
}
/// CHAJEOKOLPM (3174)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialBackGroundMusicScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub iihlejhpkdm: u32,
}
/// GOGOOFBGCEH (736)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStageLineupCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llbncjkkloa {
    #[prost(uint32, tag = "1")]
    pub stage_type: u32,
    #[prost(uint32, tag = "9")]
    pub jnaeckmjifg: u32,
}
/// OPAAEFHBDIJ (795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStageLineupScRsp {
    #[prost(message, repeated, tag = "10")]
    pub epfhooeidam: ::prost::alloc::vec::Vec<Llbncjkkloa>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupAvatar {
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub slot_type: u32,
    #[prost(uint32, tag = "14")]
    pub hp: u32,
    #[prost(message, optional, tag = "10")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "6")]
    pub satiety: u32,
    #[prost(enumeration = "AvatarType", tag = "8")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineupInfo {
    #[prost(bool, tag = "6")]
    pub pjbjnfnbjon: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub jnmdgcjhcjj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub iddndgkoilc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(uint32, tag = "7")]
    pub plane_id: u32,
    #[prost(uint32, tag = "13")]
    pub game_story_line_id: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub omagmokjhnm: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "1")]
    pub is_virtual: bool,
    #[prost(enumeration = "ExtraLineupType", tag = "14")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "12")]
    pub leader_slot: u32,
    #[prost(uint32, tag = "3")]
    pub mp: u32,
    #[prost(string, tag = "15")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub max_mp: u32,
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<LineupAvatar>,
}
/// PHKDDBDJDLF (784)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataCsReq {}
/// IKJMEIJPDEB (727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataScRsp {
    #[prost(message, optional, tag = "3")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// EJNJNOOPBIL (767)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinLineupCsReq {
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "13")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub slot_type: u32,
    #[prost(bool, tag = "10")]
    pub is_virtual: bool,
    #[prost(enumeration = "ExtraLineupType", tag = "14")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "4")]
    pub base_avatar_id: u32,
}
/// HPHGFBOKADB (728)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinLineupScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// LDGJDICJNMP (752)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitLineupCsReq {
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(uint32, tag = "7")]
    pub plane_id: u32,
    #[prost(bool, tag = "12")]
    pub is_virtual: bool,
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "11")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "8")]
    pub extra_lineup_type: i32,
}
/// IPCJBKOELAN (774)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitLineupScRsp {
    #[prost(bool, tag = "15")]
    pub is_mainline: bool,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub base_avatar_id: u32,
    #[prost(bool, tag = "9")]
    pub is_virtual: bool,
}
/// ECKELIAJIDG (724)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLineupCsReq {
    #[prost(uint32, tag = "8")]
    pub plane_id: u32,
    #[prost(uint32, tag = "10")]
    pub jipdggjfkch: u32,
    #[prost(uint32, tag = "11")]
    pub index: u32,
    #[prost(uint32, tag = "1")]
    pub coiggidecno: u32,
    #[prost(bool, tag = "13")]
    pub is_virtual: bool,
    #[prost(enumeration = "ExtraLineupType", tag = "12")]
    pub extra_lineup_type: i32,
}
/// GGPLHOGCOAB (793)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLineupScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// SyncLineupNotify (734)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncLineupNotify {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "SyncLineupReason", repeated, tag = "12")]
    pub reason_list: ::prost::alloc::vec::Vec<i32>,
}
/// NFLMLALJCLA (743)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLineupAvatarDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupAvatarData {
    #[prost(uint32, tag = "4")]
    pub hp: u32,
    #[prost(enumeration = "AvatarType", tag = "9")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
/// HCMPOEKADPP (746)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLineupAvatarDataScRsp {
    #[prost(message, repeated, tag = "7")]
    pub avatar_data_list: ::prost::alloc::vec::Vec<LineupAvatarData>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// OEOOFOHAABK (725)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderCsReq {
    #[prost(uint32, tag = "2")]
    pub slot_type: u32,
}
/// KGALGPILNAC (796)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderScRsp {
    #[prost(uint32, tag = "6")]
    pub slot_type: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// IBGFGNACNCK (705)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchLineupIndexCsReq {
    #[prost(uint32, tag = "7")]
    pub index: u32,
}
/// LIOHMBGBGMF (775)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchLineupIndexScRsp {
    #[prost(uint32, tag = "7")]
    pub index: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// DCHGJAHMMCN (719)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetLineupNameCsReq {
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub index: u32,
}
/// KGKDENLKNNI (726)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetLineupNameScRsp {
    #[prost(string, tag = "15")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub index: u32,
}
/// MLFOLKMJNCM (707)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataCsReq {}
/// CEBOPGNBEIJ (753)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub cur_index: u32,
    #[prost(message, repeated, tag = "8")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
}
/// HPGCMLHNKNJ (790)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VirtualLineupDestroyNotify {
    #[prost(uint32, tag = "13")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupSlotInfo {
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub slot_type: u32,
    #[prost(enumeration = "AvatarType", tag = "14")]
    pub avatar_type: i32,
}
/// CNHBCLCAFEE (759)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceLineupCsReq {
    #[prost(uint32, tag = "7")]
    pub game_story_line_id: u32,
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "11")]
    pub leader_slot: u32,
    #[prost(message, repeated, tag = "5")]
    pub replace_slot_list: ::prost::alloc::vec::Vec<LineupSlotInfo>,
    #[prost(bool, tag = "15")]
    pub is_virtual: bool,
    #[prost(enumeration = "ExtraLineupType", tag = "4")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "8")]
    pub plane_id: u32,
}
/// IJENHEDMOFD (712)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReplaceLineupScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// KMFGKHGJCJB (778)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExtraLineupDestroyNotify {
    #[prost(enumeration = "ExtraLineupType", tag = "5")]
    pub extra_lineup_type: i32,
}
/// DLGLFJLNGDC (729)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VirtualLineupTrialAvatarChangeScNotify {
    #[prost(bool, tag = "1")]
    pub clgklcheoea: bool,
    #[prost(uint32, tag = "6")]
    pub plane_id: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub aaeaaeonboe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub cgkfopjcgln: ::prost::alloc::vec::Vec<u32>,
}
/// FNOCLGGIIIG (7362)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyCreateCsReq {
    #[prost(message, optional, tag = "7")]
    pub lajonmoiofh: ::core::option::Option<Empbnbjldni>,
    #[prost(enumeration = "FightGameMode", tag = "3")]
    pub mggmpkighbm: i32,
}
/// DAAIMMBENHK (7400)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyCreateScRsp {
    #[prost(uint64, tag = "11")]
    pub room_id: u64,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
    #[prost(enumeration = "FightGameMode", tag = "12")]
    pub mggmpkighbm: i32,
}
/// JLKAJPJOADM (7378)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyInviteCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub uid_list: ::prost::alloc::vec::Vec<u32>,
}
/// OBFDGBIIOBB (7360)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyInviteScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub uid_list: ::prost::alloc::vec::Vec<u32>,
}
/// DCOHMBAMOBH (7380)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyJoinCsReq {
    #[prost(message, optional, tag = "7")]
    pub lajonmoiofh: ::core::option::Option<Empbnbjldni>,
    #[prost(uint64, tag = "10")]
    pub room_id: u64,
}
/// IEPOEJDEGED (7373)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyJoinScRsp {
    #[prost(enumeration = "FightGameMode", tag = "9")]
    pub mggmpkighbm: i32,
    #[prost(message, repeated, tag = "14")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint64, tag = "7")]
    pub room_id: u64,
}
/// MKGOIALKOMD (7398)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyQuitCsReq {}
/// MFAMPLHMLOO (7363)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyQuitScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// ICHCBKMEGEJ (7365)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyBeginCsReq {}
/// KDCBCJIJNLN (7399)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyBeginScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
}
/// DEODIGDOFAI (7359)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyModifyPlayerInfoCsReq {
    #[prost(uint32, tag = "11")]
    pub golcpaploig: u32,
    #[prost(message, optional, tag = "15")]
    pub lajonmoiofh: ::core::option::Option<Empbnbjldni>,
    #[prost(enumeration = "LobbyModifyType", tag = "6")]
    pub r#type: i32,
}
/// EBPJOAGIGJD (7393)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyModifyPlayerInfoScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// KKDJHKFFJKE (7395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbySyncInfoScNotify {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(enumeration = "LobbyModifyType", tag = "2")]
    pub r#type: i32,
    #[prost(message, repeated, tag = "4")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
}
/// IIFFOFEKMMN (7397)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyKickOutCsReq {
    #[prost(uint32, tag = "9")]
    pub uid: u32,
}
/// CGPBHJPGPNF (7396)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyKickOutScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// JDIJPGIFKKK (7367)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyInviteScNotify {
    #[prost(uint32, tag = "10")]
    pub sender_id: u32,
    #[prost(enumeration = "FightGameMode", tag = "13")]
    pub mggmpkighbm: i32,
    #[prost(uint32, tag = "7")]
    pub room_id: u32,
}
/// BAFAEFKIHBA (7354)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyGetInfoCsReq {}
/// IGKCDDEIKFE (7390)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbyGetInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint64, tag = "7")]
    pub fdboeognpfb: u64,
    #[prost(enumeration = "FightGameMode", tag = "10")]
    pub mggmpkighbm: i32,
    #[prost(uint64, tag = "9")]
    pub room_id: u64,
    #[prost(message, repeated, tag = "8")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
}
/// PCMOHKLLFBO (836)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMailCsReq {
    #[prost(uint32, tag = "9")]
    pub alpabmakcfa: u32,
    #[prost(uint32, tag = "5")]
    pub lmngakgcgci: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMail {
    #[prost(int64, tag = "8")]
    pub time: i64,
    #[prost(bool, tag = "7")]
    pub is_read: bool,
    #[prost(enumeration = "MailType", tag = "5")]
    pub mail_type: i32,
    #[prost(string, repeated, tag = "10")]
    pub para_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "15")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    #[prost(int64, tag = "12")]
    pub expire_time: i64,
    #[prost(uint32, tag = "11")]
    pub template_id: u32,
    #[prost(message, optional, tag = "2")]
    pub attachment: ::core::option::Option<ItemList>,
}
/// GetMailScRsp (895)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMailScRsp {
    #[prost(bool, tag = "14")]
    pub is_end: bool,
    #[prost(uint32, tag = "1")]
    pub start: u32,
    #[prost(message, repeated, tag = "10")]
    pub notice_mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(message, repeated, tag = "2")]
    pub mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub total_num: u32,
}
/// AGGMGOLIBJP (884)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkReadMailCsReq {
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
/// NDJEPIJNEMC (827)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkReadMailScRsp {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// CKAOPMKFGJB (867)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelMailCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
}
/// DelMailScRsp (828)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelMailScRsp {
    #[prost(uint32, repeated, tag = "10")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// EDPILFNPOLC (852)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMailAttachmentCsReq {
    #[prost(uint32, tag = "7")]
    pub optional_reward_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub ppfhenmpoil: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dnbenajmamd {
    #[prost(uint32, tag = "4")]
    pub mail_id: u32,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
}
/// TakeMailAttachmentScRsp (874)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMailAttachmentScRsp {
    #[prost(message, repeated, tag = "12")]
    pub fail_mail_list: ::prost::alloc::vec::Vec<Dnbenajmamd>,
    #[prost(message, optional, tag = "14")]
    pub attachment: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub succ_mail_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// NewMailScNotify (824)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewMailScNotify {
    #[prost(uint32, repeated, tag = "10")]
    pub mail_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chaenboeboc {
    #[prost(message, optional, tag = "10")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(bool, tag = "2")]
    pub jebfgnmgfnb: bool,
    #[prost(uint32, tag = "14")]
    pub ifdgjojkbpn: u32,
    #[prost(message, repeated, tag = "13")]
    pub dbmhdfodcdb: ::prost::alloc::vec::Vec<Jjejhckmjlg>,
    #[prost(int32, tag = "5")]
    pub fdggllhcpli: i32,
    #[prost(message, optional, tag = "7")]
    pub fpgmdipjkdj: ::core::option::Option<Pjniedfalhn>,
    #[prost(message, repeated, tag = "3")]
    pub jgfohpfekbe: ::prost::alloc::vec::Vec<Gfnojbneoaa>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lamkdpdmlec {
    #[prost(uint32, tag = "13")]
    pub pkjcfcmooje: u32,
    #[prost(uint32, tag = "1")]
    pub aecpmhpnjln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjniedfalhn {
    #[prost(message, optional, tag = "13")]
    pub dfpapjellie: ::core::option::Option<Vector>,
    #[prost(message, optional, tag = "9")]
    pub hommaghjepk: ::core::option::Option<Vector4>,
}
/// BOGLDKKADHM (6836)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterMapRotationRegionCsReq {
    #[prost(uint32, tag = "12")]
    pub ifdgjojkbpn: u32,
    #[prost(uint32, tag = "13")]
    pub fdggllhcpli: u32,
    #[prost(message, optional, tag = "11")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// MACFGGPPOCC (6895)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterMapRotationRegionScRsp {
    #[prost(uint32, tag = "2")]
    pub fdggllhcpli: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "10")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, optional, tag = "15")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(uint32, tag = "4")]
    pub ifdgjojkbpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjejhckmjlg {
    #[prost(uint32, tag = "4")]
    pub feofolnnldg: u32,
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
}
/// MFKADHFMDFH (6884)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractChargerCsReq {
    #[prost(message, optional, tag = "8")]
    pub kaejmpakjdp: ::core::option::Option<Jjejhckmjlg>,
}
/// KMIBLAEHPLE (6827)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractChargerScRsp {
    #[prost(message, optional, tag = "10")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(message, optional, tag = "7")]
    pub kaejmpakjdp: ::core::option::Option<Jjejhckmjlg>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfnojbneoaa {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(float, tag = "7")]
    pub mgkgeeplbjl: f32,
    #[prost(uint32, tag = "5")]
    pub feofolnnldg: u32,
}
/// EJMBMCNGBGP (6867)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeployRotaterCsReq {
    #[prost(message, optional, tag = "15")]
    pub licnpajljbj: ::core::option::Option<Gfnojbneoaa>,
}
/// CHMGDICEMPM (6828)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeployRotaterScRsp {
    #[prost(message, optional, tag = "4")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub licnpajljbj: ::core::option::Option<Gfnojbneoaa>,
}
/// GDDCHKCJDMB (6852)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateMapCsReq {
    #[prost(message, optional, tag = "13")]
    pub fpgmdipjkdj: ::core::option::Option<Pjniedfalhn>,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
    #[prost(uint32, tag = "4")]
    pub feofolnnldg: u32,
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// EKPMDCOLHMC (6874)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateMapScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "3")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// EALKPEFDAED (6824)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveMapRotationRegionCsReq {
    #[prost(message, optional, tag = "3")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// JNMGLPKGAHF (6893)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveMapRotationRegionScRsp {
    #[prost(uint32, tag = "4")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "1")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// NCGGAGEHGCL (6834)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMapRotationDataCsReq {}
/// EFNLILEBHBJ (6843)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMapRotationDataScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(message, optional, tag = "2")]
    pub fpgmdipjkdj: ::core::option::Option<Pjniedfalhn>,
    #[prost(message, repeated, tag = "12")]
    pub jgfohpfekbe: ::prost::alloc::vec::Vec<Gfnojbneoaa>,
    #[prost(uint32, tag = "11")]
    pub ifdgjojkbpn: u32,
    #[prost(message, repeated, tag = "3")]
    pub dbmhdfodcdb: ::prost::alloc::vec::Vec<Jjejhckmjlg>,
    #[prost(int32, tag = "9")]
    pub fdggllhcpli: i32,
    #[prost(bool, tag = "14")]
    pub goflefhokdf: bool,
}
/// PLOBFPFAANJ (6846)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetMapRotationRegionCsReq {
    #[prost(message, optional, tag = "13")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, optional, tag = "1")]
    pub fpgmdipjkdj: ::core::option::Option<Pjniedfalhn>,
}
/// LDJGOKJOFOM (6825)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetMapRotationRegionScRsp {
    #[prost(uint32, tag = "9")]
    pub client_pos_version: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// DBCIBDIMPJE (6896)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveMapRotationRegionScNotify {}
/// JCPMPIOLLMH (6805)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateEnergyScNotify {
    #[prost(message, optional, tag = "14")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
}
/// DPBMAMHEHGG (6875)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMapRotationDataScNotify {
    #[prost(uint32, tag = "10")]
    pub ifdgjojkbpn: u32,
    #[prost(message, repeated, tag = "7")]
    pub dbmhdfodcdb: ::prost::alloc::vec::Vec<Jjejhckmjlg>,
    #[prost(message, optional, tag = "11")]
    pub fpgmdipjkdj: ::core::option::Option<Pjniedfalhn>,
    #[prost(bool, tag = "14")]
    pub goflefhokdf: bool,
    #[prost(int32, tag = "4")]
    pub fdggllhcpli: i32,
    #[prost(message, optional, tag = "13")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(message, repeated, tag = "12")]
    pub jgfohpfekbe: ::prost::alloc::vec::Vec<Gfnojbneoaa>,
}
/// IOFBMHAJINJ (6819)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveRotaterCsReq {
    #[prost(message, optional, tag = "5")]
    pub licnpajljbj: ::core::option::Option<Gfnojbneoaa>,
}
/// CPIGANMJBCJ (6826)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveRotaterScRsp {
    #[prost(message, optional, tag = "5")]
    pub licnpajljbj: ::core::option::Option<Gfnojbneoaa>,
    #[prost(message, optional, tag = "2")]
    pub kbmflpnpkoj: ::core::option::Option<Lamkdpdmlec>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// OBDNFJIPIBH (6807)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRotaterScNotify {
    #[prost(message, repeated, tag = "14")]
    pub jgfohpfekbe: ::prost::alloc::vec::Vec<Gfnojbneoaa>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kekmjkohboh {
    #[prost(uint32, tag = "5")]
    pub config_id: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub floor_id: u32,
    #[prost(uint32, tag = "10")]
    pub plane_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agmcnejandk {
    #[prost(int64, tag = "13")]
    pub goonpndocih: i64,
    #[prost(uint32, tag = "5")]
    pub cbahfgpjemp: u32,
    #[prost(message, repeated, tag = "8")]
    pub cjgmlcaklfi: ::prost::alloc::vec::Vec<Kekmjkohboh>,
}
/// FBMODDBJHFH (8200)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMarkChestCsReq {}
/// JMMPEKPEDNL (8195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarkChestScRsp {
    #[prost(message, repeated, tag = "11")]
    pub najmejjhaek: ::prost::alloc::vec::Vec<Agmcnejandk>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// CJPLPHNOHDK (8187)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMarkChestCsReq {
    #[prost(uint32, tag = "10")]
    pub ombecimngee: u32,
    #[prost(message, repeated, tag = "8")]
    pub cjgmlcaklfi: ::prost::alloc::vec::Vec<Kekmjkohboh>,
    #[prost(uint32, tag = "15")]
    pub cbahfgpjemp: u32,
}
/// BPCEMJPNPGM (8183)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMarkChestScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub najmejjhaek: ::prost::alloc::vec::Vec<Agmcnejandk>,
    #[prost(uint32, tag = "8")]
    pub ombecimngee: u32,
    #[prost(uint32, tag = "14")]
    pub cbahfgpjemp: u32,
}
/// LOMHLIIGALC (8197)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkChestChangedScNotify {
    #[prost(message, repeated, tag = "5")]
    pub najmejjhaek: ::prost::alloc::vec::Vec<Agmcnejandk>,
}
/// NMDOCPDFPIH (7312)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartMatchCsReq {
    #[prost(message, optional, tag = "9")]
    pub lajonmoiofh: ::core::option::Option<Empbnbjldni>,
    #[prost(enumeration = "FightGameMode", tag = "2")]
    pub mggmpkighbm: i32,
}
/// ILDKPFKIJBF (7350)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartMatchScRsp {
    #[prost(message, optional, tag = "8")]
    pub lajonmoiofh: ::core::option::Option<Empbnbjldni>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// KCEDKAFFLJA (7330)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelMatchCsReq {}
/// CNNNJMPNGCL (7323)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelMatchScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// GOCCPIJALCG (7315)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchResultScNotify {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
}
/// ACKMKEPADPH (7349)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCrossInfoCsReq {}
/// CDKGOMMALLI (7309)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCrossInfoScRsp {
    #[prost(uint64, tag = "8")]
    pub room_id: u64,
    #[prost(enumeration = "FightGameMode", tag = "14")]
    pub mggmpkighbm: i32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint64, tag = "12")]
    pub fdboeognpfb: u64,
}
/// LKCJFMHBBPH (7412)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MatchThreeGetDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egpjjakfeoc {
    #[prost(uint32, tag = "8")]
    pub level_id: u32,
    #[prost(uint32, tag = "11")]
    pub hkihpndbeom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dagmfheimkm {
    #[prost(uint32, tag = "12")]
    pub count: u32,
    #[prost(uint32, tag = "8")]
    pub pos: u32,
    #[prost(uint32, tag = "13")]
    pub cjelhngokdc: u32,
    #[prost(uint32, tag = "11")]
    pub egjbcbeiiii: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akpleipecmg {
    #[prost(map = "uint32, uint32", tag = "9")]
    pub ngnngfdnhci: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "12")]
    pub ejjpilnhapp: ::prost::alloc::vec::Vec<Egpjjakfeoc>,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub mcdcmlccabi: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "14")]
    pub bdeollehcjd: ::prost::alloc::vec::Vec<Dagmfheimkm>,
}
/// AOFOFIGEDLM (7450)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchThreeGetDataScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub ikcemnhlcec: ::core::option::Option<Akpleipecmg>,
}
/// NKALKGJHDIH (7430)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchThreeLevelEndCsReq {
    #[prost(map = "uint32, uint32", tag = "7")]
    pub mcdcmlccabi: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub egjbcbeiiii: u32,
    #[prost(uint32, tag = "6")]
    pub level_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub ijmdphlongg: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "1")]
    pub dnmmbglnjei: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub cjelhngokdc: u32,
    #[prost(uint32, tag = "15")]
    pub hkihpndbeom: u32,
}
/// BEOJIOEEIKE (7423)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MatchThreeLevelEndScRsp {
    #[prost(uint32, tag = "4")]
    pub level_id: u32,
    #[prost(uint32, tag = "9")]
    pub hkihpndbeom: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// ABFPOHHGFJK (7415)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchThreeSyncDataScNotify {
    #[prost(message, optional, tag = "9")]
    pub ikcemnhlcec: ::core::option::Option<Akpleipecmg>,
}
/// MMGJFLCPBNC (7449)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MatchThreeSetBirdPosCsReq {
    #[prost(uint32, tag = "5")]
    pub egjbcbeiiii: u32,
    #[prost(uint32, tag = "7")]
    pub pos: u32,
}
/// GJCNPPHIHDN (7409)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MatchThreeSetBirdPosScRsp {
    #[prost(uint32, tag = "2")]
    pub pos: u32,
    #[prost(uint32, tag = "10")]
    pub egjbcbeiiii: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// GHFFINBPNIN (2736)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcMessageGroupCsReq {
    #[prost(uint32, repeated, tag = "4")]
    pub contact_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MessageItem {
    #[prost(uint32, tag = "7")]
    pub text_id: u32,
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageSection {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(message, repeated, tag = "13")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
    #[prost(uint32, repeated, tag = "7")]
    pub message_item_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "MessageSectionStatus", tag = "1")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub frozen_item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageGroup {
    #[prost(enumeration = "MessageGroupStatus", tag = "3")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub message_section_id: u32,
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(message, repeated, tag = "15")]
    pub message_section_list: ::prost::alloc::vec::Vec<MessageSection>,
    #[prost(int64, tag = "6")]
    pub refresh_time: i64,
}
/// GMEJKNDMANG (2795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcMessageGroupScRsp {
    #[prost(message, repeated, tag = "8")]
    pub message_group_list: ::prost::alloc::vec::Vec<MessageGroup>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// IGMAEBHLHCD (2784)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNpcStatusCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcStatus {
    #[prost(bool, tag = "2")]
    pub is_finish: bool,
    #[prost(uint32, tag = "12")]
    pub npc_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStatus {
    #[prost(enumeration = "MessageGroupStatus", tag = "14")]
    pub group_status: i32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(int64, tag = "11")]
    pub refresh_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SectionStatus {
    #[prost(enumeration = "MessageSectionStatus", tag = "12")]
    pub section_status: i32,
    #[prost(uint32, tag = "2")]
    pub section_id: u32,
}
/// NCMBLCDBCEN (2727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcStatusScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub npc_status_list: ::prost::alloc::vec::Vec<NpcStatus>,
}
/// JJFGMELPDCB (2767)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishItemIdCsReq {
    #[prost(uint32, tag = "8")]
    pub item_id: u32,
    #[prost(uint32, tag = "5")]
    pub text_id: u32,
}
/// KAHIFNEJBDE (2728)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishItemIdScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub text_id: u32,
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
}
/// MJGOGKDAPGP (2752)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishSectionIdCsReq {
    #[prost(uint32, tag = "11")]
    pub section_id: u32,
}
/// DKDBPAADAIM (2774)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishSectionIdScRsp {
    #[prost(uint32, tag = "4")]
    pub section_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
}
/// FLPBBLJLBBC (2724)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishPerformSectionIdCsReq {
    #[prost(uint32, tag = "5")]
    pub section_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
}
/// AEDAMKIMAHB (2793)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishPerformSectionIdScRsp {
    #[prost(uint32, tag = "9")]
    pub section_id: u32,
    #[prost(message, repeated, tag = "7")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
}
/// ENINGCKHBOH (2734)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMissionMessageInfoCsReq {}
/// FKBKHFGKEKL (2743)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionMessageInfoScRsp {
    #[prost(map = "uint32, uint32", tag = "4")]
    pub kecoljabafm: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// IMNNCIDCHDL (4136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShareCsReq {
    #[prost(uint32, tag = "13")]
    pub ieheogbijfe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnagmolcnoh {
    #[prost(uint32, tag = "9")]
    pub ieheogbijfe: u32,
    #[prost(uint32, tag = "12")]
    pub ejlemgknokp: u32,
}
/// DHDLBANOOOI (4195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShareScRsp {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "3")]
    pub hiapnjhnjgm: ::core::option::Option<Lnagmolcnoh>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// EBGCGBMJJJF (4184)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetShareDataCsReq {}
/// NGBLGFBDJEN (4127)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShareDataScRsp {
    #[prost(message, repeated, tag = "9")]
    pub mbogiknfmid: ::prost::alloc::vec::Vec<Lnagmolcnoh>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// LBKHODKEBDK (4167)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePictureCsReq {}
/// CONAGEHJMBE (4128)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePictureScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngcddgdgnap {
    #[prost(uint32, tag = "12")]
    pub mhbmnhkjbia: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub mmojnoohnbl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub r#type: u32,
}
/// INIJIJPPANH (4146)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TriggerVoiceCsReq {
    #[prost(message, repeated, tag = "9")]
    pub anpifnkmioa: ::prost::alloc::vec::Vec<Ngcddgdgnap>,
}
/// BCNLLNMOMAO (4125)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TriggerVoiceScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// MMHAOBBFJFH (4124)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelCacheNotifyCsReq {
    #[prost(enumeration = "Ihhmhldlfhn", tag = "6")]
    pub r#type: i32,
    #[prost(uint32, repeated, tag = "14")]
    pub dnnhnhabfio: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, repeated, tag = "15")]
    pub bgemfghabba: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// JMIHPGEEMLP (4193)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelCacheNotifyScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// LCADBDAGBIK (4134)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityReportCsReq {
    #[prost(string, tag = "1")]
    pub egnkofplgpi: ::prost::alloc::string::String,
}
/// BICJAACDCGG (4143)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SecurityReportScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfmkpmjdipc {
    #[prost(uint32, tag = "8")]
    pub jccfflhdafm: u32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub fjhgkgkfffn: u32,
    #[prost(enumeration = "Nmlcfenpmnb", tag = "1")]
    pub r#type: i32,
}
/// OIKAPBKNLHN (4153)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMovieRacingDataCsReq {}
/// BGMOFAFJDCF (4190)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMovieRacingDataScRsp {
    #[prost(message, repeated, tag = "11")]
    pub pmlmdipbchc: ::prost::alloc::vec::Vec<Dfmkpmjdipc>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// LKKCKNIHNHG (4159)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateMovieRacingDataCsReq {
    #[prost(message, optional, tag = "5")]
    pub lbepeghgfih: ::core::option::Option<Dfmkpmjdipc>,
}
/// ICIGNFHLPHG (4112)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateMovieRacingDataScRsp {
    #[prost(message, optional, tag = "4")]
    pub lbepeghgfih: ::core::option::Option<Dfmkpmjdipc>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// JALAEOHMPEG (4196)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitOrigamiItemCsReq {
    #[prost(uint32, tag = "11")]
    pub bimchmdjplc: u32,
}
/// FBHMCPCNKBG (4105)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitOrigamiItemScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub bimchmdjplc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcnapnpopek {
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub jccfflhdafm: u32,
    #[prost(uint32, tag = "8")]
    pub okmfnbohjnl: u32,
    #[prost(bool, tag = "14")]
    pub nfidkghkplc: bool,
}
/// ELMJEGELOEP (4178)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGunPlayDataCsReq {}
/// FFFGAMCEADA (4129)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGunPlayDataScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub ejoegocgnoe: ::prost::alloc::vec::Vec<Gcnapnpopek>,
}
/// FHMEFADJENI (4150)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateGunPlayDataCsReq {
    #[prost(message, optional, tag = "11")]
    pub mdgbognepji: ::core::option::Option<Gcnapnpopek>,
    #[prost(uint64, tag = "1")]
    pub dnmmbglnjei: u64,
    #[prost(uint32, tag = "8")]
    pub eibmpfhoijb: u32,
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
}
/// HDFAEDEAKOA (4148)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateGunPlayDataScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub mdgbognepji: ::core::option::Option<Gcnapnpopek>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdhbkfgijjl {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(enumeration = "Ahccebcohjj", tag = "11")]
    pub amafbbdilid: i32,
    #[prost(enumeration = "Pikbnahddfl", tag = "7")]
    pub leeacmngdfl: i32,
}
/// IEEAAPFHOMO (4188)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DifficultyAdjustmentGetDataCsReq {}
/// AIAIHKEEBMO (4158)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DifficultyAdjustmentGetDataScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub content_package_list: ::prost::alloc::vec::Vec<Mdhbkfgijjl>,
}
/// PBGIPOHEPJJ (4110)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DifficultyAdjustmentUpdateDataCsReq {
    #[prost(message, optional, tag = "7")]
    pub data: ::core::option::Option<Mdhbkfgijjl>,
}
/// ODCNNJEENFB (4176)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DifficultyAdjustmentUpdateDataScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub data: ::core::option::Option<Mdhbkfgijjl>,
    #[prost(message, repeated, tag = "8")]
    pub content_package_list: ::prost::alloc::vec::Vec<Mdhbkfgijjl>,
}
/// PDPLLIPJAHG (4135)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MazeKillDirectCsReq {
    #[prost(uint32, repeated, tag = "10")]
    pub entity_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub iipaaljcccd: u32,
    #[prost(enumeration = "Naolnicfdln", tag = "11")]
    pub leeacmngdfl: i32,
}
/// CHLCOEJNKMJ (4173)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MazeKillDirectScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub entity_list: ::prost::alloc::vec::Vec<u32>,
}
/// DEOLLDHIJAK (1236)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMissionDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibffcofeenl {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub cgnkhekhiml: u32,
    #[prost(enumeration = "MissionSyncRecord", tag = "7")]
    pub r#type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mission {
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub progress: u32,
    #[prost(enumeration = "MissionStatus", tag = "5")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MissionCustomValue {
    #[prost(uint32, tag = "7")]
    pub index: u32,
    #[prost(uint32, tag = "10")]
    pub custom_value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionCustomValueList {
    #[prost(message, repeated, tag = "2")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainMission {
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(enumeration = "MissionStatus", tag = "2")]
    pub status: i32,
    #[prost(message, repeated, tag = "3")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmhinpimhah {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(oneof = "bmhinpimhah::Kdgdjdmcmlg", tags = "578")]
    pub kdgdjdmcmlg: ::core::option::Option<bmhinpimhah::Kdgdjdmcmlg>,
}
/// Nested message and enum types in `BMHINPIMHAH`.
pub mod bmhinpimhah {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kdgdjdmcmlg {
        #[prost(message, tag = "578")]
        CustomValueList(super::MissionCustomValueList),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainMissionCustomValue {
    #[prost(uint32, tag = "4")]
    pub main_mission_id: u32,
    #[prost(message, optional, tag = "7")]
    pub custom_value_list: ::core::option::Option<MissionCustomValueList>,
}
/// KLEMDDAOLPF (1295)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionDataScRsp {
    #[prost(message, repeated, tag = "5")]
    pub main_mission_list: ::prost::alloc::vec::Vec<MainMission>,
    #[prost(message, repeated, tag = "4")]
    pub mission_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub kfoglkhpahg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub track_mission_id: u32,
}
/// BAJCPDEJFFH (1210)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMainMissionCsReq {
    #[prost(uint32, tag = "15")]
    pub main_mission_id: u32,
}
/// FICJJOOMMIF (1276)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMainMissionScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub main_mission_id: u32,
}
/// DJLONLDIBGJ (1284)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTalkMissionCsReq {
    #[prost(uint32, tag = "6")]
    pub sub_mission_id: u32,
    #[prost(string, tag = "3")]
    pub talk_str: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "8")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
}
/// LOJBENKOODK (1227)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTalkMissionScRsp {
    #[prost(uint32, tag = "9")]
    pub sub_mission_id: u32,
    #[prost(string, tag = "6")]
    pub talk_str: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "7")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValue>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// GJGLOCODECG (1267)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionRewardScNotify {
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub sub_mission_id: u32,
    #[prost(uint32, tag = "10")]
    pub main_mission_id: u32,
}
/// FFNEIKODPBF (1229)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubMissionRewardScNotify {
    #[prost(uint32, tag = "7")]
    pub sub_mission_id: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
}
/// CGDECKMODDA (1228)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTaskCsReq {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
}
/// FEOIEHMODJF (1252)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTaskScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(string, tag = "6")]
    pub key: ::prost::alloc::string::String,
}
/// NICHEHPFBJC (1243)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionGroupWarnScNotify {
    #[prost(uint32, repeated, tag = "3")]
    pub group_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// AFODPJKGOIG (1246)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishCosumeItemMissionCsReq {
    #[prost(message, optional, tag = "10")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub sub_mission_id: u32,
}
/// IPBMJDHILNA (1225)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishCosumeItemMissionScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub sub_mission_id: u32,
}
/// HOLBMFBBKPL (1296)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMissionEventDataCsReq {}
/// HGMAKMKJHOJ (1205)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionEventDataScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub challenge_event_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub mission_event_list: ::prost::alloc::vec::Vec<Mission>,
}
/// BBBIGEFBGMJ (1275)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionEventRewardScNotify {
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub mission_event_id: u32,
}
/// DACMCGGONJF (1219)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMissionEventCsReq {
    #[prost(uint32, tag = "6")]
    pub mission_event_id: u32,
}
/// FAJIDEGHKLG (1226)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMissionEventScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ahfdnedbgmc: ::core::option::Option<Mission>,
}
/// HFBHMCCHOIO (1207)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub mission_event_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// GetMissionStatusScRsp (1253)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusScRsp {
    #[prost(uint32, repeated, tag = "7")]
    pub disabled_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub main_mission_mcv_list: ::prost::alloc::vec::Vec<MainMissionCustomValue>,
    #[prost(uint32, repeated, tag = "3")]
    pub unfinished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1")]
    pub mission_event_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "13")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub sub_mission_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "15")]
    pub curversion_finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// JDAHPAHOJJM (1290)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InterruptMissionEventCsReq {
    #[prost(uint32, tag = "14")]
    pub mission_event_id: u32,
}
/// AABALIGDAKB (1259)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InterruptMissionEventScRsp {
    #[prost(uint32, tag = "4")]
    pub mission_event_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// FGENEDNEHOC (1212)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMissionEventProgressCsReq {
    #[prost(uint32, tag = "5")]
    pub progress: u32,
    #[prost(uint32, tag = "2")]
    pub mission_event_id: u32,
}
/// BNPDKFGIBBF (1278)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMissionEventProgressScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// LKDCEBBPJNF (1250)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TeleportToMissionResetPointCsReq {}
/// PNMLPCMKNPJ (1248)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TeleportToMissionResetPointScRsp {
    #[prost(uint32, tag = "1")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// JDCHEMNDHCM (1288)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartFinishSubMissionScNotify {
    #[prost(uint32, tag = "9")]
    pub sub_mission_id: u32,
}
/// MDJDGJDJBCP (1258)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartFinishMainMissionScNotify {
    #[prost(uint32, tag = "9")]
    pub main_mission_id: u32,
}
/// EBHFHNIMMME (1235)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainMissionCustomValueCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// HDHICLBCDLI (1273)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainMissionCustomValueScRsp {
    #[prost(message, repeated, tag = "3")]
    pub main_mission_list: ::prost::alloc::vec::Vec<MainMission>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// FEKEMGGODPI (1217)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionAcceptScNotify {
    #[prost(uint32, repeated, tag = "7")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// KGJAJBLPHFE (1221)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateTrackMainMissionIdCsReq {
    #[prost(uint32, tag = "6")]
    pub track_mission_id: u32,
    #[prost(uint32, tag = "5")]
    pub pokbilkjiae: u32,
    #[prost(enumeration = "TrackMainMissionUpdateReasonId", tag = "4")]
    pub pjopgadpdhd: i32,
}
/// KPPGGGBNABI (1265)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateTrackMainMissionIdScRsp {
    #[prost(uint32, tag = "15")]
    pub prev_track_mission_id: u32,
    #[prost(uint32, tag = "11")]
    pub track_mission_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// FAFGMGHBBAK (1208)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishedMissionScNotify {
    #[prost(uint32, repeated, tag = "4")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// HKMBBHOHNDN (7036)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonopolyInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Noadpklejga {
    #[prost(bool, tag = "12")]
    pub ihbbdakogjd: bool,
    #[prost(uint32, tag = "9")]
    pub jnklgaplbcg: u32,
    #[prost(uint32, tag = "7")]
    pub item_value: u32,
    #[prost(uint32, tag = "2")]
    pub lanbekhaggb: u32,
    #[prost(uint32, tag = "1")]
    pub fgaaoaeledg: u32,
    #[prost(bool, tag = "14")]
    pub mgkkfinfhgj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Melijbjpkmf {
    #[prost(uint32, repeated, tag = "4")]
    pub gdjbmilobaa: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Neikgnkfggi", tag = "7")]
    pub dbfgedlifdn: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcefhiplmkb {
    #[prost(uint32, tag = "12")]
    pub progress: u32,
    #[prost(uint32, tag = "2")]
    pub hibcnbpkfln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bloeoedikad {
    #[prost(uint64, tag = "8")]
    pub nhonhiimpcg: u64,
    #[prost(bool, tag = "12")]
    pub is_taken_reward: bool,
    #[prost(bool, tag = "4")]
    pub bkfoglfcdhe: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nacibcfjgkf {
    #[prost(message, repeated, tag = "14")]
    pub idahgfaiide: ::prost::alloc::vec::Vec<Lcefhiplmkb>,
    #[prost(message, repeated, tag = "12")]
    pub pghnjepdmpc: ::prost::alloc::vec::Vec<Bloeoedikad>,
    #[prost(uint64, tag = "8")]
    pub gefjfhdkknn: u64,
    #[prost(uint32, tag = "7")]
    pub mheghlglfcn: u32,
    #[prost(uint64, tag = "10")]
    pub akkodgemoah: u64,
    #[prost(message, repeated, tag = "5")]
    pub kgccokajoah: ::prost::alloc::vec::Vec<Lcefhiplmkb>,
    #[prost(string, tag = "1961")]
    pub lggfjddaaeb: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub eemkjpbedbc: bool,
    #[prost(uint32, tag = "13")]
    pub faclnpllhlg: u32,
    #[prost(message, repeated, tag = "3")]
    pub ldnncklpdoi: ::prost::alloc::vec::Vec<Lcefhiplmkb>,
    #[prost(string, tag = "769")]
    pub fhmdalhdfaf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1")]
    pub gngafhellpb: u32,
    #[prost(uint32, tag = "9")]
    pub nlepajbhogl: u32,
    #[prost(message, repeated, tag = "4")]
    pub mbpfjacgbag: ::prost::alloc::vec::Vec<Lcefhiplmkb>,
    #[prost(uint32, tag = "2")]
    pub oienllihdab: u32,
    #[prost(uint64, tag = "15")]
    pub ajnnaalmifl: u64,
    #[prost(string, tag = "1582")]
    pub ojkddpbkeen: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub fcejjhlcoim: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afbgdoplipp {
    #[prost(message, repeated, tag = "1")]
    pub abcjiognklj: ::prost::alloc::vec::Vec<Nacibcfjgkf>,
}
/// MOGBLAENPBG (7095)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMonopolyInfoScRsp {
    #[prost(message, optional, tag = "2")]
    pub lcdeklobidi: ::core::option::Option<Melijbjpkmf>,
    #[prost(message, optional, tag = "6")]
    pub kifphhdkefp: ::core::option::Option<Gfjkkcmfeil>,
    #[prost(message, optional, tag = "9")]
    pub okpdpgbcfdb: ::core::option::Option<Afbgdoplipp>,
    #[prost(message, optional, tag = "4")]
    pub stt: ::core::option::Option<Bjbmlpgmacp>,
    #[prost(message, optional, tag = "7")]
    pub bjpllekemmb: ::core::option::Option<Dhidlpcfjma>,
    #[prost(message, optional, tag = "3")]
    pub ijdofkaecgb: ::core::option::Option<Eajgcpihobj>,
    #[prost(message, optional, tag = "12")]
    pub babpbdkofph: ::core::option::Option<Jbnleopnibh>,
    #[prost(message, optional, tag = "5")]
    pub rogue_buff_info: ::core::option::Option<Fjajgjhibfi>,
    #[prost(message, optional, tag = "13")]
    pub ahjelpmedlk: ::core::option::Option<Poillaagjan>,
    #[prost(uint32, repeated, tag = "11")]
    pub abbfdnooifk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub fpgmdipjkdj: ::core::option::Option<Ofilbnbplge>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub ppnhhkfdefk: ::core::option::Option<Noadpklejga>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eajgcpihobj {
    #[prost(uint32, repeated, tag = "15")]
    pub bhinblmcgme: ::prost::alloc::vec::Vec<u32>,
}
/// GAELBIHPPGA (7015)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyConditionUpdateScNotify {
    #[prost(message, optional, tag = "11")]
    pub ijdofkaecgb: ::core::option::Option<Eajgcpihobj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjbmlpgmacp {
    #[prost(uint32, repeated, tag = "5")]
    pub icbmhiaiemf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub gjdknlalpjg: ::prost::alloc::vec::Vec<u32>,
}
/// AIFABIEIDKP (7032)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolySttUpdateScNotify {
    #[prost(message, optional, tag = "11")]
    pub stt: ::core::option::Option<Bjbmlpgmacp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Foknllkiceo {
    #[prost(uint32, tag = "11")]
    pub cell_id: u32,
    #[prost(enumeration = "Dapbkiamoae", tag = "4")]
    pub ipnhbcmgcke: i32,
    #[prost(bool, tag = "8")]
    pub gkdmkonffng: bool,
    #[prost(uint32, tag = "5")]
    pub map_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofilbnbplge {
    #[prost(uint32, tag = "14")]
    pub eipcehhpmfk: u32,
    #[prost(message, repeated, tag = "1")]
    pub inpeoidjgil: ::prost::alloc::vec::Vec<Foknllkiceo>,
    #[prost(uint32, tag = "6")]
    pub bhmijggpfnm: u32,
    #[prost(message, optional, tag = "11")]
    pub lpfpagojilh: ::core::option::Option<Foknllkiceo>,
    #[prost(message, repeated, tag = "5")]
    pub kkmbddibiip: ::prost::alloc::vec::Vec<Foknllkiceo>,
}
/// LFNFJHECMMH (7001)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyEventLoadUpdateScNotify {
    #[prost(message, repeated, tag = "3")]
    pub kkmbddibiip: ::prost::alloc::vec::Vec<Foknllkiceo>,
    #[prost(message, repeated, tag = "1")]
    pub inpeoidjgil: ::prost::alloc::vec::Vec<Foknllkiceo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnmkmpmmogn {
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcafgmcigih {
    #[prost(uint32, tag = "5")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maghedpcpoa {
    #[prost(uint32, tag = "13")]
    pub cjbdahmahkn: u32,
    #[prost(uint32, tag = "11")]
    pub pgkfdnodhem: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub jipdifkknjh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djmogjknmpk {
    #[prost(uint32, tag = "3")]
    pub pgkfdnodhem: u32,
    #[prost(uint32, tag = "4")]
    pub lhndhmnpclj: u32,
    #[prost(uint32, tag = "8")]
    pub niipfbkabip: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub jipdifkknjh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckmhlmllehd {
    #[prost(message, repeated, tag = "7")]
    pub lmielhpbbec: ::prost::alloc::vec::Vec<Ohjaijkaadk>,
    #[prost(uint32, tag = "8")]
    pub cakaemfckfl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nngocpdilnc {
    #[prost(uint32, tag = "13")]
    pub ejledajjddh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Glgfgclniil {
    #[prost(uint32, tag = "8")]
    pub shop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddkjllpjnob {
    #[prost(uint32, tag = "12")]
    pub bhfpddkkpel: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Memiecbaaja {
    #[prost(uint32, tag = "7")]
    pub ejdepkeaoli: u32,
    #[prost(uint32, tag = "15")]
    pub abdgfjelhhk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohjaijkaadk {
    #[prost(uint32, tag = "4")]
    pub onkchdemocf: u32,
    #[prost(oneof = "ohjaijkaadk::Npldlogogoi", tags = "6, 12, 3, 2, 13, 10, 1, 15, 7")]
    pub npldlogogoi: ::core::option::Option<ohjaijkaadk::Npldlogogoi>,
}
/// Nested message and enum types in `OHJAIJKAADK`.
pub mod ohjaijkaadk {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Npldlogogoi {
        #[prost(message, tag = "6")]
        Amgppoofhll(super::Mnmkmpmmogn),
        #[prost(message, tag = "12")]
        Nhelbahfoih(super::Hcafgmcigih),
        #[prost(message, tag = "3")]
        Fihpgeehmmb(super::Maghedpcpoa),
        #[prost(message, tag = "2")]
        Lojccieifpc(super::Nngocpdilnc),
        #[prost(message, tag = "13")]
        Jlcfpkehljd(super::Glgfgclniil),
        #[prost(message, tag = "10")]
        Dcfncdeieom(super::Ddkjllpjnob),
        #[prost(message, tag = "1")]
        Geeeemenlpm(super::Memiecbaaja),
        #[prost(message, tag = "15")]
        Flopgkpheop(super::Djmogjknmpk),
        #[prost(message, tag = "7")]
        Hkofflpclog(super::Ckmhlmllehd),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbnleopnibh {
    #[prost(message, optional, tag = "9")]
    pub khdjjnljnmo: ::core::option::Option<Ohjaijkaadk>,
}
/// PFAKDICOEKJ (7088)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyContentUpdateScNotify {
    #[prost(message, optional, tag = "4")]
    pub khdjjnljnmo: ::core::option::Option<Ohjaijkaadk>,
}
/// BBEKCOBDPEA (7027)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyCellUpdateNotify {
    #[prost(message, optional, tag = "6")]
    pub lpfpagojilh: ::core::option::Option<Foknllkiceo>,
}
/// IHKJAEEOMKF (7028)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyRollDiceCsReq {}
/// OFEEBFOKCPE (7052)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyRollDiceScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub khghcpbdlhe: u32,
}
/// MKGEPPOJDKA (7050)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyCheatDiceCsReq {
    #[prost(uint32, tag = "13")]
    pub hdpdpaafgin: u32,
}
/// NBCHFMDJJFG (7048)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyCheatDiceScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub hdpdpaafgin: u32,
}
/// KPOFPJKKBFI (7074)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyMoveCsReq {
    #[prost(uint32, tag = "4")]
    pub fklbhncojim: u32,
    #[prost(uint32, tag = "6")]
    pub gfmlhcbjpcb: u32,
}
/// ICHAEPMJMIC (7024)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyMoveScRsp {
    #[prost(message, repeated, tag = "15")]
    pub cpaaocikdoc: ::prost::alloc::vec::Vec<Foknllkiceo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub fpgmdipjkdj: ::core::option::Option<Ofilbnbplge>,
}
/// IKNKFLNKHFH (7093)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolySelectOptionCsReq {
    #[prost(uint32, tag = "7")]
    pub cjbdahmahkn: u32,
    #[prost(uint32, tag = "11")]
    pub event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pboijfbeffb {
    #[prost(uint32, tag = "4")]
    pub cjbdahmahkn: u32,
    #[prost(uint32, tag = "5")]
    pub odmkkpbmmci: u32,
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
}
/// HPOMCFEBLKO (7034)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolySelectOptionScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub jeimcaicclf: ::prost::alloc::vec::Vec<Pboijfbeffb>,
    #[prost(message, optional, tag = "6")]
    pub babpbdkofph: ::core::option::Option<Ohjaijkaadk>,
    #[prost(uint32, tag = "5")]
    pub cjbdahmahkn: u32,
    #[prost(uint32, tag = "12")]
    pub event_id: u32,
}
/// EPHGBBCLLKM (7096)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyRollRandomCsReq {
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
}
/// DIOHEBHAPNM (7005)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyRollRandomScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub babpbdkofph: ::core::option::Option<Ohjaijkaadk>,
    #[prost(uint32, tag = "5")]
    pub event_id: u32,
}
/// NJANFNIPLED (7075)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyReRollRandomCsReq {
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
}
/// BGPGPFCLIAH (7019)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyReRollRandomScRsp {
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub babpbdkofph: ::core::option::Option<Ohjaijkaadk>,
}
/// BIKAINHOIEO (7026)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyConfirmRandomCsReq {
    #[prost(uint32, tag = "7")]
    pub event_id: u32,
}
/// ENKCOBJMNMN (7007)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyConfirmRandomScRsp {
    #[prost(uint32, tag = "7")]
    pub event_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub babpbdkofph: ::core::option::Option<Ohjaijkaadk>,
}
/// IHKPOJHPACI (7053)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyBuyGoodsCsReq {
    #[prost(uint32, tag = "7")]
    pub shop_id: u32,
    #[prost(uint32, tag = "6")]
    pub goods_id: u32,
}
/// PKOAPAHFPJE (7090)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyBuyGoodsScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub shop_id: u32,
    #[prost(uint32, tag = "14")]
    pub goods_id: u32,
}
/// OOKAJJECHBA (7059)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyUpgradeAssetCsReq {
    #[prost(uint32, tag = "2")]
    pub ejledajjddh: u32,
}
/// IJPNDPCINIA (7012)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyUpgradeAssetScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub ejledajjddh: u32,
}
/// LAGDPMFMLNA (7078)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGiveUpCurContentCsReq {
    #[prost(uint32, tag = "1")]
    pub content_id: u32,
}
/// INBOAPKHCEL (7029)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGiveUpCurContentScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyActionResult {
    #[prost(uint32, tag = "1")]
    pub trigger_cell_id: u32,
    #[prost(uint32, tag = "8")]
    pub click_map_id: u32,
    #[prost(uint32, tag = "14")]
    pub effect_type: u32,
    #[prost(message, optional, tag = "3")]
    pub detail: ::core::option::Option<Beaepapghlp>,
    #[prost(enumeration = "Lmehacajfac", tag = "6")]
    pub source_type: i32,
    #[prost(uint32, tag = "12")]
    pub click_cell_id: u32,
    #[prost(uint32, tag = "15")]
    pub trigger_map_id: u32,
}
/// MPJCPDKGFKB (7084)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyActionResultScNotify {
    #[prost(message, repeated, tag = "4")]
    pub hhopoadnecf: ::prost::alloc::vec::Vec<MonopolyActionResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Famddgebeib {
    #[prost(uint32, tag = "11")]
    pub npgnekmcnmn: u32,
    #[prost(bool, tag = "15")]
    pub ojmpbbggefj: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Beaepapghlp {
    #[prost(
        oneof = "beaepapghlp::Focpnbiencn",
        tags = "8, 14, 1, 6, 10, 13, 3, 12, 5, 9, 15, 11, 4"
    )]
    pub focpnbiencn: ::core::option::Option<beaepapghlp::Focpnbiencn>,
}
/// Nested message and enum types in `BEAEPAPGHLP`.
pub mod beaepapghlp {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Focpnbiencn {
        #[prost(message, tag = "8")]
        Hadigpfdfdd(super::Dmobdoofmbi),
        #[prost(message, tag = "14")]
        Nhoobfllamn(super::Dmobdoofmbi),
        #[prost(message, tag = "1")]
        Aineelnllae(super::Geanjpfcadj),
        #[prost(message, tag = "6")]
        Coiojgmchin(super::Geanjpfcadj),
        #[prost(message, tag = "10")]
        GetBuffList(super::Hhldohhkihe),
        #[prost(message, tag = "13")]
        Jgedahnkogm(super::Hhldohhkihe),
        #[prost(message, tag = "3")]
        Lnjbkcpamin(super::Bcjgdljbgfb),
        #[prost(message, tag = "12")]
        Eiggabeeajn(super::Bcjgdljbgfb),
        #[prost(message, tag = "5")]
        Mpdjcaplclg(super::Famddgebeib),
        #[prost(message, tag = "9")]
        Chhfiefiole(super::Epdnagocbjn),
        #[prost(message, tag = "15")]
        Nkihgllanob(super::Hhldohhkihe),
        #[prost(message, tag = "11")]
        Dmdilnmgjmg(super::Bcjgdljbgfb),
        #[prost(message, tag = "4")]
        Epcochjagfj(super::Ngdhpcdehom),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngdhpcdehom {
    #[prost(uint32, tag = "2")]
    pub pekbgadgilg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmobdoofmbi {
    #[prost(uint32, tag = "10")]
    pub jcecgjoapmm: u32,
    #[prost(uint32, tag = "2")]
    pub kikmlgbccae: u32,
    #[prost(uint32, tag = "15")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcjgdljbgfb {
    #[prost(uint32, tag = "10")]
    pub kbjgpelddfc: u32,
    #[prost(uint32, tag = "14")]
    pub ecgbdlbepnn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Epdnagocbjn {
    #[prost(uint32, tag = "10")]
    pub hfjikejhlmm: u32,
    #[prost(uint32, tag = "9")]
    pub ngekjoikjef: u32,
    #[prost(uint32, tag = "1")]
    pub fighdaflmfe: u32,
    #[prost(uint32, tag = "11")]
    pub pagikofammm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjddkmbheco {
    #[prost(uint32, tag = "2")]
    pub config_id: u32,
    #[prost(uint32, tag = "3")]
    pub jcfmbcnihlk: u32,
    #[prost(uint32, tag = "10")]
    pub moclgigghne: u32,
    #[prost(oneof = "gjddkmbheco::Gclmjjcmdnf", tags = "11, 1, 8")]
    pub gclmjjcmdnf: ::core::option::Option<gjddkmbheco::Gclmjjcmdnf>,
}
/// Nested message and enum types in `GJDDKMBHECO`.
pub mod gjddkmbheco {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Gclmjjcmdnf {
        #[prost(message, tag = "11")]
        Ndagifbopcp(super::Pcnpniajhej),
        #[prost(message, tag = "1")]
        Bghalkpkcoa(super::Kpemdianbgo),
        #[prost(message, tag = "8")]
        Mgeneagklol(super::Lciggkjmkjl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhidlpcfjma {
    #[prost(message, repeated, tag = "7")]
    pub behmknddfeo: ::prost::alloc::vec::Vec<Gjddkmbheco>,
    #[prost(message, optional, tag = "12")]
    pub aibnkgjdbif: ::core::option::Option<Gjddkmbheco>,
    #[prost(message, optional, tag = "13")]
    pub eojgidpkmjm: ::core::option::Option<Famddgebeib>,
}
/// KJLPNCIDFID (7076)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameSettleScNotify {
    #[prost(message, optional, tag = "9")]
    pub meeafmcnjie: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "13")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub dcfncdeieom: ::core::option::Option<Gjddkmbheco>,
}
/// PILGNJBLDDB (7008)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameCreateScNotify {
    #[prost(message, optional, tag = "8")]
    pub dcfncdeieom: ::core::option::Option<Gjddkmbheco>,
    #[prost(message, optional, tag = "6")]
    pub eojgidpkmjm: ::core::option::Option<Famddgebeib>,
}
/// EBJKOHGBAKG (7058)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGameRaiseRatioCsReq {
    #[prost(uint32, tag = "5")]
    pub jcfmbcnihlk: u32,
}
/// MonopolyGameRaiseRatioScRsp (7010)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGameRaiseRatioScRsp {
    #[prost(uint32, tag = "10")]
    pub ratio: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// HKMKBOAKOHO (7046)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyFirstEnterMonopolyActivityCsReq {}
/// FILHMMPAECP (7025)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyFirstEnterMonopolyActivityScRsp {
    #[prost(message, optional, tag = "8")]
    pub kifphhdkefp: ::core::option::Option<Gfjkkcmfeil>,
    #[prost(bool, tag = "10")]
    pub oegkmpeelhg: bool,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(int64, tag = "1")]
    pub clgngejeppf: i64,
    #[prost(uint32, tag = "13")]
    pub dcclbmapdbc: u32,
}
/// FEDPAJGKLNG (7063)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGetDailyInitItemCsReq {
    #[prost(bool, tag = "11")]
    pub cbcdplgpeak: bool,
}
/// EAFPJJINGGK (7089)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGetDailyInitItemScRsp {
    #[prost(uint32, tag = "15")]
    pub ncoikodkhch: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub jjjmlidbein: u32,
    #[prost(int64, tag = "12")]
    pub clgngejeppf: i64,
    #[prost(uint32, tag = "13")]
    pub clmjnnfpaoa: u32,
    #[prost(uint32, tag = "6")]
    pub hmheangodhn: u32,
    #[prost(uint32, tag = "4")]
    pub hplljdaadoi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcnpniajhej {
    #[prost(uint32, repeated, tag = "12")]
    pub mgolhknamii: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub cdlhlcninep: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "5")]
    pub nibcgclhilg: bool,
    #[prost(uint32, repeated, tag = "1")]
    pub ndckmnplaja: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub inkpcfpllnl: u32,
}
/// FDHPMNIODLM (7017)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGameBingoFlipCardCsReq {
    #[prost(uint32, tag = "5")]
    pub khmokmcehbb: u32,
}
/// LOKBMHBLEAI (7013)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameBingoFlipCardScRsp {
    #[prost(uint32, repeated, tag = "15")]
    pub ndckmnplaja: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub aaijabgnada: u32,
    #[prost(bool, tag = "6")]
    pub nibcgclhilg: bool,
}
/// ILEABJDOGFB (7035)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGameGachaCsReq {}
/// MonopolyGameGachaScRsp (7073)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameGachaScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub result_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icnedocpbpp {
    #[prost(uint32, tag = "6")]
    pub lojnefogefn: u32,
    #[prost(uint32, tag = "4")]
    pub dlgojbmdjie: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpemdianbgo {
    #[prost(uint32, tag = "2")]
    pub ekdpoigoncd: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub bjbfoakiggh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub pabihfgnpkg: u32,
    #[prost(uint32, tag = "9")]
    pub haodfemapml: u32,
    #[prost(message, repeated, tag = "6")]
    pub ikhobnldecj: ::prost::alloc::vec::Vec<Icnedocpbpp>,
    #[prost(uint32, tag = "10")]
    pub dolnfgmpogc: u32,
}
/// CNOFGGKFLOK (7021)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyAcceptQuizCsReq {
    #[prost(message, repeated, tag = "10")]
    pub ikhobnldecj: ::prost::alloc::vec::Vec<Icnedocpbpp>,
}
/// BAHIKNJNHOH (7065)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyAcceptQuizScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub bghalkpkcoa: ::core::option::Option<Kpemdianbgo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmndnhfefcb {
    #[prost(uint32, tag = "11")]
    pub pabihfgnpkg: u32,
    #[prost(uint32, tag = "7")]
    pub hakcedfccha: u32,
    #[prost(uint32, tag = "12")]
    pub dfehdbhllko: u32,
}
/// IAKOAIIHANO (7039)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyQuizDurationChangeScNotify {
    #[prost(message, repeated, tag = "2")]
    pub npfkmgonkfk: ::prost::alloc::vec::Vec<Mmndnhfefcb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lciggkjmkjl {
    #[prost(bool, tag = "2")]
    pub ajheplfnonc: bool,
    #[prost(uint32, tag = "11")]
    pub cilhldkohhp: u32,
    #[prost(uint32, tag = "3")]
    pub omoodmnoloc: u32,
}
/// LICFHPELKHD (7018)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGuessChooseCsReq {
    #[prost(uint32, tag = "12")]
    pub omoodmnoloc: u32,
}
/// LEDPCCCLODN (7037)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGuessChooseScRsp {
    #[prost(uint32, tag = "15")]
    pub omoodmnoloc: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nghohldbchp {
    #[prost(uint32, tag = "5")]
    pub ibkhmiclebj: u32,
    #[prost(uint32, tag = "9")]
    pub cilhldkohhp: u32,
    #[prost(message, optional, tag = "8")]
    pub item_list: ::core::option::Option<ItemList>,
}
/// KLNOCFKNAPA (7081)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGuessDrawScNotify {
    #[prost(message, repeated, tag = "10")]
    pub holkokaabnl: ::prost::alloc::vec::Vec<Nghohldbchp>,
}
/// EPGIJKGPHNG (7011)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGuessBuyInformationCsReq {}
/// MODDJBDFOOB (7079)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGuessBuyInformationScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Geanjpfcadj {
    #[prost(uint32, tag = "10")]
    pub ejledajjddh: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub mijgknpmidl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Poillaagjan {
    #[prost(message, repeated, tag = "5")]
    pub jnlnbfgfjii: ::prost::alloc::vec::Vec<Geanjpfcadj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfjkkcmfeil {
    #[prost(uint32, tag = "2")]
    pub fkdokckijah: u32,
    #[prost(bool, tag = "7")]
    pub pnpnllccdkh: bool,
    #[prost(uint32, tag = "9")]
    pub kdacfdjgfcm: u32,
    #[prost(uint32, tag = "11")]
    pub hfgplbjfbpk: u32,
    #[prost(uint32, tag = "3")]
    pub lbgcgfakego: u32,
    #[prost(uint32, tag = "8")]
    pub gaahdpkdgii: u32,
    #[prost(uint32, tag = "14")]
    pub jncefjmgkgc: u32,
    #[prost(uint32, tag = "15")]
    pub aajppiegehg: u32,
    #[prost(uint32, tag = "10")]
    pub bfdoldacbol: u32,
}
/// HMFAPCHOMHC (7094)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyDailySettleScNotify {
    #[prost(message, optional, tag = "5")]
    pub kifphhdkefp: ::core::option::Option<Gfjkkcmfeil>,
    #[prost(uint32, tag = "9")]
    pub dcclbmapdbc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhldohhkihe {
    #[prost(uint32, tag = "12")]
    pub onkchdemocf: u32,
    #[prost(uint32, tag = "14")]
    pub dehahojljik: u32,
    #[prost(uint32, tag = "4")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjajgjhibfi {
    #[prost(message, repeated, tag = "5")]
    pub buff_list: ::prost::alloc::vec::Vec<Hhldohhkihe>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckbcahobkbh {
    #[prost(uint32, tag = "14")]
    pub kdacfdjgfcm: u32,
    #[prost(uint32, tag = "7")]
    pub bamfgmlflhe: u32,
    #[prost(uint32, tag = "13")]
    pub bfdoldacbol: u32,
    #[prost(uint32, tag = "6")]
    pub kmlejajfkba: u32,
    #[prost(uint32, tag = "2")]
    pub uid: u32,
}
/// IJIOEPHCLMG (7092)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonopolyFriendRankingListCsReq {}
/// GDBCJPHMFPH (7060)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMonopolyFriendRankingListScRsp {
    #[prost(message, optional, tag = "3")]
    pub opolopohlok: ::core::option::Option<Ckbcahobkbh>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub kkaplkkjece: ::prost::alloc::vec::Vec<Ckbcahobkbh>,
}
/// BMEMJHECPBC (7045)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyLikeCsReq {
    #[prost(uint32, tag = "4")]
    pub hjaohlgpocp: u32,
}
/// IEBLENKANOK (7064)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyLikeScRsp {
    #[prost(message, optional, tag = "7")]
    pub reward_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub hjaohlgpocp: u32,
}
/// HABENCNJFDP (7072)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyLikeScNotify {
    #[prost(uint32, repeated, tag = "3")]
    pub gdjbmilobaa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub bamfgmlflhe: u32,
}
/// GPLEHKGGBBF (7099)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMbtiReportCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dplpmbfkial {
    #[prost(uint32, tag = "4")]
    pub cnt: u32,
    #[prost(uint32, tag = "6")]
    pub gofokfinddn: u32,
}
/// DNMKLJPHHBG (7003)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMbtiReportScRsp {
    #[prost(message, repeated, tag = "4")]
    pub jeimcaicclf: ::prost::alloc::vec::Vec<Pboijfbeffb>,
    #[prost(bool, tag = "7")]
    pub palkhghnfbm: bool,
    #[prost(message, repeated, tag = "6")]
    pub lmkdkjecngg: ::prost::alloc::vec::Vec<Dplpmbfkial>,
    #[prost(uint32, tag = "5")]
    pub progress: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(int32, tag = "15")]
    pub kgighdjlhdh: i32,
    #[prost(bool, tag = "13")]
    pub is_taken_reward: bool,
    #[prost(int32, tag = "12")]
    pub gchiehlpnhc: i32,
}
/// IJKIGHKCJCL (7040)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyEventSelectFriendCsReq {
    #[prost(uint32, tag = "8")]
    pub bdndenhpded: u32,
    #[prost(bool, tag = "5")]
    pub jiegfhbbkif: bool,
}
/// LCAKECGNKIO (7061)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyEventSelectFriendScRsp {
    #[prost(uint32, tag = "15")]
    pub abdgfjelhhk: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub ejdepkeaoli: u32,
    #[prost(message, optional, tag = "3")]
    pub lpfpagojilh: ::core::option::Option<Foknllkiceo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SocialEventServerCache {
    #[prost(uint32, tag = "11")]
    pub add_coin: u32,
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, tag = "15")]
    pub src_uid: u32,
    #[prost(uint32, tag = "7")]
    pub sub_coin: u32,
}
/// AGEIJEAIANN (7030)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolySocialEventEffectScNotify {
    #[prost(message, repeated, tag = "5")]
    pub dbdehmpagbh: ::prost::alloc::vec::Vec<SocialEventServerCache>,
}
/// CEICHOJPHAH (7033)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSocialEventServerCacheCsReq {}
/// PGPJILAALNH (7097)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSocialEventServerCacheScRsp {
    #[prost(message, repeated, tag = "4")]
    pub dbdehmpagbh: ::prost::alloc::vec::Vec<SocialEventServerCache>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// LEIPBMNKNJJ (7083)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSocialEventServerCacheCsReq {
    #[prost(uint32, repeated, tag = "4")]
    pub cifanhocaok: ::prost::alloc::vec::Vec<u32>,
}
/// JGPNKKGCLIH (7068)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSocialEventServerCacheScRsp {
    #[prost(uint32, repeated, tag = "11")]
    pub eopdoeglcii: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// GDGDNGNFKNN (7016)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGetRaffleTicketCsReq {
    #[prost(uint32, tag = "6")]
    pub fcejjhlcoim: u32,
}
/// HJBLBMHBHBK (7047)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGetRaffleTicketScRsp {
    #[prost(message, repeated, tag = "12")]
    pub ghiccfchedf: ::prost::alloc::vec::Vec<Bloeoedikad>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub fcejjhlcoim: u32,
}
/// LJHIPEMCNNP (7049)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyTakeRaffleTicketRewardCsReq {
    #[prost(uint32, tag = "8")]
    pub fcejjhlcoim: u32,
    #[prost(uint64, tag = "1")]
    pub oiplnennmmo: u64,
}
/// CEIFIBCHJKN (7070)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyTakeRaffleTicketRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub fcejjhlcoim: u32,
    #[prost(uint32, tag = "11")]
    pub oiplnennmmo: u32,
    #[prost(message, optional, tag = "10")]
    pub reward_list: ::core::option::Option<ItemList>,
}
/// EPGJGMNPBBD (7098)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyScrachRaffleTicketCsReq {
    #[prost(uint32, tag = "15")]
    pub fcejjhlcoim: u32,
    #[prost(uint64, tag = "1")]
    pub oiplnennmmo: u64,
}
/// EHOAHJMKKIC (7091)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyScrachRaffleTicketScRsp {
    #[prost(uint64, tag = "2")]
    pub oiplnennmmo: u64,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub fcejjhlcoim: u32,
}
/// PJCDDNKMPMG (7044)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGetRegionProgressCsReq {}
/// KLEPCFDGMEJ (7023)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGetRegionProgressScRsp {
    #[prost(uint32, tag = "13")]
    pub kmlejajfkba: u32,
    #[prost(uint32, tag = "9")]
    pub dhkgjogokdh: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// BNFHAPJJEKH (7069)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGetRafflePoolInfoCsReq {}
/// MDDPKOHLJHC (7056)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGetRafflePoolInfoScRsp {
    #[prost(message, optional, tag = "15")]
    pub okpdpgbcfdb: ::core::option::Option<Afbgdoplipp>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// CFNIFEEHLBB (7009)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyTakePhaseRewardCsReq {
    #[prost(uint32, repeated, tag = "12")]
    pub dbdhbcokfmk: ::prost::alloc::vec::Vec<u32>,
}
/// GPDPLHJDFNG (7020)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyTakePhaseRewardScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub dbdhbcokfmk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "3")]
    pub reward_list: ::core::option::Option<ItemList>,
}
/// PLBEAHABGLO (7082)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonopolyMbtiReportRewardCsReq {}
/// DDMBCPALLFF (7080)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMonopolyMbtiReportRewardScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub reward_list: ::core::option::Option<ItemList>,
}
/// OGHNGEBGLFK (7038)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonopolyDailyReportCsReq {}
/// GFHLODDBMFB (7087)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMonopolyDailyReportScRsp {
    #[prost(message, optional, tag = "7")]
    pub kifphhdkefp: ::core::option::Option<Gfjkkcmfeil>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// ENFCCLBODDC (7086)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyClickCellCsReq {
    #[prost(uint32, tag = "13")]
    pub cell_id: u32,
    #[prost(uint32, tag = "10")]
    pub map_id: u32,
}
/// BDEAELDIDCB (7066)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyClickCellScRsp {
    #[prost(uint32, tag = "14")]
    pub map_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub cell_id: u32,
}
/// PKNCBEAOPEM (7085)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyClickMbtiReportCsReq {}
/// OGJGNGOJJGJ (7062)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyClickMbtiReportScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// KIOHILONNPH (1036)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiplayerFightGameStateCsReq {}
/// OFDEEMDILHA (1095)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiplayerFightGameStateScRsp {
    #[prost(message, repeated, tag = "13")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
    #[prost(message, optional, tag = "2")]
    pub kcpfmjcknln: ::core::option::Option<Gciboeobjjh>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// MIJHNAHHILP (1084)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiplayerGetFightGateCsReq {
    #[prost(uint32, tag = "4")]
    pub bjinfjnfonl: u32,
}
/// DCDIIMJCLMN (1027)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiplayerGetFightGateScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub epjkijllckm: u32,
    #[prost(string, tag = "7")]
    pub dmodigdlecd: ::prost::alloc::string::String,
    #[prost(uint64, tag = "11")]
    pub fdboeognpfb: u64,
    #[prost(string, tag = "1")]
    pub lnfophgbmgb: ::prost::alloc::string::String,
}
/// ABLHPHEJMOC (1067)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiplayerFightGiveUpCsReq {
    #[prost(uint64, tag = "1")]
    pub fdboeognpfb: u64,
}
/// AADPAJABHOJ (1028)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiplayerFightGiveUpScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// LCJNJLBNNKH (1052)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiplayerFightGameStartScNotify {
    #[prost(message, optional, tag = "7")]
    pub kcpfmjcknln: ::core::option::Option<Gciboeobjjh>,
    #[prost(message, repeated, tag = "12")]
    pub lhifalkbalm: ::prost::alloc::vec::Vec<Gdohnmgabge>,
}
/// MMOAODBOIIM (1074)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiplayerFightGameFinishScNotify {
    #[prost(message, optional, tag = "3")]
    pub kcpfmjcknln: ::core::option::Option<Gciboeobjjh>,
}
/// NJMDBPLBJFB (1024)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiplayerMatch3FinishScNotify {
    #[prost(uint32, tag = "4")]
    pub mgkmbmkkkkc: u32,
    #[prost(enumeration = "Match3FinishReason", tag = "11")]
    pub reason: i32,
    #[prost(uint32, tag = "7")]
    pub ifoidmjnhig: u32,
    #[prost(message, optional, tag = "13")]
    pub bnpfgbeclde: ::core::option::Option<Cokmefolddh>,
}
/// IAAGFENCICC (4636)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMultipleDropInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghdmaabbcdo {
    #[prost(uint32, tag = "14")]
    pub aghbpemfhjh: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
/// JDCEOLPLPLM (4695)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMultipleDropInfoScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub ciiddgpgppi: ::prost::alloc::vec::Vec<Alaicpoommg>,
    #[prost(message, repeated, tag = "8")]
    pub dkhmaloophb: ::prost::alloc::vec::Vec<Ghdmaabbcdo>,
}
/// ILBOKKKMOGO (4684)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultipleDropInfoScNotify {
    #[prost(message, repeated, tag = "13")]
    pub dkhmaloophb: ::prost::alloc::vec::Vec<Ghdmaabbcdo>,
}
/// CAJGKMDIFBE (4627)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerReturnMultiDropInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbioeokeefl {
    #[prost(uint32, tag = "9")]
    pub cdkafbfknoj: u32,
    #[prost(uint32, tag = "5")]
    pub lnfdinhibgk: u32,
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
    #[prost(uint32, tag = "10")]
    pub ddgpcppgmef: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Alaicpoommg {
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
    #[prost(uint32, tag = "2")]
    pub bijmeoodfgn: u32,
    #[prost(uint32, tag = "5")]
    pub kimhpmldmai: u32,
    #[prost(uint32, tag = "15")]
    pub jloijknceam: u32,
}
/// KONEKKABCEG (4667)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerReturnMultiDropInfoScRsp {
    #[prost(message, optional, tag = "3")]
    pub bnadncahljp: ::core::option::Option<Cbioeokeefl>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub ciiddgpgppi: ::prost::alloc::vec::Vec<Alaicpoommg>,
}
/// JNKOBFFHMMA (4628)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultipleDropInfoNotify {
    #[prost(message, repeated, tag = "13")]
    pub aflgjhjloda: ::prost::alloc::vec::Vec<Cbioeokeefl>,
    #[prost(message, repeated, tag = "14")]
    pub ciiddgpgppi: ::prost::alloc::vec::Vec<Alaicpoommg>,
    #[prost(message, repeated, tag = "7")]
    pub dkhmaloophb: ::prost::alloc::vec::Vec<Ghdmaabbcdo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mknagngbfoi {
    #[prost(enumeration = "Medpdealgmj", tag = "4")]
    pub pos: i32,
    #[prost(uint32, tag = "12")]
    pub pomeofhemgh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjdaapoapai {
    #[prost(uint32, tag = "11")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(message, repeated, tag = "13")]
    pub echidideccg: ::prost::alloc::vec::Vec<Mknagngbfoi>,
    #[prost(uint32, tag = "7")]
    pub cabgojfipjk: u32,
    #[prost(uint32, tag = "1")]
    pub lcafnngifnm: u32,
    #[prost(uint32, tag = "8")]
    pub aafmajbcpkb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjlgidlkjnb {
    #[prost(uint32, tag = "3")]
    pub aennjbmdino: u32,
    #[prost(bool, tag = "9")]
    pub is_finish: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igpfnhkhmpk {
    #[prost(uint32, tag = "11")]
    pub bofklgcaknp: u32,
    #[prost(uint32, tag = "2")]
    pub dlhiimmfgkn: u32,
    #[prost(uint32, tag = "8")]
    pub ialfckmfdnf: u32,
    #[prost(uint32, tag = "9")]
    pub edbleiecolj: u32,
    #[prost(message, repeated, tag = "5")]
    pub eignnbnggeg: ::prost::alloc::vec::Vec<Hjlgidlkjnb>,
    #[prost(uint32, tag = "13")]
    pub akljpebkmoh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jooladoghge {
    #[prost(uint32, tag = "1")]
    pub pomeofhemgh: u32,
    #[prost(uint32, tag = "11")]
    pub apbjmeocbfa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ialalmggdfo {
    #[prost(uint32, tag = "11")]
    pub iobcgembldo: u32,
    #[prost(uint32, tag = "1")]
    pub plonljihmbf: u32,
    #[prost(uint32, tag = "8")]
    pub fodaabppblb: u32,
    #[prost(enumeration = "Egjlnpaoffn", tag = "3")]
    pub state: i32,
    #[prost(uint32, tag = "2")]
    pub event_id: u32,
    #[prost(uint32, tag = "13")]
    pub ehdkddbikdk: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ipjkaceapin: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkmjcmmdhhj {
    #[prost(uint32, repeated, tag = "8")]
    pub jkacodgbgji: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub jpgocegdlol: ::prost::alloc::vec::Vec<Ialalmggdfo>,
    #[prost(uint32, tag = "4")]
    pub ppgcbkbedng: u32,
}
/// HPDJEKFBHMP (4336)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMuseumInfoCsReq {}
/// EPPLAHFODIJ (4395)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMuseumInfoScRsp {
    #[prost(uint32, repeated, tag = "4")]
    pub fbchklngjfm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub ehmiphnnfmk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub fnmjjmbpcjf: u32,
    #[prost(uint32, tag = "12")]
    pub fihpgeehmmb: u32,
    #[prost(message, optional, tag = "15")]
    pub dachmecjpei: ::core::option::Option<Igpfnhkhmpk>,
    #[prost(uint32, tag = "5")]
    pub exp: u32,
    #[prost(message, optional, tag = "13")]
    pub oapjalcoecf: ::core::option::Option<Nkmjcmmdhhj>,
    #[prost(uint32, tag = "14")]
    pub gcnmiifkhgi: u32,
    #[prost(uint32, tag = "7")]
    pub coin_cost: u32,
    #[prost(uint32, tag = "8")]
    pub mocheecbdij: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(message, repeated, tag = "10")]
    pub hnhclcbjaim: ::prost::alloc::vec::Vec<Bjdaapoapai>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub echidideccg: ::prost::alloc::vec::Vec<Jooladoghge>,
}
/// FEKLMAMMOHB (4384)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyNpcStuffCsReq {
    #[prost(uint32, tag = "5")]
    pub pomeofhemgh: u32,
}
/// BPLJKJCEAHI (4327)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyNpcStuffScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub pomeofhemgh: u32,
}
/// FINHNOBKOPP (4367)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetStuffToAreaCsReq {
    #[prost(uint32, tag = "12")]
    pub pomeofhemgh: u32,
    #[prost(enumeration = "Medpdealgmj", tag = "8")]
    pub pos: i32,
    #[prost(uint32, tag = "13")]
    pub apbjmeocbfa: u32,
}
/// IKKDPHALHKF (4328)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetStuffToAreaScRsp {
    #[prost(uint32, tag = "8")]
    pub apbjmeocbfa: u32,
    #[prost(uint32, tag = "7")]
    pub pomeofhemgh: u32,
    #[prost(enumeration = "Medpdealgmj", tag = "4")]
    pub pos: i32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// EPGNPMDGFNI (4352)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveStuffFromAreaCsReq {
    #[prost(uint32, tag = "6")]
    pub pomeofhemgh: u32,
}
/// HMBAJMJBABN (4374)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveStuffFromAreaScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub pomeofhemgh: u32,
}
/// JKPJGFLLEIB (4324)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStuffScNotify {
    #[prost(enumeration = "Bmnapjnpmbc", tag = "10")]
    pub bjmopkchelk: i32,
    #[prost(uint32, tag = "14")]
    pub pomeofhemgh: u32,
}
/// GGILNFLPMEI (4393)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetExhibitScNotify {
    #[prost(uint32, tag = "2")]
    pub bfkiploenpo: u32,
}
/// ALAGDMIHNPK (4334)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishCurTurnCsReq {
    #[prost(uint32, tag = "3")]
    pub enhlfdgkfjh: u32,
}
/// OJAEEDPCJFJ (4343)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishCurTurnScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub chgecnjaogg: u32,
}
/// KCGLHILAEOJ (4346)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpgradeAreaCsReq {
    #[prost(uint32, tag = "9")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
/// KFPBONBALDL (4325)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpgradeAreaScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub kjkpmffamfk: u32,
}
/// NALJHILLEFB (4396)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpgradeAreaStatCsReq {
    #[prost(uint32, tag = "13")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(enumeration = "Nocjbehejbn", tag = "5")]
    pub cffmojghjlm: i32,
}
/// CKNFPMIEKGP (4305)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpgradeAreaStatScRsp {
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub kjkpmffamfk: u32,
    #[prost(enumeration = "Nocjbehejbn", tag = "12")]
    pub cffmojghjlm: i32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// LBPKGPOJAPA (4375)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuseumInfoChangedScNotify {
    #[prost(uint32, tag = "4")]
    pub coin_cost: u32,
    #[prost(message, repeated, tag = "15")]
    pub echidideccg: ::prost::alloc::vec::Vec<Jooladoghge>,
    #[prost(uint32, tag = "8")]
    pub fihpgeehmmb: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub ehmiphnnfmk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub fnmjjmbpcjf: u32,
    #[prost(uint32, tag = "11")]
    pub exp: u32,
    #[prost(message, repeated, tag = "3")]
    pub hnhclcbjaim: ::prost::alloc::vec::Vec<Bjdaapoapai>,
    #[prost(uint32, tag = "6")]
    pub mocheecbdij: u32,
    #[prost(uint32, tag = "1")]
    pub gcnmiifkhgi: u32,
    #[prost(message, optional, tag = "13")]
    pub oapjalcoecf: ::core::option::Option<Nkmjcmmdhhj>,
    #[prost(message, optional, tag = "12")]
    pub dachmecjpei: ::core::option::Option<Igpfnhkhmpk>,
    #[prost(uint32, repeated, tag = "10")]
    pub fbchklngjfm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
/// GECJBPBKFIL (4326)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuseumRandomEventStartScNotify {
    #[prost(message, optional, tag = "3")]
    pub lddcaaekfob: ::core::option::Option<Ialalmggdfo>,
}
/// ELCNOMHPAEL (4307)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumRandomEventQueryCsReq {
    #[prost(int32, tag = "10")]
    pub ihjjaiajenh: i32,
}
/// LKMHGFFGMBJ (4353)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuseumRandomEventQueryScRsp {
    #[prost(message, optional, tag = "4")]
    pub lddcaaekfob: ::core::option::Option<Nkmjcmmdhhj>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// AEEMGNPMJEL (4390)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumRandomEventSelectCsReq {
    #[prost(uint32, tag = "5")]
    pub fodaabppblb: u32,
    #[prost(uint32, tag = "12")]
    pub event_id: u32,
}
/// JMFIEILAOPH (4359)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumRandomEventSelectScRsp {
    #[prost(uint32, tag = "15")]
    pub fodaabppblb: u32,
    #[prost(uint32, tag = "12")]
    pub event_id: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// LPPNOHBGCED (4319)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumFundsChangedScNotify {
    #[prost(uint32, tag = "3")]
    pub coin_cost: u32,
}
/// LKKIHBBEDED (4312)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumDispatchFinishedScNotify {
    #[prost(uint32, tag = "12")]
    pub coin_cost: u32,
    #[prost(uint32, tag = "9")]
    pub obncpfmjphd: u32,
    #[prost(uint32, tag = "10")]
    pub pomeofhemgh: u32,
    #[prost(uint32, tag = "1")]
    pub ldkhjalcinj: u32,
}
/// DJDBGAIFIDC (4378)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumTargetStartNotify {
    #[prost(uint32, tag = "4")]
    pub akljpebkmoh: u32,
}
/// BHGCIDJAABI (4329)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuseumTargetMissionFinishNotify {
    #[prost(uint32, repeated, tag = "13")]
    pub aennjbmdino: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub akljpebkmoh: u32,
    #[prost(bool, tag = "14")]
    pub lmlpekidbkb: bool,
}
/// MNNJIDJCIMP (4350)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumTargetRewardNotify {
    #[prost(uint32, tag = "2")]
    pub item_count: u32,
    #[prost(uint32, tag = "5")]
    pub akljpebkmoh: u32,
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
}
/// NFCBNMIIENI (4348)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuseumTakeCollectRewardCsReq {
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
}
/// MINMEFEBBKL (4388)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MuseumTakeCollectRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ophmaknnfii {
    #[prost(bool, tag = "6")]
    pub jcmnddhikep: bool,
    #[prost(uint32, tag = "9")]
    pub nkhiafpmach: u32,
    #[prost(uint32, tag = "10")]
    pub level_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olahijkaofd {
    #[prost(uint32, repeated, tag = "13")]
    pub hcpaphboaap: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub hiffklcdege: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub lilkmfldcje: u32,
    #[prost(uint32, tag = "12")]
    pub mheppegbkfi: u32,
}
/// PEAAAKAOFCE (7573)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicRhythmDataCsReq {
    #[prost(uint32, tag = "9")]
    pub bjinfjnfonl: u32,
}
/// BPJLBPJCLJB (7585)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MusicRhythmDataScRsp {
    #[prost(uint32, repeated, tag = "7")]
    pub hlplbkfapgc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub nicllkokdbe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub cachlhchgbp: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub laeoakdacpk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub pcjbffadmfa: ::prost::alloc::vec::Vec<Olahijkaofd>,
    #[prost(uint32, tag = "1")]
    pub ehgecpkbbai: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub jafbhibgdoa: ::prost::alloc::vec::Vec<Ophmaknnfii>,
    #[prost(bool, tag = "6")]
    pub onilpejbbek: bool,
}
/// NIMAPHKNFNP (7576)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicRhythmStartLevelCsReq {
    #[prost(uint32, tag = "6")]
    pub level_id: u32,
}
/// CNELLLKIJIN (7593)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MusicRhythmStartLevelScRsp {
    #[prost(uint32, tag = "9")]
    pub level_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(string, tag = "15")]
    pub kbeadblmilm: ::prost::alloc::string::String,
}
/// NGHPGOEMODI (7591)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicRhythmFinishLevelCsReq {
    #[prost(uint32, tag = "6")]
    pub gnciapdpobp: u32,
    #[prost(uint32, tag = "9")]
    pub score_id: u32,
    #[prost(bool, tag = "8")]
    pub jcmnddhikep: bool,
}
/// KHLEPGKIFJL (7600)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicRhythmFinishLevelScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub level_id: u32,
}
/// ANHAJNNHBHK (7577)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MusicRhythmUnlockTrackScNotify {
    #[prost(uint32, repeated, tag = "3")]
    pub nfhjkdgdjic: ::prost::alloc::vec::Vec<u32>,
}
/// JMLGJDJFBPC (7596)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MusicRhythmSaveSongConfigDataCsReq {
    #[prost(message, optional, tag = "14")]
    pub chigihimcph: ::core::option::Option<Olahijkaofd>,
}
/// CODPGKEPIJD (7592)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicRhythmSaveSongConfigDataScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub cachlhchgbp: u32,
    #[prost(uint32, tag = "14")]
    pub nplkklbgjcd: u32,
}
/// BDJDEEEMIBL (7597)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MusicRhythmUnlockSongNotify {
    #[prost(uint32, repeated, tag = "1")]
    pub ikopcepdalg: ::prost::alloc::vec::Vec<u32>,
}
/// ICLIEFAPIEM (7580)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MusicRhythmMaxDifficultyLevelsUnlockNotify {}
/// EPKOEDMMAHA (7599)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MusicRhythmUnlockSongSfxScNotify {
    #[prost(uint32, repeated, tag = "4")]
    pub ikopcepdalg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmfnbhecogd {
    #[prost(uint32, tag = "10")]
    pub helpokapmhc: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub phofegmljde: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub cdnkhdbnepb: u32,
    #[prost(uint32, tag = "1")]
    pub hngnmjjifjg: u32,
    #[prost(uint32, tag = "7")]
    pub opicfpghdfk: u32,
    #[prost(enumeration = "Dplcpcfaimn", tag = "15")]
    pub abkhlkemkid: i32,
}
/// COCHIJBFJPB (6940)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOfferingInfoCsReq {
    #[prost(uint32, repeated, tag = "12")]
    pub okikoccclbg: ::prost::alloc::vec::Vec<u32>,
}
/// GKBJFBODOGM (6935)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOfferingInfoScRsp {
    #[prost(message, repeated, tag = "1")]
    pub nchmmbfmadk: ::prost::alloc::vec::Vec<Gmfnbhecogd>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// LMLPCKGOKOG (6927)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitOfferingItemCsReq {
    #[prost(uint32, tag = "8")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub hngnmjjifjg: u32,
}
/// GEKDMEIDENJ (6923)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitOfferingItemScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub piogacbpihf: ::core::option::Option<Gmfnbhecogd>,
}
/// JAIMDLEKNBC (6937)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOfferingRewardCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub pfhlbogfblc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub hngnmjjifjg: u32,
    #[prost(uint32, tag = "11")]
    pub interacted_prop_entity_id: u32,
}
/// FMKJOHLHHLA (6926)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOfferingRewardScRsp {
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub piogacbpihf: ::core::option::Option<Gmfnbhecogd>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// BIPDKJMINHI (6925)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfferingInfoScNotify {
    #[prost(message, optional, tag = "8")]
    pub piogacbpihf: ::core::option::Option<Gmfnbhecogd>,
}
/// OFGDIFFMAFE (4036)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptedPamMissionExpireCsReq {
    #[prost(uint32, tag = "12")]
    pub main_mission_id: u32,
}
/// DOKCDGPELLI (4095)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptedPamMissionExpireScRsp {
    #[prost(uint32, tag = "8")]
    pub main_mission_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// BPMPBELFHGK (4084)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncAcceptedPamMissionNotify {
    #[prost(uint64, tag = "12")]
    pub pkfmjnffjhl: u64,
    #[prost(uint32, tag = "7")]
    pub main_mission_id: u32,
}
/// AJGKFNJCKGD (8140)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPamSkinDataCsReq {}
/// KAEFIOHINAN (8135)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPamSkinDataScRsp {
    #[prost(uint32, repeated, tag = "10")]
    pub unlock_skin_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub cur_skin: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// OPJNEMBEBOD (8127)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPamSkinCsReq {
    #[prost(uint32, tag = "8")]
    pub pam_skin: u32,
}
/// CGPDONHGPNC (8123)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPamSkinScRsp {
    #[prost(uint32, tag = "2")]
    pub cur_skin: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub set_skin: u32,
}
/// HJFPKJEHHHL (8137)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockPamSkinScNotify {
    #[prost(uint32, tag = "9")]
    pub pam_skin: u32,
}
/// MCNCLINPMLF (7624)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPetDataCsReq {}
/// MFCFMLDPJMF (7623)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPetDataScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub cur_pet_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub pet_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// EGNOLBOOGGI (7616)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPetCsReq {
    #[prost(uint32, tag = "8")]
    pub summoned_pet_id: u32,
}
/// JGFHOHNIPFA (7603)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPetScRsp {
    #[prost(uint32, tag = "15")]
    pub new_pet_id: u32,
    #[prost(uint32, tag = "7")]
    pub cur_pet_id: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// FMEMANEKPJO (7610)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecallPetCsReq {
    #[prost(uint32, tag = "1")]
    pub summoned_pet_id: u32,
}
/// IGKMGFGKAGL (7607)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecallPetScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub new_pet_id: u32,
    #[prost(uint32, tag = "13")]
    pub cur_pet_id: u32,
}
/// COLKHMLFJLF (7606)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurPetChangedScNotify {
    #[prost(uint32, tag = "14")]
    pub cur_pet_id: u32,
}
/// JDPJHPEENEN (5136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPhoneDataCsReq {}
/// AAFHDHMIHBO (5195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPhoneDataScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub owned_phone_themes: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub cur_phone_theme: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub owned_chat_bubbles: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub cur_chat_bubble: u32,
}
/// ADIACGAMFPE (5184)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChatBubbleCsReq {
    #[prost(uint32, tag = "8")]
    pub bubble_id: u32,
}
/// GMEGECFDFCP (5127)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChatBubbleScRsp {
    #[prost(uint32, tag = "12")]
    pub cur_chat_bubble: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub bdfoopfkikd: u32,
}
/// NJFDEHHPOKO (5167)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockChatBubbleScNotify {
    #[prost(uint32, tag = "2")]
    pub bubble_id: u32,
}
/// LJJOCNGFBJF (5128)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPhoneThemeCsReq {
    #[prost(uint32, tag = "1")]
    pub theme_id: u32,
}
/// PLMGBFCMBJD (5152)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPhoneThemeScRsp {
    #[prost(uint32, tag = "10")]
    pub ihamliiecmi: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub cur_phone_theme: u32,
}
/// PFKHEKBMPMF (5174)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockPhoneThemeScNotify {
    #[prost(uint32, tag = "14")]
    pub theme_id: u32,
}
/// DBGKGGCEELN (36)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginCsReq {
    #[prost(string, tag = "1040")]
    pub apejgcgcdnk: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub client_version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub gehpjdmaeeo: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub eaoiadcplni: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub ejpgnpnmnme: u32,
    #[prost(string, tag = "450")]
    pub keckllnpnmc: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub pggemchdkgm: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub rogue_get_info: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1261")]
    pub ghkpbpdfijh: u32,
    #[prost(string, tag = "15")]
    pub dmbaimcnhkk: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "1352")]
    pub hjbdiepmfcc: ::core::option::Option<ExtraDeviceInfo>,
    #[prost(uint64, tag = "5")]
    pub login_random: u64,
    #[prost(string, tag = "12")]
    pub mjbmnloijan: ::prost::alloc::string::String,
    #[prost(string, tag = "1933")]
    pub pdciladmjij: ::prost::alloc::string::String,
    #[prost(string, tag = "867")]
    pub aeohjingifk: ::prost::alloc::string::String,
    #[prost(string, tag = "1291")]
    pub bokafhimcen: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub aalpfdjnhme: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub client_res_version: u32,
    #[prost(string, tag = "1")]
    pub iacjlnhkfjl: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1090")]
    pub mplbcokaihj: u32,
    #[prost(enumeration = "PlatformType", tag = "2")]
    pub platform: i32,
    #[prost(uint32, tag = "1000")]
    pub edibgljnojg: u32,
    #[prost(bool, tag = "170")]
    pub ncolnocggph: bool,
    #[prost(string, tag = "1640")]
    pub oohnmkaogcl: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub signature: ::prost::alloc::string::String,
    #[prost(enumeration = "LanguageType", tag = "7")]
    pub dgdpjgplkhm: i32,
    #[prost(bool, tag = "304")]
    pub lnpeccbkbeb: bool,
}
/// KICGDEGKJIN (95)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginScRsp {
    #[prost(uint64, tag = "7")]
    pub server_timestamp_ms: u64,
    #[prost(bool, tag = "2")]
    pub jddcochbnpg: bool,
    #[prost(bool, tag = "11")]
    pub goepmaljcmi: bool,
    #[prost(uint64, tag = "1")]
    pub login_random: u64,
    #[prost(uint32, tag = "6")]
    pub stamina: u32,
    #[prost(string, tag = "5")]
    pub lbfcfnidiae: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(string, tag = "14")]
    pub gepmpieohim: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(int32, tag = "8")]
    pub cur_timezone: i32,
}
/// IJPAEDPKEMD (67)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLogoutCsReq {}
/// OKBGMLBBIEE (67)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenCsReq {
    #[prost(uint32, tag = "3")]
    pub fclcccnbdlb: u32,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "13")]
    pub platform: u32,
    #[prost(uint32, tag = "15")]
    pub aodjndcpdid: u32,
    #[prost(string, tag = "2")]
    pub account_uid_wrong: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub ghkpbpdfijh: u32,
    #[prost(string, tag = "5")]
    pub account_uid: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub token: ::prost::alloc::string::String,
}
/// GNBHOKMKINC (28)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenScRsp {
    #[prost(uint64, tag = "9")]
    pub secret_key_seed: u64,
    #[prost(message, optional, tag = "1")]
    pub black_info: ::core::option::Option<BlackInfo>,
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(string, tag = "14")]
    pub msg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// BMKIJNIJMPE (74)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkScNotify {
    #[prost(string, tag = "7")]
    pub msg: ::prost::alloc::string::String,
}
/// DMKLCGPGCHB (24)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerKickOutScNotify {
    #[prost(enumeration = "player_kick_out_sc_notify::KickType", tag = "9")]
    pub kick_type: i32,
    #[prost(message, optional, tag = "2")]
    pub black_info: ::core::option::Option<BlackInfo>,
}
/// Nested message and enum types in `PlayerKickOutScNotify`.
pub mod player_kick_out_sc_notify {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum KickType {
        KickSqueezed = 0,
        KickBlack = 1,
        KickChangePwd = 2,
        KickLoginWhiteTimeout = 3,
        KickAceAntiCheater = 4,
        KickByGm = 5,
    }
    impl KickType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::KickSqueezed => "KICK_SQUEEZED",
                Self::KickBlack => "KICK_BLACK",
                Self::KickChangePwd => "KICK_CHANGE_PWD",
                Self::KickLoginWhiteTimeout => "KICK_LOGIN_WHITE_TIMEOUT",
                Self::KickAceAntiCheater => "KICK_ACE_ANTI_CHEATER",
                Self::KickByGm => "KICK_BY_GM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "KICK_SQUEEZED" => Some(Self::KickSqueezed),
                "KICK_BLACK" => Some(Self::KickBlack),
                "KICK_CHANGE_PWD" => Some(Self::KickChangePwd),
                "KICK_LOGIN_WHITE_TIMEOUT" => Some(Self::KickLoginWhiteTimeout),
                "KICK_ACE_ANTI_CHEATER" => Some(Self::KickAceAntiCheater),
                "KICK_BY_GM" => Some(Self::KickByGm),
                _ => None,
            }
        }
    }
}
/// AHELDCMEJPF (93)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkCsReq {
    #[prost(string, tag = "5")]
    pub msg: ::prost::alloc::string::String,
}
/// MOIAJAKOHCF (34)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkScRsp {
    #[prost(string, tag = "3")]
    pub gmccipoejhd: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// CDBMFEFEOCB (22)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBasicInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerSettingInfo {
    #[prost(bool, tag = "14")]
    pub ebephgldcnh: bool,
    #[prost(bool, tag = "13")]
    pub kmcckimhbbj: bool,
    #[prost(bool, tag = "15")]
    pub oigipmeoekb: bool,
    #[prost(bool, tag = "4")]
    pub kofdeoaglgk: bool,
    #[prost(bool, tag = "5")]
    pub kkhhcopengm: bool,
    #[prost(bool, tag = "6")]
    pub khkaapacgjf: bool,
    #[prost(bool, tag = "1")]
    pub efccddmnmlp: bool,
    #[prost(bool, tag = "8")]
    pub kmacdmafffn: bool,
    #[prost(bool, tag = "10")]
    pub meffkcapbfj: bool,
    #[prost(bool, tag = "12")]
    pub denfljkhnfo: bool,
}
/// GetBasicInfoScRsp (100)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBasicInfoScRsp {
    #[prost(uint32, tag = "10")]
    pub week_cocoon_finished_count: u32,
    #[prost(uint32, tag = "14")]
    pub gender: u32,
    #[prost(int64, tag = "6")]
    pub last_set_nickname_time: i64,
    #[prost(uint32, tag = "4")]
    pub cur_day: u32,
    #[prost(message, optional, tag = "15")]
    pub player_setting_info: ::core::option::Option<PlayerSettingInfo>,
    #[prost(int64, tag = "3")]
    pub next_recover_time: i64,
    #[prost(bool, tag = "8")]
    pub is_gender_set: bool,
    #[prost(uint32, tag = "5")]
    pub gameplay_birthday: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub exchange_times: u32,
}
/// FLNNHOCPLDK (25)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaCsReq {}
/// ExchangeStaminaScRsp (96)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaScRsp {
    #[prost(uint32, tag = "14")]
    pub stamina_add: u32,
    #[prost(uint32, tag = "9")]
    pub exchange_times: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(int64, tag = "5")]
    pub last_recover_time: i64,
    #[prost(message, repeated, tag = "10")]
    pub item_cost_list: ::prost::alloc::vec::Vec<ItemCost>,
}
/// BGOKIBINNBK (5)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthkeyCsReq {
    #[prost(string, tag = "15")]
    pub imlhakodopd: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub hdbkjpaiokk: u32,
    #[prost(uint32, tag = "6")]
    pub dlphkdbopej: u32,
}
/// LGCOCFPOKIM (75)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthkeyScRsp {
    #[prost(string, tag = "1")]
    pub ddckifefchd: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub dlphkdbopej: u32,
    #[prost(string, tag = "2")]
    pub imlhakodopd: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub hdbkjpaiokk: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// OHAKLIOHPIG (19)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RegionStopScNotify {
    #[prost(int64, tag = "4")]
    pub edikgmjkmic: i64,
    #[prost(int64, tag = "8")]
    pub ggebffojfoi: i64,
}
/// AntiAddictScNotify (26)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AntiAddictScNotify {
    #[prost(string, tag = "4")]
    pub msg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub msg_type: u32,
    #[prost(string, tag = "12")]
    pub level: ::prost::alloc::string::String,
}
/// LJJOMALPCIL (7)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetNicknameCsReq {
    #[prost(bool, tag = "10")]
    pub is_modify: bool,
    #[prost(string, tag = "9")]
    pub nickname: ::prost::alloc::string::String,
}
/// HKMNGOLEDDM (53)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetNicknameScRsp {
    #[prost(int64, tag = "9")]
    pub gjkemkapjal: i64,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(bool, tag = "5")]
    pub is_modify: bool,
}
/// FCMKBAFDCJN (90)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLevelRewardTakenListCsReq {}
/// EAMGBDJJLBO (59)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLevelRewardTakenListScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub level_reward_taken_list: ::prost::alloc::vec::Vec<u32>,
}
/// GKCPBHHPHIP (12)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLevelRewardCsReq {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
}
/// PNLBGIEIHPE (78)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLevelRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
/// PLGNMCNGDCP (48)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetLanguageCsReq {
    #[prost(enumeration = "LanguageType", tag = "4")]
    pub dgdpjgplkhm: i32,
}
/// IKFECHKNPEK (88)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetLanguageScRsp {
    #[prost(enumeration = "LanguageType", tag = "3")]
    pub dgdpjgplkhm: i32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnounceData {
    #[prost(int64, tag = "4")]
    pub begin_time: i64,
    #[prost(uint32, tag = "7")]
    pub bcelkcdmlhf: u32,
    #[prost(uint32, tag = "9")]
    pub config_id: u32,
    #[prost(string, tag = "6")]
    pub objpeheemee: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub cilojbalhef: u32,
    #[prost(bool, tag = "15")]
    pub nmmjamblbfb: bool,
    #[prost(int64, tag = "5")]
    pub end_time: i64,
    #[prost(string, tag = "14")]
    pub obnmjmlkdim: ::prost::alloc::string::String,
    #[prost(string, tag = "1")]
    pub fhnbhgcamlg: ::prost::alloc::string::String,
}
/// NLGNDPIGNHH (58)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerAnnounceNotify {
    #[prost(message, repeated, tag = "5")]
    pub announce_data_list: ::prost::alloc::vec::Vec<AnnounceData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gateserver {
    #[prost(int64, tag = "10")]
    pub ggebffojfoi: i64,
    #[prost(string, tag = "1969")]
    pub hocmaflgeoa: ::prost::alloc::string::String,
    #[prost(bool, tag = "1202")]
    pub unk1: bool,
    #[prost(string, repeated, tag = "349")]
    pub deneifflcma: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "1699")]
    pub pgcmeddbdch: ::prost::alloc::string::String,
    #[prost(string, tag = "1609")]
    pub lmamanegbbn: ::prost::alloc::string::String,
    #[prost(string, tag = "1725")]
    pub fgnndfalbln: ::prost::alloc::string::String,
    #[prost(string, tag = "789")]
    pub lpfhmneopol: ::prost::alloc::string::String,
    #[prost(string, tag = "1663")]
    pub galkkoiljgj: ::prost::alloc::string::String,
    #[prost(string, tag = "1837")]
    pub amkdaaaefom: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub ieodbfnbpce: ::prost::alloc::string::String,
    #[prost(uint32, tag = "900")]
    pub nnjkidddaca: u32,
    #[prost(string, tag = "539")]
    pub idlpmplagme: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ex_resource_url: ::prost::alloc::string::String,
    #[prost(bool, tag = "13")]
    pub unk2: bool,
    #[prost(uint32, tag = "15")]
    pub port: u32,
    #[prost(string, tag = "1443")]
    pub pdpjjpcpgog: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1377")]
    pub jgonjgpgmai: u32,
    #[prost(string, tag = "745")]
    pub iafcgifnncg: ::prost::alloc::string::String,
    #[prost(string, tag = "805")]
    pub gnbdmeiebog: ::prost::alloc::string::String,
    #[prost(bool, tag = "1482")]
    pub unk3: bool,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "647")]
    pub unk4: bool,
    #[prost(string, tag = "838")]
    pub cdlnbndddfj: ::prost::alloc::string::String,
    #[prost(bool, tag = "8")]
    pub unk5: bool,
    #[prost(string, tag = "1859")]
    pub ifix_url: ::prost::alloc::string::String,
    #[prost(bool, tag = "263")]
    pub unk6: bool,
    #[prost(string, tag = "2")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub asset_bundle_url: ::prost::alloc::string::String,
    #[prost(string, tag = "197")]
    pub gdfkcejfimo: ::prost::alloc::string::String,
    #[prost(bool, tag = "1033")]
    pub unk7: bool,
    #[prost(bool, tag = "116")]
    pub use_tcp: bool,
    #[prost(string, tag = "7")]
    pub lua_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1121")]
    pub jfkldioionh: ::prost::alloc::string::String,
    #[prost(bool, tag = "397")]
    pub unk9: bool,
    #[prost(string, tag = "1836")]
    pub ngbhmfoledl: ::prost::alloc::string::String,
    #[prost(bool, tag = "1368")]
    pub unk10: bool,
    #[prost(string, tag = "264")]
    pub edfhdalmaaf: ::prost::alloc::string::String,
    #[prost(string, tag = "829")]
    pub nffaihjplal: ::prost::alloc::string::String,
    #[prost(string, tag = "194")]
    pub idgefnfdfdj: ::prost::alloc::string::String,
    #[prost(string, tag = "87")]
    pub hmmlpdepaah: ::prost::alloc::string::String,
    #[prost(string, tag = "1394")]
    pub bdkcfbjplhd: ::prost::alloc::string::String,
    #[prost(string, tag = "1103")]
    pub nedoaabgifp: ::prost::alloc::string::String,
    #[prost(string, tag = "97")]
    pub djbceejcpad: ::prost::alloc::string::String,
    #[prost(string, tag = "181")]
    pub bbkknoodlcm: ::prost::alloc::string::String,
    #[prost(string, tag = "505")]
    pub lua_version: ::prost::alloc::string::String,
    #[prost(string, tag = "1841")]
    pub mhnmehekcdg: ::prost::alloc::string::String,
    #[prost(string, tag = "1118")]
    pub edegoipbplm: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub lenedjnhjmj: u32,
    #[prost(string, tag = "11")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "2019")]
    pub cbollhmcbha: ::prost::alloc::string::String,
    #[prost(bool, tag = "908")]
    pub unk11: bool,
    #[prost(bool, tag = "1436")]
    pub unk12: bool,
    #[prost(uint32, tag = "904")]
    pub iefgpeckccp: u32,
    #[prost(string, tag = "1621")]
    pub pnfcemakiha: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub edikgmjkmic: i64,
    #[prost(string, tag = "1965")]
    pub mmdbkmgecee: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub dpiipkocgdl: ::prost::alloc::string::String,
    #[prost(bool, tag = "164")]
    pub unk13: bool,
    #[prost(bool, tag = "790")]
    pub unk14: bool,
    #[prost(uint32, tag = "3")]
    pub nmpdjcmmckm: u32,
    #[prost(string, tag = "1806")]
    pub eoobpfjobbo: ::prost::alloc::string::String,
    #[prost(bool, tag = "1533")]
    pub unk15: bool,
}
/// EIJDEGNHMCI (40)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GateServerScNotify {
    #[prost(string, tag = "5")]
    pub felapcjmbhf: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiPathAvatarInfo {
    #[prost(uint32, tag = "5")]
    pub rank: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "3")]
    pub avatar_id: i32,
    #[prost(uint32, tag = "6")]
    pub path_equipment_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub multi_path_skill_tree: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "9")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
}
/// IJHLEPKAJDP (87)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAvatarPathCsReq {
    #[prost(enumeration = "MultiPathAvatarType", tag = "3")]
    pub avatar_id: i32,
}
/// KEPJCJOHPKD (86)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAvatarPathScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "3")]
    pub avatar_id: i32,
}
/// EKPNJHDLGCI (62)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMultipleAvatarPathsCsReq {
    #[prost(enumeration = "MultiPathAvatarType", repeated, tag = "9")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<i32>,
}
/// KCBIGEJAONK (2)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMultipleAvatarPathsScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// DPGOBDDNKNG (66)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoCsReq {}
/// LEOIAFIDEMP (63)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(map = "uint32, enumeration(MultiPathAvatarType)", tag = "1")]
    pub cur_avatar_path: ::std::collections::HashMap<u32, i32>,
    #[prost(uint32, repeated, tag = "12")]
    pub basic_type_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "14")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
}
/// FKBJCFKLFEH (15)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathCsReq {
    #[prost(enumeration = "MultiPathAvatarType", tag = "12")]
    pub avatar_id: i32,
}
/// FCDOGENBECN (85)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathScRsp {
    #[prost(enumeration = "MultiPathAvatarType", tag = "15")]
    pub avatar_id: i32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "10")]
    pub basic_type_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// NDACKJBHBAB (89)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarPathChangedNotify {
    #[prost(uint32, tag = "12")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "15")]
    pub cur_multi_path_avatar_type: i32,
}
/// DJGGNKGHEGB (65)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGenderCsReq {
    #[prost(enumeration = "Gender", tag = "5")]
    pub gender: i32,
}
/// LAPGOAHFNGM (8)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetGenderScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub cur_avatar_path_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(enumeration = "MultiPathAvatarType", tag = "10")]
    pub cur_avatar_path: i32,
}
/// OMHJEMICMJD (18)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerInfoCsReq {
    #[prost(bool, tag = "12")]
    pub is_modify: bool,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(enumeration = "Gender", tag = "4")]
    pub gender: i32,
}
/// EPBEBPLEKIA (37)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerInfoScRsp {
    #[prost(message, repeated, tag = "8")]
    pub cur_avatar_path_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(bool, tag = "7")]
    pub is_modify: bool,
    #[prost(enumeration = "MultiPathAvatarType", tag = "14")]
    pub cur_avatar_path: i32,
    #[prost(int64, tag = "1")]
    pub gjkemkapjal: i64,
}
/// HIBNPAJMEHO (79)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryProductInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    #[prost(uint32, tag = "12")]
    pub mkmigimgmkk: u32,
    #[prost(string, tag = "3")]
    pub pfbgihifibo: ::prost::alloc::string::String,
    #[prost(enumeration = "ProductGiftType", tag = "2")]
    pub bnkpnmkeihn: i32,
    #[prost(string, tag = "8")]
    pub ahbiklpckli: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub cliemnmedff: u32,
    #[prost(bool, tag = "7")]
    pub odbpkcdhgff: bool,
}
/// HGLDMILOCFM (81)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProductInfoScRsp {
    #[prost(uint32, tag = "12")]
    pub ldmeeheegph: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub gkdbgjecghk: u32,
    #[prost(uint64, tag = "3")]
    pub omllghpolah: u64,
    #[prost(message, repeated, tag = "1")]
    pub bphihgoekbb: ::prost::alloc::vec::Vec<Product>,
}
/// AKHMLJDKLJM (64)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonthCardRewardNotify {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
}
/// MPHHLLEEJJB (39)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadDataScNotify {
    #[prost(message, optional, tag = "2")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
/// FGHIJENNENO (9)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjDownloadDataScNotify {
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<ClientObjDownloadData>,
}
/// UpdateFeatureSwitchScNotify (55)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFeatureSwitchScNotify {
    #[prost(message, repeated, tag = "13")]
    pub switch_info_list: ::prost::alloc::vec::Vec<FeatureSwitchInfo>,
}
/// CEGMIGMKGFJ (41)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyRefreshNotify {
    #[prost(uint32, tag = "12")]
    pub niophjkblhi: u32,
}
/// DCKLMGOFIBE (94)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGameplayBirthdayCsReq {
    #[prost(uint32, tag = "5")]
    pub birthday: u32,
}
/// KAPLLMMOEII (92)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGameplayBirthdayScRsp {
    #[prost(uint32, tag = "14")]
    pub birthday: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// IFOPFHICHDL (60)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AceAntiCheaterCsReq {
    #[prost(uint32, tag = "15")]
    pub ahfpeboefjk: u32,
    #[prost(string, tag = "1")]
    pub egnkofplgpi: ::prost::alloc::string::String,
}
/// HIPKGBLBAPG (45)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AceAntiCheaterScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// OFOHPDAJMOJ (72)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RetcodeNotify {
    #[prost(uint32, repeated, tag = "2")]
    pub dneblhfgkdn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// HFLFKHPHNFI (99)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatCsReq {
    #[prost(uint64, tag = "6")]
    pub client_time_ms: u64,
    #[prost(message, optional, tag = "14")]
    pub dopanlaafjf: ::core::option::Option<ClientUploadData>,
    #[prost(uint32, tag = "1")]
    pub bccloioaphm: u32,
}
/// DFCFNJFOENL (3)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatScRsp {
    #[prost(uint64, tag = "1")]
    pub server_time_ms: u64,
    #[prost(uint64, tag = "8")]
    pub client_time_ms: u64,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
/// PMNLBDBEJDK (61)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeatureSwitchClosedScNotify {
    #[prost(enumeration = "FeatureSwitchType", tag = "11")]
    pub diplalmheao: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretKeyInfo {
    #[prost(string, tag = "8")]
    pub secret_key: ::prost::alloc::string::String,
    #[prost(enumeration = "SecretKeyType", tag = "11")]
    pub r#type: i32,
}
/// KCLCKKLMMGC (97)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretKeyInfoCsReq {
    #[prost(bytes = "vec", tag = "15")]
    pub gdgackhhebj: ::prost::alloc::vec::Vec<u8>,
}
/// LJOAOINEMKB (83)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretKeyInfoScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(bytes = "vec", tag = "1")]
    pub abgkkdcikgo: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "11")]
    pub secret_info: ::prost::alloc::vec::Vec<SecretKeyInfo>,
}
/// CJOECAIOMPF (68)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLoginFinishCsReq {}
/// HPOMCFLPOKB (57)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLoginFinishScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VideoKeyInfo {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(uint64, tag = "12")]
    pub video_key: u64,
}
/// CBMOAGFCMKK (16)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetVideoVersionKeyCsReq {}
/// DBEDDNBLBMA (47)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVideoVersionKeyScRsp {
    #[prost(message, repeated, tag = "10")]
    pub video_key_info_list: ::prost::alloc::vec::Vec<VideoKeyInfo>,
    #[prost(message, repeated, tag = "3")]
    pub activity_video_key_info_list: ::prost::alloc::vec::Vec<VideoKeyInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hoebnnicgch {
    #[prost(uint32, tag = "7")]
    pub aaimbolnneb: u32,
    #[prost(uint32, tag = "6")]
    pub ggdibfjkmli: u32,
    #[prost(uint32, tag = "2")]
    pub occnbblpngb: u32,
    #[prost(uint32, tag = "14")]
    pub content_id: u32,
}
/// BJILMBFHELD (49)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRedPointStatusScNotify {
    #[prost(message, repeated, tag = "10")]
    pub fblmnhjgmci: ::prost::alloc::vec::Vec<Hoebnnicgch>,
    #[prost(uint32, tag = "6")]
    pub aaimbolnneb: u32,
    #[prost(uint32, tag = "12")]
    pub uid: u32,
    #[prost(uint32, tag = "15")]
    pub ggdibfjkmli: u32,
    #[prost(uint32, tag = "4")]
    pub content_id: u32,
}
/// FCGAALNGIAB (91)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReserveStaminaExchangeCsReq {
    #[prost(uint32, tag = "4")]
    pub num: u32,
}
/// ReserveStaminaExchangeScRsp (44)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReserveStaminaExchangeScRsp {
    #[prost(uint32, tag = "3")]
    pub num: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// IEONGCOGOJI (23)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StaminaInfoScNotify {
    #[prost(uint32, tag = "15")]
    pub stamina: u32,
    #[prost(uint32, tag = "1")]
    pub oalfodgnfje: u32,
    #[prost(int64, tag = "7")]
    pub pfjlcgieifa: i64,
    #[prost(int64, tag = "6")]
    pub oldmlmdcifd: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjodapfifml {
    #[prost(
        oneof = "gjodapfifml::Afenabekgmh",
        tags = "13, 12, 8, 7, 6, 11, 1, 15, 2, 10"
    )]
    pub afenabekgmh: ::core::option::Option<gjodapfifml::Afenabekgmh>,
}
/// Nested message and enum types in `GJODAPFIFML`.
pub mod gjodapfifml {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Afenabekgmh {
        #[prost(bool, tag = "13")]
        Meffkcapbfj(bool),
        #[prost(bool, tag = "12")]
        Kofdeoaglgk(bool),
        #[prost(bool, tag = "8")]
        Denfljkhnfo(bool),
        #[prost(bool, tag = "7")]
        Khkaapacgjf(bool),
        #[prost(bool, tag = "6")]
        Kkhhcopengm(bool),
        #[prost(bool, tag = "11")]
        Kmcckimhbbj(bool),
        #[prost(bool, tag = "1")]
        Oigipmeoekb(bool),
        #[prost(bool, tag = "15")]
        Kmacdmafffn(bool),
        #[prost(bool, tag = "2")]
        Efccddmnmlp(bool),
        #[prost(bool, tag = "10")]
        Ebephgldcnh(bool),
    }
}
/// PIBBLKGIOGF (69)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdatePlayerSettingCsReq {
    #[prost(message, optional, tag = "5")]
    pub gfmikbmfgfa: ::core::option::Option<Gjodapfifml>,
}
/// FKFENFJGPFN (56)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdatePlayerSettingScRsp {
    #[prost(message, optional, tag = "8")]
    pub gfmikbmfgfa: ::core::option::Option<Gjodapfifml>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// MDBOENGMEPE (20)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjUploadCsReq {
    #[prost(bytes = "vec", tag = "2")]
    pub dopanlaafjf: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "10")]
    pub bccloioaphm: u32,
}
/// HCHMIDJOPHB (1)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjUploadScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ClientObjDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icdbldmjnde {
    #[prost(string, repeated, tag = "13")]
    pub eiipdjnjjeg: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hggiapioclg {
    #[prost(bool, tag = "9")]
    pub jfbnedkkldc: bool,
    #[prost(message, optional, tag = "13")]
    pub black_list: ::core::option::Option<Icdbldmjnde>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfambfeckli {
    #[prost(oneof = "hfambfeckli::Hdhaejafkai", tags = "1670, 404, 846")]
    pub hdhaejafkai: ::core::option::Option<hfambfeckli::Hdhaejafkai>,
}
/// Nested message and enum types in `HFAMBFECKLI`.
pub mod hfambfeckli {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Hdhaejafkai {
        #[prost(bool, tag = "1670")]
        Jfbnedkkldc(bool),
        #[prost(message, tag = "404")]
        Hiigmjofkge(super::Icdbldmjnde),
        #[prost(message, tag = "846")]
        Fnpnolnoffm(super::Icdbldmjnde),
    }
}
/// KCNHHADBEOO (32)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePsnSettingsInfoCsReq {
    #[prost(oneof = "update_psn_settings_info_cs_req::Mldilkflipd", tags = "1103, 673")]
    pub mldilkflipd: ::core::option::Option<
        update_psn_settings_info_cs_req::Mldilkflipd,
    >,
}
/// Nested message and enum types in `UpdatePsnSettingsInfoCsReq`.
pub mod update_psn_settings_info_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Mldilkflipd {
        #[prost(message, tag = "1103")]
        Opegbhopkcn(super::Hggiapioclg),
        #[prost(message, tag = "673")]
        Mhbfnkmfgcg(super::Hfambfeckli),
    }
}
/// CKEONKDCDJG (82)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdatePsnSettingsInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// DKPMNEKDKEF (6)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGameStateServiceConfigCsReq {}
/// MLJIPDNGGAA (71)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGameStateServiceConfigScRsp {
    #[prost(string, repeated, tag = "15")]
    pub gaenllhlhdn: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(string, repeated, tag = "10")]
    pub lnlaaacodic: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "12")]
    pub pjdncmemnjh: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeadIconData {
    #[prost(uint32, tag = "13")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayAvatarData {
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarVec {
    #[prost(message, repeated, tag = "1")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarData>,
    #[prost(bool, tag = "3")]
    pub is_display: bool,
}
/// CBDNFCLFKEB (2836)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerBoardDataCsReq {}
/// FJMGECNNNGB (2895)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerBoardDataScRsp {
    #[prost(uint32, tag = "15")]
    pub current_head_icon_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub unlocked_head_icon_list: ::prost::alloc::vec::Vec<HeadIconData>,
    #[prost(uint32, repeated, tag = "14")]
    pub assist_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub display_avatar_vec: ::core::option::Option<DisplayAvatarVec>,
    #[prost(string, tag = "11")]
    pub signature: ::prost::alloc::string::String,
}
/// IJHJGBHNLOF (2884)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetHeadIconCsReq {
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
/// HNLIMOMNHGG (2827)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetHeadIconScRsp {
    #[prost(uint32, tag = "13")]
    pub current_head_icon_id: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// MBFBJPKFBLK (2867)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetDisplayAvatarCsReq {
    #[prost(message, repeated, tag = "15")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarData>,
}
/// JJGIOGMEMJO (2828)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetDisplayAvatarScRsp {
    #[prost(message, repeated, tag = "8")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarData>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// EANDJKIMKML (2852)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetIsDisplayAvatarInfoCsReq {
    #[prost(bool, tag = "2")]
    pub is_display: bool,
}
/// KOAOKMLPPNO (2874)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetIsDisplayAvatarInfoScRsp {
    #[prost(bool, tag = "8")]
    pub is_display: bool,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// PAKDGIHKGII (2893)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureCsReq {
    #[prost(string, tag = "13")]
    pub signature: ::prost::alloc::string::String,
}
/// HFCHJECINFE (2834)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureScRsp {
    #[prost(string, tag = "4")]
    pub signature: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// HHGAHPFFENA (2843)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAssistAvatarCsReq {
    #[prost(uint32, tag = "3")]
    pub avatar_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// GLMAJHBLEJN (2846)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAssistAvatarScRsp {
    #[prost(uint32, repeated, tag = "8")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
}
/// DNODHEHDFJM (4536)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerReturnStartScNotify {
    #[prost(uint32, tag = "1")]
    pub dbpkhhdjpml: u32,
}
/// FABPAKCICBF (4595)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerReturnSignCsReq {
    #[prost(uint32, tag = "15")]
    pub ikeoohngmon: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub eldncdbbema: ::prost::alloc::vec::Vec<u32>,
}
/// BBAGCFCMKFP (4584)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerReturnSignScRsp {
    #[prost(message, repeated, tag = "4")]
    pub ihlecdfhmfi: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "14")]
    pub ikeoohngmon: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub eldncdbbema: ::prost::alloc::vec::Vec<u32>,
}
/// KFMBBBBHECO (4527)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerReturnPointChangeScNotify {
    #[prost(uint32, tag = "13")]
    pub lbdmholpjke: u32,
}
/// DCKNIJCKOLP (4567)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerReturnTakePointRewardCsReq {
    #[prost(uint32, tag = "5")]
    pub cihifngampc: u32,
    #[prost(uint32, tag = "14")]
    pub jmkfgfligfa: u32,
}
/// NOEJNPNNKAG (4528)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerReturnTakePointRewardScRsp {
    #[prost(uint32, tag = "4")]
    pub cihifngampc: u32,
    #[prost(message, optional, tag = "5")]
    pub nopncmcnfll: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub jmkfgfligfa: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// MANFDIAAMFE (4552)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerReturnTakeRewardCsReq {
    #[prost(uint32, tag = "9")]
    pub ihjjaiajenh: u32,
}
/// BFHMHBLFNCG (4574)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerReturnTakeRewardScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// ADCGHDDKKAL (4524)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerReturnInfoQueryCsReq {
    #[prost(uint32, tag = "7")]
    pub ihjjaiajenh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kodboonbebo {
    #[prost(uint32, repeated, tag = "15")]
    pub pnlohhmogfp: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub is_taken_reward: bool,
    #[prost(uint32, tag = "4")]
    pub lbdmholpjke: u32,
    #[prost(uint32, tag = "3")]
    pub mjookhjfbbh: u32,
    #[prost(int64, tag = "13")]
    pub finish_time: i64,
    #[prost(uint32, tag = "5")]
    pub jhhiighdnnk: u32,
    #[prost(int64, tag = "8")]
    pub odhloenbbjh: i64,
    #[prost(enumeration = "Hjgeefngkgm", tag = "12")]
    pub status: i32,
    #[prost(uint32, repeated, tag = "14")]
    pub eldncdbbema: ::prost::alloc::vec::Vec<u32>,
}
/// IPLIILBOGKE (4593)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerReturnInfoQueryScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub mbcfbdpfndi: u32,
    #[prost(message, optional, tag = "5")]
    pub bnkghfhhjik: ::core::option::Option<Kodboonbebo>,
}
/// JPFOJLJABBC (4534)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerReturnForceFinishScNotify {
    #[prost(message, optional, tag = "9")]
    pub bnkghfhhjik: ::core::option::Option<Kodboonbebo>,
}
/// AFOEKCAIMFG (1136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishPlotCsReq {
    #[prost(uint32, tag = "2")]
    pub foinhpjdjnn: u32,
}
/// DECFCGOEOBI (1195)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishPlotScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub foinhpjdjnn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehapmgilgom {
    #[prost(message, optional, tag = "15")]
    pub basic_info: ::core::option::Option<PunkLordMonsterBasicInfo>,
    #[prost(enumeration = "PunkLordAttackerStatus", tag = "4")]
    pub ihcjfejbgag: i32,
    #[prost(uint32, tag = "3")]
    pub ahgpjehjcbk: u32,
    #[prost(message, optional, tag = "1")]
    pub gnibbgfppkf: ::core::option::Option<PunkLordBattleRecordList>,
}
/// OPOFABGGLIJ (3236)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPunkLordMonsterDataCsReq {}
/// IFDJGEFGFOM (3295)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPunkLordMonsterDataScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub hnjbacmifpm: ::prost::alloc::vec::Vec<Ehapmgilgom>,
}
/// GKJLNLGEAOC (3284)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartPunkLordRaidCsReq {
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(bool, tag = "4")]
    pub jcjjembfkgb: bool,
    #[prost(uint32, tag = "9")]
    pub monster_id: u32,
}
/// CGPFLMNIHJH (3227)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartPunkLordRaidScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(bool, tag = "12")]
    pub jcjjembfkgb: bool,
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<Chmbnfjjijn>,
    #[prost(message, optional, tag = "13")]
    pub pjldilloflo: ::core::option::Option<Ehapmgilgom>,
    #[prost(int64, tag = "7")]
    pub cikjdahmijn: i64,
    #[prost(uint32, repeated, tag = "4")]
    pub ghofcpilhnb: ::prost::alloc::vec::Vec<u32>,
}
/// GDKKAKIMEFC (3267)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SharePunkLordMonsterCsReq {
    #[prost(uint32, tag = "15")]
    pub monster_id: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "11")]
    pub gagnibbldff: i32,
    #[prost(uint32, tag = "10")]
    pub uid: u32,
}
/// IPGICEKFJLA (3228)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SharePunkLordMonsterScRsp {
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "14")]
    pub gagnibbldff: i32,
    #[prost(uint32, tag = "3")]
    pub monster_id: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// CHBOMLPLLJL (3252)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPunkLordMonsterCsReq {}
/// IJBNDHKBIIP (3274)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummonPunkLordMonsterScRsp {
    #[prost(message, optional, tag = "3")]
    pub pjldilloflo: ::core::option::Option<Ehapmgilgom>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// LBICADOABDF (3246)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePunkLordPointRewardCsReq {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(bool, tag = "8")]
    pub hgoijnknioa: bool,
}
/// HGDJKCIFBGD (3225)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePunkLordPointRewardScRsp {
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "6")]
    pub hgoijnknioa: bool,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// FANNLJCGIPC (3296)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordMonsterInfoScNotify {
    #[prost(message, optional, tag = "3")]
    pub basic_info: ::core::option::Option<PunkLordMonsterBasicInfo>,
    #[prost(enumeration = "PunkLordMonsterInfoNotifyReason", tag = "14")]
    pub reason: i32,
    #[prost(message, optional, tag = "15")]
    pub gnibbgfppkf: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(uint32, repeated, tag = "2")]
    pub ghofcpilhnb: ::prost::alloc::vec::Vec<u32>,
}
/// ODLDJEEDFKH (3205)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPunkLordDataCsReq {}
/// JIJMGIKGPAO (3275)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPunkLordDataScRsp {
    #[prost(uint32, tag = "7")]
    pub ndefcgkbplo: u32,
    #[prost(uint32, tag = "10")]
    pub jogkppibdjn: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub emghlpgepme: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub cfeipccilpm: u32,
    #[prost(uint32, tag = "15")]
    pub icohfpgniih: u32,
    #[prost(uint32, tag = "1")]
    pub infcnckapfh: u32,
    #[prost(int64, tag = "4")]
    pub fegjgnibann: i64,
}
/// HDFBODFDFLE (3226)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordRaidTimeOutScNotify {
    #[prost(message, optional, tag = "6")]
    pub pjldilloflo: ::core::option::Option<PunkLordMonsterBasicInfo>,
}
/// ENKIMPFIEGJ (3259)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleResultScNotify {
    #[prost(message, optional, tag = "12")]
    pub gnibbgfppkf: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(uint32, tag = "13")]
    pub laoghkdghde: u32,
    #[prost(uint32, tag = "5")]
    pub mlnhcifndno: u32,
    #[prost(uint32, tag = "6")]
    pub jgjjhjofpll: u32,
    #[prost(message, optional, tag = "7")]
    pub pjldilloflo: ::core::option::Option<PunkLordMonsterBasicInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anfcfbonbem {
    #[prost(uint32, tag = "14")]
    pub bijlejffmim: u32,
    #[prost(int64, tag = "4")]
    pub create_time: i64,
    #[prost(uint32, tag = "5")]
    pub monster_id: u32,
    #[prost(bool, tag = "11")]
    pub jcnedegkkja: bool,
    #[prost(uint32, tag = "10")]
    pub world_level: u32,
    #[prost(uint32, tag = "2")]
    pub config_id: u32,
}
/// OPEMLBMKIAH (3212)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetKilledPunkLordMonsterDataCsReq {}
/// ENBBLABMKLN (3278)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetKilledPunkLordMonsterDataScRsp {
    #[prost(message, repeated, tag = "8")]
    pub aeigmbjddga: ::prost::alloc::vec::Vec<Anfcfbonbem>,
    #[prost(message, repeated, tag = "5")]
    pub mckiiabekcn: ::prost::alloc::vec::Vec<PunkLordMonsterKey>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// HFOAJBNICAP (3248)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordMonsterKilledNotify {
    #[prost(message, optional, tag = "1")]
    pub afgihcakljg: ::core::option::Option<Anfcfbonbem>,
}
/// EOCBLHFPDBD (3288)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeKilledPunkLordMonsterScoreCsReq {
    #[prost(message, optional, tag = "13")]
    pub babdbkncdgm: ::core::option::Option<PunkLordMonsterKey>,
    #[prost(bool, tag = "6")]
    pub bdikiinohmf: bool,
}
/// LNDCPHBIAOE (3258)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeKilledPunkLordMonsterScoreScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub score_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub ichpmapjodo: ::prost::alloc::vec::Vec<PunkLordMonsterKey>,
    #[prost(bool, tag = "15")]
    pub bdikiinohmf: bool,
}
/// KDGEKJOPEMA (3210)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordDataChangeNotify {
    #[prost(uint32, tag = "4")]
    pub infcnckapfh: u32,
    #[prost(uint32, tag = "12")]
    pub icohfpgniih: u32,
    #[prost(uint32, tag = "5")]
    pub ndefcgkbplo: u32,
}
/// GHIIJMALPIL (3276)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPunkLordBattleRecordCsReq {
    #[prost(message, optional, tag = "4")]
    pub babdbkncdgm: ::core::option::Option<PunkLordMonsterKey>,
}
/// HEELAKLFPIN (3235)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPunkLordBattleRecordScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub babdbkncdgm: ::core::option::Option<PunkLordMonsterKey>,
    #[prost(message, repeated, tag = "2")]
    pub oejedaefgep: ::prost::alloc::vec::Vec<PunkLordBattleReplay>,
    #[prost(message, repeated, tag = "10")]
    pub battle_record_list: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
/// BNPPOJPNGCE (936)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetQuestDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Quest {
    #[prost(uint32, tag = "14")]
    pub progress: u32,
    #[prost(int64, tag = "8")]
    pub finish_time: i64,
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(enumeration = "QuestStatus", tag = "2")]
    pub status: i32,
    #[prost(uint32, repeated, tag = "4")]
    pub obojidjldef: ::prost::alloc::vec::Vec<u32>,
}
/// JOKHADCCENG (995)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuestDataScRsp {
    #[prost(message, repeated, tag = "11")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(uint32, tag = "3")]
    pub total_achievement_exp: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// HJNEMCDAKDB (984)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestRewardCsReq {
    #[prost(uint32, repeated, tag = "3")]
    pub succ_quest_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// TakeQuestRewardScRsp (927)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestRewardScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "2")]
    pub succ_quest_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// CKGHDFEMECO (943)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeQuestOptionalRewardCsReq {
    #[prost(uint32, tag = "10")]
    pub quest_id: u32,
    #[prost(uint32, tag = "9")]
    pub optional_reward_id: u32,
}
/// DDFLHKDDMEI (946)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestOptionalRewardScRsp {
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub quest_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// HCOBNALHIFO (952)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetQuestRecordCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuestRecord {
    #[prost(uint32, tag = "2")]
    pub progress: u32,
    #[prost(uint32, tag = "5")]
    pub igjhooklmjl: u32,
}
/// BHFCOKCCFFD (974)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuestRecordScRsp {
    #[prost(message, repeated, tag = "15")]
    pub lopbplamilj: ::prost::alloc::vec::Vec<QuestRecord>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// HKPKBECFPJK (924)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuestRecordScNotify {
    #[prost(message, optional, tag = "5")]
    pub mlaciehklmi: ::core::option::Option<QuestRecord>,
}
/// IEGGGCKOJIA (993)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishQuestCsReq {
    #[prost(uint32, tag = "7")]
    pub prop_id: u32,
    #[prost(uint32, tag = "12")]
    pub quest_id: u32,
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
}
/// FGBMPHLELBF (934)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishQuestScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// IDEFLOEDIOK (996)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetQuestDataCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub quest_list: ::prost::alloc::vec::Vec<u32>,
}
/// AFKIHIEBIEM (905)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetQuestDataScRsp {
    #[prost(message, repeated, tag = "13")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chmbnfjjijn {
    #[prost(message, optional, tag = "1")]
    pub nmjmmdadklf: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "6")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(uint32, tag = "15")]
    pub nbljpgfhdfi: u32,
}
/// JMOIJNKFBCF (2236)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartRaidCsReq {
    #[prost(uint32, tag = "1")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "11")]
    pub is_save: u32,
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(uint32, tag = "12")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
}
/// LGHFKOLHMOJ (2295)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartRaidScRsp {
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<Chmbnfjjijn>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// MCAJNBLPGMK (2284)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveRaidCsReq {
    #[prost(bool, tag = "2")]
    pub is_save: bool,
    #[prost(uint32, tag = "12")]
    pub nbljpgfhdfi: u32,
}
/// BFPGGDCEGOO (2227)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveRaidScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcpdmemplbm {
    #[prost(enumeration = "Moklolklkgj", tag = "1")]
    pub ofdkcplnjnd: i32,
    #[prost(uint32, tag = "15")]
    pub nhjjcppfegf: u32,
    #[prost(uint32, tag = "4")]
    pub bmjckoiomgp: u32,
}
/// LFMGJBJPILL (2267)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaidInfoNotify {
    #[prost(uint32, tag = "12")]
    pub nbljpgfhdfi: u32,
    #[prost(message, repeated, tag = "3")]
    pub cjjaedialng: ::prost::alloc::vec::Vec<Bcpdmemplbm>,
    #[prost(message, optional, tag = "8")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint64, tag = "14")]
    pub oelfpeocock: u64,
    #[prost(enumeration = "Mfcknjhdigg", tag = "5")]
    pub status: i32,
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmjenoahihe {
    #[prost(uint32, tag = "6")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, tag = "15")]
    pub max_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnlgmicnekb {
    #[prost(uint32, repeated, tag = "3")]
    pub hadkcjbfgmd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
    #[prost(uint32, tag = "12")]
    pub nbljpgfhdfi: u32,
}
/// CFHCDMNNNPO (2234)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRaidInfoCsReq {}
/// GetRaidInfoScRsp (2243)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRaidInfoScRsp {
    #[prost(message, repeated, tag = "5")]
    pub challenge_raid_list: ::prost::alloc::vec::Vec<Hmjenoahihe>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub challenge_taken_reward_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub finished_raid_info_list: ::prost::alloc::vec::Vec<Pnlgmicnekb>,
}
/// KNDDHLMOKJK (2228)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeRaidInfoCsReq {}
/// JEEMPEAFBII (2252)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeRaidInfoScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub oknnlacihpf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub cilpbablffc: ::prost::alloc::vec::Vec<Hmjenoahihe>,
}
/// DIIGNJJGBPI (2274)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeChallengeRaidRewardCsReq {
    #[prost(uint32, tag = "13")]
    pub hkaojpkpjoi: u32,
}
/// GFKDHLMAAAI (2224)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeChallengeRaidRewardScRsp {
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub hkaojpkpjoi: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// APANHNGHKDM (2293)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeRaidNotify {
    #[prost(message, optional, tag = "3")]
    pub cggefekkbag: ::core::option::Option<Hmjenoahihe>,
}
/// LILDBCEGOGA (2246)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientRaidTargetCountCsReq {
    #[prost(uint32, tag = "6")]
    pub progress: u32,
    #[prost(uint32, tag = "11")]
    pub anfnchcllcm: u32,
}
/// EPLAGFHGHAG (2225)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientRaidTargetCountScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub anfnchcllcm: u32,
    #[prost(uint32, tag = "9")]
    pub progress: u32,
}
/// DGCHLHOAAEK (2296)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSaveRaidCsReq {
    #[prost(uint32, tag = "6")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
/// GMFLKHHFIIO (2205)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSaveRaidScRsp {
    #[prost(message, repeated, tag = "7")]
    pub cjjaedialng: ::prost::alloc::vec::Vec<Bcpdmemplbm>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(bool, tag = "3")]
    pub is_save: bool,
    #[prost(uint32, tag = "10")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adjfehgffhe {
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(uint32, tag = "8")]
    pub nbljpgfhdfi: u32,
    #[prost(message, repeated, tag = "10")]
    pub cjjaedialng: ::prost::alloc::vec::Vec<Bcpdmemplbm>,
}
/// LOMHNHELKFJ (2275)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllSaveRaidCsReq {}
/// DNPNIPIDEHG (2219)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllSaveRaidScRsp {
    #[prost(message, repeated, tag = "14")]
    pub plkjlkobgof: ::prost::alloc::vec::Vec<Adjfehgffhe>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// OLLOPBLJHKI (2226)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DelSaveRaidScNotify {
    #[prost(uint32, tag = "2")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
}
/// NGCCLJHBFAH (2207)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaidKickByServerScNotify {
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "Gjpnljacamn", tag = "9")]
    pub reason: i32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(uint32, tag = "5")]
    pub nbljpgfhdfi: u32,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ggblnfpgcbn {
    #[prost(uint32, tag = "7")]
    pub ighenedpecf: u32,
}
/// CMALDCLAIDN (6960)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RaidCollectionDataCsReq {}
/// LJBPFIEBLAP (6955)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaidCollectionDataScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub challenge_list: ::prost::alloc::vec::Vec<Ggblnfpgcbn>,
}
/// FLLLFJPNOOO (6947)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RaidCollectionDataScNotify {
    #[prost(message, optional, tag = "3")]
    pub collection_info: ::core::option::Option<Ggblnfpgcbn>,
}
/// OLOHGCCGNAI (6943)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaidCollectionEnterNextRaidCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub nbljpgfhdfi: u32,
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(uint32, tag = "14")]
    pub is_save: u32,
}
/// NHPACOHBECF (6957)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaidCollectionEnterNextRaidScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<Chmbnfjjijn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hanhapjmlej {
    #[prost(uint32, tag = "4")]
    pub pmioddoiepl: u32,
    #[prost(uint32, tag = "12")]
    pub kcbmlnoafji: u32,
    #[prost(uint32, tag = "3")]
    pub jmjhcanmige: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flcmiimlnnl {
    #[prost(uint32, tag = "5")]
    pub bgpkljfkbbk: u32,
    #[prost(uint32, tag = "2")]
    pub kcbmlnoafji: u32,
}
/// AJNADODJJGO (2412)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicRecommendCsReq {
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
}
/// HAIEHIALJGB (2450)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicRecommendScRsp {
    #[prost(message, repeated, tag = "13")]
    pub lfhnbiaiaog: ::prost::alloc::vec::Vec<Flcmiimlnnl>,
    #[prost(message, repeated, tag = "6")]
    pub bnaebnbledn: ::prost::alloc::vec::Vec<Flcmiimlnnl>,
    #[prost(message, repeated, tag = "15")]
    pub phiekfagmgb: ::prost::alloc::vec::Vec<Hanhapjmlej>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub gcbacjgkgmk: ::prost::alloc::vec::Vec<Flcmiimlnnl>,
    #[prost(bool, tag = "10")]
    pub gilcobajpon: bool,
    #[prost(message, repeated, tag = "5")]
    pub lidiljpejdo: ::prost::alloc::vec::Vec<Hanhapjmlej>,
    #[prost(message, repeated, tag = "12")]
    pub amgaennclke: ::prost::alloc::vec::Vec<Flcmiimlnnl>,
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
}
/// EJGFAALGFGB (2430)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicAvatarRecommendCsReq {
    #[prost(uint32, tag = "12")]
    pub djlmajbojnb: u32,
}
/// ELDPCGFDLBB (2423)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicAvatarRecommendScRsp {
    #[prost(bool, tag = "11")]
    pub gilcobajpon: bool,
    #[prost(uint32, tag = "14")]
    pub djlmajbojnb: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// APHHHIHOIBF (2415)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeRecommendLineupListCsReq {
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lobalpnnpnl {
    #[prost(uint32, repeated, tag = "13")]
    pub second_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub jnjngdigboo: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub first_half_lineup: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub gjpjnpcbmmb: u32,
}
/// OEPEFKHNEIH (2449)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeRecommendLineupListScRsp {
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub hobeflekpfg: ::prost::alloc::vec::Vec<Lobalpnnpnl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fckkninngcj {
    #[prost(uint32, tag = "12")]
    pub odmkkpbmmci: u32,
    #[prost(uint32, tag = "13")]
    pub gcomeogcken: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhnnegibcmo {
    #[prost(message, repeated, tag = "15")]
    pub equipment_list: ::prost::alloc::vec::Vec<Fckkninngcj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdngbnfbaap {
    #[prost(uint32, tag = "7")]
    pub jhkdckggokc: u32,
    #[prost(uint32, tag = "1")]
    pub fioamhokijd: u32,
    #[prost(uint32, tag = "3")]
    pub dnogbebbegf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Leebhhkeehg {
    #[prost(message, repeated, tag = "15")]
    pub pgldfgnofnd: ::prost::alloc::vec::Vec<Pdngbnfbaap>,
}
/// KAPJJHPFFLC (2409)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBigDataRecommendCsReq {
    #[prost(enumeration = "Jhipgpghhmg", tag = "11")]
    pub jcifnoldcge: i32,
    #[prost(uint32, tag = "2")]
    pub jlnhhdnlcgn: u32,
}
/// IKOPBAKBJME (2443)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBigDataRecommendScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub jlnhhdnlcgn: u32,
    #[prost(bool, tag = "15")]
    pub gilcobajpon: bool,
    #[prost(enumeration = "Jhipgpghhmg", tag = "11")]
    pub jcifnoldcge: i32,
    #[prost(oneof = "get_big_data_recommend_sc_rsp::Balffggdjmp", tags = "8, 5")]
    pub balffggdjmp: ::core::option::Option<get_big_data_recommend_sc_rsp::Balffggdjmp>,
}
/// Nested message and enum types in `GetBigDataRecommendScRsp`.
pub mod get_big_data_recommend_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Balffggdjmp {
        #[prost(message, tag = "8")]
        Gbopcboopko(super::Bhnnegibcmo),
        #[prost(message, tag = "5")]
        Kcijkeeadjj(super::Leebhhkeehg),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gilljcmpgmn {
    #[prost(uint32, repeated, tag = "7")]
    pub adddadefdha: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdpaplmjlic {
    #[prost(uint32, tag = "14")]
    pub panel_id: u32,
    #[prost(map = "uint32, message", tag = "5")]
    pub gbfmghfnlbg: ::std::collections::HashMap<u32, Gilljcmpgmn>,
    #[prost(uint32, tag = "8")]
    pub objjenbpjpm: u32,
}
/// JPHDBCNLAAM (5936)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllRedDotDataCsReq {}
/// FIKHOKHLNFL (5995)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllRedDotDataScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub fmljdojmkpp: ::prost::alloc::vec::Vec<Mdpaplmjlic>,
}
/// EGNJIPLNHLO (5984)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRedDotDataCsReq {
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub panel_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub switch_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Hcnpghigobg", tag = "5")]
    pub hihiobdbnda: i32,
    #[prost(uint32, tag = "8")]
    pub objjenbpjpm: u32,
}
/// BIOBDPCNKLI (5927)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateRedDotDataScRsp {
    #[prost(uint32, tag = "3")]
    pub objjenbpjpm: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub panel_id: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
/// AILOOFLOENM (5967)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSingleRedDotParamGroupCsReq {
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub objjenbpjpm: u32,
}
/// FENOHLMMEDC (5928)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSingleRedDotParamGroupScRsp {
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub objjenbpjpm: u32,
    #[prost(uint32, tag = "8")]
    pub panel_id: u32,
    #[prost(message, optional, tag = "4")]
    pub ejbjakmjapd: ::core::option::Option<Gilljcmpgmn>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpjhgcecoie {
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub unique_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub pmjibdkmdmh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub pdjopkemagf: ::prost::alloc::vec::Vec<u32>,
}
/// PLJBPFKACMK (8270)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicSmartWearGetPlanCsReq {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
}
/// IHBIBAAIFND (8265)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicSmartWearGetPlanScRsp {
    #[prost(message, repeated, tag = "11")]
    pub dgdhihmomie: ::prost::alloc::vec::Vec<Cpjhgcecoie>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
}
/// LJNEJAAMBIB (8257)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicSmartWearAddPlanCsReq {
    #[prost(message, optional, tag = "6")]
    pub mbgncggbepp: ::core::option::Option<Cpjhgcecoie>,
}
/// FNADNJHEAFH (8253)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicSmartWearAddPlanScRsp {
    #[prost(message, optional, tag = "13")]
    pub mbgncggbepp: ::core::option::Option<Cpjhgcecoie>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// MPNCFLHHIOC (8267)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicSmartWearUpdatePlanCsReq {
    #[prost(message, optional, tag = "10")]
    pub mbgncggbepp: ::core::option::Option<Cpjhgcecoie>,
}
/// KGEAHBCMOKK (8256)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicSmartWearUpdatePlanScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub mbgncggbepp: ::core::option::Option<Cpjhgcecoie>,
}
/// FEJJBDAADCN (8255)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicSmartWearDeletePlanCsReq {
    #[prost(uint32, tag = "11")]
    pub unique_id: u32,
}
/// JABEGHHHAEI (8260)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicSmartWearDeletePlanScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub unique_id: u32,
}
/// KNLBOBPLHJO (3536)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReplayTokenCsReq {
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
    #[prost(string, tag = "4")]
    pub lkpjfgebdad: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub acocbgccece: u32,
    #[prost(enumeration = "ReplayType", tag = "8")]
    pub replay_type: i32,
    #[prost(string, tag = "9")]
    pub jpcpdnplbom: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub inepcgkdobl: u32,
}
/// JEBCNIBMLMM (3595)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReplayTokenScRsp {
    #[prost(enumeration = "ReplayType", tag = "1")]
    pub replay_type: i32,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(string, tag = "4")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub jpcpdnplbom: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// MABBFPAGPGA (3584)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerReplayInfoCsReq {}
/// CNPKLLMJHKD (3527)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerReplayInfoScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub nhccmihkbkc: ::prost::alloc::vec::Vec<ReplayInfo>,
}
/// KPBPEDCDHFG (3436)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRndOptionCsReq {
    #[prost(uint32, tag = "10")]
    pub id: u32,
}
/// FPJFKDDHGPP (3495)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRndOptionScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub kmmkekkbcmf: ::prost::alloc::vec::Vec<u32>,
}
/// HCPKLMFGKDK (3484)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyFirstMeetPamCsReq {}
/// JEDDODFNFOM (3427)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyFirstMeetPamScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueBuff {
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "13")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueBuffList {
    #[prost(message, repeated, tag = "6")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMapInfo {
    #[prost(uint32, tag = "11")]
    pub ajcmleeeaae: u32,
    #[prost(uint32, tag = "1")]
    pub room_id: u32,
    #[prost(enumeration = "Hcdehkdjbae", tag = "7")]
    pub gelbnibonef: i32,
    #[prost(uint32, tag = "12")]
    pub lmojjcecokp: u32,
    #[prost(enumeration = "Hcdehkdjbae", tag = "4")]
    pub hagnknhjidi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueArea {
    #[prost(uint32, tag = "6")]
    pub map_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub njdedckpmed: ::prost::alloc::vec::Vec<RogueMapInfo>,
    #[prost(uint32, tag = "8")]
    pub enimojgdain: u32,
    #[prost(uint32, tag = "5")]
    pub pcibkdlkimf: u32,
    #[prost(uint32, tag = "3")]
    pub kjkpmffamfk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgbnphleden {
    #[prost(uint32, tag = "4")]
    pub map_id: u32,
    #[prost(bool, tag = "3")]
    pub ahffgclfffi: bool,
    #[prost(enumeration = "Kdgnmflkfll", tag = "14")]
    pub bfmgambnkka: i32,
    #[prost(uint32, tag = "1")]
    pub hcggmkcmpjm: u32,
    #[prost(uint32, tag = "11")]
    pub kjkpmffamfk: u32,
    #[prost(enumeration = "Ehddmoaifbd", tag = "12")]
    pub nkpapgdknml: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcabgeihpni {
    #[prost(uint32, repeated, tag = "7")]
    pub neelaopaldp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub maze_buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(uint32, tag = "1")]
    pub acopdfakfld: u32,
    #[prost(message, optional, tag = "12")]
    pub epdccpmacbo: ::core::option::Option<ItemCostData>,
    #[prost(enumeration = "Keeobdafnlj", tag = "4")]
    pub leeacmngdfl: i32,
    #[prost(bool, tag = "3")]
    pub dkecomcnabe: bool,
    #[prost(uint32, tag = "9")]
    pub hbdkeieafkl: u32,
    #[prost(uint32, tag = "14")]
    pub okdccjgcnma: u32,
    #[prost(uint32, tag = "15")]
    pub hbgefombgad: u32,
    #[prost(uint32, tag = "11")]
    pub fdfkncgpfhh: u32,
    #[prost(uint32, tag = "13")]
    pub nngafmpjbnb: u32,
    #[prost(uint32, tag = "10")]
    pub opfgedljcbl: u32,
    #[prost(uint32, tag = "5")]
    pub ifodphlhikb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbjaggacofn {
    #[prost(message, repeated, tag = "7")]
    pub mocggnbapca: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(message, optional, tag = "10")]
    pub get_buff_list: ::core::option::Option<RogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phenjcjmaed {
    #[prost(uint32, tag = "7")]
    pub select_hint_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub fcmlpecgmkh: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(message, repeated, tag = "10")]
    pub jleahlnobnd: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueBuffEnhanceInfo {
    #[prost(float, tag = "8")]
    pub cebbblfacbe: f32,
    #[prost(message, optional, tag = "15")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "14")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueBuffEnhanceInfoList {
    #[prost(message, repeated, tag = "8")]
    pub lebaaijchoh: ::prost::alloc::vec::Vec<RogueBuffEnhanceInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMiracle {
    #[prost(uint32, tag = "2")]
    pub cur_times: u32,
    #[prost(uint32, tag = "7")]
    pub miracle_id: u32,
    #[prost(uint32, tag = "1")]
    pub jloijknceam: u32,
    #[prost(uint32, tag = "10")]
    pub hhlnghknbfe: u32,
    #[prost(map = "uint32, uint32", tag = "8")]
    pub eebncinfdmb: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMiracleInfo {
    #[prost(uint32, tag = "14")]
    pub edijohdchkn: u32,
    #[prost(uint32, tag = "8")]
    pub ccepgehcmcg: u32,
    #[prost(message, repeated, tag = "11")]
    pub miracle_list: ::prost::alloc::vec::Vec<RogueMiracle>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfnpafflgdo {
    #[prost(uint32, repeated, tag = "12")]
    pub miracle_handbook_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub game_miracle_info: ::core::option::Option<RogueMiracleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Padmnlkpond {
    #[prost(uint32, repeated, tag = "14")]
    pub iogngoniiep: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anellcmefng {
    #[prost(uint32, repeated, tag = "15")]
    pub lokhiihcfec: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkoopmomfmn {
    #[prost(uint32, tag = "9")]
    pub ikfohimffio: u32,
    #[prost(oneof = "kkoopmomfmn::Kolmckfgpii", tags = "15, 4")]
    pub kolmckfgpii: ::core::option::Option<kkoopmomfmn::Kolmckfgpii>,
}
/// Nested message and enum types in `KKOOPMOMFMN`.
pub mod kkoopmomfmn {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kolmckfgpii {
        #[prost(message, tag = "15")]
        Ihkkjkhfihh(super::ItemList),
        #[prost(message, tag = "4")]
        Fnopmfbbppo(super::RogueBuffList),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueReviveInfo {
    #[prost(uint32, tag = "15")]
    pub clgnbcjagcl: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub ggnjhinnbkh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub nbdneodpgol: u32,
    #[prost(message, optional, tag = "13")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cljlmkmadaj {
    #[prost(uint32, tag = "4")]
    pub dnbjpopcghn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueVirtualItemInfo {
    #[prost(uint32, tag = "10")]
    pub opfgedljcbl: u32,
    #[prost(uint32, tag = "12")]
    pub eldcfilbekd: u32,
    #[prost(uint32, tag = "8")]
    pub cpdcbffipmp: u32,
    #[prost(uint32, tag = "5")]
    pub laaiblohmde: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueInfo {
    #[prost(message, optional, tag = "196")]
    pub rogue_get_info: ::core::option::Option<RogueGetInfo>,
    #[prost(message, optional, tag = "675")]
    pub rogue_current_info: ::core::option::Option<RogueCurrentInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueGetInfo {
    #[prost(message, optional, tag = "3")]
    pub gkebdmbajaj: ::core::option::Option<RogueAreaInfo>,
    #[prost(message, optional, tag = "6")]
    pub lmpnoceabnh: ::core::option::Option<RogueGetVirtualItemInfo>,
    #[prost(message, optional, tag = "7")]
    pub aliiifglpda: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(message, optional, tag = "1")]
    pub ijopankcekj: ::core::option::Option<RogueAeonInfo>,
    #[prost(message, optional, tag = "5")]
    pub noomdkekgmj: ::core::option::Option<RogueSeasonInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueCurrentInfo {
    #[prost(bool, tag = "4")]
    pub hppclaodclc: bool,
    #[prost(enumeration = "Kdgnmflkfll", tag = "2")]
    pub status: i32,
    #[prost(message, optional, tag = "6")]
    pub mjkpcdjjeml: ::core::option::Option<Blimedcmhmn>,
    #[prost(message, optional, tag = "10")]
    pub rogue_buff_info: ::core::option::Option<RogueBuffInfo>,
    #[prost(message, optional, tag = "12")]
    pub game_miracle_info: ::core::option::Option<GameMiracleInfo>,
    #[prost(message, optional, tag = "9")]
    pub ijopankcekj: ::core::option::Option<GameAeonInfo>,
    #[prost(message, optional, tag = "11")]
    pub gokmadggocb: ::core::option::Option<RogueModuleInfo>,
    #[prost(message, optional, tag = "14")]
    pub fpgmdipjkdj: ::core::option::Option<RogueArea>,
    #[prost(message, optional, tag = "13")]
    pub eelbepmnpgi: ::core::option::Option<RogueLineupInfo>,
    #[prost(message, optional, tag = "1")]
    pub lcfanolipij: ::core::option::Option<Defibaeneff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueSeasonInfo {
    #[prost(uint32, tag = "4")]
    pub jckbapagjlo: u32,
    #[prost(int64, tag = "7")]
    pub begin_time: i64,
    #[prost(int64, tag = "8")]
    pub end_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueAreaInfo {
    #[prost(message, repeated, tag = "2")]
    pub odmgnjmjbhj: ::prost::alloc::vec::Vec<Fgbnphleden>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueAeonInfo {
    #[prost(uint32, tag = "10")]
    pub fggcobnafmf: u32,
    #[prost(bool, tag = "7")]
    pub plpnpndghcp: bool,
    #[prost(uint32, tag = "5")]
    pub jmhnblglkle: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub aeon_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueGetVirtualItemInfo {
    #[prost(uint32, tag = "15")]
    pub kgehnbcjegb: u32,
    #[prost(uint32, tag = "4")]
    pub adbdepodloi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueBuffInfo {
    #[prost(message, repeated, tag = "13")]
    pub maze_buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameMiracleInfo {
    #[prost(message, optional, tag = "6")]
    pub game_miracle_info: ::core::option::Option<RogueMiracleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueLineupInfo {
    #[prost(uint32, repeated, tag = "7")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub revive_info: ::core::option::Option<RogueReviveInfo>,
    #[prost(uint32, repeated, tag = "9")]
    pub jnmdgcjhcjj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajgedefenfa {
    #[prost(message, optional, tag = "10")]
    pub gafafknadag: ::core::option::Option<Anellcmefng>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameAeonInfo {
    #[prost(bool, tag = "13")]
    pub plpnpndghcp: bool,
    #[prost(uint32, tag = "2")]
    pub fggcobnafmf: u32,
    #[prost(uint32, tag = "4")]
    pub game_aeon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueModuleInfo {
    #[prost(uint32, repeated, tag = "7")]
    pub nbmbafkhnce: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okgdohanold {
    #[prost(uint32, tag = "14")]
    pub game_aeon_id: u32,
    #[prost(bool, tag = "15")]
    pub plpnpndghcp: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub aeon_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub jmhnblglkle: u32,
    #[prost(uint32, tag = "9")]
    pub fggcobnafmf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueExploreScore {
    #[prost(uint32, tag = "11")]
    pub ikhioiiojha: u32,
    #[prost(uint32, tag = "15")]
    pub score_id: u32,
    #[prost(uint32, tag = "4")]
    pub dnobhlepfee: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueExploreScoreInfo {
    #[prost(message, repeated, tag = "1")]
    pub ledhadhhcad: ::prost::alloc::vec::Vec<RogueExploreScore>,
    #[prost(uint32, tag = "8")]
    pub aaijabgnada: u32,
    #[prost(float, tag = "4")]
    pub kfjibjojdjj: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueRecordAvatar {
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub slot: u32,
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueRecordInfo {
    #[prost(message, repeated, tag = "8")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(uint32, repeated, tag = "6")]
    pub miracle_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<RogueRecordAvatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueFinishInfo {
    #[prost(message, optional, tag = "13")]
    pub mnoieilbicl: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "654")]
    pub mimbjfhijjb: u32,
    #[prost(bool, tag = "14")]
    pub bbfhpgpdehm: bool,
    #[prost(uint32, tag = "288")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "4")]
    pub adbdepodloi: u32,
    #[prost(message, optional, tag = "1")]
    pub cnldeecifde: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "6")]
    pub fglomhfmldm: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(message, optional, tag = "15")]
    pub ebaiffmakkk: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "7")]
    pub nmbommjjmmb: ::core::option::Option<RogueRecordInfo>,
    #[prost(uint32, tag = "3")]
    pub dnpnnnmfink: u32,
    #[prost(uint32, tag = "8")]
    pub score_id: u32,
    #[prost(uint32, tag = "11")]
    pub bnbojmljihd: u32,
    #[prost(bool, tag = "5")]
    pub is_win: bool,
    #[prost(message, optional, tag = "10")]
    pub dfegoaaiemd: ::core::option::Option<RogueExploreScoreInfo>,
    #[prost(uint32, tag = "12")]
    pub aaoibecdcee: u32,
    #[prost(message, optional, tag = "9")]
    pub ffmkohimdgk: ::core::option::Option<Jpmecebahoa>,
    #[prost(message, optional, tag = "2")]
    pub nbdcgoegfph: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueScoreRewardInfo {
    #[prost(bool, tag = "6")]
    pub kfeeldmahpi: bool,
    #[prost(int64, tag = "5")]
    pub pmbibicpbbm: i64,
    #[prost(uint32, repeated, tag = "15")]
    pub fpgafncbiog: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub naabmdbcank: u32,
    #[prost(bool, tag = "10")]
    pub cohjakffemb: bool,
    #[prost(uint32, tag = "3")]
    pub fcejjhlcoim: u32,
    #[prost(int64, tag = "11")]
    pub igniakdcchp: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inibdhgomep {
    #[prost(uint32, tag = "11")]
    pub eecemipjjgh: u32,
    #[prost(uint32, tag = "13")]
    pub exp: u32,
    #[prost(uint32, tag = "6")]
    pub aeon_id: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueDialogueEventParam {
    #[prost(int32, tag = "7")]
    pub int_value: i32,
    #[prost(float, tag = "3")]
    pub ratio: f32,
    #[prost(bool, tag = "10")]
    pub is_valid: bool,
    #[prost(uint32, tag = "5")]
    pub dialogue_event_id: u32,
    #[prost(uint32, tag = "11")]
    pub arg_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DialogueEvent {
    #[prost(uint32, tag = "11")]
    pub talk_dialogue_id: u32,
    #[prost(uint32, tag = "9")]
    pub aeon_talk_id: u32,
    #[prost(uint32, tag = "12")]
    pub game_mode_type: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub npcgbahogfa: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub dialogue_event_param_list: ::prost::alloc::vec::Vec<RogueDialogueEventParam>,
    #[prost(uint32, tag = "15")]
    pub event_unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmelhcnkjad {
    #[prost(enumeration = "RogueDialogueResult", tag = "11")]
    pub mldcbhamclk: i32,
    #[prost(uint32, repeated, tag = "2")]
    pub fbhpfcfcgif: ::prost::alloc::vec::Vec<u32>,
    #[prost(oneof = "cmelhcnkjad::Kolmckfgpii", tags = "14")]
    pub kolmckfgpii: ::core::option::Option<cmelhcnkjad::Kolmckfgpii>,
}
/// Nested message and enum types in `CMELHCNKJAD`.
pub mod cmelhcnkjad {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kolmckfgpii {
        #[prost(message, tag = "14")]
        Ihkkjkhfihh(super::ItemList),
    }
}
/// LENHOCMBDNO (1836)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueInfoCsReq {}
/// CHHMEDOBHDC (1895)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueInfoScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub rogue_game_info: ::core::option::Option<RogueInfo>,
}
/// DELEEPCLOPO (1884)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartRogueCsReq {
    #[prost(uint32, repeated, tag = "4")]
    pub hobkomgbibl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "1")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "14")]
    pub aeon_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
}
/// ONECEBBDFJL (1827)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartRogueScRsp {
    #[prost(message, optional, tag = "8")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub rogue_game_info: ::core::option::Option<RogueInfo>,
    #[prost(message, optional, tag = "4")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
}
/// LGIIPIDBLFH (1867)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterRogueCsReq {
    #[prost(uint32, tag = "15")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub kjkpmffamfk: u32,
}
/// IJGFDDDLKBE (1828)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterRogueScRsp {
    #[prost(message, optional, tag = "1")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "10")]
    pub rogue_game_info: ::core::option::Option<RogueInfo>,
    #[prost(message, optional, tag = "15")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
/// PDJEMGOECHJ (1852)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveRogueCsReq {}
/// DPDMHGJAAEA (1874)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaveRogueScRsp {
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "2")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "3")]
    pub rogue_game_info: ::core::option::Option<RogueInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// GMJEGFMHPAA (1896)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueFinishScNotify {
    #[prost(message, optional, tag = "14")]
    pub rogue_finish_info: ::core::option::Option<RogueFinishInfo>,
}
/// OLFJNGJFEDK (1805)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PickRogueAvatarCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub prop_entity_id: u32,
}
/// OJAFIOPJAML (1875)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PickRogueAvatarScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// OAMGODOKKCL (1826)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReviveRogueAvatarCsReq {
    #[prost(uint32, tag = "9")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// GIELPINBFDF (1807)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReviveRogueAvatarScRsp {
    #[prost(message, optional, tag = "7")]
    pub revive_info: ::core::option::Option<RogueReviveInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub hogklindolb: u32,
}
/// MBODOKFKPLI (1810)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueReviveInfoScNotify {
    #[prost(message, optional, tag = "2")]
    pub revive_info: ::core::option::Option<RogueReviveInfo>,
}
/// FNAGBFFKNLE (1859)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueBuffEnhanceInfoCsReq {}
/// PAPLDOAEKNN (1812)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueBuffEnhanceInfoScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub npbamcnhafj: ::core::option::Option<RogueBuffEnhanceInfoList>,
}
/// DBEPGGDLFOK (1878)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnhanceRogueBuffCsReq {
    #[prost(uint32, tag = "10")]
    pub maze_buff_id: u32,
}
/// JNLKKEGIJON (1829)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnhanceRogueBuffScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub is_succ: bool,
    #[prost(message, optional, tag = "6")]
    pub iileadjpaem: ::core::option::Option<RogueBuff>,
}
/// IHNHDIJMJAD (1876)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitRogueCsReq {
    #[prost(uint32, tag = "4")]
    pub kjkpmffamfk: u32,
}
/// NFNAIHODBIE (1835)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitRogueScRsp {
    #[prost(message, optional, tag = "13")]
    pub rogue_finish_info: ::core::option::Option<RogueFinishInfo>,
    #[prost(message, optional, tag = "3")]
    pub rogue_game_info: ::core::option::Option<RogueInfo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// GPIMFJEIIAP (1817)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncRogueExploreWinScNotify {
    #[prost(bool, tag = "12")]
    pub hppclaodclc: bool,
}
/// ENAODGOELIO (1813)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueSeasonFinishScNotify {
    #[prost(message, optional, tag = "13")]
    pub aliiifglpda: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(message, optional, tag = "5")]
    pub rogue_finish_info: ::core::option::Option<RogueFinishInfo>,
    #[prost(bool, tag = "8")]
    pub belnaehamco: bool,
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "10")]
    pub scene: ::core::option::Option<SceneInfo>,
}
/// OJODCLNCEDE (1808)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterRogueMapRoomCsReq {
    #[prost(uint32, tag = "6")]
    pub lmojjcecokp: u32,
    #[prost(uint32, tag = "9")]
    pub room_id: u32,
}
/// MNCOPJBHGNF (1818)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterRogueMapRoomScRsp {
    #[prost(uint32, tag = "7")]
    pub pcibkdlkimf: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "8")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
/// DFAPLIHGOBH (1879)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncRogueMapRoomScNotify {
    #[prost(message, optional, tag = "12")]
    pub chneblikcgp: ::core::option::Option<RogueMapInfo>,
    #[prost(uint32, tag = "9")]
    pub map_id: u32,
}
/// GOOABBBFKPD (1864)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenRogueChestCsReq {
    #[prost(uint32, tag = "1")]
    pub interacted_prop_entity_id: u32,
    #[prost(bool, tag = "11")]
    pub onhhplekhki: bool,
}
/// INEBGMGFGOF (1872)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenRogueChestScRsp {
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "14")]
    pub ieinoefbllp: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// DDPBCPMBEKK (1899)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRogueRewardKeyCsReq {
    #[prost(uint32, tag = "6")]
    pub count: u32,
}
/// ExchangeRogueRewardKeyScRsp (1803)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRogueRewardKeyScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub count: u32,
}
/// OLGLGJDCOOO (1849)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncRogueAreaUnlockScNotify {
    #[prost(uint32, tag = "2")]
    pub kjkpmffamfk: u32,
}
/// PGHKALGBFEK (1870)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueGetItemScNotify {
    #[prost(message, optional, tag = "1")]
    pub get_item_list: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "10")]
    pub liflidfoacd: ::core::option::Option<ItemList>,
}
/// EJHGICDOOFP (1898)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeRogueAeonLevelRewardCsReq {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub aeon_id: u32,
}
/// ECBAKLNPNDN (1891)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueAeonLevelRewardScRsp {
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub aeon_id: u32,
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// CAFJBLFEICN (1856)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueAeonLevelUpRewardScNotify {
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub aeon_id: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
}
/// NEHEDMFJMNP (1809)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueScoreRewardInfoCsReq {}
/// FEAPOFOMCMG (1820)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueScoreRewardInfoScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub lddcaaekfob: ::core::option::Option<RogueScoreRewardInfo>,
}
/// DOLCIKKMHFJ (1853)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueScoreRewardCsReq {
    #[prost(uint32, repeated, tag = "8")]
    pub kabpbmgimok: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub fcejjhlcoim: u32,
}
/// NBMOJDEEOKG (1890)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueScoreRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub fcejjhlcoim: u32,
    #[prost(message, optional, tag = "6")]
    pub aliiifglpda: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
}
/// EMOOIAIMHLA (1837)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueInitialScoreCsReq {}
/// BEPPPGCPFNA (1811)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueInitialScoreScRsp {
    #[prost(message, optional, tag = "4")]
    pub aliiifglpda: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// BAGMNLGBLFK (1886)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueAeonInfoCsReq {}
/// CDMBEDANBBN (1866)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueAeonInfoScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub aipoefndcbm: ::prost::alloc::vec::Vec<Inibdhgomep>,
}
/// KKKHCDJJLGK (1863)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishAeonDialogueGroupCsReq {
    #[prost(uint32, tag = "15")]
    pub aeon_id: u32,
}
/// BFEOIJJAFPO (1889)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishAeonDialogueGroupScRsp {
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub ijopankcekj: ::core::option::Option<Inibdhgomep>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// LOHAKINNCHH (1815)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueTalentInfoCsReq {}
/// BJFKGHOKIPK (1885)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueTalentInfoScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub lgofoilnonl: ::core::option::Option<Kfddofkhkdj>,
}
/// DJFFLBJDPHH (1862)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnableRogueTalentCsReq {
    #[prost(uint32, tag = "1")]
    pub talent_id: u32,
}
/// NOCEIFOAOPN (1802)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnableRogueTalentScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub lgofoilnonl: ::core::option::Option<Kfddofkhkdj>,
}
/// HNCPKLOACIK (1877)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncRogueVirtualItemInfoScNotify {
    #[prost(message, optional, tag = "13")]
    pub lmpnoceabnh: ::core::option::Option<RogueVirtualItemInfo>,
}
/// LJEPOJCMJHA (1854)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncRogueStatusScNotify {
    #[prost(enumeration = "Kdgnmflkfll", tag = "10")]
    pub status: i32,
    #[prost(bool, tag = "12")]
    pub ledfhapodcl: bool,
}
/// JNJJMEEPHPG (1814)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueRewardInfoScNotify {
    #[prost(message, optional, tag = "13")]
    pub aliiifglpda: ::core::option::Option<RogueScoreRewardInfo>,
}
/// BNLANCBBNAK (1851)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRoguePickAvatarInfoScNotify {
    #[prost(uint32, repeated, tag = "13")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// LHBBCEGHOLK (1847)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueAeonScNotify {
    #[prost(message, optional, tag = "10")]
    pub ojkfmicckfh: ::core::option::Option<Okgdohanold>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofjkolckpjl {
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "11")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
}
/// HCOGPCGEJDI (7662)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueArcadeStartCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub room_id: u32,
}
/// EDKOKDJENFH (7700)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueArcadeStartScRsp {
    #[prost(message, optional, tag = "6")]
    pub kjbiggihkdp: ::core::option::Option<Ofjkolckpjl>,
    #[prost(uint32, tag = "2")]
    pub room_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// BBGILOHHHEC (7680)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueArcadeLeaveCsReq {}
/// IHPBCPLLNGH (7673)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueArcadeLeaveScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub kjbiggihkdp: ::core::option::Option<Ofjkolckpjl>,
}
/// CFOHFEOEJIJ (7665)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueArcadeRestartCsReq {}
/// FCCFOJLIGGC (7699)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueArcadeRestartScRsp {
    #[prost(message, optional, tag = "14")]
    pub kjbiggihkdp: ::core::option::Option<Ofjkolckpjl>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// HCOCMLOFMBA (7659)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueArcadeGetInfoCsReq {}
/// EHMGEGMCJCN (7693)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueArcadeGetInfoScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub room_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueCommonBuff {
    #[prost(uint32, tag = "7")]
    pub buff_level: u32,
    #[prost(uint32, tag = "11")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueBuff {
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueCommonBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueCommonBuffSelectInfo {
    #[prost(uint32, tag = "10")]
    pub source_cur_count: u32,
    #[prost(uint32, tag = "1")]
    pub source_total_count: u32,
    #[prost(bool, tag = "12")]
    pub can_roll: bool,
    #[prost(uint32, tag = "11")]
    pub source_hint_id: u32,
    #[prost(uint32, tag = "8")]
    pub roll_buff_count: u32,
    #[prost(uint32, tag = "6")]
    pub roll_buff_max_count: u32,
    #[prost(message, optional, tag = "4")]
    pub roll_buff_cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "7")]
    pub roll_buff_free_count: u32,
    #[prost(uint32, tag = "9")]
    pub certain_select_buff_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub handbook_unlock_buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub select_buff_list: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(enumeration = "Keeobdafnlj", tag = "15")]
    pub source_type: i32,
    #[prost(uint32, repeated, tag = "14")]
    pub first_buff_type_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odgadhgegpd {
    #[prost(uint32, tag = "4")]
    pub kanfgjbjaec: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phpibbbicjh {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbmlhmcdpbp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlgkljmckji {
    #[prost(message, optional, tag = "2")]
    pub nemhmhfoloa: ::core::option::Option<RogueCommonBuffSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idndfhbdjbe {
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
    #[prost(message, optional, tag = "10")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfannkoknca {
    #[prost(message, repeated, tag = "13")]
    pub lebaaijchoh: ::prost::alloc::vec::Vec<Idndfhbdjbe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cndkkpmoilg {
    #[prost(message, repeated, tag = "8")]
    pub fcmlpecgmkh: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(message, repeated, tag = "14")]
    pub jleahlnobnd: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "3")]
    pub select_hint_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epchdijlfcc {
    #[prost(uint32, tag = "9")]
    pub select_hint_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub jleahlnobnd: ::prost::alloc::vec::Vec<RogueCommonBuff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeppfeodlpn {
    #[prost(uint32, tag = "14")]
    pub gnenemdhbhe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goifeoibpeg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plfjjdaemco {
    #[prost(uint32, tag = "5")]
    pub select_hint_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub ihllemfcbcc: ::prost::alloc::vec::Vec<RogueCommonBuff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghjmkhcaple {
    #[prost(uint32, tag = "7")]
    pub kanfgjbjaec: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eadhaphkogd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhkjejggnoi {
    #[prost(message, repeated, tag = "13")]
    pub hgalbeelddd: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "12")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlnlepkofdb {
    #[prost(uint32, tag = "12")]
    pub kanfgjbjaec: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nehjeobghpc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eaammpjfkib {
    #[prost(message, optional, tag = "3")]
    pub hnebbkenpnp: ::core::option::Option<ChessRogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibjmingepgn {
    #[prost(uint32, tag = "13")]
    pub cur_times: u32,
    #[prost(map = "uint32, uint32", tag = "5")]
    pub eebncinfdmb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "4")]
    pub miracle_id: u32,
    #[prost(uint32, tag = "15")]
    pub jloijknceam: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjecgaokfaa {
    #[prost(bool, tag = "9")]
    pub plgibhocdgp: bool,
    #[prost(message, optional, tag = "7")]
    pub mfejcmlaboj: ::core::option::Option<Ibjmingepgn>,
    #[prost(uint32, tag = "5")]
    pub ommldpoomeg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgpbgjpkpob {
    #[prost(message, optional, tag = "4")]
    pub bpgeldjgkgj: ::core::option::Option<Ibjmingepgn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gpcdjoaonaj {
    #[prost(uint32, tag = "11")]
    pub miracle_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iglbmoebkjf {
    #[prost(uint32, tag = "9")]
    pub fgmocmegann: u32,
    #[prost(message, optional, tag = "14")]
    pub bpgeldjgkgj: ::core::option::Option<Ibjmingepgn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onfbplepjja {
    #[prost(message, optional, tag = "11")]
    pub bpgeldjgkgj: ::core::option::Option<Ibjmingepgn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngngnojjhgf {
    #[prost(uint32, tag = "10")]
    pub ommldpoomeg: u32,
    #[prost(message, optional, tag = "14")]
    pub mfejcmlaboj: ::core::option::Option<Ibjmingepgn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbebnmkmhan {
    #[prost(message, optional, tag = "11")]
    pub bpgeldjgkgj: ::core::option::Option<Ibjmingepgn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkllpgceecm {
    #[prost(message, repeated, tag = "6")]
    pub miracle_list: ::prost::alloc::vec::Vec<Ibjmingepgn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okkakmhnplk {
    #[prost(uint32, repeated, tag = "5")]
    pub mlalnfgmgke: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub miracle_handbook_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iddedgoenkp {
    #[prost(uint32, tag = "14")]
    pub njjkphhigci: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meopdlngiei {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljlchoehgpe {
    #[prost(uint32, repeated, tag = "8")]
    pub iogngoniiep: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjeckldalol {
    #[prost(uint32, repeated, tag = "5")]
    pub fajofpmmjmc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lomnoaljian {
    #[prost(uint32, tag = "3")]
    pub bmpkebpmfgc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmldghkckgp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nabfafakjbh {
    #[prost(uint32, tag = "6")]
    pub select_hint_id: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub eamjadlajoa: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmpohdaldha {
    #[prost(uint32, tag = "8")]
    pub cmpeakhpjpo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meimjcgkooo {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbkmopplbep {
    #[prost(uint32, repeated, tag = "5")]
    pub mmeieogmoeg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfafndlfblf {
    #[prost(uint32, tag = "11")]
    pub oeopbhmlndl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfmiabfjfih {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Poodpjeipom {
    #[prost(uint32, repeated, tag = "11")]
    pub kkcffejoebj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Angdgeihhpg {
    #[prost(uint32, tag = "2")]
    pub fpoalgnogbf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Efeiekoiccj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amgllielkef {
    #[prost(uint32, tag = "15")]
    pub select_hint_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub pamapagbbjf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Loblgohdmaf {
    #[prost(uint32, tag = "3")]
    pub njjkphhigci: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obnmhgomllm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgpdlcddbcb {
    #[prost(uint32, repeated, tag = "10")]
    pub pamapagbbjf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iaohglnlnhm {
    #[prost(uint32, tag = "1")]
    pub njjkphhigci: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chpbcnadmam {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Noeigmcegoi {
    #[prost(uint32, tag = "5")]
    pub gnhndidcami: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgocbechheb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfmelemcjna {
    #[prost(message, optional, tag = "5")]
    pub hlkakjhdfpc: ::core::option::Option<Bkllpgceecm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifefofljnml {
    #[prost(uint32, repeated, tag = "6")]
    pub lokhiihcfec: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blimedcmhmn {
    #[prost(uint32, tag = "4")]
    pub khmnkdaahae: u32,
    #[prost(uint32, tag = "9")]
    pub lapkefiaale: u32,
    #[prost(uint32, tag = "13")]
    pub mpnjdflkced: u32,
    #[prost(uint32, tag = "15")]
    pub laicmbgpjfc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Alendkfoajh {
    #[prost(uint32, tag = "6")]
    pub knpgfikpmfc: u32,
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdkpllpfagh {
    #[prost(enumeration = "AvatarType", tag = "14")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueSyncContextBoardEvent {
    #[prost(uint32, tag = "10")]
    pub modifier_effect_type: u32,
    #[prost(uint32, tag = "2")]
    pub board_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehdlilnchip {
    #[prost(message, optional, tag = "9")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpoopbgngld {
    #[prost(message, optional, tag = "5")]
    pub nbeiknagdpj: ::core::option::Option<Ehdlilnchip>,
    #[prost(message, optional, tag = "15")]
    pub bgicmiboiil: ::core::option::Option<RogueSyncContextBoardEvent>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahnkhffeaoe {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jhpomfgmbje {
    #[prost(int32, tag = "7")]
    pub count: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjmodkbmmlc {
    #[prost(uint32, tag = "5")]
    pub miracle_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcdkebohbfc {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueAdventureRoomGameplayWolfGunTarget {
    #[prost(
        oneof = "rogue_adventure_room_gameplay_wolf_gun_target::TargetImplCase",
        tags = "12, 1, 10, 15"
    )]
    pub target_impl_case: ::core::option::Option<
        rogue_adventure_room_gameplay_wolf_gun_target::TargetImplCase,
    >,
}
/// Nested message and enum types in `RogueAdventureRoomGameplayWolfGunTarget`.
pub mod rogue_adventure_room_gameplay_wolf_gun_target {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum TargetImplCase {
        #[prost(message, tag = "12")]
        TargetNone(super::Ahnkhffeaoe),
        #[prost(message, tag = "1")]
        TargetCoin(super::Jhpomfgmbje),
        #[prost(message, tag = "10")]
        TargetMiracle(super::Gjmodkbmmlc),
        #[prost(message, tag = "15")]
        TargetRuanmei(super::Fcdkebohbfc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmbpbhmoabj {
    #[prost(uint32, tag = "2")]
    pub ljcckmkcjhh: u32,
    #[prost(message, repeated, tag = "10")]
    pub battle_target_list: ::prost::alloc::vec::Vec<
        RogueAdventureRoomGameplayWolfGunTarget,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdbiemnfebd {
    #[prost(oneof = "gdbiemnfebd::InfoCase", tags = "14")]
    pub info_case: ::core::option::Option<gdbiemnfebd::InfoCase>,
}
/// Nested message and enum types in `GDBIEMNFEBD`.
pub mod gdbiemnfebd {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "14")]
        Ggkpilogemk(super::Bmbpbhmoabj),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmhadincfoc {
    #[prost(uint32, tag = "6")]
    pub monmadbkako: u32,
    #[prost(message, optional, tag = "13")]
    pub hfgddeokcdg: ::core::option::Option<Gdbiemnfebd>,
    #[prost(uint32, tag = "3")]
    pub score_id: u32,
    #[prost(double, tag = "15")]
    pub dheejefhjhd: f64,
    #[prost(uint32, tag = "8")]
    pub kngnokpaefc: u32,
    #[prost(uint32, tag = "11")]
    pub status: u32,
}
/// MDHFGAIOEBP (5636)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueAdventureRoomInfoScNotify {
    #[prost(message, optional, tag = "2")]
    pub ggajgdededh: ::core::option::Option<Kmhadincfoc>,
}
/// BCEBGCMFHBL (5695)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PrepareRogueAdventureRoomCsReq {}
/// JJMOMOCDJIN (5684)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrepareRogueAdventureRoomScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ggajgdededh: ::core::option::Option<Kmhadincfoc>,
}
/// GGHHBPFEJIL (5678)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopRogueAdventureRoomCsReq {
    #[prost(uint32, tag = "2")]
    pub najdbeddkpl: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub fpbhkpdnbii: ::prost::alloc::vec::Vec<u32>,
}
/// HIHCHEFEGLN (5629)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopRogueAdventureRoomScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub ggajgdededh: ::core::option::Option<Kmhadincfoc>,
}
/// JJHAFDMKJAH (5625)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueAdventureRoomInfoCsReq {}
/// AMOHEPEPHJK (5696)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueAdventureRoomInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ggajgdededh: ::core::option::Option<Kmhadincfoc>,
}
/// KHHDHGAJLFL (5655)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateRogueAdventureRoomScoreCsReq {
    #[prost(uint32, tag = "4")]
    pub dpokcfkndig: u32,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
}
/// CHNALEHJHIG (5622)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRogueAdventureRoomScoreScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub ggajgdededh: ::core::option::Option<Kmhadincfoc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmbhanndicg {
    #[prost(message, optional, tag = "3")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "12")]
    pub olhbjhgjnnl: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "9")]
    pub acdebpiglna: bool,
    #[prost(uint32, tag = "1")]
    pub miracle_id: u32,
    #[prost(bool, tag = "11")]
    pub migbcikndfl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmiakmogmei {
    #[prost(uint32, tag = "6")]
    pub pmhpllpnoec: u32,
    #[prost(message, optional, tag = "14")]
    pub olhbjhgjnnl: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "8")]
    pub acdebpiglna: bool,
    #[prost(message, optional, tag = "7")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "9")]
    pub buff_id: u32,
    #[prost(bool, tag = "2")]
    pub migbcikndfl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beemlamljej {
    #[prost(message, repeated, tag = "6")]
    pub miracle_list: ::prost::alloc::vec::Vec<Jmbhanndicg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkecicapiii {
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<Kmiakmogmei>,
}
/// GIONJMDBDLO (5628)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueShopBuffInfoCsReq {
    #[prost(bool, tag = "15")]
    pub elnccecchmg: bool,
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
}
/// DLOJJEOFHBH (5652)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueShopBuffInfoScRsp {
    #[prost(message, optional, tag = "9")]
    pub aoegljjmhop: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "1")]
    pub rogue_buff_info: ::core::option::Option<Hkecicapiii>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(bool, tag = "5")]
    pub ppjfbjmdiie: bool,
}
/// OEFMFCFBFJO (5627)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueShopMiracleInfoCsReq {
    #[prost(bool, tag = "7")]
    pub elnccecchmg: bool,
    #[prost(uint32, tag = "4")]
    pub interacted_prop_entity_id: u32,
}
/// BGLIIOFIBHP (5667)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueShopMiracleInfoScRsp {
    #[prost(bool, tag = "7")]
    pub ppjfbjmdiie: bool,
    #[prost(message, optional, tag = "6")]
    pub game_miracle_info: ::core::option::Option<Beemlamljej>,
    #[prost(message, optional, tag = "4")]
    pub aoegljjmhop: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngcbabpkakb {
    #[prost(uint32, tag = "9")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "13")]
    pub miracle_id: u32,
}
/// DIEDKIIGKNK (5674)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyRogueShopMiracleCsReq {
    #[prost(uint32, tag = "3")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub buff_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// PAOHONNKLNA (5624)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyRogueShopMiracleScRsp {
    #[prost(message, optional, tag = "15")]
    pub game_miracle_info: ::core::option::Option<Beemlamljej>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// LLPPDEAMJKD (5634)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyRogueShopBuffScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub rogue_buff_info: ::core::option::Option<Hkecicapiii>,
}
/// DDPMCFKJINJ (5626)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRogueBuffWithMiracleCsReq {
    #[prost(uint32, tag = "5")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, tag = "8")]
    pub miracle_id: u32,
}
/// JFGHGEEIMIH (5607)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRogueBuffWithMiracleScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub jlbkiechnbh: ::core::option::Option<RogueCommonBuff>,
}
/// MNHCGMEFKKD (5643)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueNpcDisappearCsReq {
    #[prost(uint32, tag = "14")]
    pub oeopaonkghk: u32,
}
/// EDONFKCDCEE (5646)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueNpcDisappearScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// FPNNPADHOCM (5659)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnhanceCommonRogueBuffCsReq {
    #[prost(uint32, tag = "15")]
    pub maze_buff_id: u32,
    #[prost(uint32, tag = "3")]
    pub interacted_prop_entity_id: u32,
}
/// IGJBGIBIGFN (5612)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnhanceCommonRogueBuffScRsp {
    #[prost(message, optional, tag = "14")]
    pub iileadjpaem: ::core::option::Option<RogueCommonBuff>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub is_succ: bool,
}
/// LGPFIFBDJBP (5653)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEnhanceCommonRogueBuffInfoCsReq {
    #[prost(uint32, tag = "7")]
    pub interacted_prop_entity_id: u32,
}
/// GetEnhanceCommonRogueBuffInfoScRsp (5690)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnhanceCommonRogueBuffInfoScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub enhanced_buff_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// HDOMHIBKDAN (5681)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueCommonActionResultScNotify {
    #[prost(message, repeated, tag = "10")]
    pub nnjpjhjbbch: ::prost::alloc::vec::Vec<Gfjnojldkgd>,
    #[prost(uint32, tag = "5")]
    pub nkpdmckfppp: u32,
    #[prost(enumeration = "Ffpmapkbkml", tag = "3")]
    pub knpgfikpmfc: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfjnojldkgd {
    #[prost(message, optional, tag = "12")]
    pub jgmnmdafjke: ::core::option::Option<Aaikkegjjoo>,
    #[prost(enumeration = "Flkjifadedb", tag = "14")]
    pub source: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hidibjjaojn {
    #[prost(uint32, tag = "9")]
    pub key: u32,
    #[prost(int32, tag = "3")]
    pub phfllpmpmnh: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nolhmeampab {
    #[prost(message, repeated, tag = "9")]
    pub aaeckehlnen: ::prost::alloc::vec::Vec<Hidibjjaojn>,
    #[prost(uint32, tag = "15")]
    pub formula_id: u32,
    #[prost(bool, tag = "12")]
    pub mbaipcchdci: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Leclnnblphc {
    #[prost(map = "uint32, int32", tag = "13")]
    pub abghhlggkik: ::std::collections::HashMap<u32, i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ooemgaidaan {
    #[prost(message, optional, tag = "10")]
    pub hoinnilnheb: ::core::option::Option<Nolhmeampab>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amepabdipio {
    #[prost(message, optional, tag = "2")]
    pub hoinnilnheb: ::core::option::Option<Nolhmeampab>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chgdlehjbfi {
    #[prost(message, optional, tag = "13")]
    pub hoinnilnheb: ::core::option::Option<Nolhmeampab>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emmmifclone {
    #[prost(message, optional, tag = "1")]
    pub hoinnilnheb: ::core::option::Option<Nolhmeampab>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Majbcdfadli {
    #[prost(message, optional, tag = "12")]
    pub value: ::core::option::Option<Leclnnblphc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omjcicfmbeh {
    #[prost(message, repeated, tag = "12")]
    pub idihemiednb: ::prost::alloc::vec::Vec<Nolhmeampab>,
    #[prost(message, optional, tag = "5")]
    pub iengpcnjdkm: ::core::option::Option<Leclnnblphc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hidegcmnfkc {
    #[prost(uint32, tag = "5")]
    pub mhpooooiohd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fckaieidbjo {
    #[prost(uint32, tag = "2")]
    pub mhpooooiohd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fanhhmlogpi {
    #[prost(map = "uint32, bool", tag = "1")]
    pub adkambbjndi: ::std::collections::HashMap<u32, bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaikkegjjoo {
    #[prost(
        oneof = "aaikkegjjoo::InfoCase",
        tags = "6, 11, 1069, 692, 580, 1581, 1976, 1155, 1862, 49, 688, 1371, 154, 887, 570, 1021, 99, 173, 1376, 1493, 332, 563, 1985, 1847, 822, 1363"
    )]
    pub info_case: ::core::option::Option<aaikkegjjoo::InfoCase>,
}
/// Nested message and enum types in `AAIKKEGJJOO`.
pub mod aaikkegjjoo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "6")]
        Ejdepkeaoli(super::Alendkfoajh),
        #[prost(message, tag = "11")]
        Cckalcbjnhi(super::Alendkfoajh),
        #[prost(message, tag = "1069")]
        GetBuffList(super::RogueCommonBuff),
        #[prost(message, tag = "692")]
        Jgedahnkogm(super::RogueCommonBuff),
        #[prost(message, tag = "580")]
        Cgkigaobbej(super::Bgpbgjpkpob),
        #[prost(message, tag = "1581")]
        Bcogpmadmmj(super::Gpcdjoaonaj),
        #[prost(message, tag = "1976")]
        Lhfdiebcljd(super::Iglbmoebkjf),
        #[prost(message, tag = "1155")]
        Jmkbcjhfdcn(super::Onfbplepjja),
        #[prost(message, tag = "1862")]
        Angkgkhhhop(super::Ngngnojjhgf),
        #[prost(message, tag = "49")]
        Lcmohgdidjo(super::Dbebnmkmhan),
        #[prost(message, tag = "688")]
        Nndndfineck(super::Pdkpllpfagh),
        #[prost(message, tag = "1371")]
        Difldnonoan(super::Ooemgaidaan),
        #[prost(message, tag = "154")]
        Epllhncfmjf(super::Amepabdipio),
        #[prost(message, tag = "887")]
        Clgjpppliif(super::Chgdlehjbfi),
        #[prost(message, tag = "570")]
        Ndebjhfhfnf(super::Emmmifclone),
        #[prost(message, tag = "1021")]
        Ldfblmifmln(super::Majbcdfadli),
        #[prost(message, tag = "99")]
        Ocolnpkhpmo(super::Hidegcmnfkc),
        #[prost(message, tag = "173")]
        Nppomcpppic(super::Fckaieidbjo),
        #[prost(message, tag = "1376")]
        Cmhfcgofkfg(super::Fbbeilgmefp),
        #[prost(message, tag = "1493")]
        Fgmbfdccmik(super::Nnmblejfehh),
        #[prost(message, tag = "332")]
        Aibdohnjbdm(super::Gagfneonpom),
        #[prost(message, tag = "563")]
        Fgnhnkcnpnd(super::Ookfhbflpeb),
        #[prost(message, tag = "1985")]
        Pdgeojpbpij(super::Ookfhbflpeb),
        #[prost(message, tag = "1847")]
        Bodlmenokll(super::Ookfhbflpeb),
        #[prost(message, tag = "822")]
        Epbegeaiihn(super::Dbkplonpchj),
        #[prost(message, tag = "1363")]
        Hhohkbfjjap(super::Ffpngiafaea),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueFormulaSelectInfo {
    #[prost(uint32, tag = "5")]
    pub hint_id: u32,
    #[prost(uint32, tag = "2")]
    pub roll_formula_max_count: u32,
    #[prost(bool, tag = "8")]
    pub can_roll: bool,
    #[prost(uint32, tag = "1")]
    pub roll_formula_count: u32,
    #[prost(uint32, tag = "11")]
    pub roll_formula_free_count: u32,
    #[prost(message, optional, tag = "13")]
    pub roll_formula_cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, repeated, tag = "9")]
    pub select_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub handbook_unlock_formula_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcedklheeji {
    #[prost(uint32, tag = "5")]
    pub ipbdjpopjdo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahehgepokog {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Meaobgagcbp {
    #[prost(uint32, repeated, tag = "13")]
    pub menfageobgi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jephnacildj {
    #[prost(uint32, tag = "6")]
    pub ipbdjpopjdo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdmpbbdakej {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lkoebdlaaoo {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmoddchonng {
    #[prost(message, optional, tag = "7")]
    pub abjgbmelghm: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnapdeooimo {
    #[prost(message, optional, tag = "6")]
    pub abjgbmelghm: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dclcnfbookh {
    #[prost(uint32, tag = "4")]
    pub ipbdjpopjdo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjbbljmegid {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aflbelcpomc {
    #[prost(uint32, tag = "2")]
    pub fchmhgfcjfg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dechfleccdm {
    #[prost(uint32, tag = "6")]
    pub iofeedemhko: u32,
    #[prost(uint32, tag = "1")]
    pub slot: u32,
    #[prost(uint32, tag = "13")]
    pub r#type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iaminghlbdj {
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub scepter_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbkplonpchj {
    #[prost(message, repeated, tag = "14")]
    pub pmmnaigcbeo: ::prost::alloc::vec::Vec<Aakgcjpojdf>,
    #[prost(message, repeated, tag = "1")]
    pub odangogedca: ::prost::alloc::vec::Vec<Dechfleccdm>,
    #[prost(message, optional, tag = "5")]
    pub bgfhgkmpfnh: ::core::option::Option<Iaminghlbdj>,
    #[prost(map = "uint32, uint32", tag = "7")]
    pub trench_count: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aakgcjpojdf {
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub magic_unit_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ookfhbflpeb {
    #[prost(message, optional, tag = "4")]
    pub cfjmobmclbi: ::core::option::Option<Aakgcjpojdf>,
    #[prost(uint32, tag = "14")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbbeilgmefp {
    #[prost(message, optional, tag = "1")]
    pub cihhdlnpaln: ::core::option::Option<Dbkplonpchj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnmblejfehh {
    #[prost(message, optional, tag = "7")]
    pub cihhdlnpaln: ::core::option::Option<Dbkplonpchj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gagfneonpom {
    #[prost(message, optional, tag = "1")]
    pub cihhdlnpaln: ::core::option::Option<Dbkplonpchj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pgmnmgokhig {
    #[prost(message, optional, tag = "6")]
    pub ekgnfjonkml: ::core::option::Option<Ookfhbflpeb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkbkilccngc {
    #[prost(message, optional, tag = "15")]
    pub jialocpokfj: ::core::option::Option<Ookfhbflpeb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdafnkcllol {
    #[prost(uint32, tag = "12")]
    pub nngafmpjbnb: u32,
    #[prost(message, repeated, tag = "2")]
    pub gdphcdoehlb: ::prost::alloc::vec::Vec<Aakgcjpojdf>,
    #[prost(uint32, tag = "1")]
    pub hbgefombgad: u32,
    #[prost(message, optional, tag = "9")]
    pub aobagedoinn: ::core::option::Option<Aakgcjpojdf>,
    #[prost(uint32, tag = "8")]
    pub select_hint_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blbalblmnhf {
    #[prost(message, repeated, tag = "1")]
    pub gdphcdoehlb: ::prost::alloc::vec::Vec<Ookfhbflpeb>,
    #[prost(uint32, tag = "2")]
    pub select_hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igkljmieaij {
    #[prost(message, optional, tag = "10")]
    pub iflnonnbbck: ::core::option::Option<Aakgcjpojdf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ldbcelodhmc {
    #[prost(message, optional, tag = "11")]
    pub iflnonnbbck: ::core::option::Option<Ookfhbflpeb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnmaimbkdmd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pcmdgmjgifo {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gknhncdpmln {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhoenkjopik {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffpngiafaea {
    #[prost(message, optional, tag = "4")]
    pub pabncehfipl: ::core::option::Option<Ookfhbflpeb>,
    #[prost(uint32, repeated, tag = "11")]
    pub mfnldjahpje: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgoogpipedj {
    #[prost(uint32, tag = "8")]
    pub select_hint_id: u32,
    #[prost(message, repeated, tag = "12")]
    pub amhffamcgnn: ::prost::alloc::vec::Vec<Iaminghlbdj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dnniabnania {
    #[prost(message, optional, tag = "11")]
    pub lmcpchmpjbp: ::core::option::Option<Iaminghlbdj>,
    #[prost(bool, tag = "12")]
    pub nomcgdfjmai: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kbgokefoefd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jlmdlkmkpem {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nbnjnemfnjj {
    #[prost(message, optional, tag = "1")]
    pub makghkojddl: ::core::option::Option<Iaminghlbdj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chbghlcielj {
    #[prost(message, optional, tag = "2")]
    pub anbiefamcan: ::core::option::Option<Iaminghlbdj>,
    #[prost(bool, tag = "15")]
    pub aabmlmegojc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekmeolcffda {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ciagaefnfni {
    #[prost(uint32, tag = "13")]
    pub event_unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hlglphapmcl {
    #[prost(bool, tag = "5")]
    pub is_win: bool,
    #[prost(uint32, tag = "14")]
    pub battle_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hgnccbhgkme {
    #[prost(uint32, tag = "1")]
    pub event_unique_id: u32,
}
/// GBFKPHNAGFE (5639)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueCommonPendingActionScNotify {
    #[prost(uint32, tag = "14")]
    pub nkpdmckfppp: u32,
    #[prost(message, optional, tag = "15")]
    pub boamjekjjle: ::core::option::Option<Defibaeneff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Defibaeneff {
    #[prost(uint32, tag = "5")]
    pub fhopjnkmnpb: u32,
    #[prost(message, optional, tag = "10")]
    pub jgmnmdafjke: ::core::option::Option<Fdemonegbii>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdemonegbii {
    #[prost(
        oneof = "fdemonegbii::InfoCase",
        tags = "693, 862, 447, 1765, 1092, 1083, 1330, 96, 735, 1390, 646, 762, 1270, 1372, 1264, 1376, 1682, 1971, 1129, 654, 416, 94, 371, 359, 1813, 1604"
    )]
    pub info_case: ::core::option::Option<fdemonegbii::InfoCase>,
}
/// Nested message and enum types in `FDEMONEGBII`.
pub mod fdemonegbii {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "693")]
        Nemhmhfoloa(super::RogueCommonBuffSelectInfo),
        #[prost(message, tag = "862")]
        Kdgcimnghab(super::Epchdijlfcc),
        #[prost(message, tag = "447")]
        Lgemaenmhnd(super::Plfjjdaemco),
        #[prost(message, tag = "1765")]
        Naphkfhdagp(super::Dhkjejggnoi),
        #[prost(message, tag = "1092")]
        Jjfmedlbogi(super::Okkakmhnplk),
        #[prost(message, tag = "1083")]
        Mehhnaiihpl(super::Ljlchoehgpe),
        #[prost(message, tag = "1330")]
        Ddbbbecjpcg(super::Mjeckldalol),
        #[prost(message, tag = "96")]
        Ponchmeecoa(super::Nabfafakjbh),
        #[prost(message, tag = "735")]
        Aibipofhgee(super::Bbkmopplbep),
        #[prost(message, tag = "1390")]
        Dgnnihbfmhj(super::Poodpjeipom),
        #[prost(message, tag = "646")]
        Hkpbaamjkfl(super::Amgllielkef),
        #[prost(message, tag = "762")]
        Dlpelppmgkc(super::Mgpdlcddbcb),
        #[prost(message, tag = "1270")]
        Gafafknadag(super::Ifefofljnml),
        #[prost(message, tag = "1372")]
        Abjgbmelghm(super::RogueFormulaSelectInfo),
        #[prost(message, tag = "1264")]
        Ngadllokkcm(super::Meaobgagcbp),
        #[prost(message, tag = "1376")]
        Blolfkeojep(super::Pnapdeooimo),
        #[prost(message, tag = "1682")]
        Bijhchjpipl(super::Hdafnkcllol),
        #[prost(message, tag = "1971")]
        Obndbhfeeoh(super::Pgoogpipedj),
        #[prost(message, tag = "1129")]
        Lfbdkadlooo(super::Nbnjnemfnjj),
        #[prost(message, tag = "654")]
        Chmlbdeocpn(super::Hdafnkcllol),
        #[prost(message, tag = "416")]
        Llhghnhajgd(super::Hdafnkcllol),
        #[prost(message, tag = "94")]
        Hjpbjhkfeeb(super::Hdafnkcllol),
        #[prost(message, tag = "371")]
        Hkaifndcloe(super::Blbalblmnhf),
        #[prost(message, tag = "359")]
        Aobjjgabphe(super::Blbalblmnhf),
        #[prost(message, tag = "1813")]
        Goikbmgmacb(super::Blbalblmnhf),
        #[prost(message, tag = "1604")]
        Djgfkgbbhgc(super::Ciagaefnfni),
    }
}
/// BHPNEJPDKLL (5660)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandleRogueCommonPendingActionCsReq {
    #[prost(uint32, tag = "13")]
    pub lodfdjgpemn: u32,
    #[prost(
        oneof = "handle_rogue_common_pending_action_cs_req::InfoCase",
        tags = "1158, 1990, 1546, 868, 1486, 144, 329, 1388, 220, 425, 1680, 69, 714, 1893, 1409, 1796, 1738, 1860, 1639, 1012, 1479, 1723, 1060, 1560, 214, 1066, 512, 112471, 99577"
    )]
    pub info_case: ::core::option::Option<
        handle_rogue_common_pending_action_cs_req::InfoCase,
    >,
}
/// Nested message and enum types in `HandleRogueCommonPendingActionCsReq`.
pub mod handle_rogue_common_pending_action_cs_req {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "1158")]
        Mebmdeggldb(super::Odgadhgegpd),
        #[prost(message, tag = "1990")]
        Aecoknofgpo(super::Eeppfeodlpn),
        #[prost(message, tag = "1546")]
        Iabmlahdafo(super::Ghjmkhcaple),
        #[prost(message, tag = "868")]
        Hcigfcppglb(super::Gbmlhmcdpbp),
        #[prost(message, tag = "1486")]
        Mjfbfeacpbf(super::Mlnlepkofdb),
        #[prost(message, tag = "144")]
        Fmoffmkngik(super::Iddedgoenkp),
        #[prost(message, tag = "329")]
        Bjpjgljfcle(super::Lomnoaljian),
        #[prost(message, tag = "1388")]
        Adnljefpdga(super::Kmpohdaldha),
        #[prost(message, tag = "220")]
        Nmfpjhlahel(super::Dfafndlfblf),
        #[prost(message, tag = "425")]
        Kjbfifomgdo(super::Angdgeihhpg),
        #[prost(message, tag = "1680")]
        Dpjcfbfcngf(super::Loblgohdmaf),
        #[prost(message, tag = "69")]
        Hibihiadoad(super::Iaohglnlnhm),
        #[prost(message, tag = "714")]
        Glgfadaibcf(super::Noeigmcegoi),
        #[prost(message, tag = "1893")]
        Hdngljedjam(super::Jcedklheeji),
        #[prost(message, tag = "1409")]
        Ejmlopfgjhm(super::Lkoebdlaaoo),
        #[prost(message, tag = "1796")]
        Mhigcbbgdpb(super::Jephnacildj),
        #[prost(message, tag = "1738")]
        Mbjehcbgkfi(super::Dclcnfbookh),
        #[prost(message, tag = "1860")]
        Gimccaneodd(super::Igkljmieaij),
        #[prost(message, tag = "1639")]
        Aeffimiheje(super::Dnniabnania),
        #[prost(message, tag = "1012")]
        Dnfgmfjando(super::Chbghlcielj),
        #[prost(message, tag = "1479")]
        Agfbkjfdedn(super::Igkljmieaij),
        #[prost(message, tag = "1723")]
        Oeabhoacgmp(super::Igkljmieaij),
        #[prost(message, tag = "1060")]
        Hdiodgbgmfi(super::Igkljmieaij),
        #[prost(message, tag = "1560")]
        Oihfpkgljpp(super::Ldbcelodhmc),
        #[prost(message, tag = "214")]
        Lihjgjnlalb(super::Ldbcelodhmc),
        #[prost(message, tag = "1066")]
        Aggeokjmhmn(super::Ldbcelodhmc),
        #[prost(message, tag = "512")]
        Jamfeigfcma(super::Aflbelcpomc),
        #[prost(message, tag = "112471")]
        Kmmnaoinbnp(super::Hlglphapmcl),
        #[prost(message, tag = "99577")]
        Mffnlcjjjid(super::Hgnccbhgkme),
    }
}
/// GODMDHLPBLL (5645)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleRogueCommonPendingActionScRsp {
    #[prost(uint32, tag = "1")]
    pub lodfdjgpemn: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub fhopjnkmnpb: u32,
    #[prost(
        oneof = "handle_rogue_common_pending_action_sc_rsp::InfoCase",
        tags = "330, 1165, 632, 607, 658, 555, 485, 85, 864, 888, 905, 2033, 369, 453, 471, 2036, 370, 729, 142, 863, 1796, 1383, 1974, 1678"
    )]
    pub info_case: ::core::option::Option<
        handle_rogue_common_pending_action_sc_rsp::InfoCase,
    >,
}
/// Nested message and enum types in `HandleRogueCommonPendingActionScRsp`.
pub mod handle_rogue_common_pending_action_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "330")]
        Jjdplecbajf(super::Phpibbbicjh),
        #[prost(message, tag = "1165")]
        Ohlglcipjpl(super::Goifeoibpeg),
        #[prost(message, tag = "632")]
        Aopeopnlimi(super::Eadhaphkogd),
        #[prost(message, tag = "607")]
        Ajhphdnjbkk(super::Nlgkljmckji),
        #[prost(message, tag = "658")]
        Ekbehdkfmce(super::Nehjeobghpc),
        #[prost(message, tag = "555")]
        Egckkhcnbbb(super::Meopdlngiei),
        #[prost(message, tag = "485")]
        Baacaloodpb(super::Nmldghkckgp),
        #[prost(message, tag = "85")]
        Gbglakcigfe(super::Meimjcgkooo),
        #[prost(message, tag = "864")]
        Becipbiaaec(super::Gfmiabfjfih),
        #[prost(message, tag = "888")]
        Ommlcopcfjb(super::Efeiekoiccj),
        #[prost(message, tag = "905")]
        Mjoonnbdkoa(super::Obnmhgomllm),
        #[prost(message, tag = "2033")]
        Edkgldkaepg(super::Chpbcnadmam),
        #[prost(message, tag = "369")]
        Ebmgibbidhd(super::Bgocbechheb),
        #[prost(message, tag = "453")]
        Ienpeagjikp(super::Ahehgepokog),
        #[prost(message, tag = "471")]
        Daoijbdfeed(super::Dmoddchonng),
        #[prost(message, tag = "2036")]
        Eondldklnmp(super::Jdmpbbdakej),
        #[prost(message, tag = "370")]
        Dcmfbcppmkm(super::Cjbbljmegid),
        #[prost(message, tag = "729")]
        Kgnbinbghkh(super::Lnmaimbkdmd),
        #[prost(message, tag = "142")]
        Fdoakcamhno(super::Kbgokefoefd),
        #[prost(message, tag = "863")]
        Okcgifdpleo(super::Ekmeolcffda),
        #[prost(message, tag = "1796")]
        Jebknpibfce(super::Pcmdgmjgifo),
        #[prost(message, tag = "1383")]
        Bgfnndhdble(super::Gknhncdpmln),
        #[prost(message, tag = "1974")]
        Fmcfhnfkefg(super::Fhoenkjopik),
        #[prost(message, tag = "1678")]
        Dlhgdkljood(super::Jlmdlkmkpem),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cejlmkndfpm {
    #[prost(uint32, tag = "8")]
    pub maze_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bflimegcdin {
    #[prost(bool, tag = "12")]
    pub ahffgclfffi: bool,
    #[prost(uint32, tag = "1")]
    pub aohjimphjif: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Locciajbhee {
    #[prost(bool, tag = "15")]
    pub ahffgclfffi: bool,
    #[prost(uint32, tag = "4")]
    pub ladoionempd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Joiemkpmmgn {
    #[prost(uint32, tag = "12")]
    pub aeon_id: u32,
    #[prost(uint32, tag = "14")]
    pub eecemipjjgh: u32,
    #[prost(uint32, tag = "13")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub opgbkmppjmp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub bocjbbdemfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbgnjnjeoil {
    #[prost(message, optional, tag = "11")]
    pub mobjjpmiaab: ::core::option::Option<Iaminghlbdj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Afcbffdaheb {
    #[prost(uint32, tag = "10")]
    pub meoonfgocdh: u32,
    #[prost(uint32, tag = "3")]
    pub magic_unit_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nppdodoioed {
    #[prost(message, repeated, tag = "3")]
    pub jpgocegdlol: ::prost::alloc::vec::Vec<Locciajbhee>,
    #[prost(message, repeated, tag = "7")]
    pub buff_list: ::prost::alloc::vec::Vec<Cejlmkndfpm>,
    #[prost(message, repeated, tag = "11")]
    pub aipoefndcbm: ::prost::alloc::vec::Vec<Joiemkpmmgn>,
    #[prost(message, repeated, tag = "9")]
    pub miracle_list: ::prost::alloc::vec::Vec<Bflimegcdin>,
}
/// IOEHIHAAGIF (5621)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueHandbookDataCsReq {}
/// GetRogueHandbookDataScRsp (5665)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueHandbookDataScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub handbook_info: ::core::option::Option<Nppdodoioed>,
}
/// EDCKDPDHFFJ (5608)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueHandbookDataUpdateScNotify {
    #[prost(message, repeated, tag = "8")]
    pub geehfpkamjo: ::prost::alloc::vec::Vec<Locciajbhee>,
    #[prost(message, repeated, tag = "6")]
    pub nbjbajgpfkk: ::prost::alloc::vec::Vec<Bflimegcdin>,
    #[prost(message, repeated, tag = "9")]
    pub boioigdhnnj: ::prost::alloc::vec::Vec<Jbgnjnjeoil>,
    #[prost(message, repeated, tag = "7")]
    pub jojbdjhnahk: ::prost::alloc::vec::Vec<Cejlmkndfpm>,
    #[prost(message, repeated, tag = "12")]
    pub lmmhcdenlmh: ::prost::alloc::vec::Vec<Afcbffdaheb>,
}
/// HMIFEMPGMDC (5618)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueMiracleHandbookRewardCsReq {
    #[prost(uint32, repeated, tag = "10")]
    pub cofoaclbnfl: ::prost::alloc::vec::Vec<u32>,
}
/// CHOEIJEPBBC (5637)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueMiracleHandbookRewardScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub bggonigegkm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
/// JNPMJEGDDNL (5611)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueEventHandbookRewardCsReq {
    #[prost(uint32, repeated, tag = "4")]
    pub accpehfpkab: ::prost::alloc::vec::Vec<u32>,
}
/// DOEJEEHNBCF (5679)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueEventHandbookRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "11")]
    pub gkmfiajmnlm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjjaiiidppd {
    #[prost(map = "uint32, uint32", tag = "2")]
    pub oibidbhlpem: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlijgiegjkp {
    #[prost(uint32, tag = "14")]
    pub game_aeon_id: u32,
    #[prost(message, optional, tag = "3")]
    pub oakngnkalpi: ::core::option::Option<Eboioikflfj>,
    #[prost(int32, tag = "7")]
    pub hhdabofomec: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmjndphgiof {
    #[prost(uint32, repeated, tag = "9")]
    pub hdagdlocpfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfejlajipng {
    #[prost(uint32, repeated, tag = "11")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "8")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idondchfkhg {
    #[prost(oneof = "idondchfkhg::Fdakmdplioj", tags = "6, 15, 10, 2, 9, 5, 4, 14")]
    pub fdakmdplioj: ::core::option::Option<idondchfkhg::Fdakmdplioj>,
}
/// Nested message and enum types in `IDONDCHFKHG`.
pub mod idondchfkhg {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Fdakmdplioj {
        #[prost(message, tag = "6")]
        RogueBuffInfo(super::Eaammpjfkib),
        #[prost(message, tag = "15")]
        GameMiracleInfo(super::Gfmelemcjna),
        #[prost(message, tag = "10")]
        Gjfhlpnajee(super::Mjjaiiidppd),
        #[prost(message, tag = "2")]
        Ijopankcekj(super::Dlijgiegjkp),
        #[prost(message, tag = "9")]
        Mmohllkalak(super::Nmjndphgiof),
        #[prost(message, tag = "5")]
        Lnphkafmefm(super::Omjcicfmbeh),
        #[prost(message, tag = "4")]
        Ngomjkioakc(super::Fanhhmlogpi),
        #[prost(message, tag = "14")]
        Eelbepmnpgi(super::Bfejlajipng),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmlfccifnop {
    #[prost(uint32, tag = "5")]
    pub nkpdmckfppp: u32,
    #[prost(message, repeated, tag = "3")]
    pub hcoapfagbei: ::prost::alloc::vec::Vec<Idondchfkhg>,
    #[prost(uint32, tag = "2")]
    pub pinognekcah: u32,
    #[prost(uint32, tag = "11")]
    pub rogue_magic_battle_const: u32,
    #[prost(uint32, tag = "12")]
    pub djffjgbnmmk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueUnlockProgress {
    #[prost(bool, tag = "10")]
    pub finish: bool,
    #[prost(uint32, tag = "6")]
    pub progress: u32,
    #[prost(uint32, tag = "14")]
    pub unlock_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Addhmoapica {
    #[prost(message, repeated, tag = "4")]
    pub pkjkkbechka: ::prost::alloc::vec::Vec<RogueUnlockProgress>,
    #[prost(enumeration = "Heaehfoiegk", tag = "15")]
    pub status: i32,
    #[prost(uint32, tag = "12")]
    pub talent_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfddofkhkdj {
    #[prost(message, repeated, tag = "6")]
    pub cjoalacjeic: ::prost::alloc::vec::Vec<Addhmoapica>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jibbdckpcbj {
    #[prost(uint32, tag = "8")]
    pub jdphkcgcdag: u32,
    #[prost(uint32, tag = "3")]
    pub gfhkpieflkm: u32,
}
/// LPBEEGBKNFH (5700)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueCommonVirtualItemInfoScNotify {
    #[prost(message, repeated, tag = "13")]
    pub pkkhfdajnec: ::prost::alloc::vec::Vec<Jibbdckpcbj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elafkbopnig {
    #[prost(uint32, tag = "8")]
    pub amjafadnahj: u32,
    #[prost(uint32, tag = "15")]
    pub cnlhkekemhf: u32,
    #[prost(uint32, tag = "7")]
    pub jpagdckadna: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfcipkjacmc {
    #[prost(enumeration = "Picjapdoeck", repeated, tag = "8")]
    pub pplkdhpnmog: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbieldahlaf {
    #[prost(message, optional, tag = "14")]
    pub fmmeoiaoend: ::core::option::Option<Elafkbopnig>,
    #[prost(message, optional, tag = "7")]
    pub pajlkkdofme: ::core::option::Option<Nfcipkjacmc>,
}
/// DBHIKLODHKG (5664)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CommonRogueQueryCsReq {}
/// FDENABFNDJF (5672)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonRogueQueryScRsp {
    #[prost(uint32, tag = "7")]
    pub fnkgaejjbbi: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub rogue_get_info: ::core::option::Option<Bbieldahlaf>,
}
/// OIKJJEAMNJO (5699)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonRogueUpdateScNotify {
    #[prost(oneof = "common_rogue_update_sc_notify::Clmblkdajhb", tags = "4, 14")]
    pub clmblkdajhb: ::core::option::Option<common_rogue_update_sc_notify::Clmblkdajhb>,
}
/// Nested message and enum types in `CommonRogueUpdateScNotify`.
pub mod common_rogue_update_sc_notify {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Clmblkdajhb {
        #[prost(message, tag = "4")]
        Fmmeoiaoend(super::Elafkbopnig),
        #[prost(message, tag = "14")]
        Pajlkkdofme(super::Nfcipkjacmc),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imamaolhjnc {
    #[prost(uint32, tag = "12")]
    pub talk_dialogue_id: u32,
    #[prost(uint32, tag = "2")]
    pub aeon_talk_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpfnnokpdpf {
    #[prost(uint32, tag = "6")]
    pub jnolagajcle: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jpiefmhgajl {
    #[prost(uint32, tag = "5")]
    pub jnolagajcle: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdlbeoaleil {
    #[prost(uint32, tag = "11")]
    pub formula_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hldinehnoml {
    #[prost(uint32, tag = "6")]
    pub jnolagajcle: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jljjjiccidg {
    #[prost(uint32, tag = "4")]
    pub lmjaeipjaom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nadhcnjhlda {
    #[prost(oneof = "nadhcnjhlda::Dcdbfmcebpi", tags = "5, 4, 15, 7, 13, 8")]
    pub dcdbfmcebpi: ::core::option::Option<nadhcnjhlda::Dcdbfmcebpi>,
}
/// Nested message and enum types in `NADHCNJHLDA`.
pub mod nadhcnjhlda {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Dcdbfmcebpi {
        #[prost(message, tag = "5")]
        Jkcjboklofk(super::Imamaolhjnc),
        #[prost(message, tag = "4")]
        Gdbkcodhefm(super::Hpfnnokpdpf),
        #[prost(message, tag = "15")]
        Jfeplakjgbd(super::Jpiefmhgajl),
        #[prost(message, tag = "7")]
        Gkojbnmdnhi(super::Fdlbeoaleil),
        #[prost(message, tag = "13")]
        Eaofcfhmkag(super::Hldinehnoml),
        #[prost(message, tag = "8")]
        Bdbafjlihja(super::Jljjjiccidg),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dgjgfblbfpe {
    #[prost(float, tag = "3")]
    pub obbacaejnmk: f32,
    #[prost(int32, tag = "10")]
    pub dhohjklfmmc: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcgkpckcjeh {
    #[prost(uint32, tag = "6")]
    pub battle_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gihfggmchka {
    #[prost(int32, tag = "2")]
    pub nmkmfbocbfl: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnpaomcbana {
    #[prost(oneof = "nnpaomcbana::Lmjlbpfljpf", tags = "7, 9")]
    pub lmjlbpfljpf: ::core::option::Option<nnpaomcbana::Lmjlbpfljpf>,
}
/// Nested message and enum types in `NNPAOMCBANA`.
pub mod nnpaomcbana {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Lmjlbpfljpf {
        #[prost(message, tag = "7")]
        Gldgcnmlodl(super::Fcgkpckcjeh),
        #[prost(message, tag = "9")]
        Jdbfocmjmjd(super::Gihfggmchka),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipbdjpajodo {
    #[prost(message, optional, tag = "10")]
    pub cgnkhekhiml: ::core::option::Option<Dgjgfblbfpe>,
    #[prost(uint32, tag = "3")]
    pub cjbdahmahkn: u32,
    #[prost(message, repeated, tag = "7")]
    pub bkpkcjjkmmj: ::prost::alloc::vec::Vec<Nnpaomcbana>,
    #[prost(bool, tag = "5")]
    pub dpkmepaahin: bool,
    #[prost(bool, tag = "14")]
    pub confirm: bool,
    #[prost(uint32, tag = "2")]
    pub arg_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dokfnaeeade {
    #[prost(message, optional, tag = "8")]
    pub onecnikgbgl: ::core::option::Option<Nadhcnjhlda>,
    #[prost(message, repeated, tag = "9")]
    pub mchonaccdme: ::prost::alloc::vec::Vec<Ipbdjpajodo>,
    #[prost(uint32, tag = "13")]
    pub event_unique_id: u32,
}
/// JOACELLIPLM (5603)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueCommonDialogueDataCsReq {}
/// HJMNCHNCMFJ (5640)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueCommonDialogueDataScRsp {
    #[prost(message, repeated, tag = "1")]
    pub ofkghjchehe: ::prost::alloc::vec::Vec<Dokfnaeeade>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// PBHAONCEFLH (5661)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectRogueCommonDialogueOptionCsReq {
    #[prost(uint32, tag = "10")]
    pub event_unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub cjbdahmahkn: u32,
}
/// HFOIPAAEIAF (5630)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectRogueCommonDialogueOptionScRsp {
    #[prost(uint32, tag = "15")]
    pub cjbdahmahkn: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub aplhhajibep: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "6")]
    pub hkpckplepol: ::core::option::Option<Dokfnaeeade>,
    #[prost(bool, tag = "5")]
    pub kjlfhopkppa: bool,
    #[prost(uint32, tag = "3")]
    pub event_unique_id: u32,
}
/// BOFFLADEMCL (5633)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishRogueCommonDialogueCsReq {
    #[prost(uint32, tag = "4")]
    pub event_unique_id: u32,
}
/// EBDLFEDDCAL (5697)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishRogueCommonDialogueScRsp {
    #[prost(uint32, tag = "13")]
    pub event_unique_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// MPCNKBDGLBE (5683)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueCommonDialogueDataScNotify {
    #[prost(message, repeated, tag = "9")]
    pub ofkghjchehe: ::prost::alloc::vec::Vec<Dokfnaeeade>,
}
/// HKGANFGLKGC (5668)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRogueCommonDialogueOptionFinishScNotify {
    #[prost(uint32, tag = "3")]
    pub cjbdahmahkn: u32,
    #[prost(message, optional, tag = "7")]
    pub dnjddnocbfk: ::core::option::Option<Ipbdjpajodo>,
    #[prost(uint32, tag = "14")]
    pub event_unique_id: u32,
    #[prost(message, optional, tag = "5")]
    pub hkpckplepol: ::core::option::Option<Dokfnaeeade>,
}
/// KNKAFCLFMHK (5657)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonRogueComponentUpdateScNotify {
    #[prost(uint32, tag = "8")]
    pub nkpdmckfppp: u32,
    #[prost(uint32, tag = "2")]
    pub pinognekcah: u32,
    #[prost(message, optional, tag = "10")]
    pub jmocnngmedg: ::core::option::Option<Idondchfkhg>,
    #[prost(uint32, tag = "5")]
    pub rogue_magic_battle_const: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hahbdlfobhb {
    #[prost(uint32, tag = "6")]
    pub djffjgbnmmk: u32,
    #[prost(message, optional, tag = "12")]
    pub lcfanolipij: ::core::option::Option<Defibaeneff>,
    #[prost(uint32, tag = "7")]
    pub pinognekcah: u32,
    #[prost(uint32, tag = "9")]
    pub rogue_magic_battle_const: u32,
    #[prost(uint32, tag = "10")]
    pub nkpdmckfppp: u32,
}
/// HFICLNKIPLF (5663)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueWorkbenchSelectFuncCsReq {
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub cbahfgpjemp: u32,
}
/// HBHAPMDNBGB (5689)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueWorkbenchSelectFuncScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub cbahfgpjemp: u32,
    #[prost(message, optional, tag = "1")]
    pub lipngbcpgon: ::core::option::Option<Iigdklanfdc>,
}
/// HNNIDKIKCAM (5616)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueWorkbenchGetInfoCsReq {
    #[prost(uint32, tag = "14")]
    pub prop_entity_id: u32,
}
/// AGGLMODAAFD (5647)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueWorkbenchGetInfoScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(map = "uint32, message", tag = "6")]
    pub gdgcpemfknf: ::std::collections::HashMap<u32, Iigdklanfdc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iigdklanfdc {
    #[prost(
        oneof = "iigdklanfdc::Jokdbfjanoo",
        tags = "5, 15, 2, 13, 12, 1, 14, 11, 7, 4"
    )]
    pub jokdbfjanoo: ::core::option::Option<iigdklanfdc::Jokdbfjanoo>,
}
/// Nested message and enum types in `IIGDKLANFDC`.
pub mod iigdklanfdc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Jokdbfjanoo {
        #[prost(message, tag = "5")]
        Klnibefplcl(super::Dhbmipdejmd),
        #[prost(message, tag = "15")]
        Ajpkmohnmhc(super::Kdopkhglnbp),
        #[prost(message, tag = "2")]
        Fejjpbccjfd(super::Geldjpfibfm),
        #[prost(message, tag = "13")]
        Gdnalenilei(super::Pcelnbjlfpn),
        #[prost(message, tag = "12")]
        Iopggonmnnl(super::Omekmjonkpn),
        #[prost(message, tag = "1")]
        Mobjjpmiaab(super::Gnlgjjfnhnd),
        #[prost(message, tag = "14")]
        Cfjmobmclbi(super::Emakajdafkp),
        #[prost(message, tag = "11")]
        Glcgkninaog(super::Fcmhghpocfa),
        #[prost(message, tag = "7")]
        Jeoejadogdf(super::Efindlmbmbf),
        #[prost(message, tag = "4")]
        Baghnhikfdc(super::Minklpmielf),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhbmipdejmd {
    #[prost(message, optional, tag = "10")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "7")]
    pub fadckclpeic: u32,
    #[prost(bool, tag = "9")]
    pub ebapddabejo: bool,
    #[prost(int32, tag = "1")]
    pub bmcinbknmfp: i32,
    #[prost(uint32, tag = "3")]
    pub gddbplgkimf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdopkhglnbp {
    #[prost(int32, tag = "12")]
    pub bmcinbknmfp: i32,
    #[prost(bool, tag = "3")]
    pub ebapddabejo: bool,
    #[prost(uint32, tag = "4")]
    pub gddbplgkimf: u32,
    #[prost(message, optional, tag = "2")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "7")]
    pub fadckclpeic: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geldjpfibfm {
    #[prost(uint32, tag = "9")]
    pub pkjcfcmooje: u32,
    #[prost(uint32, tag = "11")]
    pub aecpmhpnjln: u32,
    #[prost(map = "uint32, uint32", tag = "1")]
    pub dglleldikmi: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcelnbjlfpn {
    #[prost(map = "uint32, bool", tag = "14")]
    pub pncmnekmbig: ::std::collections::HashMap<u32, bool>,
    #[prost(uint32, tag = "10")]
    pub gddbplgkimf: u32,
    #[prost(message, optional, tag = "13")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(int32, tag = "3")]
    pub bmcinbknmfp: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omekmjonkpn {
    #[prost(int32, tag = "5")]
    pub bmcinbknmfp: i32,
    #[prost(uint32, tag = "10")]
    pub gddbplgkimf: u32,
    #[prost(message, optional, tag = "6")]
    pub cost_data: ::core::option::Option<ItemCostData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igbndahohed {
    #[prost(message, optional, tag = "11")]
    pub mobjjpmiaab: ::core::option::Option<Iaminghlbdj>,
    #[prost(message, optional, tag = "6")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "7")]
    pub mgkbnfokmkj: ::core::option::Option<ItemCostData>,
    #[prost(bool, tag = "14")]
    pub onaignfolfj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnlgjjfnhnd {
    #[prost(message, repeated, tag = "11")]
    pub ecapbmomfbh: ::prost::alloc::vec::Vec<Igbndahohed>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgbilgfggei {
    #[prost(bool, tag = "11")]
    pub onaignfolfj: bool,
    #[prost(message, optional, tag = "4")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(message, optional, tag = "3")]
    pub mgkbnfokmkj: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "5")]
    pub meoonfgocdh: u32,
    #[prost(uint32, tag = "6")]
    pub magic_unit_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emakajdafkp {
    #[prost(message, repeated, tag = "3")]
    pub rogue_magic_unit_info_list: ::prost::alloc::vec::Vec<Lgbilgfggei>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcmhghpocfa {
    #[prost(int32, tag = "11")]
    pub bmcinbknmfp: i32,
    #[prost(message, optional, tag = "15")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "13")]
    pub gddbplgkimf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efindlmbmbf {
    #[prost(uint32, tag = "4")]
    pub gddbplgkimf: u32,
    #[prost(map = "uint32, message", tag = "6")]
    pub jdigocehgko: ::std::collections::HashMap<u32, ItemCostData>,
    #[prost(message, optional, tag = "15")]
    pub kfhpbgllikp: ::core::option::Option<ItemCostData>,
    #[prost(int32, tag = "1")]
    pub bmcinbknmfp: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndhnemijpfo {
    #[prost(message, optional, tag = "8")]
    pub cost_data: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "11")]
    pub scepter_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Minklpmielf {
    #[prost(message, repeated, tag = "7")]
    pub lcllikpffop: ::prost::alloc::vec::Vec<Ndhnemijpfo>,
}
/// PFHNEFOOBMF (5649)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueWorkbenchHandleFuncCsReq {
    #[prost(uint32, tag = "12")]
    pub cbahfgpjemp: u32,
    #[prost(uint32, tag = "9")]
    pub prop_entity_id: u32,
    #[prost(message, optional, tag = "4")]
    pub djfildlmkcp: ::core::option::Option<Bccnmfhbaij>,
}
/// HIGAKKBBEBO (5670)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueWorkbenchHandleFuncScRsp {
    #[prost(message, optional, tag = "9")]
    pub lipngbcpgon: ::core::option::Option<Iigdklanfdc>,
    #[prost(uint32, tag = "1")]
    pub cbahfgpjemp: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bccnmfhbaij {
    #[prost(
        oneof = "bccnmfhbaij::ContentCase",
        tags = "11, 2, 7, 3, 9, 10, 13, 5, 12, 4"
    )]
    pub content_case: ::core::option::Option<bccnmfhbaij::ContentCase>,
}
/// Nested message and enum types in `BCCNMFHBAIJ`.
pub mod bccnmfhbaij {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ContentCase {
        #[prost(message, tag = "11")]
        Klnibefplcl(super::Cbpohnlhlbj),
        #[prost(message, tag = "2")]
        Ajpkmohnmhc(super::Cpmcaapfhah),
        #[prost(message, tag = "7")]
        Fejjpbccjfd(super::Hnbibecbilh),
        #[prost(message, tag = "3")]
        Gdnalenilei(super::Mhaanjcando),
        #[prost(message, tag = "9")]
        Iopggonmnnl(super::Mjmacmeegnp),
        #[prost(message, tag = "10")]
        Mobjjpmiaab(super::Jjpmmcjhglh),
        #[prost(message, tag = "13")]
        Cfjmobmclbi(super::Pkpcijjpiak),
        #[prost(message, tag = "5")]
        Glcgkninaog(super::Nknbnkgeemh),
        #[prost(message, tag = "12")]
        Jeoejadogdf(super::Ocjmfgfldee),
        #[prost(message, tag = "4")]
        Baghnhikfdc(super::Omhehlelgbn),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbpohnlhlbj {
    #[prost(uint32, tag = "13")]
    pub hjapjnhejgo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cpmcaapfhah {
    #[prost(uint32, tag = "6")]
    pub nnpdkhobfif: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hnbibecbilh {
    #[prost(uint32, tag = "14")]
    pub olofiillmbl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhaanjcando {
    #[prost(uint32, repeated, tag = "4")]
    pub llcjpicnpin: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjmacmeegnp {
    #[prost(uint32, tag = "10")]
    pub oahipbhjpdb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjpmmcjhglh {
    #[prost(uint32, tag = "13")]
    pub fmdfaookomg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkpcijjpiak {
    #[prost(uint32, repeated, tag = "15")]
    pub midiaggmjme: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nknbnkgeemh {
    #[prost(uint32, repeated, tag = "15")]
    pub ilcidoapppe: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocjmfgfldee {
    #[prost(uint32, tag = "10")]
    pub magic_unit_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omhehlelgbn {
    #[prost(uint32, tag = "4")]
    pub scepter_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcpmdckigid {
    #[prost(enumeration = "Pfjjmidebeh", tag = "14")]
    pub status: i32,
    #[prost(uint32, tag = "9")]
    pub gbbimdleikd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgodoidenid {
    #[prost(enumeration = "Mknffjfabcn", tag = "1")]
    pub status: i32,
    #[prost(uint32, tag = "7")]
    pub pmdpbgenkmi: u32,
    #[prost(uint32, tag = "12")]
    pub gbbimdleikd: u32,
}
/// MDLEIOGMLDH (5698)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueCollectionCsReq {}
/// KCMMIPLMDMK (5691)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueCollectionScRsp {
    #[prost(message, repeated, tag = "4")]
    pub jmdnlhmklgc: ::prost::alloc::vec::Vec<Fgodoidenid>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub hipocmcfgdm: ::prost::alloc::vec::Vec<Fcpmdckigid>,
}
/// CEPHEAGNPKN (5644)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRogueCollectionCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub kfdlgbpkkmd: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Nmjipipdbln", repeated, tag = "12")]
    pub heljblhehjk: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "5")]
    pub fhkdialfngj: ::prost::alloc::vec::Vec<u32>,
}
/// DKGHDDNJNBK (5623)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRogueCollectionScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub hipocmcfgdm: ::prost::alloc::vec::Vec<Fcpmdckigid>,
    #[prost(message, repeated, tag = "4")]
    pub jmdnlhmklgc: ::prost::alloc::vec::Vec<Fgodoidenid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgkkhedncab {
    #[prost(uint32, tag = "3")]
    pub edhcndmdlge: u32,
    #[prost(enumeration = "Cbcjbgjakgj", tag = "13")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmiephpmbmi {
    #[prost(uint32, tag = "8")]
    pub edhcndmdlge: u32,
    #[prost(enumeration = "Mknffjfabcn", tag = "14")]
    pub status: i32,
    #[prost(uint32, tag = "9")]
    pub pmdpbgenkmi: u32,
}
/// KODPPPDLEHJ (5669)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueExhibitionCsReq {}
/// HIAGIPKDMKG (5656)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueExhibitionScRsp {
    #[prost(message, repeated, tag = "8")]
    pub nicinondmaa: ::prost::alloc::vec::Vec<Lgkkhedncab>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub ofeempjfbki: ::prost::alloc::vec::Vec<Cmiephpmbmi>,
}
/// ANONGOAGBNL (5609)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRogueExhibitionCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub meinchpnien: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Nmjipipdbln", repeated, tag = "5")]
    pub fkiobmagjcc: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "8")]
    pub gfclfeafeag: ::prost::alloc::vec::Vec<u32>,
}
/// AHKDILAHKIA (5620)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRogueExhibitionScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub ofeempjfbki: ::prost::alloc::vec::Vec<Cmiephpmbmi>,
    #[prost(message, repeated, tag = "1")]
    pub nicinondmaa: ::prost::alloc::vec::Vec<Lgkkhedncab>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omjmjiemdfi {
    #[prost(uint32, tag = "12")]
    pub miracle_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llhkfmlnemp {
    #[prost(uint32, tag = "3")]
    pub mojggonnhmf: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akpdflpikbm {
    #[prost(uint32, tag = "8")]
    pub mojggonnhmf: u32,
    #[prost(bool, tag = "14")]
    pub fbnkbakighi: bool,
    #[prost(oneof = "akpdflpikbm::Phbndgiobmh", tags = "10, 1")]
    pub phbndgiobmh: ::core::option::Option<akpdflpikbm::Phbndgiobmh>,
}
/// Nested message and enum types in `AKPDFLPIKBM`.
pub mod akpdflpikbm {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Phbndgiobmh {
        #[prost(message, tag = "10")]
        Addglpfjhhd(super::Omjmjiemdfi),
        #[prost(message, tag = "1")]
        Bnglhbmigja(super::Llhkfmlnemp),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkfidpgfejk {
    #[prost(message, repeated, tag = "6")]
    pub docpbfdcehp: ::prost::alloc::vec::Vec<Akpdflpikbm>,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
    #[prost(bool, tag = "9")]
    pub lmkogfbbofb: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blkfpmibjko {
    #[prost(uint32, tag = "8")]
    pub hegmgooneab: u32,
    #[prost(uint32, tag = "11")]
    pub cur_times: u32,
    #[prost(uint32, tag = "14")]
    pub cpgafnjbgfi: u32,
    #[prost(message, repeated, tag = "1")]
    pub maze_group_list: ::prost::alloc::vec::Vec<Pkfidpgfejk>,
    #[prost(bool, tag = "7")]
    pub akdkkdnbkkb: bool,
    #[prost(uint32, tag = "9")]
    pub gncjkhcajff: u32,
    #[prost(message, optional, tag = "12")]
    pub bihleiecnbe: ::core::option::Option<ItemCostData>,
}
/// HFOCDPEFGEA (5638)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueGetGambleInfoCsReq {
    #[prost(uint32, tag = "14")]
    pub prop_entity_id: u32,
}
/// LONOLPHBNLA (5687)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueGetGambleInfoScRsp {
    #[prost(message, optional, tag = "1")]
    pub nofjpppaike: ::core::option::Option<Blkfpmibjko>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// NIOEHAPDHKM (5686)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueDoGambleCsReq {
    #[prost(uint32, tag = "10")]
    pub prop_entity_id: u32,
}
/// JGJDGLIDOCD (5666)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueDoGambleScRsp {
    #[prost(uint32, tag = "5")]
    pub npflhnjaman: u32,
    #[prost(uint32, tag = "6")]
    pub ndbaakaojpm: u32,
    #[prost(message, optional, tag = "2")]
    pub nofjpppaike: ::core::option::Option<Blkfpmibjko>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// KAIOMKPFEGO (5615)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueDebugMessageScNotify {
    #[prost(string, tag = "5")]
    pub kalfnpjbfil: ::prost::alloc::string::String,
    #[prost(enumeration = "Amjckjdmhmg", tag = "13")]
    pub r#type: i32,
    #[prost(string, tag = "8")]
    pub mmplmiafkfc: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knbcdnmnpcl {
    #[prost(uint32, tag = "4")]
    pub map_id: u32,
    #[prost(message, optional, tag = "15")]
    pub hlkakjhdfpc: ::core::option::Option<Bkllpgceecm>,
    #[prost(uint32, repeated, tag = "3")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub pndjkipdpil: u32,
    #[prost(enumeration = "Kdgnmflkfll", tag = "8")]
    pub status: i32,
    #[prost(uint32, tag = "7")]
    pub okhhadkimpm: u32,
    #[prost(message, optional, tag = "12")]
    pub hnebbkenpnp: ::core::option::Option<ChessRogueBuff>,
    #[prost(uint32, tag = "2")]
    pub hcggmkcmpjm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmjlhjhcmen {
    #[prost(uint32, tag = "5")]
    pub gnamjnppnfd: u32,
    #[prost(uint32, tag = "3")]
    pub knnngleajfi: u32,
    #[prost(uint32, tag = "10")]
    pub hieilpmnehj: u32,
    #[prost(uint32, tag = "14")]
    pub hkklkelgnfh: u32,
    #[prost(uint32, tag = "6")]
    pub battle_id: u32,
    #[prost(uint32, tag = "7")]
    pub hghnihofkoe: u32,
    #[prost(bool, tag = "13")]
    pub jebfgnmgfnb: bool,
    #[prost(uint32, tag = "1")]
    pub celonkbfkbj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abkfidakcem {
    #[prost(message, optional, tag = "3")]
    pub gnddelgfbkd: ::core::option::Option<Knbcdnmnpcl>,
    #[prost(message, optional, tag = "4")]
    pub cinngpdeiek: ::core::option::Option<Dmjlhjhcmen>,
    #[prost(uint32, tag = "7")]
    pub panel_id: u32,
    #[prost(uint32, tag = "9")]
    pub kjkpmffamfk: u32,
}
/// LPJNHFOMMJG (6009)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRogueEndlessActivityDataCsReq {}
/// OGDKEEFEOBK (6010)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueEndlessActivityDataScRsp {
    #[prost(uint32, tag = "5")]
    pub clphjikeohp: u32,
    #[prost(uint32, tag = "13")]
    pub echiomnmfek: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub emghlpgepme: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<Abkfidakcem>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbmabcoabmb {
    #[prost(enumeration = "AvatarType", tag = "9")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
}
/// FDLIBFDANEJ (6003)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterRogueEndlessActivityStageCsReq {
    #[prost(message, repeated, tag = "11")]
    pub avatar_list: ::prost::alloc::vec::Vec<Lbmabcoabmb>,
    #[prost(uint32, tag = "7")]
    pub cfkhpfmmicb: u32,
}
/// PCFKEPKJJML (6008)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterRogueEndlessActivityStageScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub cinngpdeiek: ::core::option::Option<Dmjlhjhcmen>,
    #[prost(message, optional, tag = "13")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// OLADBIHNFMP (6001)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueEndlessActivityBattleEndScNotify {
    #[prost(message, optional, tag = "13")]
    pub cinngpdeiek: ::core::option::Option<Dmjlhjhcmen>,
}
/// JOPOJIBEONJ (6005)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeRogueEndlessActivityPointRewardCsReq {
    #[prost(bool, tag = "8")]
    pub hgoijnknioa: bool,
    #[prost(uint32, tag = "15")]
    pub level: u32,
}
/// JPPPICEMBHP (6004)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueEndlessActivityPointRewardScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub echiomnmfek: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(bool, tag = "9")]
    pub hgoijnknioa: bool,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "12")]
    pub emghlpgepme: ::prost::alloc::vec::Vec<u32>,
}
/// EGADANEDHFL (6002)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeRogueEndlessActivityAllBonusRewardCsReq {}
/// APKNCFMLEED (6007)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRogueEndlessActivityAllBonusRewardScRsp {
    #[prost(uint32, tag = "8")]
    pub echiomnmfek: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "14")]
    pub emghlpgepme: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klgidkpmibh {
    #[prost(message, optional, tag = "13")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "6")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okmmknbmnmb {
    #[prost(message, repeated, tag = "14")]
    pub amgmpnoidlm: ::prost::alloc::vec::Vec<Cgjolhidcde>,
    #[prost(uint32, tag = "9")]
    pub dhinbnjjopf: u32,
    #[prost(uint32, tag = "4")]
    pub kchegpecmhm: u32,
    #[prost(uint32, tag = "15")]
    pub ihlgmnhbdhj: u32,
    #[prost(enumeration = "Abmepgcaplf", tag = "6")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cgjolhidcde {
    #[prost(uint32, tag = "14")]
    pub room_id: u32,
    #[prost(uint32, tag = "8")]
    pub kmnomgmofil: u32,
    #[prost(enumeration = "Ekcmogegakp", tag = "13")]
    pub status: i32,
    #[prost(uint32, tag = "6")]
    pub jhgncibopbe: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdmokjbdcdd {
    #[prost(message, repeated, tag = "8")]
    pub kechadngneg: ::prost::alloc::vec::Vec<Okmmknbmnmb>,
    #[prost(uint32, tag = "4")]
    pub jpndkfdgnkk: u32,
    #[prost(enumeration = "Oemkhnbecfc", tag = "5")]
    pub status: i32,
    #[prost(enumeration = "Opieiimenkf", tag = "10")]
    pub reason: i32,
    #[prost(uint32, tag = "9")]
    pub nnoggmbookf: u32,
    #[prost(uint32, tag = "7")]
    pub iijcgpgamlm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boekjlolaje {
    #[prost(message, repeated, tag = "8")]
    pub rogue_magic_unit_info_list: ::prost::alloc::vec::Vec<Ookfhbflpeb>,
    #[prost(uint32, tag = "7")]
    pub mmnmmniadep: u32,
    #[prost(message, repeated, tag = "1")]
    pub lcllikpffop: ::prost::alloc::vec::Vec<Dbkplonpchj>,
    #[prost(bool, tag = "5")]
    pub akcemflnkol: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgegfdmbkcb {
    #[prost(uint32, repeated, tag = "5")]
    pub hdagdlocpfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpoojglkgfk {
    #[prost(uint32, tag = "15")]
    pub pnbapafolbl: u32,
}
/// JPFECAOAKIF (7736)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicStartCsReq {
    #[prost(uint32, tag = "10")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub cngepabgdlm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub hbeedmleipi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agaoolgmdoo {
    #[prost(message, optional, tag = "3")]
    pub level: ::core::option::Option<Bdmokjbdcdd>,
    #[prost(message, optional, tag = "7")]
    pub eaofcfhmkag: ::core::option::Option<Kpoojglkgfk>,
    #[prost(message, optional, tag = "8")]
    pub fffdoigndfn: ::core::option::Option<Mgegfdmbkcb>,
    #[prost(message, optional, tag = "15")]
    pub bpgeldjgkgj: ::core::option::Option<Gfmelemcjna>,
    #[prost(message, optional, tag = "2")]
    pub basic_info: ::core::option::Option<Hahbdlfobhb>,
    #[prost(message, optional, tag = "11")]
    pub item_value: ::core::option::Option<Mjjaiiidppd>,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<Bfejlajipng>,
    #[prost(message, optional, tag = "12")]
    pub mobjjpmiaab: ::core::option::Option<Boekjlolaje>,
}
/// KGFMLLJBMOF (7795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicStartScRsp {
    #[prost(message, optional, tag = "3")]
    pub kcfmiidppbh: ::core::option::Option<Agaoolgmdoo>,
    #[prost(message, optional, tag = "12")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// BOMAKNHEDCN (7784)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicEnterCsReq {}
/// IGGLIOENFAM (7727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicEnterScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub kcfmiidppbh: ::core::option::Option<Agaoolgmdoo>,
    #[prost(message, optional, tag = "11")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
}
/// HLFFJKMMPKL (7767)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicLeaveCsReq {}
/// DBEECLPPJHP (7728)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicLeaveScRsp {
    #[prost(message, optional, tag = "13")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// BFONHMKPGJF (7724)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicEnterRoomCsReq {
    #[prost(uint32, tag = "6")]
    pub dhinbnjjopf: u32,
    #[prost(uint32, tag = "10")]
    pub lncdgojpaio: u32,
}
/// LLHJCDHBOFP (7793)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicEnterRoomScRsp {
    #[prost(message, optional, tag = "8")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// MPMACJBMBKN (7734)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicEnterLayerCsReq {
    #[prost(uint32, tag = "3")]
    pub lncdgojpaio: u32,
    #[prost(uint32, tag = "10")]
    pub nnoggmbookf: u32,
}
/// BEPIBLKOFAE (7743)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicEnterLayerScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
}
/// PJGFJKKOIML (7746)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicLevelInfoUpdateScNotify {
    #[prost(uint32, tag = "11")]
    pub jpndkfdgnkk: u32,
    #[prost(uint32, tag = "4")]
    pub nnoggmbookf: u32,
    #[prost(message, repeated, tag = "8")]
    pub kechadngneg: ::prost::alloc::vec::Vec<Okmmknbmnmb>,
    #[prost(enumeration = "Opieiimenkf", tag = "6")]
    pub reason: i32,
    #[prost(uint32, tag = "9")]
    pub iijcgpgamlm: u32,
    #[prost(enumeration = "Oemkhnbecfc", tag = "13")]
    pub status: i32,
}
/// IONCKPEBNBK (7725)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicAreaUpdateScNotify {
    #[prost(message, repeated, tag = "1")]
    pub cgnfacmppco: ::prost::alloc::vec::Vec<Elgamgedgom>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gildnbdkold {
    #[prost(uint32, tag = "11")]
    pub hfcmkooojai: u32,
    #[prost(bool, tag = "5")]
    pub ldnbeppjjkn: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Laeeplbldcc {
    #[prost(bool, tag = "11")]
    pub ldnbeppjjkn: bool,
    #[prost(uint32, tag = "15")]
    pub gpafpkbggcp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enemohjkmmi {
    #[prost(message, optional, tag = "5")]
    pub enfbjbhpggn: ::core::option::Option<Gildnbdkold>,
    #[prost(message, optional, tag = "2")]
    pub eelbepmnpgi: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "15")]
    pub kcfmiidppbh: ::core::option::Option<Agaoolgmdoo>,
    #[prost(message, optional, tag = "7")]
    pub efcdmhhcedh: ::core::option::Option<Laeeplbldcc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipegjcohhcm {
    #[prost(message, repeated, tag = "8")]
    pub hanofjmkpod: ::prost::alloc::vec::Vec<Iaminghlbdj>,
    #[prost(uint32, repeated, tag = "3")]
    pub hgjckemffhi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub lmjgindblao: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub comhalbdnng: ::prost::alloc::vec::Vec<Aakgcjpojdf>,
}
/// JEDCIAEDMAM (7719)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicBattleFailSettleInfoScNotify {
    #[prost(message, optional, tag = "3")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
    #[prost(message, optional, tag = "2")]
    pub inppfdjhejn: ::core::option::Option<Enemohjkmmi>,
}
/// ICGKKLHFOFC (7752)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicSettleCsReq {}
/// EGKDBNMIDEM (7774)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicSettleScRsp {
    #[prost(message, optional, tag = "14")]
    pub nnofjbbofnk: ::core::option::Option<Ipegjcohhcm>,
    #[prost(message, optional, tag = "8")]
    pub inppfdjhejn: ::core::option::Option<Enemohjkmmi>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub oofimndjpci: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "15")]
    pub kjbiggihkdp: ::core::option::Option<Klgidkpmibh>,
}
/// LEDKJGDBHGB (7726)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicReviveCostUpdateScNotify {
    #[prost(message, optional, tag = "15")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
}
/// OEIGEKNNFGF (7707)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicReviveAvatarCsReq {
    #[prost(uint32, tag = "7")]
    pub interacted_prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// HJLGLGNFAJM (7753)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicReviveAvatarScRsp {
    #[prost(message, optional, tag = "7")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// NJHAJEPNMMO (7790)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicQueryCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmmkdbfdojf {
    #[prost(message, repeated, tag = "1597")]
    pub rogue_magic_unit_info_list: ::prost::alloc::vec::Vec<Ookfhbflpeb>,
    #[prost(uint32, tag = "13")]
    pub epgnjpaolnj: u32,
    #[prost(uint32, tag = "12")]
    pub mmfhmkfgeph: u32,
    #[prost(uint32, tag = "5")]
    pub mmnmmniadep: u32,
    #[prost(uint32, tag = "7")]
    pub hkmlomohflf: u32,
    #[prost(uint32, tag = "14")]
    pub iijcgpgamlm: u32,
    #[prost(uint32, repeated, tag = "1790")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "620")]
    pub lcllikpffop: ::prost::alloc::vec::Vec<Dbkplonpchj>,
    #[prost(uint32, repeated, tag = "872")]
    pub pamapagbbjf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub opfgedljcbl: u32,
    #[prost(uint32, tag = "11")]
    pub olgfanejklm: u32,
    #[prost(uint32, tag = "3")]
    pub jgdhlnacneb: u32,
    #[prost(uint32, tag = "8")]
    pub cefbmphligi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncdfmcgoklh {
    #[prost(uint32, repeated, tag = "958")]
    pub lgnckfncafp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elgamgedgom {
    #[prost(bool, tag = "8")]
    pub kphgmoidfnd: bool,
    #[prost(uint32, repeated, tag = "13")]
    pub aonpfedmdbf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub nmbommjjmmb: ::core::option::Option<Lmmkdbfdojf>,
    #[prost(uint32, tag = "4")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "12")]
    pub lejnoloboge: u32,
    #[prost(message, optional, tag = "3")]
    pub dgkajmocfia: ::core::option::Option<Ncdfmcgoklh>,
    #[prost(bool, tag = "14")]
    pub is_taken_reward: bool,
    #[prost(bool, tag = "6")]
    pub hdmfplocpmk: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Abdhkcofeec {
    #[prost(bool, tag = "7")]
    pub kphgmoidfnd: bool,
    #[prost(uint32, tag = "5")]
    pub pmaachomgmc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgdolnghmig {
    #[prost(uint32, repeated, tag = "2")]
    pub fnbeacfifai: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njiccnhcmdk {
    #[prost(uint32, repeated, tag = "14")]
    pub nkgnmapebbe: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub foobjefjagg: ::core::option::Option<Eapppcljbcj>,
    #[prost(message, repeated, tag = "11")]
    pub rogue_magic_unit_info_list: ::prost::alloc::vec::Vec<Afcbffdaheb>,
    #[prost(message, repeated, tag = "5")]
    pub ecapbmomfbh: ::prost::alloc::vec::Vec<Jbgnjnjeoil>,
    #[prost(message, repeated, tag = "9")]
    pub afbbgjiajne: ::prost::alloc::vec::Vec<Abdhkcofeec>,
    #[prost(message, repeated, tag = "8")]
    pub cgnfacmppco: ::prost::alloc::vec::Vec<Elgamgedgom>,
    #[prost(message, optional, tag = "3")]
    pub story_info: ::core::option::Option<Hgdolnghmig>,
}
/// LFPPEBGCDAA (7759)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicQueryScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub rogue_get_info: ::core::option::Option<Njiccnhcmdk>,
    #[prost(message, optional, tag = "7")]
    pub kcfmiidppbh: ::core::option::Option<Agaoolgmdoo>,
}
/// OLCLNPGDOOP (7778)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicScepterDressInUnitCsReq {
    #[prost(uint32, tag = "3")]
    pub dice_slot_id: u32,
    #[prost(uint32, tag = "9")]
    pub iofeedemhko: u32,
    #[prost(uint32, tag = "14")]
    pub scepter_id: u32,
}
/// NAAHKJECHDO (7729)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicScepterDressInUnitScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// OMHLJBHIMJD (7737)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicAutoDressInUnitCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub phfhfnldopn: ::prost::alloc::vec::Vec<u32>,
}
/// CEKPEEBCIAA (7711)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicAutoDressInUnitScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// PPPBMINFABK (7721)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicSetAutoDressInMagicUnitCsReq {
    #[prost(bool, tag = "14")]
    pub dbadjbfdaan: bool,
}
/// OIGFMNOPMAM (7765)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicSetAutoDressInMagicUnitScRsp {
    #[prost(bool, tag = "7")]
    pub dbadjbfdaan: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// COAGCNBPEJO (7781)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicAutoDressInMagicUnitChangeScNotify {
    #[prost(bool, tag = "5")]
    pub dbadjbfdaan: bool,
}
/// PEGECFHEODH (7750)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicScepterTakeOffUnitCsReq {
    #[prost(uint32, repeated, tag = "10")]
    pub phfhfnldopn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub scepter_id: u32,
}
/// HNICMIEDHNC (7748)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicScepterTakeOffUnitScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// IFOHCCABNDP (7788)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicUnitComposeCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub phfhfnldopn: ::prost::alloc::vec::Vec<u32>,
}
/// ICPGCOGPGKA (7758)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicUnitComposeScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// HCKDFNIFPMG (7710)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicUnitReforgeCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub phfhfnldopn: ::prost::alloc::vec::Vec<u32>,
}
/// OPMILLMEJDB (7776)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicUnitReforgeScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eapppcljbcj {
    #[prost(message, optional, tag = "5")]
    pub lgofoilnonl: ::core::option::Option<Kfddofkhkdj>,
    #[prost(uint32, tag = "9")]
    pub ocblnggllkc: u32,
}
/// DKJFMENGOMM (7735)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicGetTalentInfoCsReq {}
/// JKILPDEMCCL (7773)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicGetTalentInfoScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub foobjefjagg: ::core::option::Option<Eapppcljbcj>,
}
/// EOLOHIPEMPF (7717)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicEnableTalentCsReq {
    #[prost(uint32, tag = "7")]
    pub talent_id: u32,
}
/// JKGMGMKOAJF (7713)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueMagicEnableTalentScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub foobjefjagg: ::core::option::Option<Eapppcljbcj>,
}
/// BHPFHCGCAEP (7708)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicGetMiscRealTimeDataCsReq {}
/// NFPIDGOACLF (7718)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicGetMiscRealTimeDataScRsp {
    #[prost(message, optional, tag = "7")]
    pub efcdmhhcedh: ::core::option::Option<Laeeplbldcc>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub enfbjbhpggn: ::core::option::Option<Gildnbdkold>,
}
/// NGAEMIDMMIM (7779)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicStoryInfoUpdateScNotify {
    #[prost(uint32, tag = "12")]
    pub fjdionepiph: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhanhohhgfp {
    #[prost(uint32, tag = "8")]
    pub select_cell_id: u32,
    #[prost(bool, tag = "15")]
    pub confirm: bool,
    #[prost(uint32, tag = "12")]
    pub bhbhlinijpd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Negcjgmaleo {
    #[prost(bool, tag = "15")]
    pub confirm: bool,
    #[prost(uint32, tag = "8")]
    pub bhbhlinijpd: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub dcphojemlnh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub select_cell_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgeibnhbpdn {
    #[prost(uint32, tag = "4")]
    pub select_cell_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub dcphojemlnh: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "5")]
    pub confirm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ampmpfcehke {
    #[prost(uint32, tag = "1")]
    pub select_cell_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub onnpombhihb: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub confirm: bool,
    #[prost(uint32, tag = "4")]
    pub akeeeahdeec: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hfppclmmeeo {
    #[prost(uint32, tag = "2")]
    pub ihjjaiajenh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idlhpgloimp {
    #[prost(uint32, tag = "7")]
    pub aifolcmhmbf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlidnihjbao {
    #[prost(uint32, tag = "7")]
    pub elloocpelmi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkhmhpefdhg {
    #[prost(uint32, tag = "5")]
    pub select_cell_id: u32,
    #[prost(uint32, tag = "8")]
    pub aelgpbejjni: u32,
    #[prost(bool, tag = "7")]
    pub confirm: bool,
    #[prost(uint32, repeated, tag = "13")]
    pub onnpombhihb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdfkjddindm {
    #[prost(uint32, tag = "4")]
    pub eeephgfdnon: u32,
    #[prost(uint32, tag = "3")]
    pub epofmdpoknl: u32,
    #[prost(uint32, tag = "8")]
    pub kapdacmmjfk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeihfccpeac {
    #[prost(uint32, tag = "5")]
    pub maze_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mcpnkjmfdmm {
    #[prost(uint32, tag = "2")]
    pub item_count: u32,
    #[prost(uint32, tag = "4")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klmfmnohblk {
    #[prost(uint32, tag = "9")]
    pub fgjfkkfhhkp: u32,
    #[prost(uint32, tag = "8")]
    pub nefmhnpeoag: u32,
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgondmccmok {
    #[prost(uint32, tag = "12")]
    pub apckciaaiee: u32,
    #[prost(uint32, tag = "1")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcfmjmcpfhh {
    #[prost(uint32, tag = "3")]
    pub ihjjaiajenh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lallpadhfpd {
    #[prost(uint32, tag = "12")]
    pub bhbhlinijpd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fafpifhgggi {
    #[prost(uint32, repeated, tag = "1")]
    pub dcphojemlnh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub select_cell_id: u32,
    #[prost(bool, tag = "15")]
    pub confirm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmghlnngpkg {
    #[prost(uint32, tag = "8")]
    pub maze_buff_id: u32,
    #[prost(uint32, tag = "12")]
    pub ehhjbcinmmh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inldkpmbpgj {
    #[prost(uint32, tag = "5")]
    pub nppmlhhdbhe: u32,
    #[prost(uint32, tag = "10")]
    pub opgbmpjajcl: u32,
    #[prost(enumeration = "Oolllbpbiel", tag = "8")]
    pub kiiikodiidp: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueModifierInfo {
    #[prost(uint32, tag = "15")]
    pub select_cell_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub modifier_effect_cell_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub confirm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbdmkmabknc {
    #[prost(uint32, tag = "5")]
    pub ikbbgdmikio: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cpndflgmioa {
    #[prost(uint32, tag = "12")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueModifier {
    #[prost(enumeration = "Pjdemlinngf", tag = "5")]
    pub leeacmngdfl: i32,
    #[prost(uint64, tag = "12")]
    pub modifier_id: u64,
    #[prost(message, optional, tag = "2")]
    pub bgfhgkmpfnh: ::core::option::Option<Inldkpmbpgj>,
    #[prost(oneof = "rogue_modifier::InfoCase", tags = "1088")]
    pub info_case: ::core::option::Option<rogue_modifier::InfoCase>,
}
/// Nested message and enum types in `RogueModifier`.
pub mod rogue_modifier {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "1088")]
        ModifierInfo(super::ChessRogueModifierInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eboioikflfj {
    #[prost(message, repeated, tag = "7")]
    pub pigapikfndb: ::prost::alloc::vec::Vec<RogueModifier>,
}
/// HCAIPIONNBJ (5384)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueModifierAddNotify {
    #[prost(message, optional, tag = "2")]
    pub onopglnhekk: ::core::option::Option<RogueModifier>,
}
/// DBLLBIHOJIO (5327)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueModifierSelectCellCsReq {
    #[prost(uint32, tag = "9")]
    pub cell_id: u32,
}
/// FLEOIFOPHMM (5367)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueModifierSelectCellScRsp {
    #[prost(uint32, tag = "6")]
    pub cell_id: u32,
    #[prost(message, optional, tag = "5")]
    pub ihkkjkhfihh: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// NAAFECDJEFN (5374)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueModifierUpdateNotify {
    #[prost(message, optional, tag = "7")]
    pub onopglnhekk: ::core::option::Option<RogueModifier>,
}
/// FGMBLHAHEFF (5324)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueModifierDelNotify {
    #[prost(uint64, tag = "12")]
    pub modifier_id: u64,
}
/// IMDNPLJKLPH (5393)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueModifierStageStartNotify {
    #[prost(enumeration = "Pjdemlinngf", tag = "4")]
    pub leeacmngdfl: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khejpihjfaf {
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "8")]
    pub kdjlefeaiep: ::core::option::Option<Chaenboeboc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfaeimegihg {
    #[prost(message, optional, tag = "4")]
    pub jfjbefeilcf: ::core::option::Option<Hahbdlfobhb>,
    #[prost(oneof = "nfaeimegihg::InfoCase", tags = "610")]
    pub info_case: ::core::option::Option<nfaeimegihg::InfoCase>,
}
/// Nested message and enum types in `NFAEIMEGIHG`.
pub mod nfaeimegihg {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "610")]
        Mhpghphjohk(super::Aaieelnibhl),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eagfkgaicca {
    #[prost(uint32, tag = "7")]
    pub dppilolifom: u32,
    #[prost(uint32, tag = "5")]
    pub elielgdddho: u32,
    #[prost(bool, tag = "8")]
    pub ldnbeppjjkn: bool,
    #[prost(uint32, tag = "14")]
    pub mhgljflceen: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flpfhgimend {
    #[prost(uint32, tag = "5")]
    pub hdobidnngjk: u32,
    #[prost(uint32, tag = "6")]
    pub caegcdagmok: u32,
    #[prost(uint32, tag = "10")]
    pub gnfooeopimb: u32,
    #[prost(bool, tag = "8")]
    pub ldnbeppjjkn: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Angbdplnidk {
    #[prost(uint32, tag = "8")]
    pub eepighijpfp: u32,
    #[prost(bool, tag = "4")]
    pub ldnbeppjjkn: bool,
    #[prost(uint32, tag = "12")]
    pub jimjoedaclm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fobcimdnkpi {
    #[prost(bool, tag = "12")]
    pub hgmcfbhdadl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaieelnibhl {
    #[prost(message, optional, tag = "1")]
    pub level: ::core::option::Option<Ihkckoaomma>,
    #[prost(message, optional, tag = "4")]
    pub okbkbpjpdob: ::core::option::Option<Pdhgdlpclgk>,
    #[prost(message, optional, tag = "8")]
    pub epafpejnmfb: ::core::option::Option<Fobcimdnkpi>,
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<Bfejlajipng>,
    #[prost(message, optional, tag = "15")]
    pub jlbkiechnbh: ::core::option::Option<Eaammpjfkib>,
    #[prost(message, optional, tag = "9")]
    pub gnkgconlodg: ::core::option::Option<Fanhhmlogpi>,
    #[prost(message, optional, tag = "14")]
    pub bpgeldjgkgj: ::core::option::Option<Gfmelemcjna>,
    #[prost(message, optional, tag = "10")]
    pub eeklhghiogb: ::core::option::Option<Omjcicfmbeh>,
    #[prost(message, optional, tag = "3")]
    pub fffdoigndfn: ::core::option::Option<Odhfhooedpj>,
    #[prost(message, optional, tag = "7")]
    pub item_value: ::core::option::Option<Mjjaiiidppd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihkckoaomma {
    #[prost(uint32, tag = "15")]
    pub nnoggmbookf: u32,
    #[prost(enumeration = "Lkoilbgbkem", tag = "5")]
    pub reason: i32,
    #[prost(bool, tag = "14")]
    pub mfdjnofjndc: bool,
    #[prost(message, repeated, tag = "10")]
    pub kechadngneg: ::prost::alloc::vec::Vec<Nciogbelnbb>,
    #[prost(enumeration = "Kkadggcjbhn", tag = "12")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdhgdlpclgk {
    #[prost(uint32, tag = "11")]
    pub glljjmlepgh: u32,
    #[prost(uint32, tag = "14")]
    pub bkapfkdkcec: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odhfhooedpj {
    #[prost(uint32, repeated, tag = "5")]
    pub hdagdlocpfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nciogbelnbb {
    #[prost(enumeration = "Ecjmdmnmjmf", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "12")]
    pub dhinbnjjopf: u32,
    #[prost(message, repeated, tag = "5")]
    pub amgmpnoidlm: ::prost::alloc::vec::Vec<Iojdmdlkjnm>,
    #[prost(uint32, tag = "4")]
    pub kchegpecmhm: u32,
    #[prost(uint32, tag = "10")]
    pub ihlgmnhbdhj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iojdmdlkjnm {
    #[prost(uint32, tag = "10")]
    pub kmnomgmofil: u32,
    #[prost(uint32, tag = "13")]
    pub jhgncibopbe: u32,
    #[prost(enumeration = "Pdbdhhciaam", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub room_id: u32,
}
/// DIDFAKDAOBG (6059)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournStartCsReq {
    #[prost(uint32, repeated, tag = "3")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub cngepabgdlm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub kjkpmffamfk: u32,
    #[prost(bool, tag = "5")]
    pub mfdjnofjndc: bool,
    #[prost(uint32, tag = "14")]
    pub daflhmllkdk: u32,
}
/// ADKJOEINGHN (6027)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournStartScRsp {
    #[prost(uint32, tag = "9")]
    pub daflhmllkdk: u32,
    #[prost(message, optional, tag = "1")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub kcfmiidppbh: ::core::option::Option<Nfaeimegihg>,
}
/// BBCPBHCGJLI (6100)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournEnterCsReq {}
/// OGMKLJHGDKG (6069)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournEnterScRsp {
    #[prost(message, optional, tag = "5")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub kcfmiidppbh: ::core::option::Option<Nfaeimegihg>,
}
/// OHFLBDOOOKE (6047)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournLeaveCsReq {}
/// PDMHAMFKELO (6097)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournLeaveScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
}
/// OOBBNHGGOLF (6075)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournSettleCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ionnolihaag {
    #[prost(message, optional, tag = "13")]
    pub enfbjbhpggn: ::core::option::Option<Flpfhgimend>,
    #[prost(message, optional, tag = "6")]
    pub eelbepmnpgi: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "2")]
    pub iohmenlmdda: ::core::option::Option<Angbdplnidk>,
    #[prost(message, optional, tag = "10")]
    pub bglbboghhim: ::core::option::Option<Eagfkgaicca>,
    #[prost(message, optional, tag = "9")]
    pub kcfmiidppbh: ::core::option::Option<Nfaeimegihg>,
}
/// JMOODNPDKFD (6074)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournSettleScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
    #[prost(message, optional, tag = "10")]
    pub inppfdjhejn: ::core::option::Option<Ionnolihaag>,
}
/// PFMKDFHLPHI (6044)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournEnterRoomCsReq {
    #[prost(uint32, tag = "6")]
    pub lncdgojpaio: u32,
    #[prost(uint32, tag = "10")]
    pub dhinbnjjopf: u32,
}
/// JDDJJFIJDNI (6036)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournEnterRoomScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
}
/// KAHOPFDAPGN (6095)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournEnterLayerCsReq {
    #[prost(uint32, tag = "9")]
    pub nnoggmbookf: u32,
    #[prost(uint32, tag = "12")]
    pub lncdgojpaio: u32,
}
/// PAJEGOHLAOG (6038)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournEnterLayerScRsp {
    #[prost(message, optional, tag = "5")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// JJHMILEMLCC (6029)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournLevelInfoUpdateScNotify {
    #[prost(message, repeated, tag = "3")]
    pub kechadngneg: ::prost::alloc::vec::Vec<Nciogbelnbb>,
    #[prost(enumeration = "Kkadggcjbhn", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "7")]
    pub nnoggmbookf: u32,
    #[prost(enumeration = "Lkoilbgbkem", tag = "2")]
    pub reason: i32,
}
/// DKEFADHBBPE (6023)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournTakeExpRewardCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub dgocphdnnlf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub opalijhhpie: u32,
}
/// JCAPEIIMDEC (6078)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournTakeExpRewardScRsp {
    #[prost(uint32, repeated, tag = "3")]
    pub lehpfjfghnn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// BOCGLEHFBDJ (6051)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournExpNotify {
    #[prost(uint32, tag = "4")]
    pub exp: u32,
}
/// JNMLENAJOIB (6053)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournQueryCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkbfbfbadji {
    #[prost(uint32, tag = "13")]
    pub kjkpmffamfk: u32,
    #[prost(bool, tag = "9")]
    pub hdmfplocpmk: bool,
    #[prost(uint32, repeated, tag = "4")]
    pub jilabllnjcg: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "5")]
    pub is_taken_reward: bool,
    #[prost(bool, tag = "3")]
    pub kphgmoidfnd: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmfjgmbpaff {
    #[prost(uint32, tag = "15")]
    pub daflhmllkdk: u32,
    #[prost(bool, tag = "3")]
    pub fpgdlfipaen: bool,
    #[prost(uint32, tag = "4")]
    pub kbekacamfoo: u32,
    #[prost(int64, tag = "13")]
    pub end_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kldegajoeha {
    #[prost(uint32, repeated, tag = "15")]
    pub lehpfjfghnn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjfpldpdmna {
    #[prost(uint32, tag = "10")]
    pub ejgnhkgfmae: u32,
    #[prost(message, optional, tag = "3")]
    pub lgofoilnonl: ::core::option::Option<Kfddofkhkdj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Olidlojggnp {
    #[prost(uint32, tag = "1")]
    pub pmaachomgmc: u32,
    #[prost(bool, tag = "5")]
    pub kphgmoidfnd: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caepocnbjkf {
    #[prost(uint32, tag = "8")]
    pub opalijhhpie: u32,
    #[prost(uint32, tag = "15")]
    pub njmhcjgeogi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmdnpnkamlg {
    #[prost(uint32, repeated, tag = "10")]
    pub ddgffpgnced: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub kbalpdhmbnp: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub kilolikclpd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub accpehfpkab: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub bgogkamjlmb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub hifacppemod: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfjbkomalbp {
    #[prost(message, repeated, tag = "4")]
    pub kbhoeeednan: ::prost::alloc::vec::Vec<Ngeomhngdnj>,
    #[prost(message, repeated, tag = "6")]
    pub cgnfacmppco: ::prost::alloc::vec::Vec<Mkbfbfbadji>,
    #[prost(message, optional, tag = "11")]
    pub noomdkekgmj: ::core::option::Option<Caepocnbjkf>,
    #[prost(message, optional, tag = "8")]
    pub ccebhjgjhoa: ::core::option::Option<Pmdnpnkamlg>,
    #[prost(message, repeated, tag = "5")]
    pub afbbgjiajne: ::prost::alloc::vec::Vec<Olidlojggnp>,
    #[prost(message, optional, tag = "9")]
    pub pdbgflialdb: ::core::option::Option<Jjfpldpdmna>,
    #[prost(message, optional, tag = "14")]
    pub gdeacbledjk: ::core::option::Option<Kldegajoeha>,
    #[prost(message, optional, tag = "13")]
    pub fbilooecbad: ::core::option::Option<Gmfjgmbpaff>,
}
/// BOCOBINPNLL (6093)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournQueryScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub kcfmiidppbh: ::core::option::Option<Nfaeimegihg>,
    #[prost(message, optional, tag = "5")]
    pub rogue_get_info: ::core::option::Option<Kfjbkomalbp>,
}
/// NHLILEGHDAL (6080)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournAreaUpdateScNotify {
    #[prost(message, repeated, tag = "5")]
    pub cgnfacmppco: ::prost::alloc::vec::Vec<Mkbfbfbadji>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngeomhngdnj {
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub hhlnghknbfe: u32,
    #[prost(int64, tag = "13")]
    pub time: i64,
    #[prost(message, optional, tag = "15")]
    pub noomdkekgmj: ::core::option::Option<Caepocnbjkf>,
    #[prost(int64, tag = "6")]
    pub end_time: i64,
    #[prost(message, optional, tag = "5")]
    pub data: ::core::option::Option<Jinacbfkoel>,
    #[prost(message, optional, tag = "10")]
    pub kcfmiidppbh: ::core::option::Option<Nfaeimegihg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jinacbfkoel {
    #[prost(message, repeated, tag = "15")]
    pub miracle_list: ::prost::alloc::vec::Vec<Ibjmingepgn>,
    #[prost(message, repeated, tag = "9")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "6")]
    pub item_value: u32,
}
/// DADHIFBFKBI (6037)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetAllArchiveCsReq {}
/// FNCAMGHLGOF (6022)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournGetAllArchiveScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub fnnlgllkicd: ::prost::alloc::vec::Vec<Ngeomhngdnj>,
}
/// KIBHGFGEHIP (6070)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournDeleteArchiveCsReq {
    #[prost(uint32, tag = "8")]
    pub hhlnghknbfe: u32,
}
/// ICIINGPAGEA (6077)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournDeleteArchiveScRsp {
    #[prost(uint32, tag = "8")]
    pub hhlnghknbfe: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// AFHEKGKHPNB (6090)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournRenameArchiveCsReq {
    #[prost(string, tag = "13")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub hhlnghknbfe: u32,
}
/// LMBNNHGEMAG (6031)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournRenameArchiveScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub hhlnghknbfe: u32,
    #[prost(string, tag = "9")]
    pub name: ::prost::alloc::string::String,
}
/// GALKGJCCNGI (6068)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournClearArchiveNameScNotify {
    #[prost(uint32, tag = "12")]
    pub hhlnghknbfe: u32,
}
/// DJCLBKKPILP (6058)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetPermanentTalentInfoCsReq {}
/// KJFCAKLHPEM (6046)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournGetPermanentTalentInfoScRsp {
    #[prost(message, optional, tag = "4")]
    pub pdbgflialdb: ::core::option::Option<Jjfpldpdmna>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// LJAPGEDNOAG (6089)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournEnablePermanentTalentCsReq {
    #[prost(uint32, tag = "2")]
    pub talent_id: u32,
}
/// EIFFFOKFLBB (6045)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournEnablePermanentTalentScRsp {
    #[prost(message, optional, tag = "8")]
    pub pdbgflialdb: ::core::option::Option<Jjfpldpdmna>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// MKAOGOAKHEM (6020)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournResetPermanentTalentCsReq {}
/// PFPPCBOILHI (6015)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournResetPermanentTalentScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub pdbgflialdb: ::core::option::Option<Jjfpldpdmna>,
}
/// EEGOHKBAHBJ (6057)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournEnterRogueCocoonSceneCsReq {
    #[prost(uint32, tag = "15")]
    pub nofjglfkgfi: u32,
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ckhgfcabifi>,
    #[prost(uint32, tag = "3")]
    pub lmccpipdhdm: u32,
    #[prost(uint32, tag = "9")]
    pub oalobbjofbi: u32,
    #[prost(bool, tag = "4")]
    pub onhhplekhki: bool,
}
/// GIDMHCHEPHB (6065)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournEnterRogueCocoonSceneScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
}
/// HOHFCCEKCFO (6028)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournLeaveRogueCocoonSceneCsReq {}
/// KHAENIGCOML (6021)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournLeaveRogueCocoonSceneScRsp {
    #[prost(message, optional, tag = "14")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// PPEOHGJBFHI (6082)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournReEnterRogueCocoonStageCsReq {
    #[prost(bool, tag = "2")]
    pub onhhplekhki: bool,
}
/// FNEJHKLLEEJ (6083)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournReEnterRogueCocoonStageScRsp {
    #[prost(message, optional, tag = "9")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// EDPPHBOFBMG (6094)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetCurRogueCocoonInfoCsReq {}
/// KNMGNGLINBL (6092)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetCurRogueCocoonInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub nofjglfkgfi: u32,
    #[prost(uint32, tag = "13")]
    pub oalobbjofbi: u32,
    #[prost(uint32, tag = "4")]
    pub lmccpipdhdm: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// NDLPHHDKMDE (6086)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournDifficultyCompNotify {
    #[prost(uint32, repeated, tag = "9")]
    pub iaacbeomean: ::prost::alloc::vec::Vec<u32>,
}
/// GBLFPKMOPFC (6032)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournHandBookNotify {
    #[prost(enumeration = "Mdlbadpphih", tag = "2")]
    pub depcdmoipeg: i32,
    #[prost(uint32, repeated, tag = "1")]
    pub aangibdkieh: ::prost::alloc::vec::Vec<u32>,
}
/// JJMJMGLNBDN (6060)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetSettleInfoCsReq {
    #[prost(uint32, tag = "4")]
    pub kjkpmffamfk: u32,
}
/// CEEPONCNCBK (6055)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournGetSettleInfoScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub inppfdjhejn: ::core::option::Option<Ionnolihaag>,
}
/// DCMDOJIGCBK (6085)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournConfirmSettleCsReq {
    #[prost(string, tag = "9")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub hhlnghknbfe: u32,
    #[prost(uint32, tag = "8")]
    pub kjkpmffamfk: u32,
}
/// DPEMEJFDIIH (6013)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournConfirmSettleScRsp {
    #[prost(message, optional, tag = "3")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub necgolomnlp: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "15")]
    pub bkakjnjliah: ::core::option::Option<Ngeomhngdnj>,
    #[prost(message, optional, tag = "9")]
    pub oofimndjpci: ::core::option::Option<ItemList>,
}
/// MOGEBDDGFIK (6050)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournWeekChallengeUpdateScNotify {
    #[prost(message, optional, tag = "7")]
    pub fbilooecbad: ::core::option::Option<Gmfjgmbpaff>,
}
/// KLHNOLLBAMA (6099)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetMiscRealTimeDataCsReq {}
/// FDNNDHOAPKN (6040)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetMiscRealTimeDataScRsp {
    #[prost(message, optional, tag = "14")]
    pub iohmenlmdda: ::core::option::Option<Angbdplnidk>,
    #[prost(message, optional, tag = "15")]
    pub bglbboghhim: ::core::option::Option<Eagfkgaicca>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub enfbjbhpggn: ::core::option::Option<Flpfhgimend>,
}
/// CCKIHNEDMBE (6043)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournGetArchiveRepositoryCsReq {}
/// ANCAEELAFEN (6026)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournGetArchiveRepositoryScRsp {
    #[prost(uint32, repeated, tag = "8")]
    pub mmooadncgae: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub gbccppmlbmh: ::prost::alloc::vec::Vec<u32>,
}
/// OPHJJEBHJLG (6039)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournReviveCostUpdateScNotify {
    #[prost(message, optional, tag = "1")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
}
/// NAKEBHJAGJL (6063)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournReviveAvatarCsReq {
    #[prost(uint32, repeated, tag = "12")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub interacted_prop_entity_id: u32,
}
/// KELAHAHNDNH (6079)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournReviveAvatarScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub rogue_revive_cost: ::core::option::Option<ItemCostData>,
}
/// MEJILJCOFJM (6018)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournBattleFailSettleInfoScNotify {
    #[prost(message, optional, tag = "5")]
    pub inppfdjhejn: ::core::option::Option<Ionnolihaag>,
    #[prost(message, optional, tag = "6")]
    pub kjbiggihkdp: ::core::option::Option<Khejpihjfaf>,
}
/// KJCODCNOGFO (6920)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRollShopInfoCsReq {
    #[prost(uint32, tag = "10")]
    pub bgnkmlpohgh: u32,
}
/// JPINOKJLHJA (6915)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRollShopInfoScRsp {
    #[prost(uint32, repeated, tag = "3")]
    pub hfijjpiabgp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "7")]
    pub bgnkmlpohgh: u32,
}
/// KCGAONJAPCC (6907)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoGachaInRollShopCsReq {
    #[prost(uint32, tag = "15")]
    pub gpocphbpcbm: u32,
    #[prost(uint32, tag = "11")]
    pub bgnkmlpohgh: u32,
    #[prost(uint32, tag = "9")]
    pub gacha_random: u32,
}
/// KDLCIHLHKME (6903)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoGachaInRollShopScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub reward_display_type: u32,
    #[prost(uint32, tag = "8")]
    pub dncjdoodmlg: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub bgnkmlpohgh: u32,
}
/// IENHOMKGPEJ (6917)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeRollShopRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub bgnkmlpohgh: u32,
}
/// TakeRollShopRewardScRsp (6906)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRollShopRewardScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub group_type: u32,
    #[prost(uint32, tag = "12")]
    pub roll_shop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneActorInfo {
    #[prost(uint32, tag = "2")]
    pub map_layer: u32,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
    #[prost(enumeration = "AvatarType", tag = "5")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcMonsterRogueInfo {
    #[prost(uint32, tag = "5")]
    pub elite_group: u32,
    #[prost(uint32, tag = "12")]
    pub rogue_monster_id: u32,
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub hard_level_group: u32,
    #[prost(uint32, tag = "7")]
    pub cbiaoplipkj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcMonsterExtraInfo {
    #[prost(oneof = "npc_monster_extra_info::InfoCase", tags = "5")]
    pub info_case: ::core::option::Option<npc_monster_extra_info::InfoCase>,
}
/// Nested message and enum types in `NpcMonsterExtraInfo`.
pub mod npc_monster_extra_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "5")]
        RogueGameInfo(super::NpcMonsterRogueInfo),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneNpcMonsterInfo {
    #[prost(bool, tag = "1")]
    pub khjonojkhoi: bool,
    #[prost(uint32, tag = "7")]
    pub monster_list: u32,
    #[prost(uint32, tag = "8")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "10")]
    pub world_level: u32,
    #[prost(bool, tag = "11")]
    pub olmmbfofgef: bool,
    #[prost(message, optional, tag = "13")]
    pub extra_info: ::core::option::Option<NpcMonsterExtraInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcDialogueEventParam {
    #[prost(uint32, tag = "8")]
    pub rogue_dialogue_event_id: u32,
    #[prost(uint32, tag = "12")]
    pub arg_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NpcRogueGameInfo {
    #[prost(bool, tag = "6")]
    pub cpjgdeldggb: bool,
    #[prost(uint32, tag = "8")]
    pub talk_dialogue_id: u32,
    #[prost(bool, tag = "11")]
    pub mkaflmlnebj: bool,
    #[prost(uint32, tag = "2")]
    pub event_unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub gfakeaajgbl: u32,
    #[prost(uint32, tag = "4")]
    pub aeon_talk_id: u32,
    #[prost(map = "uint32, uint32", tag = "1")]
    pub oamjlnboleg: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "7")]
    pub dialogue_event_param_list: ::prost::alloc::vec::Vec<NpcDialogueEventParam>,
    #[prost(bool, tag = "12")]
    pub jagdlhmdnpp: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpbgdlohknf {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdhmaeopihi {
    #[prost(uint32, tag = "4")]
    pub dmmelmgmhlo: u32,
    #[prost(bool, tag = "12")]
    pub is_meet: bool,
    #[prost(uint32, tag = "6")]
    pub focalaogagj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NpcExtraInfo {
    #[prost(oneof = "npc_extra_info::InfoCase", tags = "2, 8, 11")]
    pub info_case: ::core::option::Option<npc_extra_info::InfoCase>,
}
/// Nested message and enum types in `NpcExtraInfo`.
pub mod npc_extra_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "2")]
        RogueGameInfo(super::NpcRogueGameInfo),
        #[prost(message, tag = "8")]
        Hpffpibgknn(super::Bdhmaeopihi),
        #[prost(message, tag = "11")]
        Feaocmggdip(super::Bpbgdlohknf),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneNpcInfo {
    #[prost(uint32, tag = "8")]
    pub npc_id: u32,
    #[prost(message, optional, tag = "9")]
    pub extra_info: ::core::option::Option<NpcExtraInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropRogueInfo {
    #[prost(uint32, tag = "2")]
    pub lmojjcecokp: u32,
    #[prost(uint32, tag = "14")]
    pub knnjkoimaic: u32,
    #[prost(uint32, tag = "10")]
    pub gabnjbchhpe: u32,
    #[prost(uint32, tag = "4")]
    pub room_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropAeonInfo {
    #[prost(uint32, tag = "1")]
    pub add_exp: u32,
    #[prost(uint32, tag = "2")]
    pub aeon_id: u32,
    #[prost(uint32, tag = "11")]
    pub dialogue_group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropChessRogueInfo {
    #[prost(bool, tag = "12")]
    pub inpfpebpdlf: bool,
    #[prost(bool, tag = "10")]
    pub ikggfkkboaj: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueTournDoorInfo {
    #[prost(bool, tag = "6")]
    pub hcmkkiiigme: bool,
    #[prost(uint32, tag = "2")]
    pub jhgncibopbe: u32,
    #[prost(uint32, tag = "14")]
    pub dplcbcgfdho: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueMagicDoorInfo {
    #[prost(uint32, tag = "8")]
    pub jhgncibopbe: u32,
    #[prost(bool, tag = "1")]
    pub hcmkkiiigme: bool,
    #[prost(uint32, tag = "15")]
    pub dplcbcgfdho: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorkbenchFuncIdInfo {
    #[prost(bool, tag = "1")]
    pub dpkmepaahin: bool,
    #[prost(uint32, tag = "6")]
    pub cbahfgpjemp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueTournWorkbenchInfo {
    #[prost(message, repeated, tag = "1")]
    pub kjipfmbkejl: ::prost::alloc::vec::Vec<WorkbenchFuncIdInfo>,
    #[prost(uint32, tag = "3")]
    pub lplhljipmhc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkbenchIdRogueGambleMachineInfo {
    #[prost(uint32, tag = "9")]
    pub dekmckdjlmc: u32,
    #[prost(message, optional, tag = "14")]
    pub nofjpppaike: ::core::option::Option<Blkfpmibjko>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueCurseChestInfo {
    #[prost(uint32, tag = "12")]
    pub ccfnindaogj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropExtraInfo {
    #[prost(oneof = "prop_extra_info::InfoCase", tags = "15, 8, 6, 2, 11, 1, 9, 14")]
    pub info_case: ::core::option::Option<prop_extra_info::InfoCase>,
}
/// Nested message and enum types in `PropExtraInfo`.
pub mod prop_extra_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "15")]
        RogueInfo(super::PropRogueInfo),
        #[prost(message, tag = "8")]
        AeonInfo(super::PropAeonInfo),
        #[prost(message, tag = "6")]
        ChessRogueInfo(super::PropChessRogueInfo),
        #[prost(message, tag = "2")]
        RogueTournDoorInfo(super::RogueTournDoorInfo),
        #[prost(message, tag = "11")]
        RogueTournWorkbenchInfo(super::RogueTournWorkbenchInfo),
        #[prost(message, tag = "1")]
        RogueGambleMachineInfo(super::WorkbenchIdRogueGambleMachineInfo),
        #[prost(message, tag = "9")]
        RogueCurseChestInfo(super::RogueCurseChestInfo),
        #[prost(message, tag = "14")]
        RogueMagicDoorInfo(super::RogueMagicDoorInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnebcfcdmpc {
    #[prost(bool, tag = "10")]
    pub bbcnhcejfbp: bool,
    #[prost(uint32, tag = "4")]
    pub efdiadoejob: u32,
    #[prost(bytes = "vec", tag = "9")]
    pub hbblkjgckpf: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePropInfo {
    #[prost(message, optional, tag = "10")]
    pub extra_info: ::core::option::Option<PropExtraInfo>,
    #[prost(uint32, tag = "11")]
    pub prop_state: u32,
    #[prost(message, optional, tag = "13")]
    pub hmgcoanonll: ::core::option::Option<Hnebcfcdmpc>,
    #[prost(uint32, tag = "3")]
    pub prop_id: u32,
    #[prost(uint32, tag = "2")]
    pub life_time_ms: u32,
    #[prost(uint64, tag = "9")]
    pub create_time_ms: u64,
    #[prost(string, repeated, tag = "4")]
    pub trigger_name_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneSummonUnitInfo {
    #[prost(uint32, tag = "4")]
    pub caster_entity_id: u32,
    #[prost(int32, tag = "6")]
    pub life_time_ms: i32,
    #[prost(uint64, tag = "10")]
    pub create_time_ms: u64,
    #[prost(uint32, tag = "13")]
    pub summon_unit_id: u32,
    #[prost(string, repeated, tag = "14")]
    pub trigger_name_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "5")]
    pub attach_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityInfo {
    #[prost(message, optional, tag = "11")]
    pub actor: ::core::option::Option<SceneActorInfo>,
    #[prost(message, optional, tag = "9")]
    pub npc_monster: ::core::option::Option<SceneNpcMonsterInfo>,
    #[prost(message, optional, tag = "13")]
    pub npc: ::core::option::Option<SceneNpcInfo>,
    #[prost(message, optional, tag = "7")]
    pub prop: ::core::option::Option<ScenePropInfo>,
    #[prost(message, optional, tag = "4")]
    pub summon_unit: ::core::option::Option<SceneSummonUnitInfo>,
    #[prost(uint32, tag = "2")]
    pub entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(uint32, tag = "6")]
    pub inst_id: u32,
    #[prost(message, optional, tag = "10")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuffInfo {
    #[prost(uint32, tag = "14")]
    pub buff_id: u32,
    #[prost(uint64, tag = "10")]
    pub add_time_ms: u64,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(float, tag = "6")]
    pub life_time: f32,
    #[prost(map = "string, float", tag = "15")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint32, tag = "11")]
    pub buff_summon_entity_id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffInfo {
    #[prost(uint32, tag = "14")]
    pub entity_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub buff_list: ::prost::alloc::vec::Vec<BuffInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MechanismBarInfo {
    #[prost(uint32, tag = "15")]
    pub value: u32,
    #[prost(uint32, tag = "9")]
    pub lgjicbpffcf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomSaveData {
    #[prost(string, tag = "10")]
    pub save_data: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dlibjafbhea {
    #[prost(uint32, tag = "2")]
    pub hichlooflbd: u32,
    #[prost(uint32, tag = "15")]
    pub pbiablpekob: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupInfo {
    /// map<string, int32> gbnnlkibhon = 9;
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    #[prost(uint32, tag = "8")]
    pub state: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientGroupInfo {
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(bool, tag = "9")]
    pub is_default: bool,
    #[prost(uint32, tag = "12")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionStatusBySceneInfo {
    #[prost(uint32, repeated, tag = "1")]
    pub kckknnnlpdd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub main_mission_mcv_list: ::prost::alloc::vec::Vec<MainMissionCustomValue>,
    #[prost(message, repeated, tag = "14")]
    pub sub_mission_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "4")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub aoeodfgekko: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneInfo {
    /// uint32 game_mode_type = 5;
    #[prost(uint32, tag = "5")]
    pub world_id: u32,
    #[prost(message, repeated, tag = "1301")]
    pub scene_group_list: ::prost::alloc::vec::Vec<SceneGroupInfo>,
    #[prost(uint32, tag = "27")]
    pub game_story_line_id: u32,
    #[prost(uint32, tag = "14")]
    pub entry_id: u32,
    #[prost(message, repeated, tag = "8")]
    pub entity_buff_info_list: ::prost::alloc::vec::Vec<EntityBuffInfo>,
    #[prost(message, repeated, tag = "4")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    #[prost(uint32, tag = "11")]
    pub leader_entity_id: u32,
    #[prost(uint32, tag = "10")]
    pub plane_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub custom_data_list: ::prost::alloc::vec::Vec<CustomSaveData>,
    #[prost(message, repeated, tag = "2")]
    pub scene_buff_info_list: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(message, optional, tag = "1039")]
    pub scene_mission_info: ::core::option::Option<MissionStatusBySceneInfo>,
    #[prost(uint32, tag = "1348")]
    pub content_id: u32,
    #[prost(uint32, tag = "1130")]
    pub dimension_id: u32,
    #[prost(map = "string, int32", tag = "1313")]
    pub floor_saved_data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
    #[prost(uint32, tag = "9")]
    pub game_mode_type: u32,
    /// uint32 world_id = 9;
    #[prost(map = "uint32, message", tag = "15")]
    pub fhlamihooja: ::std::collections::HashMap<u32, Dlibjafbhea>,
    #[prost(uint32, repeated, tag = "1")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub default_pos: u32,
    #[prost(uint32, tag = "7")]
    pub floor_id: u32,
    #[prost(message, repeated, tag = "1512")]
    pub client_group_list: ::prost::alloc::vec::Vec<ClientGroupInfo>,
    #[prost(uint32, repeated, tag = "1064")]
    pub mglhebhjabe: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityMotion {
    #[prost(bool, tag = "14")]
    pub kkbdjdlhmkf: bool,
    #[prost(uint32, tag = "4")]
    pub map_layer: u32,
    #[prost(uint32, tag = "2")]
    pub entity_id: u32,
    #[prost(message, optional, tag = "11")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// NMMHHNOMDIE (1436)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveCsReq {
    #[prost(uint32, tag = "8")]
    pub entry_id: u32,
    #[prost(uint64, tag = "15")]
    pub dcmncgdjobj: u64,
    #[prost(message, repeated, tag = "9")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
}
/// IKLMJGAGBFL (1495)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScRsp {
    #[prost(message, repeated, tag = "11")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
    #[prost(message, optional, tag = "7")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
/// HFOENJFJIPC (1434)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScNotify {
    #[prost(uint32, tag = "15")]
    pub client_pos_version: u32,
    #[prost(uint32, tag = "2")]
    pub entry_id: u32,
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
    #[prost(message, optional, tag = "1")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// HKLLHIDBBNH (1443)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneUpdatePositionVersionNotify {
    #[prost(uint32, tag = "6")]
    pub pos_version: u32,
}
/// KNNHECKKOPF (1484)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractPropCsReq {
    #[prost(uint32, tag = "10")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub interact_id: u32,
}
/// IHAPJHMICAH (1427)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractPropScRsp {
    #[prost(uint32, tag = "7")]
    pub prop_state: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub prop_entity_id: u32,
}
/// BCBNCPPLOJF (1424)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePropTimelineInfoCsReq {
    #[prost(uint64, tag = "8")]
    pub dnmmbglnjei: u64,
    #[prost(uint32, tag = "15")]
    pub prop_entity_id: u32,
    #[prost(message, optional, tag = "11")]
    pub hmgcoanonll: ::core::option::Option<Hnebcfcdmpc>,
    #[prost(bool, tag = "10")]
    pub is_close_map: bool,
}
/// EPADAIACCOI (1493)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangePropTimelineInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub prop_entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HitMonsterBattleInfo {
    #[prost(enumeration = "MonsterBattleType", tag = "13")]
    pub monster_battle_type: i32,
    #[prost(uint32, tag = "1")]
    pub target_monster_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicValue {
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(float, tag = "10")]
    pub value: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistMonsterEntityInfo {
    #[prost(uint32, repeated, tag = "8")]
    pub entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// IEDNBLPMKEC (1467)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCsReq {
    #[prost(uint32, tag = "13")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "3")]
    pub caster_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub elooddmmnia: u32,
    #[prost(uint32, tag = "11")]
    pub skill_index: u32,
    #[prost(enumeration = "SkillExtraTag", repeated, tag = "6")]
    pub skill_extra_tags: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, tag = "7")]
    pub maze_ability_str: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "12")]
    pub assist_monster_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub assist_monster_entity_info: ::prost::alloc::vec::Vec<AssistMonsterEntityInfo>,
    #[prost(message, repeated, tag = "15")]
    pub dynamic_values: ::prost::alloc::vec::Vec<DynamicValue>,
    #[prost(message, optional, tag = "9")]
    pub target_motion: ::core::option::Option<MotionInfo>,
}
/// BBBJBIIBOEO (1428)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillScRsp {
    #[prost(message, optional, tag = "5")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "2")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub monster_battle_info: ::prost::alloc::vec::Vec<HitMonsterBattleInfo>,
}
/// CNMDEGBEPNA (1425)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCostMpCsReq {
    #[prost(uint32, tag = "14")]
    pub skill_index: u32,
    #[prost(uint32, tag = "1")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "2")]
    pub caster_id: u32,
}
/// HNMMMODHKJP (1496)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCostMpScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub attacked_group_id: u32,
}
/// HJAIDKGBDOO (1405)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillMpUpdateScNotify {
    #[prost(uint32, tag = "7")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "10")]
    pub mp: u32,
}
/// PNMKHIIEOBN (1459)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEnterStageCsReq {
    #[prost(bool, tag = "12")]
    pub ejgpcipheed: bool,
    #[prost(enumeration = "RebattleType", tag = "14")]
    pub rebattle_type: i32,
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
}
/// KNMNAPBPHDD (1412)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEnterStageScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// GNBOIIJIGNL (1478)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneReviveAfterRebattleCsReq {
    #[prost(enumeration = "RebattleType", tag = "14")]
    pub rebattle_type: i32,
}
/// NEHPGNNNLOJ (1429)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneReviveAfterRebattleScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// MLMJCNAOMAH (1452)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoCsReq {}
/// LFIBPOJKAAF (1474)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoScRsp {
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffChangeInfo {
    #[prost(uint32, tag = "11")]
    pub entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub attacked_group_id: u32,
    #[prost(enumeration = "SceneEntityBuffChangeType", tag = "10")]
    pub reason: i32,
    #[prost(oneof = "entity_buff_change_info::InfoCase", tags = "15, 5")]
    pub info_case: ::core::option::Option<entity_buff_change_info::InfoCase>,
}
/// Nested message and enum types in `EntityBuffChangeInfo`.
pub mod entity_buff_change_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "15")]
        BuffChangeInfo(super::BuffInfo),
        #[prost(uint32, tag = "5")]
        RemoveBuffId(u32),
    }
}
/// COANODDGHHE (1446)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncEntityBuffChangeListScNotify {
    #[prost(message, repeated, tag = "7")]
    pub entity_buff_change_list: ::prost::alloc::vec::Vec<EntityBuffChangeInfo>,
}
/// GAAHDNNGPAH (1419)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRefreshCsReq {
    #[prost(uint32, tag = "5")]
    pub plane_id: u32,
    #[prost(uint32, tag = "1")]
    pub floor_id: u32,
    #[prost(uint32, tag = "14")]
    pub prop_entity_id: u32,
}
/// BLDFJBPCABK (1426)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRefreshScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// ACNCEPGALHN (1407)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LastSpringRefreshTimeNotify {
    #[prost(int64, tag = "6")]
    pub kkjmjjafmpd: i64,
}
/// CKOFMIDJACK (1453)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReturnLastTownCsReq {}
/// CJLBBBJODPN (1490)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReturnLastTownScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub scene: ::core::option::Option<SceneInfo>,
}
/// CPKFPKMNAAL (1450)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSectionCsReq {
    #[prost(uint32, tag = "9")]
    pub section_id: u32,
}
/// ICBNCNKMEPO (1448)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSectionScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// CJAPGMJMPBG (1410)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurInteractEntityCsReq {
    #[prost(uint32, tag = "9")]
    pub entity_id: u32,
}
/// BEINMOGHDFF (1476)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurInteractEntityScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// IBLGOGEKOPN (1435)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecoverAllLineupCsReq {}
/// GOPEMIINNDA (1473)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecoverAllLineupScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// SavePointsInfoNotify (1417)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SavePointsInfoNotify {
    #[prost(int64, tag = "12")]
    pub refresh_time: i64,
    #[prost(uint32, tag = "14")]
    pub valid_times: u32,
}
/// BPDNOJJGKOP (1413)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCocoonStageCsReq {
    #[prost(uint32, tag = "13")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "15")]
    pub world_level: u32,
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(uint32, tag = "9")]
    pub cocoon_id: u32,
}
/// StartCocoonStageScRsp (1421)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartCocoonStageScRsp {
    #[prost(message, optional, tag = "2")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "5")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "10")]
    pub wave: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// AOPDLMINKIN (1465)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityBindPropCsReq {
    #[prost(bool, tag = "8")]
    pub analihkipmb: bool,
    #[prost(message, optional, tag = "9")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// EKKOKPJCMLA (1408)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityBindPropScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// NAOFAIAGEOM (1418)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientPausedCsReq {
    #[prost(bool, tag = "9")]
    pub is_paused: bool,
}
/// AKGFNMALEPB (1437)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientPausedScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(bool, tag = "4")]
    pub is_paused: bool,
}
/// LJCKJBAFBAA (1479)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeactivateFarmElementCsReq {
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
}
/// GKEEDDPHNMM (1481)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeactivateFarmElementScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub entity_id: u32,
}
/// CBGHPJOFPJN (1439)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivateFarmElementCsReq {
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
}
/// DKNCFIEGLOB (1455)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivateFarmElementScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub entity_id: u32,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarPresetHp {
    #[prost(uint32, tag = "5")]
    pub fdclmiaepab: u32,
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpringRecoverConfig {
    #[prost(message, repeated, tag = "1")]
    pub avatar_preset_hp_list: ::prost::alloc::vec::Vec<AvatarPresetHp>,
    #[prost(uint32, tag = "8")]
    pub default_hp: u32,
    #[prost(bool, tag = "5")]
    pub auto_recover_hp: bool,
}
/// DJBGMOJKOOD (1499)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateMechanismBarScNotify {
    #[prost(message, optional, tag = "12")]
    pub gjedckbokka: ::core::option::Option<MechanismBarInfo>,
    #[prost(uint32, tag = "13")]
    pub plane_id: u32,
    #[prost(uint32, tag = "11")]
    pub floor_id: u32,
}
/// ELFHOHJAHPH (1403)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetGroupCustomSaveDataCsReq {
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(uint32, tag = "6")]
    pub entry_id: u32,
    #[prost(string, tag = "14")]
    pub save_data: ::prost::alloc::string::String,
}
/// HINPIPPFMAE (1440)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGroupCustomSaveDataScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(uint32, tag = "11")]
    pub entry_id: u32,
}
/// DJEIMIHPIFK (1433)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReEnterLastElementStageCsReq {
    #[prost(uint32, tag = "9")]
    pub stage_id: u32,
}
/// MGLMFFMDFEC (1497)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReEnterLastElementStageScRsp {
    #[prost(uint32, tag = "13")]
    pub stage_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// CEKAEMILJHN (1483)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityTeleportCsReq {
    #[prost(message, optional, tag = "4")]
    pub entity_motion: ::core::option::Option<EntityMotion>,
    #[prost(uint32, tag = "3")]
    pub entry_id: u32,
}
/// BJGEJCIOMLM (1468)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityTeleportScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub entity_motion: ::core::option::Option<EntityMotion>,
    #[prost(uint32, tag = "1")]
    pub client_pos_version: u32,
}
/// PEGJEKJGBCD (1457)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSceneCsReq {
    #[prost(uint32, tag = "4")]
    pub content_id: u32,
    #[prost(uint32, tag = "9")]
    pub teleport_id: u32,
    #[prost(uint32, tag = "13")]
    pub entry_id: u32,
    #[prost(uint32, tag = "15")]
    pub game_story_line_id: u32,
    #[prost(bool, tag = "6")]
    pub is_close_map: bool,
}
/// GJFPGKODLGO (1416)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSceneScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub game_story_line_id: u32,
    #[prost(bool, tag = "12")]
    pub is_close_map: bool,
    #[prost(bool, tag = "13")]
    pub is_over_map: bool,
    #[prost(uint32, tag = "5")]
    pub content_id: u32,
}
/// LMPNHAHFEKA (1447)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSceneByServerScNotify {
    #[prost(message, optional, tag = "5")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(enumeration = "EnterSceneReason", tag = "4")]
    pub reason: i32,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
/// IIKGHPBMDJL (1449)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePlaneEventScNotify {
    /// ItemList ohdeanjbmdj = 10;
    /// ItemList igfddmglhdg = 11;
    /// ItemList get_item_list = 5;
    #[prost(message, optional, tag = "7")]
    pub get_item_list: ::core::option::Option<ItemList>,
}
/// AKOMBKODCKB (1470)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub entry_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub entry_story_line_id: u32,
    #[prost(bool, tag = "8")]
    pub pnbfdkenojp: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub content_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MazePropState {
    #[prost(uint32, tag = "5")]
    pub config_id: u32,
    #[prost(uint32, tag = "10")]
    pub state: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MazeGroup {
    #[prost(uint32, repeated, tag = "9")]
    pub lfnjkjeeljg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(bool, tag = "13")]
    pub idmjikenlbk: bool,
    #[prost(int64, tag = "15")]
    pub mdimdnebjcd: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChestInfo {
    #[prost(uint32, tag = "12")]
    pub opened_num: u32,
    #[prost(enumeration = "ChestType", tag = "10")]
    pub chest_type: i32,
    #[prost(uint32, tag = "14")]
    pub exist_num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cggfkbbkbdd {
    #[prost(uint32, tag = "5")]
    pub kodkcbemimj: u32,
    #[prost(uint32, tag = "8")]
    pub ncodllblgmm: u32,
    #[prost(uint32, tag = "3")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMapInfo {
    #[prost(uint32, tag = "9")]
    pub cur_map_entry_id: u32,
    #[prost(message, repeated, tag = "12")]
    pub maze_prop_list: ::prost::alloc::vec::Vec<MazePropState>,
    #[prost(uint32, tag = "13")]
    pub content_id: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub unlock_teleport_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub entry_story_line_id: u32,
    #[prost(message, repeated, tag = "5")]
    pub maze_group_list: ::prost::alloc::vec::Vec<MazeGroup>,
    #[prost(uint32, tag = "14")]
    pub floor_id: u32,
    #[prost(map = "string, int32", tag = "6")]
    pub floor_saved_data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
    #[prost(uint32, tag = "15")]
    pub dimension_id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub entry_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub ekdollecggm: ::prost::alloc::vec::Vec<Cggfkbbkbdd>,
    #[prost(message, repeated, tag = "3")]
    pub chest_list: ::prost::alloc::vec::Vec<ChestInfo>,
}
/// HEPLOMJCIOA (1498)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoScRsp {
    #[prost(message, repeated, tag = "3")]
    pub map_info_list: ::prost::alloc::vec::Vec<SceneMapInfo>,
    #[prost(bool, tag = "13")]
    pub pnbfdkenojp: bool,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// LKBEIENFBJB (1491)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncServerSceneChangeNotify {}
/// NGBIHILCNJA (1409)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterCountDownCsReq {
    #[prost(uint32, tag = "4")]
    pub cur_times: u32,
    #[prost(uint32, tag = "14")]
    pub ckagpdjlbga: u32,
}
/// DDNFIOFCFOK (1420)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterCountDownScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// AEOEJFIOPLP (1401)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterUpdateScNotify {
    #[prost(uint32, tag = "9")]
    pub pbiablpekob: u32,
    #[prost(uint32, tag = "14")]
    pub ckagpdjlbga: u32,
    #[prost(enumeration = "GameplayCounterUpdateReason", tag = "5")]
    pub reason: i32,
}
/// OFBCAOFGKME (1482)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterRecoverCsReq {
    #[prost(uint32, tag = "10")]
    pub koiljfnccfm: u32,
    #[prost(uint32, tag = "3")]
    pub ckagpdjlbga: u32,
}
/// BCPIACINAMC (1480)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterRecoverScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// DNGPHOMFAMB (1456)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFloorSavedValueNotify {
    #[prost(uint32, tag = "14")]
    pub floor_id: u32,
    #[prost(map = "string, int32", tag = "2")]
    pub mmaofkcabib: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "3")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "10")]
    pub plane_id: u32,
}
/// LEEADNPNPGI (1444)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUnlockTeleportCsReq {
    #[prost(uint32, repeated, tag = "12")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// NCEHAOOMCMI (1423)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUnlockTeleportScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub unlock_teleport_list: ::prost::alloc::vec::Vec<u32>,
}
/// GMPMCPIELEL (1469)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenChestScNotify {
    #[prost(uint32, tag = "6")]
    pub ccfnindaogj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupEntityRefreshInfo {
    #[prost(message, optional, tag = "8")]
    pub refresh_entity_info: ::core::option::Option<SceneEntityInfo>,
    /// KGLMIMBICIN
    #[prost(uint32, tag = "12")]
    pub delete_entity: u32,
    #[prost(uint32, tag = "13")]
    pub melfhaojlel: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogbcpdfianf {
    #[prost(int32, tag = "7")]
    pub fcdaephkfok: i32,
    #[prost(int32, tag = "4")]
    pub nnbjmfppeai: i32,
    #[prost(string, tag = "8")]
    pub hlomdjjpmep: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupRefreshInfo {
    #[prost(uint32, tag = "15")]
    pub state: u32,
    #[prost(message, repeated, tag = "13")]
    pub refresh_entity_list: ::prost::alloc::vec::Vec<SceneGroupEntityRefreshInfo>,
    #[prost(enumeration = "SceneGroupRefreshType", tag = "9")]
    pub refresh_type: i32,
    /// repeated OGBCPDFIANF ifcbegflpgc = 12;
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
}
/// CGLMDPBGHCA (1432)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupRefreshScNotify {
    #[prost(message, repeated, tag = "2")]
    pub refresh_group_list: ::prost::alloc::vec::Vec<SceneGroupRefreshInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateInfo {
    /// MIJHFMNPLIP ??
    #[prost(uint32, tag = "15")]
    pub group_state: u32,
    #[prost(uint32, tag = "14")]
    pub hooiclkbeff: u32,
    #[prost(uint32, tag = "9")]
    pub entry_id: u32,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
/// FDOLEJHGDNM (1438)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateChangeCsReq {
    #[prost(message, optional, tag = "10")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
}
/// MKLLLHMKEJC (1487)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateChangeScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
}
/// GJKHOBEJMIN (1486)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateChangeScNotify {
    #[prost(message, optional, tag = "10")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnteredSceneInfo {
    #[prost(uint32, tag = "12")]
    pub floor_id: u32,
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
}
/// NFCMFPECEBG (1466)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneCsReq {}
/// AALOOODHCLC (1463)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub entered_scene_info_list: ::prost::alloc::vec::Vec<EnteredSceneInfo>,
}
/// GBOGACDAJNL (1489)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnteredSceneChangeScNotify {
    #[prost(message, repeated, tag = "12")]
    pub entered_scene_info_list: ::prost::alloc::vec::Vec<EnteredSceneInfo>,
}
/// KFCBBFIGEOE (1415)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshTriggerByClientCsReq {
    #[prost(message, optional, tag = "6")]
    pub trigger_motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, repeated, tag = "14")]
    pub trigger_target_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "13")]
    pub trigger_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub trigger_entity_id: u32,
}
/// BBEKPAAIMIO (1485)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshTriggerByClientScRsp {
    #[prost(uint32, tag = "15")]
    pub trigger_entity_id: u32,
    #[prost(bool, tag = "5")]
    pub refresh_trigger: bool,
    #[prost(string, tag = "12")]
    pub trigger_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// GLOIIMGIGGH (1462)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshTriggerByClientScNotify {
    #[prost(uint32, tag = "1")]
    pub trigger_entity_id: u32,
    #[prost(string, tag = "2")]
    pub trigger_name: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "3")]
    pub trigger_target_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// IKDBIMPCKFH (1402)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSummonUnitCsReq {
    #[prost(uint32, repeated, tag = "4")]
    pub entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// KAIILAGLEDM (1406)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSummonUnitScRsp {
    #[prost(uint32, repeated, tag = "11")]
    pub entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// IJHPIHINIFK (1471)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockedAreaMapScNotify {
    #[prost(uint32, repeated, tag = "15")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// IHFEMCMGCDP (1414)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTeleportNotify {
    #[prost(uint32, tag = "3")]
    pub entry_id: u32,
    #[prost(uint32, tag = "7")]
    pub teleport_id: u32,
}
/// LLNPAOMKKFC (1451)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupPropertyCsReq {
    #[prost(uint32, tag = "2")]
    pub floor_id: u32,
    #[prost(int32, tag = "13")]
    pub lkpfmbibeen: i32,
    #[prost(string, tag = "12")]
    pub hlomdjjpmep: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
}
/// PFJALHBLFPM (1442)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateGroupPropertyScRsp {
    #[prost(uint32, tag = "5")]
    pub floor_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(string, tag = "10")]
    pub hlomdjjpmep: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(int32, tag = "11")]
    pub fcdaephkfok: i32,
    #[prost(uint32, tag = "3")]
    pub dimension_id: u32,
    #[prost(int32, tag = "2")]
    pub nnbjmfppeai: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerPrefs {
    #[prost(uint32, tag = "4")]
    pub server_prefs_id: u32,
    #[prost(bytes = "vec", tag = "13")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// CDIIHHHJHJJ (6136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllServerPrefsDataCsReq {}
/// KLKFJIKOBCJ (6195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllServerPrefsDataScRsp {
    #[prost(message, repeated, tag = "6")]
    pub server_prefs_list: ::prost::alloc::vec::Vec<ServerPrefs>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// NILKDJLPGNJ (6184)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerPrefsDataCsReq {
    #[prost(uint32, tag = "6")]
    pub server_prefs_id: u32,
}
/// BBAHFJEFLCH (6127)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServerPrefsDataScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub server_prefs: ::core::option::Option<ServerPrefs>,
}
/// PDKFHHKNJBE (6167)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateServerPrefsDataCsReq {
    #[prost(message, optional, tag = "10")]
    pub server_prefs: ::core::option::Option<ServerPrefs>,
}
/// EAOHPGPFMCO (6128)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateServerPrefsDataScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub server_prefs_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shop {
    #[prost(int64, tag = "10")]
    pub end_time: i64,
    #[prost(uint32, tag = "14")]
    pub shop_id: u32,
    #[prost(uint32, tag = "4")]
    pub city_level: u32,
    #[prost(uint32, tag = "9")]
    pub city_exp: u32,
    #[prost(message, repeated, tag = "15")]
    pub goods_list: ::prost::alloc::vec::Vec<Goods>,
    #[prost(int64, tag = "7")]
    pub begin_time: i64,
    #[prost(uint64, tag = "2")]
    pub city_taken_level_reward: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goods {
    #[prost(uint32, tag = "11")]
    pub buy_times: u32,
    #[prost(int64, tag = "10")]
    pub end_time: i64,
    #[prost(uint32, tag = "9")]
    pub goods_id: u32,
    #[prost(int64, tag = "5")]
    pub begin_time: i64,
    #[prost(uint32, tag = "8")]
    pub item_id: u32,
}
/// INFBCIADHAA (1536)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetShopListCsReq {
    #[prost(uint32, tag = "4")]
    pub eihgflihjeo: u32,
}
/// GetShopListScRsp (1595)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShopListScRsp {
    #[prost(uint32, tag = "7")]
    pub shop_type: u32,
    #[prost(message, repeated, tag = "10")]
    pub shop_list: ::prost::alloc::vec::Vec<Shop>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// MDOEJKLOHDF (1584)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyGoodsCsReq {
    #[prost(uint32, tag = "8")]
    pub shop_id: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub hfglhjpdbhi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub pimkbiogeek: u32,
    #[prost(uint32, tag = "4")]
    pub item_id: u32,
    #[prost(uint32, tag = "3")]
    pub goods_id: u32,
    #[prost(uint32, tag = "1")]
    pub interacted_prop_entity_id: u32,
}
/// BuyGoodsScRsp (1527)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyGoodsScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub goods_buy_times: u32,
    #[prost(uint32, tag = "4")]
    pub shop_id: u32,
    #[prost(uint32, tag = "6")]
    pub goods_id: u32,
}
/// GLIEHNLKPNK (1567)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeCityShopRewardCsReq {
    #[prost(uint32, tag = "15")]
    pub shop_id: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
/// TakeCityShopRewardScRsp (1528)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeCityShopRewardScRsp {
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// CityShopInfoScNotify (1552)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CityShopInfoScNotify {
    #[prost(uint64, tag = "2")]
    pub taken_level_reward: u64,
    #[prost(uint32, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, tag = "5")]
    pub exp: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgdpocnfnbm {
    #[prost(uint32, tag = "5")]
    pub unique_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub embmpbohmgg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub lbpafkhbbbi: u32,
    #[prost(uint32, tag = "12")]
    pub ilmooinijdk: u32,
    #[prost(bool, tag = "1")]
    pub nldfkohieel: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub item_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjeplfpalcb {
    #[prost(uint32, tag = "10")]
    pub kbmbakapfha: u32,
    #[prost(uint32, tag = "2")]
    pub ilmooinijdk: u32,
}
/// MJBPIENEDPJ (6736)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpaceZooDataCsReq {}
/// KPGCMHMPJIB (6795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooDataScRsp {
    #[prost(uint32, repeated, tag = "7")]
    pub bplhdfjmpoa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub pkhaghjonef: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub mncjpjlpcha: ::prost::alloc::vec::Vec<Dgdpocnfnbm>,
    #[prost(uint32, repeated, tag = "14")]
    pub lkdldpbnncm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub njfkpopaleh: u32,
    #[prost(message, repeated, tag = "8")]
    pub nnmlpgmccmj: ::prost::alloc::vec::Vec<Kjeplfpalcb>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub bcajbbmbfkn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub gedhaapebng: ::prost::alloc::vec::Vec<u32>,
}
/// ILEMKEIIECI (6784)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooBornCsReq {
    #[prost(uint32, tag = "2")]
    pub emljneelbff: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub glofajbilec: ::prost::alloc::vec::Vec<u32>,
}
/// FBBNKAGDEGD (6727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooBornScRsp {
    #[prost(message, repeated, tag = "8")]
    pub kopmcfpapel: ::prost::alloc::vec::Vec<Kjeplfpalcb>,
    #[prost(bool, tag = "10")]
    pub neplpodchpe: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ofeikonfeif: ::core::option::Option<Dgdpocnfnbm>,
}
/// BBDFLNKBELJ (6767)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpaceZooMutateCsReq {
    #[prost(uint32, tag = "4")]
    pub item_id: u32,
    #[prost(uint32, tag = "9")]
    pub unique_id: u32,
}
/// NFDLCHIJMHC (6728)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooMutateScRsp {
    #[prost(message, optional, tag = "13")]
    pub ifpjoppdjga: ::core::option::Option<Dgdpocnfnbm>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub kopmcfpapel: ::prost::alloc::vec::Vec<Kjeplfpalcb>,
    #[prost(bool, tag = "11")]
    pub neplpodchpe: bool,
}
/// PPIABGJINMH (6752)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpaceZooOpCatteryCsReq {
    #[prost(uint32, tag = "13")]
    pub pafacahfikj: u32,
    #[prost(uint32, tag = "2")]
    pub lkmlbdckoof: u32,
    #[prost(uint32, tag = "12")]
    pub op_type: u32,
}
/// DIKABHLMGKH (6774)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooOpCatteryScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub lkdldpbnncm: ::prost::alloc::vec::Vec<u32>,
}
/// JNIHIPIDKDL (6724)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooDeleteCatCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub kpgoiepklep: ::prost::alloc::vec::Vec<u32>,
}
/// JEMFCBCAJOD (6793)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooDeleteCatScRsp {
    #[prost(uint32, repeated, tag = "6")]
    pub nobkelimkah: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// CFOFGKFFNHD (6734)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooCatUpdateNotify {
    #[prost(bool, tag = "10")]
    pub dfjemmhokon: bool,
    #[prost(bool, tag = "2")]
    pub neplpodchpe: bool,
    #[prost(message, repeated, tag = "15")]
    pub pajglfnjloi: ::prost::alloc::vec::Vec<Dgdpocnfnbm>,
}
/// FDDBDKJBLMP (6743)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpaceZooExchangeItemCsReq {
    #[prost(uint32, tag = "4")]
    pub item_id: u32,
}
/// MODPLKPLALN (6746)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpaceZooExchangeItemScRsp {
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// EDAJLOHCFIF (6725)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpaceZooTakeCsReq {
    #[prost(uint32, tag = "6")]
    pub fmokhegldjg: u32,
}
/// MIKLBCEGFDE (6796)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpaceZooTakeScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub fmokhegldjg: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjdilbllaab {
    #[prost(uint32, tag = "9")]
    pub gmcoefgkdmf: u32,
    #[prost(uint32, tag = "3")]
    pub fdaoflfkakc: u32,
    #[prost(uint32, tag = "4")]
    pub hiekkdonheb: u32,
    #[prost(bool, tag = "15")]
    pub lkflbadkbpg: bool,
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
}
/// PMEONLPGGLM (7169)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStarFightDataCsReq {}
/// OALPJKCDFCH (7170)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStarFightDataScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub kobhopifcdp: ::prost::alloc::vec::Vec<Jjdilbllaab>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kblpgmidfeg {
    #[prost(enumeration = "AvatarType", tag = "13")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
}
/// LEKHGAMJBBB (7163)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartStarFightLevelCsReq {
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<Kblpgmidfeg>,
    #[prost(uint32, tag = "5")]
    pub ibafdobbegd: u32,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
}
/// OGOMDNLMFGF (7168)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartStarFightLevelScRsp {
    #[prost(uint32, tag = "8")]
    pub ibafdobbegd: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// NKJACOBDCOA (7161)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StarFightDataChangeNotify {
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
    #[prost(message, optional, tag = "7")]
    pub dibonjdplce: ::core::option::Option<Jjdilbllaab>,
}
/// JDPBIFNHGIC (6236)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryLineInfoCsReq {}
/// PALEACIFOAK (6295)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoryLineInfoScRsp {
    #[prost(uint32, tag = "1")]
    pub giiigplnibn: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub gkmbnpafggb: ::prost::alloc::vec::Vec<u32>,
}
/// OLNJDBBBGKN (6284)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoryLineInfoScNotify {
    #[prost(uint32, tag = "11")]
    pub giiigplnibn: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub gkmbnpafggb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub eljinbjeael: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub pkpbkkbbppg: u32,
}
/// CPCCMKKNJLO (6228)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeStoryLineFinishScNotify {
    #[prost(bool, tag = "10")]
    pub gbnibdpfkjn: bool,
    #[prost(uint32, tag = "4")]
    pub ccchfdponnj: u32,
    #[prost(enumeration = "Enfbndemakd", tag = "13")]
    pub boamjekjjle: i32,
    #[prost(uint32, tag = "8")]
    pub giiigplnibn: u32,
}
/// GCIDPAOBILH (6252)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoryLineTrialAvatarChangeScNotify {
    #[prost(uint32, repeated, tag = "4")]
    pub aaeaaeonboe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub cgkfopjcgln: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub clgklcheoea: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StrongChallengeAvatar {
    #[prost(enumeration = "AvatarType", tag = "4")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeAvatarData {
    #[prost(uint32, repeated, tag = "8")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "12")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeActivityData {
    #[prost(uint32, tag = "4")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "10")]
    pub fnelbpffamh: ::core::option::Option<StrongChallengeAvatarData>,
    #[prost(uint32, tag = "11")]
    pub max_score: u32,
    #[prost(uint32, tag = "12")]
    pub panel_id: u32,
    #[prost(uint32, tag = "5")]
    pub dpocofibbko: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeActivityInfo {
    #[prost(map = "uint32, message", tag = "8")]
    pub donehdjmhad: ::std::collections::HashMap<u32, StrongChallengeActivityData>,
}
/// BHHJBBGDEHB (6636)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStrongChallengeActivityDataCsReq {}
/// NPMMOCCMOCB (6695)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStrongChallengeActivityDataScRsp {
    #[prost(message, optional, tag = "8")]
    pub akfkhfbbohd: ::core::option::Option<StrongChallengeActivityInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// AAAJNGLEKJG (6684)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterStrongChallengeActivityStageCsReq {
    #[prost(uint32, repeated, tag = "14")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
}
/// BDDMEABELEC (6627)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterStrongChallengeActivityStageScRsp {
    #[prost(message, optional, tag = "11")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// LFNFCNEIHLM (6667)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StrongChallengeActivityBattleEndScNotify {
    #[prost(uint32, tag = "8")]
    pub total_damage: u32,
    #[prost(uint32, tag = "6")]
    pub max_score: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "12")]
    pub end_status: i32,
    #[prost(uint32, tag = "11")]
    pub acnohlgebcc: u32,
    #[prost(uint32, tag = "5")]
    pub laoghkdghde: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub score_id: u32,
    #[prost(uint32, tag = "7")]
    pub iijkgneghbo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fiomffkfenh {
    #[prost(uint32, tag = "10")]
    pub ibafdobbegd: u32,
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(uint32, tag = "13")]
    pub star: u32,
}
/// DLOJEABONCD (7569)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSummonActivityDataCsReq {}
/// BKPOEEFAIMM (7570)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSummonActivityDataScRsp {
    #[prost(message, repeated, tag = "5")]
    pub eedjjeiihmm: ::prost::alloc::vec::Vec<Fiomffkfenh>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajcmjbmfddm {
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
}
/// ABPBOENBACO (7563)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSummonActivityStageCsReq {
    #[prost(uint32, tag = "12")]
    pub ibafdobbegd: u32,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ajcmjbmfddm>,
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
    #[prost(message, optional, tag = "4")]
    pub gjbobbpfkmd: ::core::option::Option<Ajcmjbmfddm>,
}
/// OFCOHENEHAJ (7568)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSummonActivityStageScRsp {
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(uint32, tag = "10")]
    pub ibafdobbegd: u32,
    #[prost(message, optional, tag = "7")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// GNDIEOEHJEL (7561)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonActivityBattleEndScNotify {
    #[prost(uint32, tag = "4")]
    pub star: u32,
    #[prost(uint32, tag = "1")]
    pub dpokcfkndig: u32,
    #[prost(uint32, tag = "8")]
    pub ibafdobbegd: u32,
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idchmmdpnol {
    #[prost(message, optional, tag = "2")]
    pub jnamjnfmnam: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "11")]
    pub config_id: u32,
    #[prost(uint32, tag = "12")]
    pub jeahpaaoaom: u32,
    #[prost(uint32, tag = "4")]
    pub mpohfmfdlab: u32,
    #[prost(bytes = "vec", tag = "14")]
    pub joekogclfaa: ::prost::alloc::vec::Vec<u8>,
}
/// PPMFHOMFHJO (8120)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchHandDataCsReq {
    #[prost(uint32, tag = "8")]
    pub config_id: u32,
}
/// PKDKHGHOBNE (8115)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchHandDataScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub hngnkicjnah: u32,
    #[prost(uint32, tag = "5")]
    pub ehjedjffafa: u32,
    #[prost(message, repeated, tag = "8")]
    pub jgngcbnomnf: ::prost::alloc::vec::Vec<Idchmmdpnol>,
}
/// IBPEIBKOHLG (8107)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchHandStartCsReq {
    #[prost(uint32, tag = "14")]
    pub config_id: u32,
}
/// EJDEALNNEOI (8103)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchHandStartScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub config_id: u32,
}
/// EGANJGNFNNN (8117)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchHandFinishCsReq {}
/// AFJJDBIJIHM (8106)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchHandFinishScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub hjmcimglfcl: ::core::option::Option<Idchmmdpnol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdmkbjkggfn {
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "11")]
    pub nponihpdbkc: u32,
    #[prost(enumeration = "Bmaiekajjnh", tag = "1")]
    pub op_type: i32,
    #[prost(uint32, tag = "7")]
    pub igngkbnpklg: u32,
}
/// CDKBGOKMBHB (8105)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchHandUpdateCsReq {
    #[prost(message, optional, tag = "2")]
    pub mleooeedpeg: ::core::option::Option<Idchmmdpnol>,
    #[prost(message, optional, tag = "5")]
    pub dcepibleipo: ::core::option::Option<Fdmkbjkggfn>,
}
/// HDBIEKKGCBD (8110)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwitchHandUpdateScRsp {
    #[prost(message, optional, tag = "3")]
    pub hjmcimglfcl: ::core::option::Option<Idchmmdpnol>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub dcepibleipo: ::core::option::Option<Fdmkbjkggfn>,
}
/// INEJBFMGAFP (8102)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchHandCoinUpdateCsReq {
    #[prost(uint32, tag = "14")]
    pub jeahpaaoaom: u32,
}
/// DMDMCKEHOIG (8108)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchHandCoinUpdateScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub jeahpaaoaom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gibgfemmkaa {
    #[prost(message, optional, tag = "11")]
    pub innjeiheiop: ::core::option::Option<Ebjnaeamcmn>,
    #[prost(message, optional, tag = "9")]
    pub aflbinkajne: ::core::option::Option<Adkidbbbhnc>,
    #[prost(uint32, repeated, tag = "7")]
    pub elalcfplbnc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub skill_info: ::core::option::Option<Ijonolhfnei>,
    #[prost(message, optional, tag = "6")]
    pub ebamonbjkbn: ::core::option::Option<Ogbegnbiali>,
    #[prost(message, optional, tag = "8")]
    pub pplcegekmkc: ::core::option::Option<Johikgbgjbd>,
    #[prost(message, optional, tag = "4")]
    pub lcfanolipij: ::core::option::Option<Ijkimblipid>,
    #[prost(uint32, tag = "15")]
    pub lmbpkeobmhk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijonolhfnei {
    #[prost(uint32, tag = "11")]
    pub noejnpahdek: u32,
    #[prost(uint32, tag = "1")]
    pub ljeoilpllpm: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub jmmaoemlddl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogbegnbiali {
    #[prost(uint32, tag = "8")]
    pub game_story_line_id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub lnobdacilgg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihebmkfioep {
    #[prost(uint32, tag = "6")]
    pub value: u32,
    #[prost(enumeration = "Idhkdddcmca", tag = "1")]
    pub hmoomiicofi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebjnaeamcmn {
    #[prost(uint32, tag = "5")]
    pub mlfononeoab: u32,
    #[prost(uint32, tag = "2")]
    pub jfcgoddabia: u32,
    #[prost(message, repeated, tag = "6")]
    pub hnoflcabpei: ::prost::alloc::vec::Vec<Ihebmkfioep>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfibnphanil {
    #[prost(uint32, tag = "15")]
    pub fhopjnkmnpb: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Johikgbgjbd {
    #[prost(message, repeated, tag = "2")]
    pub cicjfabhhce: ::prost::alloc::vec::Vec<Lfibnphanil>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adkidbbbhnc {
    #[prost(uint32, tag = "1819")]
    pub pfekoeihbij: u32,
    #[prost(oneof = "adkidbbbhnc::InfoCase", tags = "15, 13")]
    pub info_case: ::core::option::Option<adkidbbbhnc::InfoCase>,
}
/// Nested message and enum types in `ADKIDBBBHNC`.
pub mod adkidbbbhnc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "15")]
        Jnkcjgmoofk(super::Hnibjcghcan),
        #[prost(message, tag = "13")]
        Fllmjkiefdm(super::Kpcefhjbopf),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcdjfindmaa {
    #[prost(uint32, tag = "11")]
    pub dnnhnhabfio: u32,
    #[prost(uint32, tag = "3")]
    pub dpcncebmeke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnibjcghcan {
    #[prost(enumeration = "Glhfkndlmmf", tag = "10")]
    pub bhfbjkigkec: i32,
    #[prost(message, repeated, tag = "8")]
    pub nljgghpehoe: ::prost::alloc::vec::Vec<Fcdjfindmaa>,
    #[prost(uint32, repeated, tag = "14")]
    pub nildbiglcef: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpcefhjbopf {
    #[prost(uint32, tag = "10")]
    pub imkbnkdcpcf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijkimblipid {
    #[prost(oneof = "ijkimblipid::InfoCase", tags = "7, 3, 6, 2, 8, 12, 11, 14")]
    pub info_case: ::core::option::Option<ijkimblipid::InfoCase>,
}
/// Nested message and enum types in `IJKIMBLIPID`.
pub mod ijkimblipid {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "7")]
        Pbnakgpgbin(super::Okgibebkjlj),
        #[prost(message, tag = "3")]
        Acfkgonedkj(super::Ofoageomfcn),
        #[prost(message, tag = "6")]
        Gfhgobjmhla(super::Odhkokkcdme),
        #[prost(message, tag = "2")]
        Ipdajegehkc(super::Blnhpkhdach),
        #[prost(message, tag = "8")]
        Kmcdonbpdob(super::Phfdoeoegbl),
        #[prost(message, tag = "12")]
        Ecinhifeeee(super::Agiojleamkk),
        #[prost(message, tag = "11")]
        Clobnpjpglb(super::Ecfompdnodb),
        #[prost(message, tag = "14")]
        Eadmhphkfmk(super::Dklpphophfa),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okgibebkjlj {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ofoageomfcn {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odhkokkcdme {
    #[prost(uint32, tag = "3")]
    pub lmjaeipjaom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blnhpkhdach {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phfdoeoegbl {
    #[prost(bool, tag = "12")]
    pub hlnfgidkfjd: bool,
    #[prost(uint32, tag = "7")]
    pub jnolagajcle: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agiojleamkk {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecfompdnodb {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dklpphophfa {
    #[prost(bool, tag = "3")]
    pub cnhimgpfnlh: bool,
    #[prost(uint32, tag = "9")]
    pub jnolagajcle: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcclleodapa {
    #[prost(enumeration = "Diadjinagga", tag = "4")]
    pub source: i32,
    #[prost(message, optional, tag = "9")]
    pub jgmnmdafjke: ::core::option::Option<Eiflaikepdh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eiflaikepdh {
    #[prost(
        oneof = "eiflaikepdh::InfoCase",
        tags = "11, 6, 2, 1, 8, 7, 4, 10, 1109, 1852, 2026, 185"
    )]
    pub info_case: ::core::option::Option<eiflaikepdh::InfoCase>,
}
/// Nested message and enum types in `EIFLAIKEPDH`.
pub mod eiflaikepdh {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "11")]
        Dibmghfdhjb(super::Bibhgkhbpki),
        #[prost(message, tag = "6")]
        Jllpdpfogdn(super::Mpglnoeocif),
        #[prost(message, tag = "2")]
        Hbfmochinai(super::Mpglnoeocif),
        #[prost(message, tag = "1")]
        Ncdgidpmnal(super::Hgjfionfmbg),
        #[prost(message, tag = "8")]
        Lpkocebhbgd(super::Fcfpnmgmleb),
        #[prost(message, tag = "7")]
        Njdbgkbjmmh(super::Phfdoeoegbl),
        #[prost(message, tag = "4")]
        Nammecpaodb(super::Eiknbahbbdf),
        #[prost(uint32, tag = "10")]
        Fegbalaapdc(u32),
        #[prost(uint32, tag = "1109")]
        Jfcgoddabia(u32),
        #[prost(message, tag = "1852")]
        Ccombdffeke(super::Dklpphophfa),
        #[prost(message, tag = "2026")]
        Gjdlhhkepoh(super::Agiojleamkk),
        #[prost(uint32, tag = "185")]
        Cekibmfccbb(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eiknbahbbdf {
    #[prost(uint32, tag = "7")]
    pub lmjaeipjaom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bibhgkhbpki {
    #[prost(uint32, tag = "4")]
    pub kikmlgbccae: u32,
    #[prost(enumeration = "Idhkdddcmca", tag = "1")]
    pub hmoomiicofi: i32,
    #[prost(uint32, tag = "13")]
    pub jcecgjoapmm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mpglnoeocif {
    #[prost(uint32, tag = "2")]
    pub kikmlgbccae: u32,
    #[prost(uint32, tag = "1")]
    pub jcecgjoapmm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hgjfionfmbg {
    #[prost(uint32, tag = "14")]
    pub fhopjnkmnpb: u32,
    #[prost(uint32, tag = "11")]
    pub bkoliaijjgi: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcfpnmgmleb {
    #[prost(message, optional, tag = "13")]
    pub mkmeaenlame: ::core::option::Option<Adkidbbbhnc>,
    #[prost(uint32, tag = "15")]
    pub lmbpkeobmhk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Efjajpkdcei {
    #[prost(uint32, tag = "4")]
    pub jnolagajcle: u32,
    #[prost(bool, tag = "12")]
    pub hlnfgidkfjd: bool,
}
/// BDANACMNEND (7462)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingGameSyncChangeScNotify {
    #[prost(message, repeated, tag = "15")]
    pub npfkmgonkfk: ::prost::alloc::vec::Vec<Kcclleodapa>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmhjfjbeodk {
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(uint32, tag = "14")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnahnbkphao {
    #[prost(message, repeated, tag = "2")]
    pub bhbipplfhof: ::prost::alloc::vec::Vec<Jmhjfjbeodk>,
    #[prost(uint32, repeated, tag = "9")]
    pub aahbgeamdhn: ::prost::alloc::vec::Vec<u32>,
}
/// GCHGAHGCEGB (7500)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSwordTrainingDataCsReq {}
/// EEDBPHJECAG (7480)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSwordTrainingDataScRsp {
    #[prost(message, optional, tag = "14")]
    pub pajlkkdofme: ::core::option::Option<Fnahnbkphao>,
    #[prost(uint32, repeated, tag = "15")]
    pub gcbojnckmhj: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "1")]
    pub dkbilmapakf: bool,
    #[prost(uint32, repeated, tag = "12")]
    pub amkdgphbgib: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub bgjmlklkapn: u32,
    #[prost(message, optional, tag = "7")]
    pub dcfncdeieom: ::core::option::Option<Gibgfemmkaa>,
    #[prost(uint32, repeated, tag = "9")]
    pub lnobdacilgg: ::prost::alloc::vec::Vec<u32>,
}
/// NEDHBBDEEPK (7473)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingTurnActionCsReq {
    #[prost(uint32, repeated, tag = "14")]
    pub pdncnmkoodc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub molfkgikbch: ::prost::alloc::vec::Vec<u32>,
}
/// IPIPNGILPLD (7465)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingTurnActionScRsp {
    #[prost(uint32, repeated, tag = "15")]
    pub molfkgikbch: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// PIBEPJDLDFB (7499)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingDailyPhaseConfirmCsReq {
    #[prost(enumeration = "Glhfkndlmmf", tag = "2")]
    pub jdhniknfcba: i32,
}
/// NPKCFJHCNLL (7459)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingDailyPhaseConfirmScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "6")]
    pub ocnklcijjkb: bool,
}
/// IEMJGDPKEMJ (7493)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingDialogueSelectOptionCsReq {
    #[prost(uint32, tag = "3")]
    pub cjbdahmahkn: u32,
}
/// DBBCOAMCLOL (7497)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingDialogueSelectOptionScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// JPJDCMNHGHI (7488)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingExamResultConfirmCsReq {}
/// MDHDNMNMMLH (7483)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingExamResultConfirmScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// PHMANBMFNBN (7498)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSwordTrainingExamCsReq {}
/// MCOBAGJNALJ (7463)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSwordTrainingExamScRsp {
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// DFMALKNFJJC (7467)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingLearnSkillCsReq {
    #[prost(uint32, tag = "9")]
    pub skill_id: u32,
}
/// EALGEEJKIMM (7454)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingLearnSkillScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub skill_id: u32,
}
/// CFMPHLFHKNG (7490)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingStartGameCsReq {
    #[prost(uint32, tag = "13")]
    pub game_story_line_id: u32,
}
/// NEPJHHCNJNG (7461)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingStartGameScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub dcfncdeieom: ::core::option::Option<Gibgfemmkaa>,
}
/// EOEAKMMHMII (7456)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingStoryConfirmCsReq {
    #[prost(uint32, tag = "6")]
    pub jnolagajcle: u32,
}
/// OFBINACAHCO (7485)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingStoryConfirmScRsp {
    #[prost(uint32, tag = "11")]
    pub jnolagajcle: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// AGOOICALBFM (7468)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingGiveUpGameCsReq {}
/// CHDLEBOMENN (7472)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingGiveUpGameScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// INIPHLIAKEN (7492)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingGameSettleScNotify {
    #[prost(uint32, tag = "14")]
    pub game_story_line_id: u32,
    #[prost(enumeration = "Boehdkfadah", tag = "10")]
    pub reason: i32,
    #[prost(uint32, repeated, tag = "1")]
    pub eifbkojdedh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub mkmeaenlame: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub leknepcgoog: u32,
    #[prost(uint32, tag = "8")]
    pub dkhgchahomk: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub fbajgaioife: ::prost::alloc::vec::Vec<u32>,
}
/// CBFDPOIDJOK (7455)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingUnlockSyncScNotify {
    #[prost(message, repeated, tag = "10")]
    pub bhbipplfhof: ::prost::alloc::vec::Vec<Jmhjfjbeodk>,
    #[prost(uint32, repeated, tag = "1")]
    pub aahbgeamdhn: ::prost::alloc::vec::Vec<u32>,
}
/// ABLGEODEIND (7479)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingSelectEndingCsReq {
    #[prost(uint32, tag = "3")]
    pub apbnekcjhep: u32,
}
/// KOFHIIPNIOJ (7475)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingSelectEndingScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub apbnekcjhep: u32,
}
/// EBMCCLOEIAD (7484)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingRestoreGameCsReq {}
/// OIAOMJHPEAK (7469)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingRestoreGameScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub dcfncdeieom: ::core::option::Option<Gibgfemmkaa>,
}
/// BMEDMDJOJGL (7481)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingStoryBattleCsReq {}
/// IBBDNAAGACD (7451)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingStoryBattleScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// ECLNDLDHLCO (7487)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingActionTurnSettleScNotify {
    #[prost(message, repeated, tag = "8")]
    pub kgfgbjcecmm: ::prost::alloc::vec::Vec<Ihebmkfioep>,
    #[prost(uint32, tag = "3")]
    pub dbfgeiaddnf: u32,
}
/// KCBIEODKPCK (7453)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingResumeGameCsReq {
    #[prost(uint32, tag = "3")]
    pub game_story_line_id: u32,
}
/// FEAGGNEEMBG (7486)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwordTrainingResumeGameScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub dcfncdeieom: ::core::option::Option<Gibgfemmkaa>,
}
/// OMNDAMJKEHI (7489)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingSetSkillTraceCsReq {
    #[prost(uint32, tag = "9")]
    pub skill_id: u32,
}
/// GAMDKCOKMJH (7477)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingSetSkillTraceScRsp {
    #[prost(uint32, tag = "15")]
    pub skill_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
/// BIHLMMCEAOP (7457)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingMarkEndingViewedCsReq {}
/// HOADDFPGNNM (7476)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwordTrainingMarkEndingViewedScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BasicModuleSync {
    #[prost(uint32, tag = "6")]
    pub week_cocoon_finished_count: u32,
    #[prost(uint32, tag = "3")]
    pub stamina: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerBoardModuleSync {
    #[prost(string, tag = "2")]
    pub signature: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub bholgefccmd: bool,
    #[prost(message, repeated, tag = "11")]
    pub unlocked_head_icon_list: ::prost::alloc::vec::Vec<HeadIconData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarSync {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionSync {
    #[prost(message, repeated, tag = "2")]
    pub mission_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "6")]
    pub pbcognhgnof: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub mbcniljghnc: ::prost::alloc::vec::Vec<Ibffcofeenl>,
    #[prost(uint32, repeated, tag = "15")]
    pub ibmmiglmagc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub ahklpjbhpei: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub goehhmldicl: ::prost::alloc::vec::Vec<Bmhinpimhah>,
    #[prost(uint32, repeated, tag = "13")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionEventSync {
    #[prost(uint32, repeated, tag = "1")]
    pub noininchjkj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub pimoniabiko: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub mission_event_list: ::prost::alloc::vec::Vec<Mission>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onhbbepdfnh {
    #[prost(uint32, repeated, tag = "4")]
    pub pbnilkighnl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub enbpahdfepl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chajmfijfah {
    #[prost(message, repeated, tag = "4")]
    pub phbkmofpldn: ::prost::alloc::vec::Vec<SectionStatus>,
    #[prost(message, repeated, tag = "14")]
    pub pblgijjggll: ::prost::alloc::vec::Vec<GroupStatus>,
    #[prost(uint32, repeated, tag = "10")]
    pub apoipdhempn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub jdgdoeldhpe: ::prost::alloc::vec::Vec<u32>,
}
/// EMMGLJEHEFA (636)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerSyncScNotify {
    #[prost(uint32, tag = "1884")]
    pub total_achievement_exp: u32,
    #[prost(message, optional, tag = "4")]
    pub mission_event_sync: ::core::option::Option<MissionEventSync>,
    #[prost(message, optional, tag = "1345")]
    pub playerboard_module_sync: ::core::option::Option<PlayerBoardModuleSync>,
    #[prost(message, repeated, tag = "1")]
    pub wait_del_resource_list: ::prost::alloc::vec::Vec<WaitDelResource>,
    #[prost(message, optional, tag = "15")]
    pub mission_sync: ::core::option::Option<MissionSync>,
    #[prost(message, repeated, tag = "2")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(message, optional, tag = "12")]
    pub basic_module_sync: ::core::option::Option<BasicModuleSync>,
    #[prost(message, repeated, tag = "8")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(message, repeated, tag = "925")]
    pub pkolhmanhgc: ::prost::alloc::vec::Vec<Ohelkhbejkd>,
    #[prost(message, repeated, tag = "6")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(uint32, repeated, tag = "964")]
    pub pepifccpcck: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "276")]
    pub bplaencojnn: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, optional, tag = "13")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(message, optional, tag = "1335")]
    pub fmdddbenglk: ::core::option::Option<Onhbbepdfnh>,
    #[prost(message, optional, tag = "14")]
    pub avatar_sync: ::core::option::Option<AvatarSync>,
    #[prost(uint32, repeated, tag = "5")]
    pub molahmdfelj: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1403")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(message, optional, tag = "562")]
    pub mkecdpdbjln: ::core::option::Option<Chajmfijfah>,
    #[prost(message, optional, tag = "370")]
    pub pijojmkggfm: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "7")]
    pub idkihljccmc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
}
/// JFKCEFLMLOF (2136)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNpcTakenRewardCsReq {
    #[prost(uint32, tag = "3")]
    pub npc_id: u32,
}
/// BDIALKFJGMC (2195)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcTakenRewardScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub talk_event_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub npc_id: u32,
}
/// BOJDPOAMEKE (2184)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTalkRewardCsReq {
    #[prost(uint32, tag = "11")]
    pub kpmhfbkekdg: u32,
    #[prost(message, optional, tag = "4")]
    pub adielmgnmma: ::core::option::Option<Vector>,
}
/// BDNLEDNFHIF (2127)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTalkRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub kpmhfbkekdg: u32,
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
}
/// CDEGJOCLNKG (2167)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkNpcCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub npc_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FirstNpcTalkInfo {
    #[prost(bool, tag = "6")]
    pub is_meet: bool,
    #[prost(uint32, tag = "15")]
    pub first_npc_id: u32,
}
/// JFKPJGCDGIA (2128)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkNpcScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub npc_talk_info_list: ::prost::alloc::vec::Vec<FirstNpcTalkInfo>,
}
/// LFDABIAAAPE (2152)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkNpcCsReq {
    #[prost(uint32, tag = "10")]
    pub npc_id: u32,
}
/// ABEFGLMNCAA (2174)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkNpcScRsp {
    #[prost(uint32, tag = "3")]
    pub npc_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// NLMDNMAFBPK (2124)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectInclinationTextCsReq {
    #[prost(uint32, tag = "14")]
    pub talk_sentence_id: u32,
}
/// NAPNNGIMIIL (2193)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectInclinationTextScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub talk_sentence_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcTalkInfo {
    #[prost(uint32, tag = "1")]
    pub npc_talk_id: u32,
    #[prost(bool, tag = "4")]
    pub is_meet: bool,
}
/// OHEPNACAMNH (2134)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkByPerformanceNpcCsReq {
    #[prost(uint32, repeated, tag = "3")]
    pub npc_talk_list: ::prost::alloc::vec::Vec<u32>,
}
/// JFOCOIKADNH (2143)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkByPerformanceNpcScRsp {
    #[prost(message, repeated, tag = "6")]
    pub npc_talk_info_list: ::prost::alloc::vec::Vec<NpcTalkInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// EAEKAIOILII (2146)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkByPerformanceNpcCsReq {
    #[prost(uint32, tag = "6")]
    pub npc_talk_id: u32,
}
/// BMODNMNCINP (2125)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkByPerformanceNpcScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub npc_talk_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjdigonklmf {
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Geflmmamjcd {
    #[prost(bool, tag = "7")]
    pub belfjpefdnn: bool,
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecdlncagmgk {
    #[prost(message, repeated, tag = "12")]
    pub lapjjnlljkf: ::prost::alloc::vec::Vec<Mjdigonklmf>,
    #[prost(message, repeated, tag = "10")]
    pub kneeoonbhkd: ::prost::alloc::vec::Vec<Geflmmamjcd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agganccnckg {
    #[prost(uint32, repeated, tag = "12")]
    pub cpnnimpcnii: ::prost::alloc::vec::Vec<u32>,
}
/// EMKMMLJHFDF (8160)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TarotBookGetDataCsReq {}
/// KGCENJOGGPF (8155)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TarotBookGetDataScRsp {
    #[prost(uint32, tag = "8")]
    pub hmndpgpbdfi: u32,
    #[prost(uint32, tag = "13")]
    pub kbmflpnpkoj: u32,
    #[prost(message, optional, tag = "2")]
    pub nphibjehjam: ::core::option::Option<Ecdlncagmgk>,
    #[prost(message, optional, tag = "3")]
    pub aclofaogbpa: ::core::option::Option<Agganccnckg>,
    #[prost(map = "uint32, uint32", tag = "9")]
    pub dfbiedhmnkf: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "12")]
    pub abjjiahiagc: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// CIGCMCMFKKJ (8147)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TarotBookOpenPackCsReq {}
/// DKEDIBBDOGD (8143)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TarotBookOpenPackScRsp {
    #[prost(map = "uint32, uint32", tag = "12")]
    pub kklaodfjopf: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "7")]
    pub dibcebopmbc: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "6")]
    pub hmndpgpbdfi: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub kbmflpnpkoj: u32,
}
/// EANFGAKDIPC (8157)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TarotBookUnlockStoryCsReq {
    #[prost(uint32, repeated, tag = "12")]
    pub eifbkojdedh: ::prost::alloc::vec::Vec<u32>,
}
/// PGKDPKCOOBF (8146)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TarotBookUnlockStoryScRsp {
    #[prost(message, optional, tag = "5")]
    pub nkcicdedhoe: ::core::option::Option<Mjdigonklmf>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub eifbkojdedh: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "uint32, uint32", tag = "10")]
    pub abjjiahiagc: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "8")]
    pub dfbiedhmnkf: ::std::collections::HashMap<u32, u32>,
}
/// OPKLFGIDBKJ (8145)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TarotBookFinishStoryCsReq {
    #[prost(uint32, tag = "9")]
    pub jnolagajcle: u32,
}
/// KOCGIKCOOGF (8150)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TarotBookFinishStoryScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub nphibjehjam: ::core::option::Option<Ecdlncagmgk>,
    #[prost(uint32, tag = "6")]
    pub jnolagajcle: u32,
}
/// CFDFGCGCKGC (8142)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TarotBookModifyEnergyScNotify {
    #[prost(uint32, tag = "12")]
    pub kbmflpnpkoj: u32,
    #[prost(bool, tag = "8")]
    pub dffnaelfgdd: bool,
}
/// LOLLGFMACPJ (8148)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TarotBookFinishInteractionCsReq {
    #[prost(uint32, tag = "10")]
    pub hfciaffpapm: u32,
}
/// DGJMJFLCAKC (8152)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TarotBookFinishInteractionScRsp {
    #[prost(uint32, tag = "2")]
    pub hfciaffpapm: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhfccbnanki {
    #[prost(uint32, tag = "11")]
    pub max_score: u32,
    #[prost(uint32, tag = "12")]
    pub mnfmngjnfoh: u32,
    #[prost(uint32, tag = "6")]
    pub ajebbclphah: u32,
}
/// NINNMIGOPNG (6980)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTelevisionActivityDataCsReq {}
/// NJMDNMFNOEN (6975)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTelevisionActivityDataScRsp {
    #[prost(message, repeated, tag = "1")]
    pub nhlnneogceb: ::prost::alloc::vec::Vec<Dhfccbnanki>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
/// BPPLCMBENFH (6967)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TelevisionActivityDataChangeScNotify {
    #[prost(message, repeated, tag = "6")]
    pub nhlnneogceb: ::prost::alloc::vec::Vec<Dhfccbnanki>,
}
/// HBJEGACPICM (6966)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TelevisionActivityBattleEndScNotify {
    #[prost(uint32, tag = "11")]
    pub bfjaifdedbe: u32,
    #[prost(uint32, tag = "1")]
    pub flhcoopgdkk: u32,
    #[prost(message, optional, tag = "6")]
    pub jcciillcaap: ::core::option::Option<Dhfccbnanki>,
    #[prost(uint32, tag = "13")]
    pub aaijabgnada: u32,
    #[prost(uint32, tag = "10")]
    pub okcolklicca: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cphnoooklcl {
    #[prost(enumeration = "AvatarType", tag = "13")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
/// MILIJMPGBNA (6963)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTelevisionActivityStageCsReq {
    #[prost(message, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<Cphnoooklcl>,
    #[prost(uint32, repeated, tag = "8")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub ajebbclphah: u32,
}
/// FBHNAGIKENL (6977)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTelevisionActivityStageScRsp {
    #[prost(uint32, tag = "5")]
    pub ajebbclphah: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clfpeegokoo {
    #[prost(uint32, tag = "11")]
    pub jbcpnnengdb: u32,
    #[prost(string, tag = "10")]
    pub gmeiabhhgjh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub ldhimdpkbjj: u32,
    #[prost(string, tag = "13")]
    pub fmgpdfpmcml: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub bdoniiomcdh: u32,
}
/// OBPJEBBEIDE (3836)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextJoinSaveCsReq {
    #[prost(uint32, tag = "4")]
    pub ldhimdpkbjj: u32,
    #[prost(string, tag = "11")]
    pub gmeiabhhgjh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub bdoniiomcdh: u32,
}
/// KIFBBNHOOAI (3895)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextJoinSaveScRsp {
    #[prost(uint32, tag = "7")]
    pub bdoniiomcdh: u32,
    #[prost(string, tag = "6")]
    pub gmeiabhhgjh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub ldhimdpkbjj: u32,
}
/// CGPNGNPAMEL (3884)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextJoinQueryCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub cpkdndffhem: ::prost::alloc::vec::Vec<u32>,
}
/// MCEBGKLAGIM (3827)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextJoinQueryScRsp {
    #[prost(message, repeated, tag = "12")]
    pub oedppbfghbk: ::prost::alloc::vec::Vec<Clfpeegokoo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
/// KJJDGCEMGCD (3867)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextJoinBatchSaveCsReq {
    #[prost(message, repeated, tag = "6")]
    pub oedppbfghbk: ::prost::alloc::vec::Vec<Clfpeegokoo>,
}
/// ANGJPBCPMDN (3828)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextJoinBatchSaveScRsp {
    #[prost(message, repeated, tag = "6")]
    pub oedppbfghbk: ::prost::alloc::vec::Vec<Clfpeegokoo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmmgiddnihn {
    #[prost(uint32, tag = "8")]
    pub max_score: u32,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
}
/// JJEILCGMCCO (7559)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrackPhotoActivityDataCsReq {}
/// ENMJELNPFHB (7560)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrackPhotoActivityDataScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub oohneioimlk: ::prost::alloc::vec::Vec<Jmmgiddnihn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hlccnehfdba {
    #[prost(uint32, tag = "11")]
    pub entity_id: u32,
    #[prost(bool, tag = "10")]
    pub pkfakhdpied: bool,
}
/// LKPAHMELFAH (7553)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SettleTrackPhotoStageCsReq {
    #[prost(message, repeated, tag = "8")]
    pub kcnnkniaeka: ::prost::alloc::vec::Vec<Hlccnehfdba>,
    #[prost(uint32, tag = "14")]
    pub cost_time: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
}
/// GDLCLGHLAJB (7558)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SettleTrackPhotoStageScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub kcnnkniaeka: ::prost::alloc::vec::Vec<Hlccnehfdba>,
    #[prost(uint32, tag = "2")]
    pub score_id: u32,
    #[prost(uint32, tag = "5")]
    pub stage_id: u32,
}
/// GGKDAFJCDJO (7551)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrackPhotoStageCsReq {
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    #[prost(bool, tag = "9")]
    pub fcggbomjjoa: bool,
}
/// ABLMFAKNJLN (7555)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrackPhotoStageScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub kbeadblmilm: u32,
}
/// KGIEEPDMOPH (7554)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitTrackPhotoStageCsReq {
    #[prost(uint32, tag = "7")]
    pub stage_id: u32,
}
/// NJHPDEGPGAP (7552)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitTrackPhotoStageScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyGameCard {
    #[prost(uint32, tag = "6")]
    pub unique_id: u32,
    #[prost(uint32, tag = "15")]
    pub lhflcfnaopb: u32,
    #[prost(uint32, tag = "3")]
    pub card_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub mcbcbmpddbl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnkefbkdjkp {
    #[prost(message, repeated, tag = "15")]
    pub train_party_card_info: ::prost::alloc::vec::Vec<TrainPartyGameCard>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dokjkimmfhg {
    #[prost(bool, tag = "8")]
    pub nefolhonilj: bool,
    #[prost(message, optional, tag = "10")]
    pub train_party_card_info: ::core::option::Option<Bnkefbkdjkp>,
    #[prost(uint32, tag = "14")]
    pub keblgellmed: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Indphbnndkk {
    #[prost(uint32, tag = "9")]
    pub cgnkhekhiml: u32,
    #[prost(uint32, tag = "4")]
    pub unique_id: u32,
    #[prost(uint32, tag = "13")]
    pub hpiocdknhpg: u32,
    #[prost(uint32, tag = "7")]
    pub ilofimodien: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bighedamill {
    #[prost(uint32, repeated, tag = "1")]
    pub ojgkckefdld: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub odfemleemcl: u32,
    #[prost(uint32, tag = "2")]
    pub eklcihafnii: u32,
    #[prost(uint32, tag = "13")]
    pub hjgjbknjfjm: u32,
    #[prost(uint32, tag = "4")]
    pub kolefifdfhl: u32,
    #[prost(uint32, tag = "10")]
    pub jjodfdmfclb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnlnockohgl {
    #[prost(uint32, tag = "2")]
    pub abkejmfcddc: u32,
    #[prost(message, repeated, tag = "10")]
    pub faemamoaafd: ::prost::alloc::vec::Vec<Indphbnndkk>,
    #[prost(message, optional, tag = "8")]
    pub mhlbckdcboc: ::core::option::Option<Bighedamill>,
    #[prost(uint32, tag = "12")]
    pub hnekcaojdna: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Didgdcpgldg {
    #[prost(uint32, tag = "8")]
    pub oljdnhjipmi: u32,
    #[prost(uint32, tag = "13")]
    pub kecgeocbdej: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmfblagaoee {
    #[prost(uint32, tag = "2")]
    pub skill_level: u32,
    #[prost(uint32, tag = "12")]
    pub eecemipjjgh: u32,
    #[prost(uint32, tag = "14")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inleodpfkhb {
    #[prost(uint32, tag = "5")]
    pub bndmgiojoan: u32,
    #[prost(message, optional, tag = "4")]
    pub cffmojghjlm: ::core::option::Option<Didgdcpgldg>,
    #[prost(uint32, tag = "13")]
    pub efccjkghjdk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kimkoblkdfj {
    #[prost(uint32, tag = "1")]
    pub record_id: u32,
    #[prost(bool, tag = "8")]
    pub cdklekcjbej: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub bikcdadjijj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub efccjkghjdk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncendkfchkj {
    #[prost(uint32, repeated, tag = "3")]
    pub loogcpgbepe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub ncfahilolgj: u32,
    #[prost(uint32, tag = "11")]
    pub lhflcfnaopb: u32,
    #[prost(uint32, tag = "15")]
    pub khnkielhnpp: u32,
    #[prost(message, repeated, tag = "8")]
    pub pepagojdnho: ::prost::alloc::vec::Vec<Inleodpfkhb>,
    #[prost(message, repeated, tag = "12")]
    pub skill_list: ::prost::alloc::vec::Vec<Kmfblagaoee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Koolhimdcdf {
    #[prost(message, repeated, tag = "12")]
    pub cgojjljkbmb: ::prost::alloc::vec::Vec<Kimkoblkdfj>,
    #[prost(uint32, repeated, tag = "1")]
    pub bikcdadjijj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Peocnllhonm {
    #[prost(uint32, repeated, tag = "14")]
    pub loifbgpgbhj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub eobhghdnedo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub gdebgnkhjki: ::prost::alloc::vec::Vec<Adcggkapkfk>,
    #[prost(message, optional, tag = "3")]
    pub lhljhdglnoo: ::core::option::Option<Cnndholojdm>,
    #[prost(uint32, tag = "4")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "9")]
    pub progress: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ikmoiphhfob: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmedjikijmj {
    #[prost(uint32, tag = "11")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub loifbgpgbhj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjeakjmaome {
    #[prost(uint32, tag = "10")]
    pub meakdnhibgk: u32,
    #[prost(enumeration = "BuildGoalStep", tag = "1")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub kebekmgdjke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnndholojdm {
    #[prost(uint32, tag = "3")]
    pub mfajcodjpln: u32,
    #[prost(message, repeated, tag = "7")]
    pub ipkkeeekkpb: ::prost::alloc::vec::Vec<Cjeakjmaome>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adcggkapkfk {
    #[prost(uint32, tag = "14")]
    pub dice_slot_id: u32,
    #[prost(uint32, tag = "2")]
    pub kkdpmhfibkh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lceellafein {
    #[prost(uint32, tag = "14")]
    pub cdcnhleaale: u32,
    #[prost(message, repeated, tag = "12")]
    pub hnhclcbjaim: ::prost::alloc::vec::Vec<Peocnllhonm>,
    #[prost(uint32, tag = "6")]
    pub ljacopfiadn: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub jgjhodghejj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub pehehboafjf: u32,
    #[prost(uint32, tag = "13")]
    pub mpgchejlfeg: u32,
    #[prost(uint32, tag = "10")]
    pub apapipmoggc: u32,
    #[prost(uint32, tag = "7")]
    pub coin_cost: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub gafnmahjnbp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub eppofnbmoho: ::prost::alloc::vec::Vec<Pmedjikijmj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhiceehbbln {
    #[prost(message, optional, tag = "2")]
    pub pngjlpjhncg: ::core::option::Option<Koolhimdcdf>,
    #[prost(message, optional, tag = "3")]
    pub opcdbeojmhg: ::core::option::Option<Amnhlknigpj>,
    #[prost(uint32, tag = "6")]
    pub laghapikbid: u32,
    #[prost(message, optional, tag = "8")]
    pub fahiincjgoj: ::core::option::Option<Lceellafein>,
    #[prost(uint32, tag = "4")]
    pub cmgmgnomjfn: u32,
    #[prost(uint32, tag = "9")]
    pub record_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amnhlknigpj {
    #[prost(message, optional, tag = "14")]
    pub kbfnonokdlp: ::core::option::Option<Dokjkimmfhg>,
    #[prost(message, optional, tag = "13")]
    pub egpajjpkfhm: ::core::option::Option<Ncendkfchkj>,
    #[prost(uint32, tag = "12")]
    pub dahdhmfleff: u32,
    #[prost(message, optional, tag = "6")]
    pub mpecoobeokd: ::core::option::Option<Jgbjbdgohgp>,
    #[prost(message, optional, tag = "4")]
    pub mmogcpnhjhm: ::core::option::Option<Mnlnockohgl>,
}
/// BHNEOGOELBM (8036)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyGetDataCsReq {}
/// LJIMOCMNCCG (8095)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyGetDataScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub cjecleigjcc: ::core::option::Option<Fhiceehbbln>,
}
/// KBEDFCGDKLH (8084)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyUseCardCsReq {
    #[prost(uint32, tag = "14")]
    pub ocidfbobheh: u32,
}
/// EMJDPIBHOOI (8027)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyUseCardScRsp {
    #[prost(uint32, tag = "5")]
    pub ocidfbobheh: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// MMGLFEKLLME (8067)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyMoveScNotify {
    #[prost(message, repeated, tag = "2")]
    pub icgjklohjfa: ::prost::alloc::vec::Vec<Indphbnndkk>,
    #[prost(uint32, tag = "11")]
    pub fkajlmedhjn: u32,
}
/// NNOHGEPGGBN (8052)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartySettleNotify {
    #[prost(uint32, tag = "14")]
    pub ocidfbobheh: u32,
    #[prost(message, optional, tag = "9")]
    pub cbioemaopnc: ::core::option::Option<Ldpbkmpnjfg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldpbkmpnjfg {
    #[prost(message, repeated, tag = "8")]
    pub pepagojdnho: ::prost::alloc::vec::Vec<Inleodpfkhb>,
    #[prost(message, repeated, tag = "4")]
    pub klhommbkljl: ::prost::alloc::vec::Vec<Iaaopdnacnb>,
    #[prost(uint32, tag = "9")]
    pub dkihhamkahk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iaaopdnacnb {
    #[prost(uint32, tag = "7")]
    pub igjhooklmjl: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub switch_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojlmbeohioh {
    #[prost(message, optional, tag = "2")]
    pub pjhblimejof: ::core::option::Option<TrainPartyGameCard>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ejkpoppnaom {
    #[prost(uint32, tag = "11")]
    pub efccjkghjdk: u32,
    #[prost(message, optional, tag = "15")]
    pub cffmojghjlm: ::core::option::Option<Didgdcpgldg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckdhfnddeaf {
    #[prost(message, repeated, tag = "9")]
    pub lbldilmnghc: ::prost::alloc::vec::Vec<Ejkpoppnaom>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkbbohloghn {
    #[prost(message, optional, tag = "13")]
    pub lcfanolipij: ::core::option::Option<Jgbjbdgohgp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dpokfmoalke {
    #[prost(uint32, tag = "14")]
    pub lhflcfnaopb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fohpeolhhme {
    #[prost(message, optional, tag = "3")]
    pub njfjlpnocaf: ::core::option::Option<Kmfblagaoee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnbmammbkjj {
    #[prost(message, repeated, tag = "6")]
    pub skill_list: ::prost::alloc::vec::Vec<Kmfblagaoee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njopbmfeepj {
    #[prost(message, optional, tag = "1")]
    pub pgpkplgbgae: ::core::option::Option<Kimkoblkdfj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hombellngma {
    #[prost(uint32, repeated, tag = "6")]
    pub bikcdadjijj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfpcbhihdnn {
    #[prost(message, repeated, tag = "1")]
    pub faemamoaafd: ::prost::alloc::vec::Vec<Indphbnndkk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdhbaihfkbg {
    #[prost(message, optional, tag = "2")]
    pub mhlbckdcboc: ::core::option::Option<Bighedamill>,
    #[prost(message, optional, tag = "8")]
    pub jjnlkbfgicm: ::core::option::Option<Bnkefbkdjkp>,
    #[prost(uint32, tag = "5")]
    pub keblgellmed: u32,
    #[prost(bool, tag = "15")]
    pub nefolhonilj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lobblphfbea {
    #[prost(enumeration = "TrainPartySrc", tag = "2")]
    pub src: i32,
    #[prost(
        oneof = "lobblphfbea::Nkbfmhdhjgj",
        tags = "164, 463, 140, 1135, 784, 1913, 44, 1535, 492, 337"
    )]
    pub nkbfmhdhjgj: ::core::option::Option<lobblphfbea::Nkbfmhdhjgj>,
}
/// Nested message and enum types in `LOBBLPHFBEA`.
pub mod lobblphfbea {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Nkbfmhdhjgj {
        #[prost(message, tag = "164")]
        Jjnlkbfgicm(super::Bnkefbkdjkp),
        #[prost(message, tag = "463")]
        Ppoffaffbde(super::Ckdhfnddeaf),
        #[prost(message, tag = "140")]
        Mhpakbafjpb(super::Kkbbohloghn),
        #[prost(message, tag = "1135")]
        Kdmhkmkkpin(super::Dpokfmoalke),
        #[prost(message, tag = "784")]
        Johknhlbpop(super::Gfpcbhihdnn),
        #[prost(message, tag = "1913")]
        Ifiiodejcbh(super::Fohpeolhhme),
        #[prost(message, tag = "44")]
        Jkemhlopcao(super::Gdhbaihfkbg),
        #[prost(message, tag = "1535")]
        Ajoonnaehme(super::Fnbmammbkjj),
        #[prost(message, tag = "492")]
        Kokeloccepp(super::Njopbmfeepj),
        #[prost(message, tag = "337")]
        Jjfeabigbnc(super::Hombellngma),
    }
}
/// AMKAPEPMAON (8024)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartySyncUpdateScNotify {
    #[prost(message, repeated, tag = "9")]
    pub nkcomphijfi: ::prost::alloc::vec::Vec<Lobblphfbea>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgbjbdgohgp {
    #[prost(uint32, tag = "15")]
    pub fhopjnkmnpb: u32,
    #[prost(oneof = "jgbjbdgohgp::Nihajmjhijd", tags = "674, 41, 140, 124")]
    pub nihajmjhijd: ::core::option::Option<jgbjbdgohgp::Nihajmjhijd>,
}
/// Nested message and enum types in `JGBJBDGOHGP`.
pub mod jgbjbdgohgp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Nihajmjhijd {
        #[prost(message, tag = "674")]
        Iipmkidinnd(super::Aeglhhppmlf),
        #[prost(message, tag = "41")]
        Acdnknbflin(super::Nnnibnpeejn),
        #[prost(message, tag = "140")]
        Jomngpjkokj(super::Iioiomaioag),
        #[prost(message, tag = "124")]
        Ikgajbjejma(super::Mnffjhfpkpj),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elbhmfkpeem {
    #[prost(uint32, tag = "8")]
    pub cjbdahmahkn: u32,
    #[prost(bool, tag = "11")]
    pub confirm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeglhhppmlf {
    #[prost(uint32, tag = "4")]
    pub event_id: u32,
    #[prost(enumeration = "TrainPartyEventType", tag = "3")]
    pub agkecjommdh: i32,
    #[prost(message, repeated, tag = "9")]
    pub mchonaccdme: ::prost::alloc::vec::Vec<Elbhmfkpeem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Laeakbcbkii {
    #[prost(uint32, tag = "1")]
    pub cjbdahmahkn: u32,
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpfafnfpjdk {
    #[prost(message, optional, tag = "11")]
    pub cbioemaopnc: ::core::option::Option<Ldpbkmpnjfg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gaefmfjlhol {
    #[prost(uint32, tag = "5")]
    pub eecemipjjgh: u32,
    #[prost(uint32, tag = "14")]
    pub skill_id: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnnibnpeejn {
    #[prost(uint32, tag = "7")]
    pub efccjkghjdk: u32,
    #[prost(message, repeated, tag = "15")]
    pub dkcofennlhm: ::prost::alloc::vec::Vec<Gaefmfjlhol>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnffjhfpkpj {
    #[prost(message, repeated, tag = "5")]
    pub jehopbnjppl: ::prost::alloc::vec::Vec<Kmfblagaoee>,
    #[prost(uint32, tag = "7")]
    pub loiamejhcil: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikhpgfpbckk {
    #[prost(uint32, tag = "9")]
    pub jcekehmdfbh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akfeeljjoci {
    #[prost(message, repeated, tag = "6")]
    pub skill_list: ::prost::alloc::vec::Vec<Kmfblagaoee>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aklflfoplfk {
    #[prost(uint32, tag = "14")]
    pub kecgeocbdej: u32,
    #[prost(uint32, tag = "5")]
    pub efccjkghjdk: u32,
    #[prost(uint32, tag = "10")]
    pub unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddoloahpego {
    #[prost(uint32, tag = "10")]
    pub efccjkghjdk: u32,
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iioiomaioag {
    #[prost(message, repeated, tag = "2")]
    pub hgmdjhlbigo: ::prost::alloc::vec::Vec<Aklflfoplfk>,
    #[prost(uint32, tag = "12")]
    pub hiadgilpoam: u32,
    #[prost(message, repeated, tag = "7")]
    pub eobjcdfpeao: ::prost::alloc::vec::Vec<Ddoloahpego>,
    #[prost(message, repeated, tag = "4")]
    pub alaebjjigpi: ::prost::alloc::vec::Vec<Ckfckacnhbl>,
    #[prost(uint32, tag = "5")]
    pub ebnfoelmjml: u32,
    #[prost(uint32, tag = "9")]
    pub enflaimgban: u32,
    #[prost(uint32, tag = "1")]
    pub mjfkfeicala: u32,
    #[prost(uint32, tag = "15")]
    pub aaijabgnada: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlaySkillBrief {
    #[prost(uint32, tag = "13")]
    pub skill_param: u32,
    #[prost(enumeration = "TrainPartyMtSkillBriefType", tag = "3")]
    pub skill_type: i32,
    #[prost(uint32, tag = "10")]
    pub skill_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayCardBrief {
    #[prost(uint32, tag = "12")]
    pub base_value: u32,
    #[prost(message, repeated, tag = "7")]
    pub skill_brief_list: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(uint32, tag = "15")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pihepmkcgci {
    #[prost(uint32, repeated, tag = "11")]
    pub gkhfknjfkpg: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub cggmdohbeea: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub cogpehincha: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amkgbljkfkc {
    #[prost(uint32, repeated, tag = "12")]
    pub kdmdmeofpfo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcohphfohae {
    #[prost(uint32, tag = "1")]
    pub mjfkfeicala: u32,
    #[prost(message, optional, tag = "8")]
    pub mhlbckdcboc: ::core::option::Option<Bighedamill>,
    #[prost(uint32, tag = "7")]
    pub score_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub hdmldohacdj: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(uint32, tag = "5")]
    pub aaijabgnada: u32,
    #[prost(message, optional, tag = "11")]
    pub ajlgifphccb: ::core::option::Option<Pihepmkcgci>,
    #[prost(message, repeated, tag = "10")]
    pub eobjcdfpeao: ::prost::alloc::vec::Vec<Ddoloahpego>,
    #[prost(message, repeated, tag = "12")]
    pub hgmdjhlbigo: ::prost::alloc::vec::Vec<Aklflfoplfk>,
    #[prost(message, repeated, tag = "14")]
    pub figiabjfgcm: ::prost::alloc::vec::Vec<PlayCardBrief>,
    #[prost(enumeration = "Omnikcccopn", tag = "6")]
    pub ioohligkajc: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foocfodnfhf {
    #[prost(uint32, repeated, tag = "1")]
    pub kdmdmeofpfo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngbcajhpigk {
    #[prost(message, repeated, tag = "11")]
    pub hgmdjhlbigo: ::prost::alloc::vec::Vec<Aklflfoplfk>,
    #[prost(uint32, tag = "1")]
    pub hiadgilpoam: u32,
    #[prost(message, repeated, tag = "10")]
    pub eobjcdfpeao: ::prost::alloc::vec::Vec<Ddoloahpego>,
    #[prost(message, repeated, tag = "12")]
    pub kleimkmaomd: ::prost::alloc::vec::Vec<PlaySkillBrief>,
}
/// NINFKCDLDMD (8034)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyHandlePendingActionCsReq {
    #[prost(uint32, tag = "4")]
    pub fhopjnkmnpb: u32,
    #[prost(
        oneof = "train_party_handle_pending_action_cs_req::Ddpcpdkgmfm",
        tags = "1025, 395, 272, 289"
    )]
    pub ddpcpdkgmfm: ::core::option::Option<
        train_party_handle_pending_action_cs_req::Ddpcpdkgmfm,
    >,
}
/// Nested message and enum types in `TrainPartyHandlePendingActionCsReq`.
pub mod train_party_handle_pending_action_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ddpcpdkgmfm {
        #[prost(message, tag = "1025")]
        Iipmkidinnd(super::Laeakbcbkii),
        #[prost(message, tag = "395")]
        Ikgajbjejma(super::Ikhpgfpbckk),
        #[prost(message, tag = "272")]
        Ljemhhcekoj(super::Amkgbljkfkc),
        #[prost(message, tag = "289")]
        Kdmemgmahcg(super::Foocfodnfhf),
    }
}
/// GNJLOLNHBCE (8043)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyHandlePendingActionScRsp {
    #[prost(uint32, tag = "3")]
    pub fhopjnkmnpb: u32,
    #[prost(bool, tag = "6")]
    pub kldkoblfaac: bool,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub cbioemaopnc: ::core::option::Option<Ldpbkmpnjfg>,
    #[prost(
        oneof = "train_party_handle_pending_action_sc_rsp::Ddpcpdkgmfm",
        tags = "158, 1236, 1980, 337"
    )]
    pub ddpcpdkgmfm: ::core::option::Option<
        train_party_handle_pending_action_sc_rsp::Ddpcpdkgmfm,
    >,
}
/// Nested message and enum types in `TrainPartyHandlePendingActionScRsp`.
pub mod train_party_handle_pending_action_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ddpcpdkgmfm {
        #[prost(message, tag = "158")]
        Pppbldkjhbg(super::Fpfafnfpjdk),
        #[prost(message, tag = "1236")]
        Mpgfegdiddc(super::Akfeeljjoci),
        #[prost(message, tag = "1980")]
        Nnamfmipnkn(super::Hcohphfohae),
        #[prost(message, tag = "337")]
        Dhmjfkppogi(super::Ngbcajhpigk),
    }
}
/// KJEJDILFIOD (8046)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyBuildStartStepCsReq {
    #[prost(uint32, tag = "6")]
    pub meakdnhibgk: u32,
    #[prost(uint32, tag = "10")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "9")]
    pub mfajcodjpln: u32,
    #[prost(message, optional, tag = "5")]
    pub pcpigbnbioe: ::core::option::Option<Adcggkapkfk>,
}
/// FCIDPDDMMJH (8025)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyBuildStartStepScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub coin_cost: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aemklegnhia {
    #[prost(message, optional, tag = "3")]
    pub lebokoapooa: ::core::option::Option<Adcggkapkfk>,
    #[prost(uint32, tag = "6")]
    pub kjkpmffamfk: u32,
}
/// AIMIGBGNENB (8096)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyBuildDiyCsReq {
    #[prost(uint32, tag = "15")]
    pub kkdpmhfibkh: u32,
    #[prost(uint32, tag = "14")]
    pub dice_slot_id: u32,
    #[prost(bool, tag = "7")]
    pub plgibhocdgp: bool,
    #[prost(uint32, tag = "3")]
    pub kjkpmffamfk: u32,
}
/// NLPHJLGAKEI (8005)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyBuildDiyScRsp {
    #[prost(message, repeated, tag = "3")]
    pub nkcomphijfi: ::prost::alloc::vec::Vec<Aemklegnhia>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub kjkpmffamfk: u32,
    #[prost(bool, tag = "12")]
    pub plgibhocdgp: bool,
    #[prost(message, repeated, tag = "1")]
    pub gdebgnkhjki: ::prost::alloc::vec::Vec<Adcggkapkfk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oceplkhbnhd {
    #[prost(uint32, tag = "13")]
    pub ppcebbcdnaf: u32,
    #[prost(message, repeated, tag = "10")]
    pub nbggjlaakjh: ::prost::alloc::vec::Vec<Cjeakjmaome>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anonohddpld {
    #[prost(uint32, tag = "6")]
    pub progress: u32,
    #[prost(message, repeated, tag = "12")]
    pub nbggjlaakjh: ::prost::alloc::vec::Vec<Cjeakjmaome>,
    #[prost(uint32, tag = "7")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "5")]
    pub mfajcodjpln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfolmdabico {
    #[prost(uint32, tag = "9")]
    pub apapipmoggc: u32,
    #[prost(uint32, tag = "6")]
    pub cdcnhleaale: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flaomfjkdeg {
    #[prost(uint32, tag = "1")]
    pub jdphjegldja: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mpdpcaminof {
    #[prost(uint32, tag = "4")]
    pub ljacopfiadn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gipaloppjhg {
    #[prost(uint32, tag = "2")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, tag = "13")]
    pub ljnaihgebjl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omkekleijfh {
    #[prost(uint32, tag = "15")]
    pub kkdpmhfibkh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Djcibglgpcn {
    #[prost(uint32, tag = "12")]
    pub fmojnnohhkn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhigenbgibd {
    #[prost(uint32, tag = "10")]
    pub pehehboafjf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edchlfmblfe {
    #[prost(uint32, tag = "13")]
    pub kjkpmffamfk: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub nbggjlaakjh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmllcmphmkh {
    #[prost(message, repeated, tag = "13")]
    pub hnhclcbjaim: ::prost::alloc::vec::Vec<Edchlfmblfe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdmpmjnjbnh {
    #[prost(
        oneof = "cdmpmjnjbnh::Nkbfmhdhjgj",
        tags = "1262, 286, 1181, 1738, 1315, 562, 1484, 202, 245, 450"
    )]
    pub nkbfmhdhjgj: ::core::option::Option<cdmpmjnjbnh::Nkbfmhdhjgj>,
}
/// Nested message and enum types in `CDMPMJNJBNH`.
pub mod cdmpmjnjbnh {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Nkbfmhdhjgj {
        #[prost(message, tag = "1262")]
        Iknkgfjihbc(super::Djcibglgpcn),
        #[prost(message, tag = "286")]
        Djljgppllli(super::Oceplkhbnhd),
        #[prost(message, tag = "1181")]
        Elaonlmkmlg(super::Anonohddpld),
        #[prost(message, tag = "1738")]
        Bmjhndkcajd(super::Mfolmdabico),
        #[prost(message, tag = "1315")]
        Dndaljailfa(super::Flaomfjkdeg),
        #[prost(message, tag = "562")]
        Mpelidefnae(super::Gipaloppjhg),
        #[prost(message, tag = "1484")]
        Icjmljeidie(super::Omkekleijfh),
        #[prost(message, tag = "202")]
        Hpapojmfokh(super::Mpdpcaminof),
        #[prost(message, tag = "245")]
        Ajeklkmmech(super::Nhigenbgibd),
        #[prost(message, tag = "450")]
        Hnilffkmkmi(super::Fmllcmphmkh),
    }
}
/// DDFONIAPODA (8075)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyBuildingUpdateNotify {
    #[prost(message, repeated, tag = "1")]
    pub blipifcpicd: ::prost::alloc::vec::Vec<Cdmpmjnjbnh>,
}
/// MNAEMHIABLK (8026)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyEnterCsReq {}
/// FOKCEDIKPNC (8007)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyEnterScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// CODAAPFPJAH (8053)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyLeaveCsReq {}
/// ODGFBKOEAJO (8090)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyLeaveScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckfckacnhbl {
    #[prost(enumeration = "Omnikcccopn", tag = "1")]
    pub lgmepmnlnfj: i32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
}
/// BJBFKJBDBPN (8088)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyGamePlaySettleNotify {
    #[prost(uint32, tag = "5")]
    pub cmgmgnomjfn: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub mmabifchjng: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub record_id: u32,
    #[prost(message, optional, tag = "14")]
    pub nlmmbgkbkje: ::core::option::Option<Koolhimdcdf>,
}
/// FCHDKADEDBO (8050)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyGamePlayStartCsReq {
    #[prost(uint32, repeated, tag = "5")]
    pub pepagojdnho: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub dahdhmfleff: u32,
}
/// LBIIDAECJBN (8048)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyGamePlayStartScRsp {
    #[prost(message, optional, tag = "11")]
    pub amaenphggfb: ::core::option::Option<Amnhlknigpj>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
/// ODNCAJANLLL (8017)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyAddBuildDynamicBuffCsReq {}
/// CFOGLGJHNFC (8013)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyAddBuildDynamicBuffScRsp {
    #[prost(uint32, tag = "8")]
    pub buff_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// MFKCEIMPGDE (8035)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainPartyTakeBuildLevelAwardCsReq {
    #[prost(uint32, tag = "3")]
    pub epeiiaggffm: u32,
}
/// GBAKAKEHOJI (8073)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainPartyTakeBuildLevelAwardScRsp {
    #[prost(message, optional, tag = "13")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub epeiiaggffm: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cimiiieieip {
    #[prost(bool, tag = "13")]
    pub is_meet: bool,
    #[prost(uint32, tag = "5")]
    pub dmmelmgmhlo: u32,
}
/// GAMGPNEKAPD (3736)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainVisitorBehaviorFinishCsReq {
    #[prost(uint32, tag = "13")]
    pub dmmelmgmhlo: u32,
}
/// CCDCBMGMIGL (3795)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainVisitorBehaviorFinishScRsp {
    #[prost(uint32, tag = "7")]
    pub dmmelmgmhlo: u32,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
/// GPKBPNFFHNG (3784)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrainVisitorBehaviorCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub dlohaigoigm: ::prost::alloc::vec::Vec<u32>,
}
/// GDNMCCLFBKI (3727)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrainVisitorBehaviorScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub ilegicnajel: ::prost::alloc::vec::Vec<Cimiiieieip>,
}
/// DANODNEECOA (3767)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrainRefreshTimeNotify {
    #[prost(uint64, tag = "4")]
    pub cbbpildpejn: u64,
}
/// NMOOFHBNJOG (3728)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrainVisitorRewardSendNotify {
    #[prost(uint32, tag = "10")]
    pub dmmelmgmhlo: u32,
    #[prost(enumeration = "Cjmpojoijcb", tag = "5")]
    pub r#type: i32,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbkjddfhpah {
    #[prost(uint32, repeated, tag = "11")]
    pub hhhlohfnnhg: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Ojgolpcjijb", tag = "1")]
    pub status: i32,
    #[prost(uint32, tag = "12")]
    pub olopddjgafc: u32,
    #[prost(uint32, tag = "6")]
    pub dmmelmgmhlo: u32,
    #[prost(bool, tag = "5")]
    pub gpkiekapdgb: bool,
}
/// OBICLPABBAD (3752)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrainVisitorRegisterCsReq {
    #[prost(enumeration = "Ipagopieejp", tag = "2")]
    pub r#type: i32,
}
/// DGKMBCCKMGM (3774)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrainVisitorRegisterScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub cckinklhgfd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub cfpndniofda: ::prost::alloc::vec::Vec<Bbkjddfhpah>,
}
/// OFHNIJAJPMA (3724)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTrainVisitorUntakenBehaviorRewardCsReq {
    #[prost(uint32, tag = "12")]
    pub dmmelmgmhlo: u32,
}
/// KFLLMHOCAKD (3793)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTrainVisitorUntakenBehaviorRewardScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub hhhlohfnnhg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub dmmelmgmhlo: u32,
}
/// AIIDMHHAPEJ (3734)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowNewSupplementVisitorCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub cckinklhgfd: ::prost::alloc::vec::Vec<u32>,
}
/// FLDICEICCFA (3743)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShowNewSupplementVisitorScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdcjhapadan {
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
    #[prost(uint64, tag = "11")]
    pub unique_id: u64,
    #[prost(uint32, tag = "13")]
    pub kmdnpchkgkn: u32,
    #[prost(int32, tag = "14")]
    pub hjikkgeejbi: i32,
    #[prost(int32, tag = "10")]
    pub ebjjbbamkdp: i32,
    #[prost(uint32, tag = "6")]
    pub gcfehgmgodk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcennalfcco {
    #[prost(message, repeated, tag = "7")]
    pub fbhfcalgglj: ::prost::alloc::vec::Vec<Fdcjhapadan>,
    #[prost(uint32, tag = "15")]
    pub cjaebolpifp: u32,
    #[prost(enumeration = "Lhcnbphnphc", tag = "11")]
    pub lpeckgniodi: i32,
    #[prost(enumeration = "Dideiodaemb", tag = "1")]
    pub hjhapennfhe: i32,
    #[prost(uint32, tag = "8")]
    pub bdoenbifbcb: u32,
}
/// JMHLFMGEMBH (6436)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureGetDataCsReq {}
/// OFBELFEEBKK (6495)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureGetDataScRsp {
    #[prost(map = "uint32, uint32", tag = "7")]
    pub podbfamohgc: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "1")]
    pub custom_value: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(map = "uint32, message", tag = "15")]
    pub fjlnjjgdhlk: ::std::collections::HashMap<u32, Bcennalfcco>,
}
/// MABGEHIPBPK (6484)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochurePageUnlockScNotify {
    #[prost(uint32, tag = "9")]
    pub cjaebolpifp: u32,
}
/// MBMMBJPMAPG (6467)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureSelectMessageCsReq {
    #[prost(uint32, tag = "8")]
    pub bdoenbifbcb: u32,
    #[prost(uint32, tag = "15")]
    pub cjaebolpifp: u32,
}
/// KHCAPKMGKLH (6428)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureSelectMessageScRsp {
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub gccfcjikolm: ::core::option::Option<Bcennalfcco>,
}
/// ENPLKMGDCHP (6452)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureApplyPasterCsReq {
    #[prost(uint32, tag = "10")]
    pub cjaebolpifp: u32,
    #[prost(uint32, tag = "4")]
    pub kmdnpchkgkn: u32,
    #[prost(int32, tag = "8")]
    pub hjikkgeejbi: i32,
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "11")]
    pub gcfehgmgodk: u32,
    #[prost(int32, tag = "12")]
    pub ebjjbbamkdp: i32,
}
/// HOOPBPGHOGA (6474)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureApplyPasterScRsp {
    #[prost(message, optional, tag = "4")]
    pub gccfcjikolm: ::core::option::Option<Bcennalfcco>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// DAFCBEHLGHE (6424)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureRemovePasterCsReq {
    #[prost(uint64, tag = "9")]
    pub unique_id: u64,
    #[prost(uint32, tag = "7")]
    pub cjaebolpifp: u32,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
}
/// BPJDDAHFJPF (6493)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureRemovePasterScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub gccfcjikolm: ::core::option::Option<Bcennalfcco>,
}
/// BACMJANLKJO (6434)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureUpdatePasterPosCsReq {
    #[prost(uint32, tag = "7")]
    pub cjaebolpifp: u32,
    #[prost(uint32, tag = "13")]
    pub item_id: u32,
    #[prost(int32, tag = "5")]
    pub ebjjbbamkdp: i32,
    #[prost(int32, tag = "1")]
    pub hjikkgeejbi: i32,
    #[prost(uint32, tag = "8")]
    pub kmdnpchkgkn: u32,
    #[prost(uint32, tag = "11")]
    pub gcfehgmgodk: u32,
    #[prost(uint64, tag = "10")]
    pub unique_id: u64,
}
/// GMNIPMBOJOF (6443)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureUpdatePasterPosScRsp {
    #[prost(message, optional, tag = "5")]
    pub gccfcjikolm: ::core::option::Option<Bcennalfcco>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// HLCAKCANCGF (6446)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureGetPasterScNotify {
    #[prost(uint32, tag = "5")]
    pub cagplapdgbi: u32,
    #[prost(uint32, tag = "2")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ohelkhbejkd {
    #[prost(uint32, tag = "5")]
    pub cagplapdgbi: u32,
    #[prost(uint32, tag = "15")]
    pub num: u32,
}
/// FNGGDHHOMDG (6496)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureSetCustomValueCsReq {
    #[prost(uint32, tag = "11")]
    pub value: u32,
}
/// GNHDKMHPPAB (6405)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureSetCustomValueScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// NJJKECDFBKH (6475)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureSetPageDescStatusCsReq {
    #[prost(uint32, tag = "9")]
    pub cjaebolpifp: u32,
    #[prost(enumeration = "Dideiodaemb", tag = "10")]
    pub dmeampcilln: i32,
}
/// LHBCMJEPCEF (6419)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochureSetPageDescStatusScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// CNFJFJPIPOJ (6426)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TravelBrochurePageResetCsReq {
    #[prost(uint32, tag = "9")]
    pub cjaebolpifp: u32,
}
/// BGFMFMMCDJJ (6407)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochurePageResetScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub gccfcjikolm: ::core::option::Option<Bcennalfcco>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obghklanogb {
    #[prost(int32, tag = "14")]
    pub ebjjbbamkdp: i32,
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "7")]
    pub gcfehgmgodk: u32,
    #[prost(int32, tag = "13")]
    pub hjikkgeejbi: i32,
    #[prost(uint32, tag = "3")]
    pub kmdnpchkgkn: u32,
}
/// IANBCHFEGIC (6453)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureApplyPasterListCsReq {
    #[prost(message, repeated, tag = "13")]
    pub migfdmjpihi: ::prost::alloc::vec::Vec<Obghklanogb>,
    #[prost(uint32, tag = "5")]
    pub cjaebolpifp: u32,
}
/// GNNNCEMHPAJ (6490)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TravelBrochureApplyPasterListScRsp {
    #[prost(message, optional, tag = "5")]
    pub gccfcjikolm: ::core::option::Option<Bcennalfcco>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreasureDungeonRecordData {
    #[prost(uint32, tag = "8")]
    pub target_grid_id: u32,
    #[prost(uint32, tag = "13")]
    pub source_grid_id: u32,
    #[prost(uint32, tag = "14")]
    pub param1: u32,
    #[prost(uint32, tag = "15")]
    pub param2: u32,
    #[prost(enumeration = "Mggemnjkhcf", tag = "6")]
    pub r#type: i32,
}
/// CNHOAHKEIHD (4436)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TreasureDungeonDataScNotify {
    #[prost(message, optional, tag = "4")]
    pub jbhmijinepf: ::core::option::Option<Gopdmkglfgo>,
}
/// AGOGLIBAEFC (4495)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TreasureDungeonFinishScNotify {
    #[prost(uint32, tag = "6")]
    pub odkmailjhkd: u32,
    #[prost(uint32, tag = "1")]
    pub ecgklkhkfab: u32,
    #[prost(bool, tag = "15")]
    pub is_win: bool,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub mjhfmknegfd: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "2")]
    pub nokmnnbknjb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "5")]
    pub dleejgfablc: u32,
    #[prost(uint32, tag = "11")]
    pub cgecjipkocd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gopdmkglfgo {
    #[prost(message, repeated, tag = "615")]
    pub avatar_list: ::prost::alloc::vec::Vec<Edblncmjohj>,
    #[prost(uint32, tag = "14")]
    pub odkmailjhkd: u32,
    #[prost(message, repeated, tag = "1087")]
    pub kjllppciceo: ::prost::alloc::vec::Vec<Edblncmjohj>,
    #[prost(uint32, tag = "12")]
    pub map_id: u32,
    #[prost(uint32, tag = "10")]
    pub dleejgfablc: u32,
    #[prost(message, repeated, tag = "825")]
    pub item_list: ::prost::alloc::vec::Vec<Elcmmoppijc>,
    #[prost(uint32, tag = "7")]
    pub bdjnieloecj: u32,
    #[prost(uint32, tag = "1750")]
    pub lampjfohjda: u32,
    #[prost(bool, tag = "368")]
    pub ogeodoiggjg: bool,
    #[prost(message, repeated, tag = "3")]
    pub iihoaofhkoc: ::prost::alloc::vec::Vec<TreasureDungeonRecordData>,
    #[prost(bool, tag = "341")]
    pub oamfcjmmpei: bool,
    #[prost(message, repeated, tag = "191")]
    pub lkcamblneca: ::prost::alloc::vec::Vec<Dfnapnfoiif>,
    #[prost(message, repeated, tag = "347")]
    pub buff_list: ::prost::alloc::vec::Vec<Hhflehngigb>,
    #[prost(uint32, tag = "5")]
    pub ppenlimjkoe: u32,
    #[prost(uint32, tag = "6")]
    pub dmfkegchddn: u32,
    #[prost(message, repeated, tag = "2")]
    pub faemamoaafd: ::prost::alloc::vec::Vec<Jiafngibbgh>,
    #[prost(bool, tag = "1240")]
    pub bacilfnangb: bool,
    #[prost(uint32, tag = "8")]
    pub hlajenagdde: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elcmmoppijc {
    #[prost(uint32, tag = "11")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub item_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edblncmjohj {
    #[prost(message, optional, tag = "2")]
    pub sp_bar: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "15")]
    pub avatar_type: u32,
    #[prost(uint32, tag = "11")]
    pub hp: u32,
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "9")]
    pub icnfamafenl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfnapnfoiif {
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "3")]
    pub avatar_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhflehngigb {
    #[prost(uint32, tag = "8")]
    pub buff_id: u32,
    #[prost(uint32, tag = "9")]
    pub gebopcgdajm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiafngibbgh {
    #[prost(uint32, tag = "12")]
    pub ilofimodien: u32,
    #[prost(bool, tag = "4")]
    pub khknacfljnf: bool,
    #[prost(uint32, tag = "9")]
    pub magemnhpnen: u32,
    #[prost(bool, tag = "2")]
    pub ddeimmkhmna: bool,
    #[prost(bool, tag = "11")]
    pub epdalegaefp: bool,
    #[prost(message, repeated, tag = "1615")]
    pub buff_list: ::prost::alloc::vec::Vec<Dnekjkacnjm>,
    #[prost(bool, tag = "5")]
    pub idgfpjaiblj: bool,
    #[prost(uint32, tag = "8")]
    pub obhilfaeclk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dnekjkacnjm {
    #[prost(uint32, tag = "4")]
    pub jnmigpelkib: u32,
    #[prost(uint32, tag = "5")]
    pub pmhpllpnoec: u32,
    #[prost(uint32, tag = "7")]
    pub ilofimodien: u32,
    #[prost(uint32, tag = "1")]
    pub pfoajgeplhe: u32,
    #[prost(uint32, tag = "14")]
    pub buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcgbkiabpln {
    #[prost(bool, tag = "1")]
    pub ploeejcpknj: bool,
    #[prost(bool, tag = "2")]
    pub belfjpefdnn: bool,
    #[prost(uint32, tag = "14")]
    pub hhcfffkpnbi: u32,
    #[prost(uint32, tag = "10")]
    pub dleejgfablc: u32,
    #[prost(uint32, tag = "8")]
    pub ppenlimjkoe: u32,
    #[prost(uint32, tag = "15")]
    pub dmfkegchddn: u32,
    #[prost(uint32, tag = "9")]
    pub odkmailjhkd: u32,
}
/// PHLNHEFIKNI (4434)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTreasureDungeonActivityDataCsReq {}
/// ADJKAOPOOFA (4443)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTreasureDungeonActivityDataScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub bfmlghfigim: ::prost::alloc::vec::Vec<Lcgbkiabpln>,
}
/// GKAGCMDOPGE (4446)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTreasureDungeonCsReq {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Hceaihghbpm>,
    #[prost(uint32, tag = "6")]
    pub dleejgfablc: u32,
}
/// GPNCBHKPELD (4425)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTreasureDungeonScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub jbhmijinepf: ::core::option::Option<Gopdmkglfgo>,
}
/// EDOLBCECJMJ (4496)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenTreasureDungeonGridCsReq {
    #[prost(uint32, tag = "8")]
    pub ilofimodien: u32,
    #[prost(uint32, tag = "7")]
    pub dleejgfablc: u32,
}
/// DCCPOJAPPLI (4405)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenTreasureDungeonGridScRsp {
    #[prost(message, optional, tag = "4")]
    pub jbhmijinepf: ::core::option::Option<Gopdmkglfgo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// ELCLENCCCLL (4426)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractTreasureDungeonGridCsReq {
    #[prost(uint32, tag = "14")]
    pub dleejgfablc: u32,
    #[prost(uint32, tag = "6")]
    pub cgnkhekhiml: u32,
    #[prost(uint32, tag = "4")]
    pub ilofimodien: u32,
}
/// FHFJPHALNFA (4407)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InteractTreasureDungeonGridScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub jbhmijinepf: ::core::option::Option<Gopdmkglfgo>,
}
/// JPOGMNIIHIF (4453)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseTreasureDungeonItemCsReq {
    #[prost(uint32, tag = "9")]
    pub ilofimodien: u32,
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
    #[prost(uint32, tag = "4")]
    pub dleejgfablc: u32,
}
/// GMFLAALEILB (4490)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseTreasureDungeonItemScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub jbhmijinepf: ::core::option::Option<Gopdmkglfgo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hceaihghbpm {
    #[prost(enumeration = "AvatarType", tag = "9")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
}
/// HEONGNIIKAH (4475)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightTreasureDungeonMonsterCsReq {
    #[prost(uint32, tag = "12")]
    pub dleejgfablc: u32,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<Hceaihghbpm>,
    #[prost(uint32, tag = "2")]
    pub ilofimodien: u32,
}
/// NBEFDNCBDHA (4419)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightTreasureDungeonMonsterScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
/// BKBJHBKMAEH (4459)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitTreasureDungeonCsReq {
    #[prost(bool, tag = "5")]
    pub lnfbmlncehm: bool,
    #[prost(uint32, tag = "13")]
    pub dleejgfablc: u32,
}
/// LMKDMEPMAOC (4412)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitTreasureDungeonScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Tutorial {
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(enumeration = "TutorialStatus", tag = "7")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TutorialGuide {
    #[prost(enumeration = "TutorialStatus", tag = "2")]
    pub status: i32,
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
/// JHPFFKOGIGO (1636)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTutorialCsReq {}
/// GetTutorialScRsp (1695)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialScRsp {
    #[prost(message, repeated, tag = "14")]
    pub tutorial_list: ::prost::alloc::vec::Vec<Tutorial>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// ILNJFFIBNFN (1684)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideCsReq {}
/// GetTutorialGuideScRsp (1627)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub tutorial_guide_list: ::prost::alloc::vec::Vec<TutorialGuide>,
}
/// OAHMDPENDEP (1667)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialCsReq {
    #[prost(uint32, tag = "13")]
    pub plpmnflkebo: u32,
}
/// UnlockTutorialScRsp (1628)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialScRsp {
    #[prost(message, optional, tag = "4")]
    pub tutorial: ::core::option::Option<Tutorial>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
/// NAFBLABNLBM (1652)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideCsReq {
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
}
/// UnlockTutorialGuideScRsp (1674)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
}
/// CJLPOHDDAKE (1624)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialCsReq {
    #[prost(uint32, tag = "2")]
    pub plpmnflkebo: u32,
}
/// FinishTutorialScRsp (1693)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialScRsp {
    #[prost(message, optional, tag = "3")]
    pub tutorial: ::core::option::Option<Tutorial>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
/// EPKNHKHIBLP (1634)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialGuideCsReq {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
}
/// FinishTutorialGuideScRsp (1643)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTutorialGuideScRsp {
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "10")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Waypoint {
    #[prost(bool, tag = "15")]
    pub is_new: bool,
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub doocpdbnkmb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejhefdnaiei {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(bool, tag = "8")]
    pub is_new: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub oknnlacihpf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub ecdphnnohpm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhlngjihmac {
    #[prost(message, repeated, tag = "15")]
    pub khddfjjiiap: ::prost::alloc::vec::Vec<Waypoint>,
    #[prost(message, optional, tag = "8")]
    pub lpgfoplikih: ::core::option::Option<Ejhefdnaiei>,
}
/// PPKCMGHNHLE (436)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetWaypointCsReq {
    #[prost(uint32, tag = "12")]
    pub ambcbclhihj: u32,
}
/// NOIMALKNDBF (495)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWaypointScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub ankdjjldeii: ::core::option::Option<Nhlngjihmac>,
    #[prost(uint32, tag = "1")]
    pub pjgihhnckdp: u32,
}
/// MKJFCBHKIDH (484)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurWaypointCsReq {
    #[prost(uint32, tag = "12")]
    pub kmaagdfakni: u32,
}
/// MLMKPIFIFIB (427)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurWaypointScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub pjgihhnckdp: u32,
}
/// DLCNPIDIJIJ (467)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChapterCsReq {}
/// GAJIFNLKOMF (428)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChapterScRsp {
    #[prost(uint32, tag = "11")]
    pub pjgihhnckdp: u32,
    #[prost(message, repeated, tag = "3")]
    pub hebbmdiflfk: ::prost::alloc::vec::Vec<Ejhefdnaiei>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
/// IAOEJJICILB (452)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaypointShowNewCsNotify {
    #[prost(uint32, tag = "12")]
    pub ambcbclhihj: u32,
    #[prost(uint32, tag = "1")]
    pub kmaagdfakni: u32,
}
/// FIIFELEACEL (474)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeChapterRewardCsReq {
    #[prost(uint32, tag = "9")]
    pub ambcbclhihj: u32,
    #[prost(uint32, tag = "6")]
    pub imkigfmnnmd: u32,
}
/// BEBMIBPNJDN (424)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeChapterRewardScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub imkigfmnnmd: u32,
    #[prost(uint32, tag = "12")]
    pub ambcbclhihj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jakjiddbfdo {
    #[prost(message, repeated, tag = "10")]
    pub ehopedafjmm: ::prost::alloc::vec::Vec<Vector>,
    #[prost(bool, tag = "1")]
    pub ooibegpcfbm: bool,
    #[prost(message, optional, tag = "2")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "15")]
    pub ifmaeikdhie: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aioabiigfko {
    #[prost(message, repeated, tag = "13")]
    pub ehopedafjmm: ::prost::alloc::vec::Vec<Vector>,
    #[prost(string, tag = "6")]
    pub dnmmbglnjei: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(message, optional, tag = "4")]
    pub nphibjehjam: ::core::option::Option<Jakjiddbfdo>,
    #[prost(bool, tag = "15")]
    pub ooibegpcfbm: bool,
    #[prost(uint32, tag = "11")]
    pub ifmaeikdhie: u32,
}
/// ACJLPNNNBKK (6512)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartWolfBroGameCsReq {
    #[prost(message, optional, tag = "3")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(bool, tag = "15")]
    pub fcggbomjjoa: bool,
    #[prost(message, optional, tag = "5")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
    #[prost(uint32, tag = "10")]
    pub id: u32,
}
/// BBGBCFHOOCK (6550)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartWolfBroGameScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
}
/// MEBEFPGLCDE (6530)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ArchiveWolfBroGameCsReq {
    #[prost(uint32, tag = "7")]
    pub id: u32,
    #[prost(message, optional, tag = "12")]
    pub motion: ::core::option::Option<MotionInfo>,
}
/// EGKGHPOOKKG (6523)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveWolfBroGameScRsp {
    #[prost(message, optional, tag = "15")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
/// NHIDNHNKBPO (6515)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestoreWolfBroGameArchiveCsReq {
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
/// JAIHLHHAIKC (6549)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestoreWolfBroGameArchiveScRsp {
    #[prost(message, optional, tag = "6")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
/// KPAGODHBKGJ (6509)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitWolfBroGameCsReq {
    #[prost(uint32, tag = "8")]
    pub id: u32,
}
/// KCACLHIALHD (6543)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitWolfBroGameScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
}
/// EGHDOLHEOHM (6547)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetWolfBroGameDataCsReq {
    #[prost(uint32, tag = "13")]
    pub id: u32,
}
/// LJLNDLOINON (6546)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWolfBroGameDataScRsp {
    #[prost(message, optional, tag = "10")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// KEEMMFNGBGG (6545)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WolfBroGameDataChangeScNotify {
    #[prost(message, optional, tag = "14")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
}
/// GEKHFPIGFBI (6528)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WolfBroGameUseBulletCsReq {
    #[prost(uint32, repeated, tag = "14")]
    pub assist_monster_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "8")]
    pub iikmhchcoge: ::core::option::Option<Vector>,
}
/// IGCICMBFGCG (6510)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WolfBroGameUseBulletScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
}
/// GGKLPKINKOL (6548)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WolfBroGamePickupBulletCsReq {
    #[prost(message, optional, tag = "6")]
    pub iikmhchcoge: ::core::option::Option<Vector>,
}
/// JIKCLEMLIGP (6513)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WolfBroGamePickupBulletScRsp {
    #[prost(message, optional, tag = "15")]
    pub lkhdjhfpnlh: ::core::option::Option<Aioabiigfko>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
/// HMOBDDGEOGI (6517)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WolfBroGameActivateBulletCsReq {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub config_id: u32,
}
/// LKNKDPNOFHA (6504)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WolfBroGameActivateBulletScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
/// ODHCECCPMBF (6540)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WolfBroGameExplodeMonsterCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub assist_monster_entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
/// HMHJNIDBIED (6511)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WolfBroGameExplodeMonsterScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
/// BMAIPDMECPA (7626)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorldUnlockCsReq {
    #[prost(uint32, tag = "6")]
    pub amobpgcpfkk: u32,
}
/// DMPNIIMLENE (7627)
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WorldUnlockScRsp {
    #[prost(uint32, tag = "9")]
    pub amobpgcpfkk: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcpgkojgalh {
    #[prost(uint32, tag = "1")]
    pub obbcmjfanio: u32,
    #[prost(uint32, tag = "2")]
    pub dlphkdbopej: u32,
    #[prost(uint32, tag = "3")]
    pub lmdcfekccgm: u32,
    #[prost(uint32, tag = "4")]
    pub modapkfghfm: u32,
    #[prost(uint32, tag = "5")]
    pub aklikcffbbb: u32,
    #[prost(uint32, tag = "6")]
    pub dknnnphgcjk: u32,
    #[prost(uint32, tag = "7")]
    pub oaackhacnba: u32,
    #[prost(uint32, tag = "8")]
    pub ffaehlflppn: u32,
    #[prost(uint32, tag = "9")]
    pub jiainhjcbjf: u32,
    #[prost(uint32, tag = "10")]
    pub klfakfgcgfg: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub cfkiamfjpkb: u32,
    #[prost(uint32, tag = "13")]
    pub jakniekoncd: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlaneType {
    PlaneUnknown = 0,
    PlaneTown = 1,
    PlaneMaze = 2,
    PlaneTrain = 3,
    PlaneChallenge = 4,
    PlaneRogue = 5,
    PlaneRaid = 6,
    PlaneAetherDivide = 7,
    PlaneTrialActivity = 8,
}
impl PlaneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlaneUnknown => "PlaneUnknown",
            Self::PlaneTown => "PlaneTown",
            Self::PlaneMaze => "PlaneMaze",
            Self::PlaneTrain => "PlaneTrain",
            Self::PlaneChallenge => "PlaneChallenge",
            Self::PlaneRogue => "PlaneRogue",
            Self::PlaneRaid => "PlaneRaid",
            Self::PlaneAetherDivide => "PlaneAetherDivide",
            Self::PlaneTrialActivity => "PlaneTrialActivity",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PlaneUnknown" => Some(Self::PlaneUnknown),
            "PlaneTown" => Some(Self::PlaneTown),
            "PlaneMaze" => Some(Self::PlaneMaze),
            "PlaneTrain" => Some(Self::PlaneTrain),
            "PlaneChallenge" => Some(Self::PlaneChallenge),
            "PlaneRogue" => Some(Self::PlaneRogue),
            "PlaneRaid" => Some(Self::PlaneRaid),
            "PlaneAetherDivide" => Some(Self::PlaneAetherDivide),
            "PlaneTrialActivity" => Some(Self::PlaneTrialActivity),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarSlotType {
    AvatarSlot1 = 0,
    AvatarSlot2 = 1,
    AvatarSlot3 = 2,
}
impl AvatarSlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AvatarSlot1 => "AVATAR_SLOT_1",
            Self::AvatarSlot2 => "AVATAR_SLOT_2",
            Self::AvatarSlot3 => "AVATAR_SLOT_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_SLOT_1" => Some(Self::AvatarSlot1),
            "AVATAR_SLOT_2" => Some(Self::AvatarSlot2),
            "AVATAR_SLOT_3" => Some(Self::AvatarSlot3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ItemType {
    None = 0,
    ItemAvatarCard = 1,
    ItemEquipment = 2,
    ItemMaterial = 3,
    ItemAvatarExp = 4,
    ItemRelic = 5,
}
impl ItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ITEM_TYPE_NONE",
            Self::ItemAvatarCard => "ITEM_AVATAR_CARD",
            Self::ItemEquipment => "ITEM_EQUIPMENT",
            Self::ItemMaterial => "ITEM_MATERIAL",
            Self::ItemAvatarExp => "ITEM_AVATAR_EXP",
            Self::ItemRelic => "ITEM_RELIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ITEM_TYPE_NONE" => Some(Self::None),
            "ITEM_AVATAR_CARD" => Some(Self::ItemAvatarCard),
            "ITEM_EQUIPMENT" => Some(Self::ItemEquipment),
            "ITEM_MATERIAL" => Some(Self::ItemMaterial),
            "ITEM_AVATAR_EXP" => Some(Self::ItemAvatarExp),
            "ITEM_RELIC" => Some(Self::ItemRelic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VirtualItemType {
    VirtualItemNone = 0,
    VirtualItemHcoin = 1,
    VirtualItemScoin = 2,
    VirtualItemMcoin = 3,
    VirtualItemStamina = 11,
    VirtualItemReserveStamina = 12,
    VirtualItemAvatarExp = 21,
    VirtualItemExp = 22,
    VirtualItemDailyActivePoint = 23,
    VirtualItemMpMax = 24,
    VirtualItemPlayerReturnPoint = 25,
    VirtualItemBattleCollegePoint = 26,
    VirtualItemRogueCoin = 31,
    VirtualItemRogueTalentCoin = 32,
    VirtualItemRogueRewardKey = 33,
    VirtualItemAchievementExp = 41,
    VirtualItemBpExp = 51,
    VirtualItemBpRealExp = 52,
    VirtualItemMuseumFunds = 53,
    VirtualTrainpartyBuildingFunds = 54,
    VirtualTrainpartyAreaUnlockCoin = 55,
    VirtualTrainpartyMobility = 56,
    VirtualItemWarriorExp = 190,
    VirtualItemRogueExp = 191,
    VirtualItemMageExp = 192,
    VirtualItemShamanExp = 193,
    VirtualItemWarlockExp = 194,
    VirtualItemKnightExp = 195,
    VirtualItemPriestExp = 196,
    VirtualItemPunkLordPoint = 100000,
    VirtualItemGameplayCounterMonsterSneakVision = 280001,
    VirtualItemGameplayCounterWolfBroBullet = 280002,
    VirtualItemAlleyFunds = 281001,
    VirtualItemRoguePumanCoupon = 281012,
    VirtualItemMonthCard = 300101,
    VirtualItemBpNormal = 300102,
    VirtualItemBpDeluxe = 300103,
    VirtualItemBpUpgrade = 300104,
    VirtualItemHeliobusFans = 281002,
    VirtualItemSpaceZooHybridItem = 281003,
    VirtualItemSpaceZooExpPoint = 281004,
    VirtualItemRogueNousTalentCoin = 281013,
    VirtualItemEvolveBuildCoin = 281019,
    VirtualItemDrinkMakerTip = 281005,
    VirtualItemMonopolyDice = 281014,
    VirtualItemMonopolyCoin = 281015,
    VirtualItemMonopolyCheatdice = 281016,
    VirtualItemMonopolyReroll = 281017,
    VirtualItemRogueTournPermanentTalentCoin = 281018,
    VirtualItemRogueTournExp = 281022,
    VirtualItemMatchthreeCoin = 281024,
    VirtualItemSwordTrainingSkillPoint = 281023,
    VirtualItemFightFestCoin = 281025,
    VirtualItemRogueMagicTalentCoin = 281026,
}
impl VirtualItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::VirtualItemNone => "VIRTUAL_ITEM_NONE",
            Self::VirtualItemHcoin => "VIRTUAL_ITEM_HCOIN",
            Self::VirtualItemScoin => "VIRTUAL_ITEM_SCOIN",
            Self::VirtualItemMcoin => "VIRTUAL_ITEM_MCOIN",
            Self::VirtualItemStamina => "VIRTUAL_ITEM_STAMINA",
            Self::VirtualItemReserveStamina => "VIRTUAL_ITEM_RESERVE_STAMINA",
            Self::VirtualItemAvatarExp => "VIRTUAL_ITEM_AVATAR_EXP",
            Self::VirtualItemExp => "VIRTUAL_ITEM_EXP",
            Self::VirtualItemDailyActivePoint => "VIRTUAL_ITEM_DAILY_ACTIVE_POINT",
            Self::VirtualItemMpMax => "VIRTUAL_ITEM_MP_MAX",
            Self::VirtualItemPlayerReturnPoint => "VIRTUAL_ITEM_PLAYER_RETURN_POINT",
            Self::VirtualItemBattleCollegePoint => "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT",
            Self::VirtualItemRogueCoin => "VIRTUAL_ITEM_ROGUE_COIN",
            Self::VirtualItemRogueTalentCoin => "VIRTUAL_ITEM_ROGUE_TALENT_COIN",
            Self::VirtualItemRogueRewardKey => "VIRTUAL_ITEM_ROGUE_REWARD_KEY",
            Self::VirtualItemAchievementExp => "VIRTUAL_ITEM_ACHIEVEMENT_EXP",
            Self::VirtualItemBpExp => "VIRTUAL_ITEM_BP_EXP",
            Self::VirtualItemBpRealExp => "VIRTUAL_ITEM_BP_REAL_EXP",
            Self::VirtualItemMuseumFunds => "VIRTUAL_ITEM_MUSEUM_FUNDS",
            Self::VirtualTrainpartyBuildingFunds => "VIRTUAL_TRAINPARTY_BUILDING_FUNDS",
            Self::VirtualTrainpartyAreaUnlockCoin => {
                "VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN"
            }
            Self::VirtualTrainpartyMobility => "VIRTUAL_TRAINPARTY_MOBILITY",
            Self::VirtualItemWarriorExp => "VIRTUAL_ITEM_WARRIOR_EXP",
            Self::VirtualItemRogueExp => "VIRTUAL_ITEM_ROGUE_EXP",
            Self::VirtualItemMageExp => "VIRTUAL_ITEM_MAGE_EXP",
            Self::VirtualItemShamanExp => "VIRTUAL_ITEM_SHAMAN_EXP",
            Self::VirtualItemWarlockExp => "VIRTUAL_ITEM_WARLOCK_EXP",
            Self::VirtualItemKnightExp => "VIRTUAL_ITEM_KNIGHT_EXP",
            Self::VirtualItemPriestExp => "VIRTUAL_ITEM_PRIEST_EXP",
            Self::VirtualItemPunkLordPoint => "VIRTUAL_ITEM_PUNK_LORD_POINT",
            Self::VirtualItemGameplayCounterMonsterSneakVision => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
            Self::VirtualItemGameplayCounterWolfBroBullet => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET"
            }
            Self::VirtualItemAlleyFunds => "VIRTUAL_ITEM_ALLEY_FUNDS",
            Self::VirtualItemRoguePumanCoupon => "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON",
            Self::VirtualItemMonthCard => "VIRTUAL_ITEM_MONTH_CARD",
            Self::VirtualItemBpNormal => "VIRTUAL_ITEM_BP_NORMAL",
            Self::VirtualItemBpDeluxe => "VIRTUAL_ITEM_BP_DELUXE",
            Self::VirtualItemBpUpgrade => "VIRTUAL_ITEM_BP_UPGRADE",
            Self::VirtualItemHeliobusFans => "VIRTUAL_ITEM_HELIOBUS_FANS",
            Self::VirtualItemSpaceZooHybridItem => "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM",
            Self::VirtualItemSpaceZooExpPoint => "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT",
            Self::VirtualItemRogueNousTalentCoin => "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN",
            Self::VirtualItemEvolveBuildCoin => "VIRTUAL_ITEM_EVOLVE_BUILD_COIN",
            Self::VirtualItemDrinkMakerTip => "VIRTUAL_ITEM_DRINK_MAKER_TIP",
            Self::VirtualItemMonopolyDice => "VIRTUAL_ITEM_MONOPOLY_DICE",
            Self::VirtualItemMonopolyCoin => "VIRTUAL_ITEM_MONOPOLY_COIN",
            Self::VirtualItemMonopolyCheatdice => "VIRTUAL_ITEM_MONOPOLY_CHEATDICE",
            Self::VirtualItemMonopolyReroll => "VIRTUAL_ITEM_MONOPOLY_REROLL",
            Self::VirtualItemRogueTournPermanentTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN"
            }
            Self::VirtualItemRogueTournExp => "VIRTUAL_ITEM_ROGUE_TOURN_EXP",
            Self::VirtualItemMatchthreeCoin => "VIRTUAL_ITEM_MATCHTHREE_COIN",
            Self::VirtualItemSwordTrainingSkillPoint => {
                "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT"
            }
            Self::VirtualItemFightFestCoin => "VIRTUAL_ITEM_FIGHT_FEST_COIN",
            Self::VirtualItemRogueMagicTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIRTUAL_ITEM_NONE" => Some(Self::VirtualItemNone),
            "VIRTUAL_ITEM_HCOIN" => Some(Self::VirtualItemHcoin),
            "VIRTUAL_ITEM_SCOIN" => Some(Self::VirtualItemScoin),
            "VIRTUAL_ITEM_MCOIN" => Some(Self::VirtualItemMcoin),
            "VIRTUAL_ITEM_STAMINA" => Some(Self::VirtualItemStamina),
            "VIRTUAL_ITEM_RESERVE_STAMINA" => Some(Self::VirtualItemReserveStamina),
            "VIRTUAL_ITEM_AVATAR_EXP" => Some(Self::VirtualItemAvatarExp),
            "VIRTUAL_ITEM_EXP" => Some(Self::VirtualItemExp),
            "VIRTUAL_ITEM_DAILY_ACTIVE_POINT" => Some(Self::VirtualItemDailyActivePoint),
            "VIRTUAL_ITEM_MP_MAX" => Some(Self::VirtualItemMpMax),
            "VIRTUAL_ITEM_PLAYER_RETURN_POINT" => {
                Some(Self::VirtualItemPlayerReturnPoint)
            }
            "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT" => {
                Some(Self::VirtualItemBattleCollegePoint)
            }
            "VIRTUAL_ITEM_ROGUE_COIN" => Some(Self::VirtualItemRogueCoin),
            "VIRTUAL_ITEM_ROGUE_TALENT_COIN" => Some(Self::VirtualItemRogueTalentCoin),
            "VIRTUAL_ITEM_ROGUE_REWARD_KEY" => Some(Self::VirtualItemRogueRewardKey),
            "VIRTUAL_ITEM_ACHIEVEMENT_EXP" => Some(Self::VirtualItemAchievementExp),
            "VIRTUAL_ITEM_BP_EXP" => Some(Self::VirtualItemBpExp),
            "VIRTUAL_ITEM_BP_REAL_EXP" => Some(Self::VirtualItemBpRealExp),
            "VIRTUAL_ITEM_MUSEUM_FUNDS" => Some(Self::VirtualItemMuseumFunds),
            "VIRTUAL_TRAINPARTY_BUILDING_FUNDS" => {
                Some(Self::VirtualTrainpartyBuildingFunds)
            }
            "VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN" => {
                Some(Self::VirtualTrainpartyAreaUnlockCoin)
            }
            "VIRTUAL_TRAINPARTY_MOBILITY" => Some(Self::VirtualTrainpartyMobility),
            "VIRTUAL_ITEM_WARRIOR_EXP" => Some(Self::VirtualItemWarriorExp),
            "VIRTUAL_ITEM_ROGUE_EXP" => Some(Self::VirtualItemRogueExp),
            "VIRTUAL_ITEM_MAGE_EXP" => Some(Self::VirtualItemMageExp),
            "VIRTUAL_ITEM_SHAMAN_EXP" => Some(Self::VirtualItemShamanExp),
            "VIRTUAL_ITEM_WARLOCK_EXP" => Some(Self::VirtualItemWarlockExp),
            "VIRTUAL_ITEM_KNIGHT_EXP" => Some(Self::VirtualItemKnightExp),
            "VIRTUAL_ITEM_PRIEST_EXP" => Some(Self::VirtualItemPriestExp),
            "VIRTUAL_ITEM_PUNK_LORD_POINT" => Some(Self::VirtualItemPunkLordPoint),
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::VirtualItemGameplayCounterMonsterSneakVision)
            }
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET" => {
                Some(Self::VirtualItemGameplayCounterWolfBroBullet)
            }
            "VIRTUAL_ITEM_ALLEY_FUNDS" => Some(Self::VirtualItemAlleyFunds),
            "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON" => Some(Self::VirtualItemRoguePumanCoupon),
            "VIRTUAL_ITEM_MONTH_CARD" => Some(Self::VirtualItemMonthCard),
            "VIRTUAL_ITEM_BP_NORMAL" => Some(Self::VirtualItemBpNormal),
            "VIRTUAL_ITEM_BP_DELUXE" => Some(Self::VirtualItemBpDeluxe),
            "VIRTUAL_ITEM_BP_UPGRADE" => Some(Self::VirtualItemBpUpgrade),
            "VIRTUAL_ITEM_HELIOBUS_FANS" => Some(Self::VirtualItemHeliobusFans),
            "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM" => {
                Some(Self::VirtualItemSpaceZooHybridItem)
            }
            "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT" => Some(Self::VirtualItemSpaceZooExpPoint),
            "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN" => {
                Some(Self::VirtualItemRogueNousTalentCoin)
            }
            "VIRTUAL_ITEM_EVOLVE_BUILD_COIN" => Some(Self::VirtualItemEvolveBuildCoin),
            "VIRTUAL_ITEM_DRINK_MAKER_TIP" => Some(Self::VirtualItemDrinkMakerTip),
            "VIRTUAL_ITEM_MONOPOLY_DICE" => Some(Self::VirtualItemMonopolyDice),
            "VIRTUAL_ITEM_MONOPOLY_COIN" => Some(Self::VirtualItemMonopolyCoin),
            "VIRTUAL_ITEM_MONOPOLY_CHEATDICE" => Some(Self::VirtualItemMonopolyCheatdice),
            "VIRTUAL_ITEM_MONOPOLY_REROLL" => Some(Self::VirtualItemMonopolyReroll),
            "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN" => {
                Some(Self::VirtualItemRogueTournPermanentTalentCoin)
            }
            "VIRTUAL_ITEM_ROGUE_TOURN_EXP" => Some(Self::VirtualItemRogueTournExp),
            "VIRTUAL_ITEM_MATCHTHREE_COIN" => Some(Self::VirtualItemMatchthreeCoin),
            "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT" => {
                Some(Self::VirtualItemSwordTrainingSkillPoint)
            }
            "VIRTUAL_ITEM_FIGHT_FEST_COIN" => Some(Self::VirtualItemFightFestCoin),
            "VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN" => {
                Some(Self::VirtualItemRogueMagicTalentCoin)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GameplayCounterType {
    GameplayCounterNone = 0,
    GameplayCounterMonsterSneakVision = 280001,
}
impl GameplayCounterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GameplayCounterNone => "GAMEPLAY_COUNTER_NONE",
            Self::GameplayCounterMonsterSneakVision => {
                "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_NONE" => Some(Self::GameplayCounterNone),
            "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::GameplayCounterMonsterSneakVision)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BlackLimitLevel {
    All = 0,
}
impl BlackLimitLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::All => "BLACK_LIMIT_LEVEL_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BLACK_LIMIT_LEVEL_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AreaType {
    AreaNone = 0,
    AreaCn = 1,
    AreaJp = 2,
    AreaAsia = 3,
    AreaWest = 4,
    AreaKr = 5,
    AreaOverseas = 6,
}
impl AreaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AreaNone => "AREA_NONE",
            Self::AreaCn => "AREA_CN",
            Self::AreaJp => "AREA_JP",
            Self::AreaAsia => "AREA_ASIA",
            Self::AreaWest => "AREA_WEST",
            Self::AreaKr => "AREA_KR",
            Self::AreaOverseas => "AREA_OVERSEAS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AREA_NONE" => Some(Self::AreaNone),
            "AREA_CN" => Some(Self::AreaCn),
            "AREA_JP" => Some(Self::AreaJp),
            "AREA_ASIA" => Some(Self::AreaAsia),
            "AREA_WEST" => Some(Self::AreaWest),
            "AREA_KR" => Some(Self::AreaKr),
            "AREA_OVERSEAS" => Some(Self::AreaOverseas),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntityType {
    EntityNone = 0,
    EntityAvatar = 1,
    EntityMonster = 2,
    EntityNpc = 3,
    EntityProp = 4,
    EntityTrigger = 5,
    EntityEnv = 6,
    EntitySummonUnit = 7,
}
impl EntityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EntityNone => "ENTITY_NONE",
            Self::EntityAvatar => "ENTITY_AVATAR",
            Self::EntityMonster => "ENTITY_MONSTER",
            Self::EntityNpc => "ENTITY_NPC",
            Self::EntityProp => "ENTITY_PROP",
            Self::EntityTrigger => "ENTITY_TRIGGER",
            Self::EntityEnv => "ENTITY_ENV",
            Self::EntitySummonUnit => "ENTITY_SUMMON_UNIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTITY_NONE" => Some(Self::EntityNone),
            "ENTITY_AVATAR" => Some(Self::EntityAvatar),
            "ENTITY_MONSTER" => Some(Self::EntityMonster),
            "ENTITY_NPC" => Some(Self::EntityNpc),
            "ENTITY_PROP" => Some(Self::EntityProp),
            "ENTITY_TRIGGER" => Some(Self::EntityTrigger),
            "ENTITY_ENV" => Some(Self::EntityEnv),
            "ENTITY_SUMMON_UNIT" => Some(Self::EntitySummonUnit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LanguageType {
    LanguageNone = 0,
    LanguageSc = 1,
    LanguageTc = 2,
    LanguageEn = 3,
    LanguageKr = 4,
    LanguageJp = 5,
    LanguageFr = 6,
    LanguageDe = 7,
    LanguageEs = 8,
    LanguagePt = 9,
    LanguageRu = 10,
    LanguageTh = 11,
    LanguageVi = 12,
    LanguageId = 13,
}
impl LanguageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LanguageNone => "LANGUAGE_NONE",
            Self::LanguageSc => "LANGUAGE_SC",
            Self::LanguageTc => "LANGUAGE_TC",
            Self::LanguageEn => "LANGUAGE_EN",
            Self::LanguageKr => "LANGUAGE_KR",
            Self::LanguageJp => "LANGUAGE_JP",
            Self::LanguageFr => "LANGUAGE_FR",
            Self::LanguageDe => "LANGUAGE_DE",
            Self::LanguageEs => "LANGUAGE_ES",
            Self::LanguagePt => "LANGUAGE_PT",
            Self::LanguageRu => "LANGUAGE_RU",
            Self::LanguageTh => "LANGUAGE_TH",
            Self::LanguageVi => "LANGUAGE_VI",
            Self::LanguageId => "LANGUAGE_ID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LANGUAGE_NONE" => Some(Self::LanguageNone),
            "LANGUAGE_SC" => Some(Self::LanguageSc),
            "LANGUAGE_TC" => Some(Self::LanguageTc),
            "LANGUAGE_EN" => Some(Self::LanguageEn),
            "LANGUAGE_KR" => Some(Self::LanguageKr),
            "LANGUAGE_JP" => Some(Self::LanguageJp),
            "LANGUAGE_FR" => Some(Self::LanguageFr),
            "LANGUAGE_DE" => Some(Self::LanguageDe),
            "LANGUAGE_ES" => Some(Self::LanguageEs),
            "LANGUAGE_PT" => Some(Self::LanguagePt),
            "LANGUAGE_RU" => Some(Self::LanguageRu),
            "LANGUAGE_TH" => Some(Self::LanguageTh),
            "LANGUAGE_VI" => Some(Self::LanguageVi),
            "LANGUAGE_ID" => Some(Self::LanguageId),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlatformType {
    Editor = 0,
    Ios = 1,
    Android = 2,
    Pc = 3,
    Web = 4,
    Wap = 5,
    Ps4 = 6,
    Nintendo = 7,
    CloudAndroid = 8,
    CloudPc = 9,
    CloudIos = 10,
    Ps5 = 11,
    Mac = 12,
    CloudMac = 13,
    CloudWebAndroid = 20,
    CloudWebIos = 21,
    CloudWebPc = 22,
    CloudWebMac = 23,
    CloudWebTouch = 24,
    CloudWebKeyboard = 25,
}
impl PlatformType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Editor => "EDITOR",
            Self::Ios => "IOS",
            Self::Android => "ANDROID",
            Self::Pc => "PC",
            Self::Web => "WEB",
            Self::Wap => "WAP",
            Self::Ps4 => "PS4",
            Self::Nintendo => "NINTENDO",
            Self::CloudAndroid => "CLOUD_ANDROID",
            Self::CloudPc => "CLOUD_PC",
            Self::CloudIos => "CLOUD_IOS",
            Self::Ps5 => "PS5",
            Self::Mac => "MAC",
            Self::CloudMac => "CLOUD_MAC",
            Self::CloudWebAndroid => "CLOUD_WEB_ANDROID",
            Self::CloudWebIos => "CLOUD_WEB_IOS",
            Self::CloudWebPc => "CLOUD_WEB_PC",
            Self::CloudWebMac => "CLOUD_WEB_MAC",
            Self::CloudWebTouch => "CLOUD_WEB_TOUCH",
            Self::CloudWebKeyboard => "CLOUD_WEB_KEYBOARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EDITOR" => Some(Self::Editor),
            "IOS" => Some(Self::Ios),
            "ANDROID" => Some(Self::Android),
            "PC" => Some(Self::Pc),
            "WEB" => Some(Self::Web),
            "WAP" => Some(Self::Wap),
            "PS4" => Some(Self::Ps4),
            "NINTENDO" => Some(Self::Nintendo),
            "CLOUD_ANDROID" => Some(Self::CloudAndroid),
            "CLOUD_PC" => Some(Self::CloudPc),
            "CLOUD_IOS" => Some(Self::CloudIos),
            "PS5" => Some(Self::Ps5),
            "MAC" => Some(Self::Mac),
            "CLOUD_MAC" => Some(Self::CloudMac),
            "CLOUD_WEB_ANDROID" => Some(Self::CloudWebAndroid),
            "CLOUD_WEB_IOS" => Some(Self::CloudWebIos),
            "CLOUD_WEB_PC" => Some(Self::CloudWebPc),
            "CLOUD_WEB_MAC" => Some(Self::CloudWebMac),
            "CLOUD_WEB_TOUCH" => Some(Self::CloudWebTouch),
            "CLOUD_WEB_KEYBOARD" => Some(Self::CloudWebKeyboard),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReloginType {
    NoKick = 0,
    ForceKick = 1,
    IdleKick = 2,
    Silence = 3,
}
impl ReloginType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoKick => "NO_KICK",
            Self::ForceKick => "FORCE_KICK",
            Self::IdleKick => "IDLE_KICK",
            Self::Silence => "SILENCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_KICK" => Some(Self::NoKick),
            "FORCE_KICK" => Some(Self::ForceKick),
            "IDLE_KICK" => Some(Self::IdleKick),
            "SILENCE" => Some(Self::Silence),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarType {
    None = 0,
    AvatarTrialType = 1,
    AvatarLimitType = 2,
    AvatarFormalType = 3,
    AvatarAssistType = 4,
    AvatarAetherDivideType = 5,
    AvatarUpgradeAvailableType = 6,
}
impl AvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "AVATAR_TYPE_NONE",
            Self::AvatarTrialType => "AVATAR_TRIAL_TYPE",
            Self::AvatarLimitType => "AVATAR_LIMIT_TYPE",
            Self::AvatarFormalType => "AVATAR_FORMAL_TYPE",
            Self::AvatarAssistType => "AVATAR_ASSIST_TYPE",
            Self::AvatarAetherDivideType => "AVATAR_AETHER_DIVIDE_TYPE",
            Self::AvatarUpgradeAvailableType => "AVATAR_UPGRADE_AVAILABLE_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_TYPE_NONE" => Some(Self::None),
            "AVATAR_TRIAL_TYPE" => Some(Self::AvatarTrialType),
            "AVATAR_LIMIT_TYPE" => Some(Self::AvatarLimitType),
            "AVATAR_FORMAL_TYPE" => Some(Self::AvatarFormalType),
            "AVATAR_ASSIST_TYPE" => Some(Self::AvatarAssistType),
            "AVATAR_AETHER_DIVIDE_TYPE" => Some(Self::AvatarAetherDivideType),
            "AVATAR_UPGRADE_AVAILABLE_TYPE" => Some(Self::AvatarUpgradeAvailableType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MultiPathAvatarType {
    None = 0,
    Mar7thKnightType = 1001,
    Mar7thRogueType = 1224,
    BoyWarriorType = 8001,
    GirlWarriorType = 8002,
    BoyKnightType = 8003,
    GirlKnightType = 8004,
    BoyShamanType = 8005,
    GirlShamanType = 8006,
    BoyMemoryType = 8007,
    GirlMemoryType = 8008,
}
impl MultiPathAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MultiPathAvatarTypeNone",
            Self::Mar7thKnightType => "Mar_7thKnightType",
            Self::Mar7thRogueType => "Mar_7thRogueType",
            Self::BoyWarriorType => "BoyWarriorType",
            Self::GirlWarriorType => "GirlWarriorType",
            Self::BoyKnightType => "BoyKnightType",
            Self::GirlKnightType => "GirlKnightType",
            Self::BoyShamanType => "BoyShamanType",
            Self::GirlShamanType => "GirlShamanType",
            Self::BoyMemoryType => "BoyMemoryType",
            Self::GirlMemoryType => "GirlMemoryType",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MultiPathAvatarTypeNone" => Some(Self::None),
            "Mar_7thKnightType" => Some(Self::Mar7thKnightType),
            "Mar_7thRogueType" => Some(Self::Mar7thRogueType),
            "BoyWarriorType" => Some(Self::BoyWarriorType),
            "GirlWarriorType" => Some(Self::GirlWarriorType),
            "BoyKnightType" => Some(Self::BoyKnightType),
            "GirlKnightType" => Some(Self::GirlKnightType),
            "BoyShamanType" => Some(Self::BoyShamanType),
            "GirlShamanType" => Some(Self::GirlShamanType),
            "BoyMemoryType" => Some(Self::BoyMemoryType),
            "GirlMemoryType" => Some(Self::GirlMemoryType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    None = 0,
    Man = 1,
    Woman = 2,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "GenderNone",
            Self::Man => "GenderMan",
            Self::Woman => "GenderWoman",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GenderNone" => Some(Self::None),
            "GenderMan" => Some(Self::Man),
            "GenderWoman" => Some(Self::Woman),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductType {
    ProductNone = 0,
    ProductNormal = 1,
    ProductLimit = 2,
    ProductLimitNoPay = 3,
    ProductNoProcessOrder = 4,
}
impl ProductType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProductNone => "PRODUCT_NONE",
            Self::ProductNormal => "PRODUCT_NORMAL",
            Self::ProductLimit => "PRODUCT_LIMIT",
            Self::ProductLimitNoPay => "PRODUCT_LIMIT_NO_PAY",
            Self::ProductNoProcessOrder => "PRODUCT_NO_PROCESS_ORDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_NONE" => Some(Self::ProductNone),
            "PRODUCT_NORMAL" => Some(Self::ProductNormal),
            "PRODUCT_LIMIT" => Some(Self::ProductLimit),
            "PRODUCT_LIMIT_NO_PAY" => Some(Self::ProductLimitNoPay),
            "PRODUCT_NO_PROCESS_ORDER" => Some(Self::ProductNoProcessOrder),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductGiftType {
    ProductGiftNone = 0,
    ProductGiftCoin = 1,
    ProductGiftMonthCard = 2,
    ProductGiftBp68 = 3,
    ProductGiftBp128 = 4,
    ProductGiftBp68Upgrade128 = 5,
    ProductGiftPointCard = 6,
    ProductGiftPsPreOrder1 = 7,
    ProductGiftPsPreOrder2 = 8,
    ProductGiftGooglePoints100 = 9,
    ProductGiftGooglePoints150 = 10,
    ProductGiftPsPointCard030 = 11,
    ProductGiftPsPointCard050 = 12,
    ProductGiftPsPointCard100 = 13,
}
impl ProductGiftType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProductGiftNone => "PRODUCT_GIFT_NONE",
            Self::ProductGiftCoin => "PRODUCT_GIFT_COIN",
            Self::ProductGiftMonthCard => "PRODUCT_GIFT_MONTH_CARD",
            Self::ProductGiftBp68 => "PRODUCT_GIFT_BP_68",
            Self::ProductGiftBp128 => "PRODUCT_GIFT_BP_128",
            Self::ProductGiftBp68Upgrade128 => "PRODUCT_GIFT_BP68_UPGRADE_128",
            Self::ProductGiftPointCard => "PRODUCT_GIFT_POINT_CARD",
            Self::ProductGiftPsPreOrder1 => "PRODUCT_GIFT_PS_PRE_ORDER_1",
            Self::ProductGiftPsPreOrder2 => "PRODUCT_GIFT_PS_PRE_ORDER_2",
            Self::ProductGiftGooglePoints100 => "PRODUCT_GIFT_GOOGLE_POINTS_100",
            Self::ProductGiftGooglePoints150 => "PRODUCT_GIFT_GOOGLE_POINTS_150",
            Self::ProductGiftPsPointCard030 => "PRODUCT_GIFT_PS_POINT_CARD_030",
            Self::ProductGiftPsPointCard050 => "PRODUCT_GIFT_PS_POINT_CARD_050",
            Self::ProductGiftPsPointCard100 => "PRODUCT_GIFT_PS_POINT_CARD_100",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_GIFT_NONE" => Some(Self::ProductGiftNone),
            "PRODUCT_GIFT_COIN" => Some(Self::ProductGiftCoin),
            "PRODUCT_GIFT_MONTH_CARD" => Some(Self::ProductGiftMonthCard),
            "PRODUCT_GIFT_BP_68" => Some(Self::ProductGiftBp68),
            "PRODUCT_GIFT_BP_128" => Some(Self::ProductGiftBp128),
            "PRODUCT_GIFT_BP68_UPGRADE_128" => Some(Self::ProductGiftBp68Upgrade128),
            "PRODUCT_GIFT_POINT_CARD" => Some(Self::ProductGiftPointCard),
            "PRODUCT_GIFT_PS_PRE_ORDER_1" => Some(Self::ProductGiftPsPreOrder1),
            "PRODUCT_GIFT_PS_PRE_ORDER_2" => Some(Self::ProductGiftPsPreOrder2),
            "PRODUCT_GIFT_GOOGLE_POINTS_100" => Some(Self::ProductGiftGooglePoints100),
            "PRODUCT_GIFT_GOOGLE_POINTS_150" => Some(Self::ProductGiftGooglePoints150),
            "PRODUCT_GIFT_PS_POINT_CARD_030" => Some(Self::ProductGiftPsPointCard030),
            "PRODUCT_GIFT_PS_POINT_CARD_050" => Some(Self::ProductGiftPsPointCard050),
            "PRODUCT_GIFT_PS_POINT_CARD_100" => Some(Self::ProductGiftPsPointCard100),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FeatureSwitchType {
    FeatureSwitchNone = 0,
    FeatureSwitchShop = 1,
    FeatureSwitchLineupName = 2,
    FeatureSwitchRechargeShop = 3,
    FeatureSwitchNickname = 4,
    FeatureSwitchSignature = 5,
    FeatureSwitchBattlepass = 6,
    FeatureSwitchPunkLord = 7,
    FeatureSwitchMonthcardDaily = 8,
    FeatureSwitchPictureShare = 9,
    FeatureSwitchRogue = 10,
    FeatureSwitchChallenge = 11,
    FeatureSwitchCocoon = 12,
    FeatureSwitchRaid = 13,
    FeatureSwitchMazePlaneEvent = 14,
    FeatureSwitchActivityPanel = 15,
    FeatureSwitchMailbox = 16,
    FeatureSwitchQuest = 17,
    FeatureSwitchGacha = 18,
    FeatureSwitchChat = 19,
    FeatureSwitchModifyFriendAlias = 20,
    FeatureSwitchUseItem = 21,
    FeatureSwitchActivitySchedule = 22,
    FeatureSwitchFarmElement = 23,
    FeatureSwitchAchievementLevel = 24,
    FeatureSwitchDailyActiveLevel = 25,
    FeatureSwitchPlayerReturn = 26,
    FeatureSwitchFirstSetNickname = 27,
    FeatureSwitchMainMissionReward = 28,
    FeatureSwitchSubMissionReward = 29,
    FeatureSwitchPamMission = 30,
    FeatureSwitchDestroyItem = 32,
    FeatureSwitchConsumeItemTurn = 33,
    FeatureSwitchRogueModifier = 34,
    FeatureSwitchChessRogue = 35,
    FeatureSwitchChessRogueBoard = 36,
    FeatureSwitchRollShop = 37,
    FeatureSwitchH5Return = 38,
    FeatureSwitchOffering = 39,
    FeatureSwitchServerRedPoint = 40,
    FeatureSwitchMonopolyOptionRatio = 41,
    FeatureSwitchMonopolyGetRaffleTicket = 42,
    FeatureSwitchMonopolyTakeRaffleReward = 43,
    FeatureSwitchChallengeRecommendLineup = 44,
    FeatureSwitchPsnMemberShipCheck = 45,
    FeatureSwitchPlayerBoardDevelopment = 46,
    FeatureSwitchPvp = 47,
    FeatureSwitchRogueMode = 48,
    FeatureSwitchRogueTournUgc = 49,
    FeatureSwitchRelicFilterPlanName = 50,
    FeatureSwitchMazeItemUseBuffDrop = 51,
    FeatureSwitchRedDot = 52,
    FeatureSwitchGameStateService = 53,
}
impl FeatureSwitchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FeatureSwitchNone => "FEATURE_SWITCH_NONE",
            Self::FeatureSwitchShop => "FEATURE_SWITCH_SHOP",
            Self::FeatureSwitchLineupName => "FEATURE_SWITCH_LINEUP_NAME",
            Self::FeatureSwitchRechargeShop => "FEATURE_SWITCH_RECHARGE_SHOP",
            Self::FeatureSwitchNickname => "FEATURE_SWITCH_NICKNAME",
            Self::FeatureSwitchSignature => "FEATURE_SWITCH_SIGNATURE",
            Self::FeatureSwitchBattlepass => "FEATURE_SWITCH_BATTLEPASS",
            Self::FeatureSwitchPunkLord => "FEATURE_SWITCH_PUNK_LORD",
            Self::FeatureSwitchMonthcardDaily => "FEATURE_SWITCH_MONTHCARD_DAILY",
            Self::FeatureSwitchPictureShare => "FEATURE_SWITCH_PICTURE_SHARE",
            Self::FeatureSwitchRogue => "FEATURE_SWITCH_ROGUE",
            Self::FeatureSwitchChallenge => "FEATURE_SWITCH_CHALLENGE",
            Self::FeatureSwitchCocoon => "FEATURE_SWITCH_COCOON",
            Self::FeatureSwitchRaid => "FEATURE_SWITCH_RAID",
            Self::FeatureSwitchMazePlaneEvent => "FEATURE_SWITCH_MAZE_PLANE_EVENT",
            Self::FeatureSwitchActivityPanel => "FEATURE_SWITCH_ACTIVITY_PANEL",
            Self::FeatureSwitchMailbox => "FEATURE_SWITCH_MAILBOX",
            Self::FeatureSwitchQuest => "FEATURE_SWITCH_QUEST",
            Self::FeatureSwitchGacha => "FEATURE_SWITCH_GACHA",
            Self::FeatureSwitchChat => "FEATURE_SWITCH_CHAT",
            Self::FeatureSwitchModifyFriendAlias => "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS",
            Self::FeatureSwitchUseItem => "FEATURE_SWITCH_USE_ITEM",
            Self::FeatureSwitchActivitySchedule => "FEATURE_SWITCH_ACTIVITY_SCHEDULE",
            Self::FeatureSwitchFarmElement => "FEATURE_SWITCH_FARM_ELEMENT",
            Self::FeatureSwitchAchievementLevel => "FEATURE_SWITCH_ACHIEVEMENT_LEVEL",
            Self::FeatureSwitchDailyActiveLevel => "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL",
            Self::FeatureSwitchPlayerReturn => "FEATURE_SWITCH_PLAYER_RETURN",
            Self::FeatureSwitchFirstSetNickname => "FEATURE_SWITCH_FIRST_SET_NICKNAME",
            Self::FeatureSwitchMainMissionReward => "FEATURE_SWITCH_MAIN_MISSION_REWARD",
            Self::FeatureSwitchSubMissionReward => "FEATURE_SWITCH_SUB_MISSION_REWARD",
            Self::FeatureSwitchPamMission => "FEATURE_SWITCH_PAM_MISSION",
            Self::FeatureSwitchDestroyItem => "FEATURE_SWITCH_DESTROY_ITEM",
            Self::FeatureSwitchConsumeItemTurn => "FEATURE_SWITCH_CONSUME_ITEM_TURN",
            Self::FeatureSwitchRogueModifier => "FEATURE_SWITCH_ROGUE_MODIFIER",
            Self::FeatureSwitchChessRogue => "FEATURE_SWITCH_CHESS_ROGUE",
            Self::FeatureSwitchChessRogueBoard => "FEATURE_SWITCH_CHESS_ROGUE_BOARD",
            Self::FeatureSwitchRollShop => "FEATURE_SWITCH_ROLL_SHOP",
            Self::FeatureSwitchH5Return => "FEATURE_SWITCH_H5_RETURN",
            Self::FeatureSwitchOffering => "FEATURE_SWITCH_OFFERING",
            Self::FeatureSwitchServerRedPoint => "FEATURE_SWITCH_SERVER_RED_POINT",
            Self::FeatureSwitchMonopolyOptionRatio => {
                "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO"
            }
            Self::FeatureSwitchMonopolyGetRaffleTicket => {
                "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET"
            }
            Self::FeatureSwitchMonopolyTakeRaffleReward => {
                "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD"
            }
            Self::FeatureSwitchChallengeRecommendLineup => {
                "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP"
            }
            Self::FeatureSwitchPsnMemberShipCheck => {
                "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK"
            }
            Self::FeatureSwitchPlayerBoardDevelopment => {
                "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT"
            }
            Self::FeatureSwitchPvp => "FEATURE_SWITCH_PVP",
            Self::FeatureSwitchRogueMode => "FEATURE_SWITCH_ROGUE_MODE",
            Self::FeatureSwitchRogueTournUgc => "FEATURE_SWITCH_ROGUE_TOURN_UGC",
            Self::FeatureSwitchRelicFilterPlanName => {
                "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME"
            }
            Self::FeatureSwitchMazeItemUseBuffDrop => {
                "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP"
            }
            Self::FeatureSwitchRedDot => "FEATURE_SWITCH_RED_DOT",
            Self::FeatureSwitchGameStateService => "FEATURE_SWITCH_GAME_STATE_SERVICE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEATURE_SWITCH_NONE" => Some(Self::FeatureSwitchNone),
            "FEATURE_SWITCH_SHOP" => Some(Self::FeatureSwitchShop),
            "FEATURE_SWITCH_LINEUP_NAME" => Some(Self::FeatureSwitchLineupName),
            "FEATURE_SWITCH_RECHARGE_SHOP" => Some(Self::FeatureSwitchRechargeShop),
            "FEATURE_SWITCH_NICKNAME" => Some(Self::FeatureSwitchNickname),
            "FEATURE_SWITCH_SIGNATURE" => Some(Self::FeatureSwitchSignature),
            "FEATURE_SWITCH_BATTLEPASS" => Some(Self::FeatureSwitchBattlepass),
            "FEATURE_SWITCH_PUNK_LORD" => Some(Self::FeatureSwitchPunkLord),
            "FEATURE_SWITCH_MONTHCARD_DAILY" => Some(Self::FeatureSwitchMonthcardDaily),
            "FEATURE_SWITCH_PICTURE_SHARE" => Some(Self::FeatureSwitchPictureShare),
            "FEATURE_SWITCH_ROGUE" => Some(Self::FeatureSwitchRogue),
            "FEATURE_SWITCH_CHALLENGE" => Some(Self::FeatureSwitchChallenge),
            "FEATURE_SWITCH_COCOON" => Some(Self::FeatureSwitchCocoon),
            "FEATURE_SWITCH_RAID" => Some(Self::FeatureSwitchRaid),
            "FEATURE_SWITCH_MAZE_PLANE_EVENT" => Some(Self::FeatureSwitchMazePlaneEvent),
            "FEATURE_SWITCH_ACTIVITY_PANEL" => Some(Self::FeatureSwitchActivityPanel),
            "FEATURE_SWITCH_MAILBOX" => Some(Self::FeatureSwitchMailbox),
            "FEATURE_SWITCH_QUEST" => Some(Self::FeatureSwitchQuest),
            "FEATURE_SWITCH_GACHA" => Some(Self::FeatureSwitchGacha),
            "FEATURE_SWITCH_CHAT" => Some(Self::FeatureSwitchChat),
            "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS" => {
                Some(Self::FeatureSwitchModifyFriendAlias)
            }
            "FEATURE_SWITCH_USE_ITEM" => Some(Self::FeatureSwitchUseItem),
            "FEATURE_SWITCH_ACTIVITY_SCHEDULE" => {
                Some(Self::FeatureSwitchActivitySchedule)
            }
            "FEATURE_SWITCH_FARM_ELEMENT" => Some(Self::FeatureSwitchFarmElement),
            "FEATURE_SWITCH_ACHIEVEMENT_LEVEL" => {
                Some(Self::FeatureSwitchAchievementLevel)
            }
            "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL" => {
                Some(Self::FeatureSwitchDailyActiveLevel)
            }
            "FEATURE_SWITCH_PLAYER_RETURN" => Some(Self::FeatureSwitchPlayerReturn),
            "FEATURE_SWITCH_FIRST_SET_NICKNAME" => {
                Some(Self::FeatureSwitchFirstSetNickname)
            }
            "FEATURE_SWITCH_MAIN_MISSION_REWARD" => {
                Some(Self::FeatureSwitchMainMissionReward)
            }
            "FEATURE_SWITCH_SUB_MISSION_REWARD" => {
                Some(Self::FeatureSwitchSubMissionReward)
            }
            "FEATURE_SWITCH_PAM_MISSION" => Some(Self::FeatureSwitchPamMission),
            "FEATURE_SWITCH_DESTROY_ITEM" => Some(Self::FeatureSwitchDestroyItem),
            "FEATURE_SWITCH_CONSUME_ITEM_TURN" => {
                Some(Self::FeatureSwitchConsumeItemTurn)
            }
            "FEATURE_SWITCH_ROGUE_MODIFIER" => Some(Self::FeatureSwitchRogueModifier),
            "FEATURE_SWITCH_CHESS_ROGUE" => Some(Self::FeatureSwitchChessRogue),
            "FEATURE_SWITCH_CHESS_ROGUE_BOARD" => {
                Some(Self::FeatureSwitchChessRogueBoard)
            }
            "FEATURE_SWITCH_ROLL_SHOP" => Some(Self::FeatureSwitchRollShop),
            "FEATURE_SWITCH_H5_RETURN" => Some(Self::FeatureSwitchH5Return),
            "FEATURE_SWITCH_OFFERING" => Some(Self::FeatureSwitchOffering),
            "FEATURE_SWITCH_SERVER_RED_POINT" => Some(Self::FeatureSwitchServerRedPoint),
            "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO" => {
                Some(Self::FeatureSwitchMonopolyOptionRatio)
            }
            "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET" => {
                Some(Self::FeatureSwitchMonopolyGetRaffleTicket)
            }
            "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD" => {
                Some(Self::FeatureSwitchMonopolyTakeRaffleReward)
            }
            "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP" => {
                Some(Self::FeatureSwitchChallengeRecommendLineup)
            }
            "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK" => {
                Some(Self::FeatureSwitchPsnMemberShipCheck)
            }
            "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT" => {
                Some(Self::FeatureSwitchPlayerBoardDevelopment)
            }
            "FEATURE_SWITCH_PVP" => Some(Self::FeatureSwitchPvp),
            "FEATURE_SWITCH_ROGUE_MODE" => Some(Self::FeatureSwitchRogueMode),
            "FEATURE_SWITCH_ROGUE_TOURN_UGC" => Some(Self::FeatureSwitchRogueTournUgc),
            "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME" => {
                Some(Self::FeatureSwitchRelicFilterPlanName)
            }
            "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP" => {
                Some(Self::FeatureSwitchMazeItemUseBuffDrop)
            }
            "FEATURE_SWITCH_RED_DOT" => Some(Self::FeatureSwitchRedDot),
            "FEATURE_SWITCH_GAME_STATE_SERVICE" => {
                Some(Self::FeatureSwitchGameStateService)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecretKeyType {
    SecretKeyNone = 0,
    SecretKeyServerCheck = 1,
    SecretKeyVideo = 2,
    SecretKeyBattleTime = 3,
}
impl SecretKeyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SecretKeyNone => "SECRET_KEY_NONE",
            Self::SecretKeyServerCheck => "SECRET_KEY_SERVER_CHECK",
            Self::SecretKeyVideo => "SECRET_KEY_VIDEO",
            Self::SecretKeyBattleTime => "SECRET_KEY_BATTLE_TIME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SECRET_KEY_NONE" => Some(Self::SecretKeyNone),
            "SECRET_KEY_SERVER_CHECK" => Some(Self::SecretKeyServerCheck),
            "SECRET_KEY_VIDEO" => Some(Self::SecretKeyVideo),
            "SECRET_KEY_BATTLE_TIME" => Some(Self::SecretKeyBattleTime),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReplayType {
    None = 0,
    PunkLord = 1,
}
impl ReplayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "REPLAY_TYPE_NONE",
            Self::PunkLord => "REPLAY_TYPE_PUNK_LORD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REPLAY_TYPE_NONE" => Some(Self::None),
            "REPLAY_TYPE_PUNK_LORD" => Some(Self::PunkLord),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordShareType {
    None = 0,
    Friend = 1,
    All = 2,
}
impl PunkLordShareType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUNK_LORD_SHARE_TYPE_NONE",
            Self::Friend => "PUNK_LORD_SHARE_TYPE_FRIEND",
            Self::All => "PUNK_LORD_SHARE_TYPE_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_SHARE_TYPE_NONE" => Some(Self::None),
            "PUNK_LORD_SHARE_TYPE_FRIEND" => Some(Self::Friend),
            "PUNK_LORD_SHARE_TYPE_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordAttackerStatus {
    None = 0,
    Attacked = 1,
    Attacking = 2,
    AttackedAndAttacking = 3,
}
impl PunkLordAttackerStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUNK_LORD_ATTACKER_STATUS_NONE",
            Self::Attacked => "PUNK_LORD_ATTACKER_STATUS_ATTACKED",
            Self::Attacking => "PUNK_LORD_ATTACKER_STATUS_ATTACKING",
            Self::AttackedAndAttacking => {
                "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_ATTACKER_STATUS_NONE" => Some(Self::None),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED" => Some(Self::Attacked),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKING" => Some(Self::Attacking),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING" => {
                Some(Self::AttackedAndAttacking)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordMonsterInfoNotifyReason {
    None = 0,
    EnterRaid = 1,
    BattleEnd = 2,
    LeaveRaid = 3,
}
impl PunkLordMonsterInfoNotifyReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE",
            Self::EnterRaid => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID",
            Self::BattleEnd => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END",
            Self::LeaveRaid => "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE" => Some(Self::None),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID" => Some(Self::EnterRaid),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END" => Some(Self::BattleEnd),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID" => Some(Self::LeaveRaid),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatType {
    None = 0,
    Private = 1,
    Group = 2,
}
impl ChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CHAT_TYPE_NONE",
            Self::Private => "CHAT_TYPE_PRIVATE",
            Self::Group => "CHAT_TYPE_GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_TYPE_NONE" => Some(Self::None),
            "CHAT_TYPE_PRIVATE" => Some(Self::Private),
            "CHAT_TYPE_GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    None = 0,
    CustomText = 1,
    Emoji = 2,
    Invite = 3,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MSG_TYPE_NONE",
            Self::CustomText => "MSG_TYPE_CUSTOM_TEXT",
            Self::Emoji => "MSG_TYPE_EMOJI",
            Self::Invite => "MSG_TYPE_INVITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MSG_TYPE_NONE" => Some(Self::None),
            "MSG_TYPE_CUSTOM_TEXT" => Some(Self::CustomText),
            "MSG_TYPE_EMOJI" => Some(Self::Emoji),
            "MSG_TYPE_INVITE" => Some(Self::Invite),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShieldType {
    None = 0,
    Replace = 1,
    Shied = 2,
}
impl ShieldType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SHIELD_TYPE_NONE",
            Self::Replace => "SHIELD_TYPE_REPLACE",
            Self::Shied => "SHIELD_TYPE_SHIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SHIELD_TYPE_NONE" => Some(Self::None),
            "SHIELD_TYPE_REPLACE" => Some(Self::Replace),
            "SHIELD_TYPE_SHIED" => Some(Self::Shied),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FuncUnlockIdType {
    FuncUnlockIdNone = 0,
    FuncUnlockIdRelic = 403,
    FuncUnlockIdRelicNum = 404,
    FuncUnlockIdEquipment = 401,
    FuncUnlockIdSkilltree = 402,
    FuncUnlockIdGacha = 2300,
    FuncUnlockIdExpedition = 3100,
    FuncUnlockIdCompose = 4100,
    FuncUnlockIdFightactivity = 3700,
}
impl FuncUnlockIdType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FuncUnlockIdNone => "FUNC_UNLOCK_ID_NONE",
            Self::FuncUnlockIdRelic => "FUNC_UNLOCK_ID_RELIC",
            Self::FuncUnlockIdRelicNum => "FUNC_UNLOCK_ID_RELIC_NUM",
            Self::FuncUnlockIdEquipment => "FUNC_UNLOCK_ID_EQUIPMENT",
            Self::FuncUnlockIdSkilltree => "FUNC_UNLOCK_ID_SKILLTREE",
            Self::FuncUnlockIdGacha => "FUNC_UNLOCK_ID_GACHA",
            Self::FuncUnlockIdExpedition => "FUNC_UNLOCK_ID_EXPEDITION",
            Self::FuncUnlockIdCompose => "FUNC_UNLOCK_ID_COMPOSE",
            Self::FuncUnlockIdFightactivity => "FUNC_UNLOCK_ID_FIGHTACTIVITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FUNC_UNLOCK_ID_NONE" => Some(Self::FuncUnlockIdNone),
            "FUNC_UNLOCK_ID_RELIC" => Some(Self::FuncUnlockIdRelic),
            "FUNC_UNLOCK_ID_RELIC_NUM" => Some(Self::FuncUnlockIdRelicNum),
            "FUNC_UNLOCK_ID_EQUIPMENT" => Some(Self::FuncUnlockIdEquipment),
            "FUNC_UNLOCK_ID_SKILLTREE" => Some(Self::FuncUnlockIdSkilltree),
            "FUNC_UNLOCK_ID_GACHA" => Some(Self::FuncUnlockIdGacha),
            "FUNC_UNLOCK_ID_EXPEDITION" => Some(Self::FuncUnlockIdExpedition),
            "FUNC_UNLOCK_ID_COMPOSE" => Some(Self::FuncUnlockIdCompose),
            "FUNC_UNLOCK_ID_FIGHTACTIVITY" => Some(Self::FuncUnlockIdFightactivity),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AssistAvatarType {
    AssistAvatarUnknow = 0,
    AssistAvatarLevel = 1,
    AssistAvatarRank = 2,
}
impl AssistAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AssistAvatarUnknow => "ASSIST_AVATAR_UNKNOW",
            Self::AssistAvatarLevel => "ASSIST_AVATAR_LEVEL",
            Self::AssistAvatarRank => "ASSIST_AVATAR_RANK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASSIST_AVATAR_UNKNOW" => Some(Self::AssistAvatarUnknow),
            "ASSIST_AVATAR_LEVEL" => Some(Self::AssistAvatarLevel),
            "ASSIST_AVATAR_RANK" => Some(Self::AssistAvatarRank),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DevelopmentType {
    DevelopmentNone = 0,
    DevelopmentRogueCosmos = 1,
    DevelopmentRogueChess = 2,
    DevelopmentRogueChessNous = 3,
    DevelopmentMemoryChallenge = 4,
    DevelopmentStoryChallenge = 5,
    DevelopmentUnlockAvatar = 6,
    DevelopmentUnlockEquipment = 7,
    DevelopmentActivityStart = 8,
    DevelopmentActivityEnd = 9,
    DevelopmentBossChallenge = 10,
    DevelopmentRogueTourn = 11,
    DevelopmentRogueTournWeek = 12,
    DevelopmentRogueMagic = 13,
}
impl DevelopmentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DevelopmentNone => "DEVELOPMENT_NONE",
            Self::DevelopmentRogueCosmos => "DEVELOPMENT_ROGUE_COSMOS",
            Self::DevelopmentRogueChess => "DEVELOPMENT_ROGUE_CHESS",
            Self::DevelopmentRogueChessNous => "DEVELOPMENT_ROGUE_CHESS_NOUS",
            Self::DevelopmentMemoryChallenge => "DEVELOPMENT_MEMORY_CHALLENGE",
            Self::DevelopmentStoryChallenge => "DEVELOPMENT_STORY_CHALLENGE",
            Self::DevelopmentUnlockAvatar => "DEVELOPMENT_UNLOCK_AVATAR",
            Self::DevelopmentUnlockEquipment => "DEVELOPMENT_UNLOCK_EQUIPMENT",
            Self::DevelopmentActivityStart => "DEVELOPMENT_ACTIVITY_START",
            Self::DevelopmentActivityEnd => "DEVELOPMENT_ACTIVITY_END",
            Self::DevelopmentBossChallenge => "DEVELOPMENT_BOSS_CHALLENGE",
            Self::DevelopmentRogueTourn => "DEVELOPMENT_ROGUE_TOURN",
            Self::DevelopmentRogueTournWeek => "DEVELOPMENT_ROGUE_TOURN_WEEK",
            Self::DevelopmentRogueMagic => "DEVELOPMENT_ROGUE_MAGIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEVELOPMENT_NONE" => Some(Self::DevelopmentNone),
            "DEVELOPMENT_ROGUE_COSMOS" => Some(Self::DevelopmentRogueCosmos),
            "DEVELOPMENT_ROGUE_CHESS" => Some(Self::DevelopmentRogueChess),
            "DEVELOPMENT_ROGUE_CHESS_NOUS" => Some(Self::DevelopmentRogueChessNous),
            "DEVELOPMENT_MEMORY_CHALLENGE" => Some(Self::DevelopmentMemoryChallenge),
            "DEVELOPMENT_STORY_CHALLENGE" => Some(Self::DevelopmentStoryChallenge),
            "DEVELOPMENT_UNLOCK_AVATAR" => Some(Self::DevelopmentUnlockAvatar),
            "DEVELOPMENT_UNLOCK_EQUIPMENT" => Some(Self::DevelopmentUnlockEquipment),
            "DEVELOPMENT_ACTIVITY_START" => Some(Self::DevelopmentActivityStart),
            "DEVELOPMENT_ACTIVITY_END" => Some(Self::DevelopmentActivityEnd),
            "DEVELOPMENT_BOSS_CHALLENGE" => Some(Self::DevelopmentBossChallenge),
            "DEVELOPMENT_ROGUE_TOURN" => Some(Self::DevelopmentRogueTourn),
            "DEVELOPMENT_ROGUE_TOURN_WEEK" => Some(Self::DevelopmentRogueTournWeek),
            "DEVELOPMENT_ROGUE_MAGIC" => Some(Self::DevelopmentRogueMagic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayingState {
    None = 0,
    PlayingRogueCosmos = 1,
    PlayingRogueChess = 2,
    PlayingRogueChessNous = 3,
    PlayingChallengeMemory = 4,
    PlayingChallengeStory = 5,
    PlayingChallengeBoss = 6,
    PlayingRogueTourn = 7,
    PlayingRogueMagic = 8,
}
impl PlayingState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PLAYING_STATE_NONE",
            Self::PlayingRogueCosmos => "PLAYING_ROGUE_COSMOS",
            Self::PlayingRogueChess => "PLAYING_ROGUE_CHESS",
            Self::PlayingRogueChessNous => "PLAYING_ROGUE_CHESS_NOUS",
            Self::PlayingChallengeMemory => "PLAYING_CHALLENGE_MEMORY",
            Self::PlayingChallengeStory => "PLAYING_CHALLENGE_STORY",
            Self::PlayingChallengeBoss => "PLAYING_CHALLENGE_BOSS",
            Self::PlayingRogueTourn => "PLAYING_ROGUE_TOURN",
            Self::PlayingRogueMagic => "PLAYING_ROGUE_MAGIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYING_STATE_NONE" => Some(Self::None),
            "PLAYING_ROGUE_COSMOS" => Some(Self::PlayingRogueCosmos),
            "PLAYING_ROGUE_CHESS" => Some(Self::PlayingRogueChess),
            "PLAYING_ROGUE_CHESS_NOUS" => Some(Self::PlayingRogueChessNous),
            "PLAYING_CHALLENGE_MEMORY" => Some(Self::PlayingChallengeMemory),
            "PLAYING_CHALLENGE_STORY" => Some(Self::PlayingChallengeStory),
            "PLAYING_CHALLENGE_BOSS" => Some(Self::PlayingChallengeBoss),
            "PLAYING_ROGUE_TOURN" => Some(Self::PlayingRogueTourn),
            "PLAYING_ROGUE_MAGIC" => Some(Self::PlayingRogueMagic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchRoomCharacterType {
    MatchRoomCharacterNone = 0,
    MatchRoomCharacterLeader = 1,
    MatchRoomCharacterMember = 2,
    MatchRoomCharacterWatcher = 3,
}
impl MatchRoomCharacterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchRoomCharacterNone => "MatchRoomCharacter_None",
            Self::MatchRoomCharacterLeader => "MatchRoomCharacter_Leader",
            Self::MatchRoomCharacterMember => "MatchRoomCharacter_Member",
            Self::MatchRoomCharacterWatcher => "MatchRoomCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacter_None" => Some(Self::MatchRoomCharacterNone),
            "MatchRoomCharacter_Leader" => Some(Self::MatchRoomCharacterLeader),
            "MatchRoomCharacter_Member" => Some(Self::MatchRoomCharacterMember),
            "MatchRoomCharacter_Watcher" => Some(Self::MatchRoomCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchRoomCharacterStatus {
    None = 0,
    Idle = 1,
    Operating = 2,
    Ready = 3,
    Fighting = 4,
    Watching = 5,
}
impl MatchRoomCharacterStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MatchRoomCharacterStatus_None",
            Self::Idle => "MatchRoomCharacterStatus_Idle",
            Self::Operating => "MatchRoomCharacterStatus_Operating",
            Self::Ready => "MatchRoomCharacterStatus_Ready",
            Self::Fighting => "MatchRoomCharacterStatus_Fighting",
            Self::Watching => "MatchRoomCharacterStatus_Watching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacterStatus_None" => Some(Self::None),
            "MatchRoomCharacterStatus_Idle" => Some(Self::Idle),
            "MatchRoomCharacterStatus_Operating" => Some(Self::Operating),
            "MatchRoomCharacterStatus_Ready" => Some(Self::Ready),
            "MatchRoomCharacterStatus_Fighting" => Some(Self::Fighting),
            "MatchRoomCharacterStatus_Watching" => Some(Self::Watching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleCheckStrategyType {
    BattleCheckStrategyIdentical = 0,
    BattleCheckStrategyServer = 1,
    BattleCheckStrategyClient = 2,
}
impl BattleCheckStrategyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleCheckStrategyIdentical => "BATTLE_CHECK_STRATEGY_IDENTICAL",
            Self::BattleCheckStrategyServer => "BATTLE_CHECK_STRATEGY_SERVER",
            Self::BattleCheckStrategyClient => "BATTLE_CHECK_STRATEGY_CLIENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_STRATEGY_IDENTICAL" => Some(Self::BattleCheckStrategyIdentical),
            "BATTLE_CHECK_STRATEGY_SERVER" => Some(Self::BattleCheckStrategyServer),
            "BATTLE_CHECK_STRATEGY_CLIENT" => Some(Self::BattleCheckStrategyClient),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleCheckResultType {
    BattleCheckResultSucc = 0,
    BattleCheckResultFail = 1,
    BattleCheckResultPass = 2,
}
impl BattleCheckResultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleCheckResultSucc => "BATTLE_CHECK_RESULT_SUCC",
            Self::BattleCheckResultFail => "BATTLE_CHECK_RESULT_FAIL",
            Self::BattleCheckResultPass => "BATTLE_CHECK_RESULT_PASS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_RESULT_SUCC" => Some(Self::BattleCheckResultSucc),
            "BATTLE_CHECK_RESULT_FAIL" => Some(Self::BattleCheckResultFail),
            "BATTLE_CHECK_RESULT_PASS" => Some(Self::BattleCheckResultPass),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleModuleType {
    BattleModuleMaze = 0,
    BattleModuleChallenge = 1,
    BattleModuleCocoon = 2,
    BattleModuleRogue = 3,
    BattleModuleChallengeActivity = 4,
    BattleModuleTrialLevel = 5,
    BattleModuleAetherDivide = 6,
}
impl BattleModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleModuleMaze => "BATTLE_MODULE_MAZE",
            Self::BattleModuleChallenge => "BATTLE_MODULE_CHALLENGE",
            Self::BattleModuleCocoon => "BATTLE_MODULE_COCOON",
            Self::BattleModuleRogue => "BATTLE_MODULE_ROGUE",
            Self::BattleModuleChallengeActivity => "BATTLE_MODULE_CHALLENGE_ACTIVITY",
            Self::BattleModuleTrialLevel => "BATTLE_MODULE_TRIAL_LEVEL",
            Self::BattleModuleAetherDivide => "BATTLE_MODULE_AETHER_DIVIDE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_MODULE_MAZE" => Some(Self::BattleModuleMaze),
            "BATTLE_MODULE_CHALLENGE" => Some(Self::BattleModuleChallenge),
            "BATTLE_MODULE_COCOON" => Some(Self::BattleModuleCocoon),
            "BATTLE_MODULE_ROGUE" => Some(Self::BattleModuleRogue),
            "BATTLE_MODULE_CHALLENGE_ACTIVITY" => {
                Some(Self::BattleModuleChallengeActivity)
            }
            "BATTLE_MODULE_TRIAL_LEVEL" => Some(Self::BattleModuleTrialLevel),
            "BATTLE_MODULE_AETHER_DIVIDE" => Some(Self::BattleModuleAetherDivide),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AetherdivideSpiritLineupType {
    AetherdivideSpiritLineupNone = 0,
    AetherdivideSpiritLineupNormal = 1,
    AetherdivideSpiritLineupTrial = 2,
}
impl AetherdivideSpiritLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AetherdivideSpiritLineupNone => "AETHERDIVIDE_SPIRIT_LINEUP_NONE",
            Self::AetherdivideSpiritLineupNormal => "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL",
            Self::AetherdivideSpiritLineupTrial => "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AETHERDIVIDE_SPIRIT_LINEUP_NONE" => Some(Self::AetherdivideSpiritLineupNone),
            "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL" => {
                Some(Self::AetherdivideSpiritLineupNormal)
            }
            "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL" => {
                Some(Self::AetherdivideSpiritLineupTrial)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleTargetType {
    None = 0,
    Score = 1,
    Achievement = 2,
    Raid = 3,
    ChallengeScore = 4,
    Common = 5,
    ClientAchievement = 6,
}
impl BattleTargetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BATTLE_TARGET_TYPE_NONE",
            Self::Score => "BATTLE_TARGET_TYPE_SCORE",
            Self::Achievement => "BATTLE_TARGET_TYPE_ACHIEVEMENT",
            Self::Raid => "BATTLE_TARGET_TYPE_RAID",
            Self::ChallengeScore => "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            Self::Common => "BATTLE_TARGET_TYPE_COMMON",
            Self::ClientAchievement => "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_TARGET_TYPE_NONE" => Some(Self::None),
            "BATTLE_TARGET_TYPE_SCORE" => Some(Self::Score),
            "BATTLE_TARGET_TYPE_ACHIEVEMENT" => Some(Self::Achievement),
            "BATTLE_TARGET_TYPE_RAID" => Some(Self::Raid),
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE" => Some(Self::ChallengeScore),
            "BATTLE_TARGET_TYPE_COMMON" => Some(Self::Common),
            "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT" => Some(Self::ClientAchievement),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeathSource {
    Unknown = 0,
    KilledByOthers = 1,
    KilledBySelf = 2,
    Escape = 3,
}
impl DeathSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::KilledByOthers => "KILLED_BY_OTHERS",
            Self::KilledBySelf => "KILLED_BY_SELF",
            Self::Escape => "ESCAPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "KILLED_BY_OTHERS" => Some(Self::KilledByOthers),
            "KILLED_BY_SELF" => Some(Self::KilledBySelf),
            "ESCAPE" => Some(Self::Escape),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleTag {
    TagNone = 0,
    TagHideNpcMonster = 1,
}
impl BattleTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TagNone => "TAG_NONE",
            Self::TagHideNpcMonster => "TAG_HIDE_NPC_MONSTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TAG_NONE" => Some(Self::TagNone),
            "TAG_HIDE_NPC_MONSTER" => Some(Self::TagHideNpcMonster),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Deggbdogegg {
    NormalCreate = 0,
    FormChange = 1,
}
impl Deggbdogegg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NormalCreate => "NORMAL_CREATE",
            Self::FormChange => "FORM_CHANGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NORMAL_CREATE" => Some(Self::NormalCreate),
            "FORM_CHANGE" => Some(Self::FormChange),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndReason {
    None = 0,
    AllDie = 1,
    TurnLimit = 2,
}
impl BattleEndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BATTLE_END_REASON_NONE",
            Self::AllDie => "BATTLE_END_REASON_ALL_DIE",
            Self::TurnLimit => "BATTLE_END_REASON_TURN_LIMIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_REASON_NONE" => Some(Self::None),
            "BATTLE_END_REASON_ALL_DIE" => Some(Self::AllDie),
            "BATTLE_END_REASON_TURN_LIMIT" => Some(Self::TurnLimit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleStaticticEventType {
    BattleStaticticEventNone = 0,
    BattleStaticticEventTreasureDungeonAddExplore = 1,
    BattleStaticticEventTreasureDungeonOpenGrid = 2,
    BattleStaticticEventTreasureDungeonPickupItem = 3,
    BattleStaticticEventTreasureDungeonUseBuff = 4,
    BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer = 5,
}
impl BattleStaticticEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleStaticticEventNone => "BATTLE_STATICTIC_EVENT_NONE",
            Self::BattleStaticticEventTreasureDungeonAddExplore => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE"
            }
            Self::BattleStaticticEventTreasureDungeonOpenGrid => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID"
            }
            Self::BattleStaticticEventTreasureDungeonPickupItem => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM"
            }
            Self::BattleStaticticEventTreasureDungeonUseBuff => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF"
            }
            Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer => {
                "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_STATICTIC_EVENT_NONE" => Some(Self::BattleStaticticEventNone),
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE" => {
                Some(Self::BattleStaticticEventTreasureDungeonAddExplore)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID" => {
                Some(Self::BattleStaticticEventTreasureDungeonOpenGrid)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM" => {
                Some(Self::BattleStaticticEventTreasureDungeonPickupItem)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF" => {
                Some(Self::BattleStaticticEventTreasureDungeonUseBuff)
            }
            "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER" => {
                Some(Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eanjmakdnme {
    KNone = 0,
    KkillEliteMonsterNum = 1,
    KkillMonsterNum = 2,
}
impl Eanjmakdnme {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KNone => "kNone",
            Self::KkillEliteMonsterNum => "kkillEliteMonsterNum",
            Self::KkillMonsterNum => "kkillMonsterNum",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kNone" => Some(Self::KNone),
            "kkillEliteMonsterNum" => Some(Self::KkillEliteMonsterNum),
            "kkillMonsterNum" => Some(Self::KkillMonsterNum),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndStatus {
    BattleEndNone = 0,
    BattleEndWin = 1,
    BattleEndLose = 2,
    BattleEndQuit = 3,
}
impl BattleEndStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleEndNone => "BATTLE_END_NONE",
            Self::BattleEndWin => "BATTLE_END_WIN",
            Self::BattleEndLose => "BATTLE_END_LOSE",
            Self::BattleEndQuit => "BATTLE_END_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_NONE" => Some(Self::BattleEndNone),
            "BATTLE_END_WIN" => Some(Self::BattleEndWin),
            "BATTLE_END_LOSE" => Some(Self::BattleEndLose),
            "BATTLE_END_QUIT" => Some(Self::BattleEndQuit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightGameMode {
    None = 0,
    Match3 = 1,
}
impl FightGameMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FIGHT_GAME_MODE_NONE",
            Self::Match3 => "FIGHT_GAME_MODE_MATCH3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_GAME_MODE_NONE" => Some(Self::None),
            "FIGHT_GAME_MODE_MATCH3" => Some(Self::Match3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightKickoutType {
    FightKickoutUnknown = 0,
    FightKickoutBlack = 1,
    FightKickoutByGm = 2,
    FightKickoutTimeout = 3,
    FightKickoutSessionReset = 4,
}
impl FightKickoutType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightKickoutUnknown => "FIGHT_KICKOUT_UNKNOWN",
            Self::FightKickoutBlack => "FIGHT_KICKOUT_BLACK",
            Self::FightKickoutByGm => "FIGHT_KICKOUT_BY_GM",
            Self::FightKickoutTimeout => "FIGHT_KICKOUT_TIMEOUT",
            Self::FightKickoutSessionReset => "FIGHT_KICKOUT_SESSION_RESET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_KICKOUT_UNKNOWN" => Some(Self::FightKickoutUnknown),
            "FIGHT_KICKOUT_BLACK" => Some(Self::FightKickoutBlack),
            "FIGHT_KICKOUT_BY_GM" => Some(Self::FightKickoutByGm),
            "FIGHT_KICKOUT_TIMEOUT" => Some(Self::FightKickoutTimeout),
            "FIGHT_KICKOUT_SESSION_RESET" => Some(Self::FightKickoutSessionReset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LobbyCharacterType {
    LobbyCharacterNone = 0,
    LobbyCharacterLeader = 1,
    LobbyCharacterMember = 2,
    LobbyCharacterWatcher = 3,
}
impl LobbyCharacterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LobbyCharacterNone => "LobbyCharacter_None",
            Self::LobbyCharacterLeader => "LobbyCharacter_Leader",
            Self::LobbyCharacterMember => "LobbyCharacter_Member",
            Self::LobbyCharacterWatcher => "LobbyCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacter_None" => Some(Self::LobbyCharacterNone),
            "LobbyCharacter_Leader" => Some(Self::LobbyCharacterLeader),
            "LobbyCharacter_Member" => Some(Self::LobbyCharacterMember),
            "LobbyCharacter_Watcher" => Some(Self::LobbyCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LobbyCharacterStatus {
    None = 0,
    Idle = 1,
    Operating = 2,
    Ready = 3,
    Fighting = 4,
    Watching = 5,
    Matching = 6,
}
impl LobbyCharacterStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "LobbyCharacterStatus_None",
            Self::Idle => "LobbyCharacterStatus_Idle",
            Self::Operating => "LobbyCharacterStatus_Operating",
            Self::Ready => "LobbyCharacterStatus_Ready",
            Self::Fighting => "LobbyCharacterStatus_Fighting",
            Self::Watching => "LobbyCharacterStatus_Watching",
            Self::Matching => "LobbyCharacterStatus_Matching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacterStatus_None" => Some(Self::None),
            "LobbyCharacterStatus_Idle" => Some(Self::Idle),
            "LobbyCharacterStatus_Operating" => Some(Self::Operating),
            "LobbyCharacterStatus_Ready" => Some(Self::Ready),
            "LobbyCharacterStatus_Fighting" => Some(Self::Fighting),
            "LobbyCharacterStatus_Watching" => Some(Self::Watching),
            "LobbyCharacterStatus_Matching" => Some(Self::Matching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LobbyModifyType {
    None = 0,
    Idle = 1,
    Ready = 2,
    Operating = 3,
    CancelMatch = 4,
    Match = 5,
    QuitLobby = 6,
    KickOut = 7,
    TimeOut = 8,
    JoinLobby = 9,
    LobbyDismiss = 10,
    MatchTimeOut = 11,
    FightStart = 12,
    Logout = 13,
    FightEnd = 14,
    FightRoomDestroyInInit = 15,
}
impl LobbyModifyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "LobbyModifyType_None",
            Self::Idle => "LobbyModifyType_Idle",
            Self::Ready => "LobbyModifyType_Ready",
            Self::Operating => "LobbyModifyType_Operating",
            Self::CancelMatch => "LobbyModifyType_CancelMatch",
            Self::Match => "LobbyModifyType_Match",
            Self::QuitLobby => "LobbyModifyType_QuitLobby",
            Self::KickOut => "LobbyModifyType_KickOut",
            Self::TimeOut => "LobbyModifyType_TimeOut",
            Self::JoinLobby => "LobbyModifyType_JoinLobby",
            Self::LobbyDismiss => "LobbyModifyType_LobbyDismiss",
            Self::MatchTimeOut => "LobbyModifyType_MatchTimeOut",
            Self::FightStart => "LobbyModifyType_FightStart",
            Self::Logout => "LobbyModifyType_Logout",
            Self::FightEnd => "LobbyModifyType_FightEnd",
            Self::FightRoomDestroyInInit => "LobbyModifyType_FightRoomDestroyInInit",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyModifyType_None" => Some(Self::None),
            "LobbyModifyType_Idle" => Some(Self::Idle),
            "LobbyModifyType_Ready" => Some(Self::Ready),
            "LobbyModifyType_Operating" => Some(Self::Operating),
            "LobbyModifyType_CancelMatch" => Some(Self::CancelMatch),
            "LobbyModifyType_Match" => Some(Self::Match),
            "LobbyModifyType_QuitLobby" => Some(Self::QuitLobby),
            "LobbyModifyType_KickOut" => Some(Self::KickOut),
            "LobbyModifyType_TimeOut" => Some(Self::TimeOut),
            "LobbyModifyType_JoinLobby" => Some(Self::JoinLobby),
            "LobbyModifyType_LobbyDismiss" => Some(Self::LobbyDismiss),
            "LobbyModifyType_MatchTimeOut" => Some(Self::MatchTimeOut),
            "LobbyModifyType_FightStart" => Some(Self::FightStart),
            "LobbyModifyType_Logout" => Some(Self::Logout),
            "LobbyModifyType_FightEnd" => Some(Self::FightEnd),
            "LobbyModifyType_FightRoomDestroyInInit" => {
                Some(Self::FightRoomDestroyInInit)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FightRoomDestroyReason {
    None = 0,
    SvrStop = 1,
    GameEnd = 2,
}
impl FightRoomDestroyReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FIGHT_ROOM_DESTROY_REASON_NONE",
            Self::SvrStop => "FIGHT_ROOM_DESTROY_REASON_SVR_STOP",
            Self::GameEnd => "FIGHT_ROOM_DESTROY_REASON_GAME_END",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_ROOM_DESTROY_REASON_NONE" => Some(Self::None),
            "FIGHT_ROOM_DESTROY_REASON_SVR_STOP" => Some(Self::SvrStop),
            "FIGHT_ROOM_DESTROY_REASON_GAME_END" => Some(Self::GameEnd),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Match3FinishReason {
    Default = 0,
    Leave = 1,
    Die = 2,
    Gameend = 3,
    Kickout = 4,
}
impl Match3FinishReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "MATCH3_FINISH_REASON_DEFAULT",
            Self::Leave => "MATCH3_FINISH_REASON_LEAVE",
            Self::Die => "MATCH3_FINISH_REASON_DIE",
            Self::Gameend => "MATCH3_FINISH_REASON_GAMEEND",
            Self::Kickout => "MATCH3_FINISH_REASON_KICKOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_FINISH_REASON_DEFAULT" => Some(Self::Default),
            "MATCH3_FINISH_REASON_LEAVE" => Some(Self::Leave),
            "MATCH3_FINISH_REASON_DIE" => Some(Self::Die),
            "MATCH3_FINISH_REASON_GAMEEND" => Some(Self::Gameend),
            "MATCH3_FINISH_REASON_KICKOUT" => Some(Self::Kickout),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchUnitType {
    None = 0,
    Normal = 1,
    Robot = 2,
    Gm = 3,
}
impl MatchUnitType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MATCH_UNIT_TYPE_NONE",
            Self::Normal => "MATCH_UNIT_TYPE_NORMAL",
            Self::Robot => "MATCH_UNIT_TYPE_ROBOT",
            Self::Gm => "MATCH_UNIT_TYPE_GM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH_UNIT_TYPE_NONE" => Some(Self::None),
            "MATCH_UNIT_TYPE_NORMAL" => Some(Self::Normal),
            "MATCH_UNIT_TYPE_ROBOT" => Some(Self::Robot),
            "MATCH_UNIT_TYPE_GM" => Some(Self::Gm),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Retcode {
    RetSucc = 0,
    RetFail = 1,
    RetServerInternalError = 2,
    RetTimeout = 3,
    RetRepeatedReq = 4,
    RetReqParaInvalid = 5,
    RetPlayerDataError = 6,
    RetPlayerClientPaused = 7,
    RetFuncCheckFailed = 8,
    RetFeatureSwitchClosed = 9,
    RetFreqOverLimit = 10,
    RetSystemBusy = 11,
    RetPlayerNotOnline = 12,
    RetOperationInCd = 13,
    RetRepeateLogin = 1000,
    RetRetryLogin = 1001,
    RetWaitLogin = 1002,
    RetNotInWhiteList = 1003,
    RetInBlackList = 1004,
    RetAccountVerifyError = 1005,
    RetAccountParaError = 1006,
    RetAntiAddictLogin = 1007,
    RetCheckSumError = 1008,
    RetReachMaxPlayerNum = 1009,
    RetAlreadyRegistered = 1010,
    RetGenderError = 1011,
    SetNicknameRetCallbackProcessing = 1012,
    RetInGmBindAccess = 1013,
    RetQuestRewardAlreadyTaken = 1100,
    RetQuestNotAccept = 1101,
    RetQuestNotFinish = 1102,
    RetQuestStatusError = 1103,
    RetAchievementLevelNotReach = 1104,
    RetAchievementLevelAlreadyTaken = 1105,
    RetAvatarNotExist = 1200,
    RetAvatarResExpNotEnough = 1201,
    RetAvatarExpReachPromotionLimit = 1202,
    RetAvatarReachMaxPromotion = 1203,
    RetSkilltreeConfigNotExist = 1204,
    RetSkilltreeAlreadyUnlock = 1205,
    RetSkilltreePreLocked = 1206,
    RetSkilltreeLevelNotMeet = 1207,
    RetSkilltreeRankNotMeet = 1208,
    RetAvatarDressNoEquipment = 1209,
    RetAvatarExpItemNotExist = 1210,
    RetSkilltreePointLocked = 1211,
    RetSkilltreePointLevelUpgradeNotMatch = 1212,
    RetSkilltreePointLevelReachMax = 1213,
    RetWorldLevelNotMeet = 1214,
    RetPlayerLevelNotMeet = 1215,
    RetAvatarRankNotMatch = 1216,
    RetAvatarRankReachMax = 1217,
    RetHeroBasicTypeNotMatch = 1218,
    RetAvatarPromotionNotMeet = 1219,
    RetPromotionRewardConfigNotExist = 1220,
    RetPromotionRewardAlreadyTaken = 1221,
    RetAvatarSkinItemNotExist = 1222,
    RetAvatarSkinAlreadyDressed = 1223,
    RetAvatarNotDressSkin = 1224,
    RetAvatarSkinNotMatchAvatar = 1225,
    RetAvatarPathNotMatch = 1226,
    RetItemNotExist = 1300,
    RetItemCostNotEnough = 1301,
    RetItemCostTooMuch = 1302,
    RetItemNoCost = 1303,
    RetItemNotEnough = 1304,
    RetItemInvalid = 1305,
    RetItemConfigNotExist = 1306,
    RetScoinNotEnough = 1307,
    RetItemRewardExceedLimit = 1308,
    RetItemInvalidUse = 1309,
    RetItemUseConfigNotExist = 1310,
    RetRewardConfigNotExist = 1311,
    RetItemExceedLimit = 1312,
    RetItemCountInvalid = 1313,
    RetItemUseTargetTypeInvalid = 1314,
    RetItemUseSatietyFull = 1315,
    RetItemComposeNotExist = 1316,
    RetRelicComposeNotExist = 1317,
    RetItemCanNotSell = 1318,
    RetItemSellExceddLimit = 1319,
    RetItemNotInCostList = 1320,
    RetItemSpecialCostNotEnough = 1321,
    RetItemSpecialCostTooMuch = 1322,
    RetItemFormulaNotExist = 1323,
    RetItemAutoGiftOptionalNotExist = 1324,
    RetRelicComposeRelicInvalid = 1325,
    RetRelicComposeMainAffixIdInvalid = 1326,
    RetRelicComposeWrongFormulaType = 1327,
    RetRelicComposeRelicNotExist = 1328,
    RetRelicComposeBlackGoldCountInvalid = 1329,
    RetRelicComposeBlackGoldNotNeed = 1330,
    RetMonthCardCannotUse = 1331,
    RetItemRewardExceedDisappear = 1332,
    RetItemNeedRecycle = 1333,
    RetItemComposeExceedLimit = 1334,
    RetItemCanNotDestroy = 1335,
    RetItemAlreadyMark = 1336,
    RetItemMarkExceedLimit = 1337,
    RetItemNotMark = 1338,
    RetItenTurnFoodNotSet = 1339,
    RetItemTurnFoodAlreadySet = 1340,
    RetItemTurnFoodConsumeTypeError = 1341,
    RetItemTurnFoodSwitchAlreadyOpen = 1342,
    RetItemTurnFoodSwitchAlreadyClose = 1343,
    RetHcoinExchangeTooMuch = 1344,
    RetItemTurnFoodSceneTypeError = 1345,
    RetEquipmentAlreadyDressed = 1350,
    RetEquipmentNotExist = 1351,
    RetEquipmentReachLevelLimit = 1352,
    RetEquipmentConsumeSelf = 1353,
    RetEquipmentAlreadyLocked = 1354,
    RetEquipmentAlreadyUnlocked = 1355,
    RetEquipmentLocked = 1356,
    RetEquipmentSelectNumOverLimit = 1357,
    RetEquipmentRankUpMustConsumeSameTid = 1358,
    RetEquipmentPromotionReachMax = 1359,
    RetEquipmentRankUpReachMax = 1360,
    RetEquipmentLevelReachMax = 1361,
    RetEquipmentExceedLimit = 1362,
    RetRelicNotExist = 1363,
    RetRelicReachLevelLimit = 1364,
    RetRelicConsumeSelf = 1365,
    RetRelicAlreadyDressed = 1366,
    RetRelicLocked = 1367,
    RetRelicAlreadyLocked = 1368,
    RetRelicAlreadyUnlocked = 1369,
    RetRelicLevelIsNotZero = 1370,
    RetUniqueIdRepeated = 1371,
    RetEquipmentLevelNotMeet = 1372,
    RetEquipmentItemNotInCostList = 1373,
    RetEquipmentLevelGreaterThanOne = 1374,
    RetEquipmentAlreadyRanked = 1375,
    RetRelicExceedLimit = 1376,
    RetRelicAlreadyDiscarded = 1377,
    RetRelicAlreadyUndiscarded = 1378,
    RetEquipmentBatchLockTooFast = 1379,
    RetRelicFilterPlanSlotEmpty = 1380,
    RetRelicFilterPlanNumExceedLimit = 1381,
    RetRelicFilterPlanNameUtf8Error = 1382,
    RetRelicFilterPlanNameFormatError = 1383,
    RetRelicFilterPlanNoChange = 1384,
    RetRelicReforgeNotConfirmed = 1385,
    RetLineupInvalidIndex = 1400,
    RetLineupInvalidMemberPos = 1401,
    RetLineupSwapNotExist = 1402,
    RetLineupAvatarAlreadyIn = 1403,
    RetLineupCreateAvatarError = 1404,
    RetLineupAvatarInitError = 1405,
    RetLineupNotExist = 1406,
    RetLineupOnlyOneMember = 1407,
    RetLineupSameLeaderSlot = 1408,
    RetLineupNoLeaderSelect = 1409,
    RetLineupSwapSameSlot = 1410,
    RetLineupAvatarNotExist = 1411,
    RetLineupTrialAvatarCanNotQuit = 1412,
    RetLineupVirtualLineupPlaneNotMatch = 1413,
    RetLineupNotValidLeader = 1414,
    RetLineupSameIndex = 1415,
    RetLineupIsEmpty = 1416,
    RetLineupNameFormatError = 1417,
    RetLineupTypeNotMatch = 1418,
    RetLineupReplaceAllFailed = 1419,
    RetLineupNotAllowEdit = 1420,
    RetLineupAvatarIsAlive = 1421,
    RetLineupAssistHasOnlyMember = 1422,
    RetLineupAssistCannotSwitch = 1423,
    RetLineupAvatarTypeInvalid = 1424,
    RetLineupNameUtf8Error = 1425,
    RetLineupLeaderLock = 1426,
    RetLineupStoryLineNotMatch = 1427,
    RetLineupAvatarLock = 1428,
    RetLineupAvatarInvalid = 1429,
    RetLineupAvatarAlreadyInit = 1430,
    RetLineupLimited = 1431,
    RetMailNotExist = 1700,
    RetMailRangeInvalid = 1701,
    RetMailMailIdInvalid = 1702,
    RetMailNoMailTakeAttachment = 1703,
    RetMailNoMailToDel = 1704,
    RetMailTypeInvalid = 1705,
    RetMailParaInvalid = 1706,
    RetMailAttachementInvalid = 1707,
    RetMailTicketInvalid = 1708,
    RetMailTicketRepeated = 1709,
    RetStageSettleError = 1800,
    RetStageConfigNotExist = 1801,
    RetStageNotFound = 1802,
    RetStageCocoonPropNotValid = 1804,
    RetStageCocoonWaveNotValid = 1805,
    RetStagePropIdNotEqual = 1806,
    RetStageCocoonWaveOver = 1807,
    RetStageWeekCocoonOverCnt = 1808,
    RetStageCocoonNotOpen = 1809,
    RetStageTrialNotOpen = 1810,
    RetStageFarmNotOpen = 1811,
    RetStageFarmTypeError = 1812,
    RetChapterLock = 1900,
    RetChapterChallengeNumNotEnough = 1901,
    RetChapterRewardIdNotExist = 1902,
    RetChapterRewardAlreadyTaken = 1903,
    RetBattleStageNotMatch = 2000,
    RetInBattleNow = 2001,
    RetBattleCheat = 2002,
    RetBattleFail = 2003,
    RetBattleNoLineup = 2004,
    RetBattleLineupEmpty = 2005,
    RetBattleVersionNotMatch = 2006,
    RetBattleQuitByServer = 2007,
    RetInBattleCheck = 2008,
    RetBattleCheckNeedRetry = 2009,
    RetBattleCostTimeCheckFail = 2010,
    RetLackExchangeStaminaTimes = 2100,
    RetLackStamina = 2101,
    RetStaminaFull = 2102,
    RetAuthkeySignTypeError = 2103,
    RetAuthkeySignVerError = 2104,
    RetNicknameFormatError = 2105,
    RetSensitiveWords = 2106,
    RetLevelRewardHasTaken = 2107,
    RetLevelRewardLevelError = 2108,
    RetLanguageInvalid = 2109,
    RetNicknameInCd = 2110,
    RetGameplayBirthdayInvalid = 2111,
    RetGameplayBirthdayAlreadySet = 2112,
    RetNicknameUtf8Error = 2113,
    RetNicknameDigitLimitError = 2114,
    RetSensitiveWordsPlatformError = 2115,
    RetPlayerSettingTypeInvalid = 2116,
    RetMazeLackTicket = 2201,
    RetMazeNotUnlock = 2202,
    RetMazeNoAbility = 2204,
    RetMazeNoPlane = 2205,
    RetMazeMapNotExist = 2207,
    RetMazeMpNotEnough = 2213,
    RetSpringNotEnable = 2214,
    RetSpringTooFar = 2216,
    RetNotInMaze = 2218,
    RetMazeTimeOfDayTypeError = 2223,
    RetSceneTransferLockedByTask = 2224,
    RetPlotNotUnlock = 2300,
    RetMissionNotExist = 2400,
    RetMissionAlreadyDone = 2401,
    RetDailyTaskNotFinish = 2402,
    RetDailyTaskRewardHasTaken = 2403,
    RetMissionNotFinish = 2404,
    RetMissionNotDoing = 2405,
    RetMissionFinishWayNotMatch = 2406,
    RetMissionSceneNotMatch = 2407,
    RetMissionCustomValueNotValid = 2408,
    RetMissionSubMissionNotMatch = 2409,
    RetAdventureMapNotExist = 2500,
    RetSceneEntityNotExist = 2600,
    RetNotInScene = 2601,
    RetSceneMonsterNotExist = 2602,
    RetInteractConfigNotExist = 2603,
    RetUnsupportedPropState = 2604,
    RetSceneEntryIdNotMatch = 2605,
    RetSceneEntityMoveCheckFailed = 2606,
    RetAssistMonsterCountLimit = 2607,
    RetSceneUseSkillFail = 2608,
    RetPropIsHidden = 2609,
    RetLoadingSuccAlready = 2610,
    RetSceneEntityTypeInvalid = 2611,
    RetInteractTypeInvalid = 2612,
    RetInteractNotInRegion = 2613,
    RetInteractSubTypeInvalid = 2614,
    RetNotLeaderEntity = 2615,
    RetMonsterIsNotFarmElement = 2616,
    RetMonsterConfigNotExist = 2617,
    RetAvatarHpAlreadyFull = 2618,
    RetCurInteractEntityNotMatch = 2619,
    RetPlaneTypeNotAllow = 2620,
    RetGroupNotExist = 2621,
    RetGroupSaveDataInCd = 2622,
    RetGroupSaveLenghReachMax = 2623,
    RetRecentElementNotExist = 2624,
    RetRecentElementStageNotMatch = 2625,
    RetScenePositionVersionNotMatch = 2626,
    RetGameplayCounterNotExist = 2627,
    RetGameplayCounterNotEnough = 2628,
    RetGroupStateNotMatch = 2629,
    RetSceneEntityPosNotMatch = 2630,
    RetGroupStateCustomSaveDataOff = 2631,
    RetSceneNotMatch = 2632,
    RetPropTypeInvalid = 2633,
    RetBuyTimesLimit = 2700,
    RetBuyLimitType = 2701,
    RetShopNotOpen = 2702,
    RetGoodsNotOpen = 2703,
    RetCityLevelRewardTaken = 2704,
    RetCityLevelNotMeet = 2705,
    RetSingleBuyLimit = 2706,
    RetTutorialNotUnlock = 2751,
    RetTutorialUnlockAlready = 2752,
    RetTutorialFinishAlready = 2753,
    RetTutorialPreNotUnlock = 2754,
    RetTutorialPlayerLevelNotMatch = 2755,
    RetTutorialTutorialNotFound = 2756,
    RetChallengeNotExist = 2801,
    RetChallengeNotUnlock = 2802,
    RetChallengeAlready = 2803,
    RetChallengeLineupEditForbidden = 2804,
    RetChallengeLineupEmpty = 2805,
    RetChallengeNotDoing = 2806,
    RetChallengeNotFinish = 2807,
    RetChallengeTargetNotFinish = 2808,
    RetChallengeTargetRewardTaken = 2809,
    RetChallengeTimeNotValid = 2810,
    RetChallengeStarsCountNotMeet = 2811,
    RetChallengeStarsRewardTaken = 2812,
    RetChallengeStarsNotExist = 2813,
    RetChallengeCurSceneNotEntryFloor = 2814,
    RetChallengeNoTeamArchive = 2815,
    RetChallengeLineupAvatarTypeInvalid = 2816,
    RetChallengeLineupRecommendInCd = 2817,
    RetBasicTypeAlready = 2850,
    RetNoBasicType = 2851,
    RetNotChooseBasicType = 2852,
    RetNotFuncClose = 2853,
    RetNotChooseGender = 2854,
    RetNotReqUnlockBasicType = 2855,
    RetAvatarPathLocked = 2856,
    RetRogueStatusNotMatch = 2901,
    RetRogueSelectBuffNotExist = 2902,
    RetRogueCoinNotEnough = 2903,
    RetRogueStaminaNotEnough = 2904,
    RetRogueAppraisalCountNotEnough = 2905,
    RetRoguePropAlreadyUsed = 2906,
    RetRogueRecordAlreadySaved = 2907,
    RetRogueRollBuffMaxCount = 2908,
    RetRoguePickAvatarInvalid = 2909,
    RetRogueQuestExpire = 2910,
    RetRogueQuestRewardAlready = 2911,
    RetRogueReviveCountNotEnough = 2912,
    RetRogueAreaInvalid = 2913,
    RetRogueScoreRewardPoolInvalid = 2914,
    RetRogueScoreRewardRowInvalid = 2915,
    RetRogueAeonLevelNotMeet = 2916,
    RetRogueAeonLevelRewardAlreadyTaken = 2917,
    RetRogueAeonConfigNotExist = 2918,
    RetRogueTrialAvatarInvalid = 2919,
    RetRogueHandbookRewardAlreadyTaken = 2920,
    RetRogueRoomTypeNotMatch = 2921,
    RetRogueShopGoodNotFound = 2922,
    RetRogueShopGoodAlreadyBought = 2923,
    RetRogueShopGoodAlreadyOwn = 2924,
    RetRogueShopMiracleNotExist = 2925,
    RetRogueShopNotExist = 2926,
    RetRogueShopCannotRefresh = 2927,
    RetRogueSelectBuffCertainMismatch = 2928,
    RetMissionEventConfigNotExist = 2951,
    RetMissionEventNotClient = 2952,
    RetMissionEventFinished = 2953,
    RetMissionEventDoing = 2954,
    RetHasChallengeMissionEvent = 2955,
    RetNotChallengeMissionEvent = 2956,
    RetGachaIdNotExist = 3001,
    RetGachaNumInvalid = 3002,
    RetGachaFirstGachaMustOne = 3003,
    RetGachaReqDuplicated = 3004,
    RetGachaNotInSchedule = 3005,
    RetGachaNewbieClose = 3006,
    RetGachaTodayLimited = 3007,
    RetGachaNotSupport = 3008,
    RetGachaCeilingNotEnough = 3009,
    RetGachaCeilingClose = 3010,
    RetNotInRaid = 3101,
    RetRaidDoing = 3102,
    RetNotProp = 3103,
    RetRaidIdNotMatch = 3104,
    RetRaidRestartNotMatch = 3105,
    RetRaidLimit = 3106,
    RetRaidAvatarListEmpty = 3107,
    RetRaidAvatarNotExist = 3108,
    RetChallengeRaidRewardAlready = 3109,
    RetChallengeRaidScoreNotReach = 3110,
    RetChallengeRaidNotOpen = 3111,
    RetRaidFinished = 3112,
    RetRaidWorldLevelNotLock = 3113,
    RetRaidCannotUseAssist = 3114,
    RetRaidAvatarNotMatch = 3115,
    RetRaidCanNotSave = 3116,
    RetRaidNoSave = 3117,
    RetActivityRaidNotOpen = 3118,
    RetRaidAvatarCaptainNotExist = 3119,
    RetRaidStoryLineNotMatch = 3120,
    RetTalkEventAlreadyTaken = 3151,
    RetNpcAlreadyMeet = 3152,
    RetNpcNotInConfig = 3153,
    RetDialogueGroupDismatch = 3154,
    RetDialogueEventInvalid = 3155,
    RetTalkEventTakeProtoNotMatch = 3156,
    RetTalkEventNotValid = 3157,
    RetExpeditionConfigNotExist = 3201,
    RetExpeditionRewardConfigNotExist = 3202,
    RetExpeditionNotUnlocked = 3203,
    RetExpeditionAlreadyAccepted = 3204,
    RetExpeditionRepeatedAvatar = 3205,
    RetAvatarAlreadyDispatched = 3206,
    RetExpeditionNotAccepted = 3207,
    RetExpeditionNotFinish = 3208,
    RetExpeditionAlreadyFinish = 3209,
    RetExpeditionTeamCountLimit = 3210,
    RetExpeditionAvatarNumNotMatch = 3211,
    RetExpeditionNotOpen = 3212,
    RetExpeditionFriendAvatarNotValid = 3213,
    RetExpeditionNotPublished = 3214,
    RetLoginActivityHasTaken = 3301,
    RetLoginActivityDaysLack = 3302,
    RetTrialActivityRewardAlreadyTake = 3303,
    RetTrialActivityStageNotFinish = 3304,
    RetMaterialSubmitActivityHasTaken = 3305,
    RetMaterialSubmitActivityMaterialNotSubmitted = 3306,
    RetMaterialSubmitActivityMaterialAlreadySubmitted = 3307,
    RetFantasticStoryActivityStoryError = 3308,
    RetFantasticStoryActivityStoryNotOpen = 3309,
    RetFantasticStoryActivityBattleError = 3310,
    RetFantasticStoryActivityBattleNotOpen = 3311,
    RetFantasticStoryActivityBattleAvatarError = 3312,
    RetFantasticStoryActivityBattleBuffError = 3313,
    RetFantasticStoryActivityPreBattleScoreNotEnough = 3314,
    RetTrialActivityAlreadyInTrialActivity = 3315,
    RetCommonActivityNotOpen = 3316,
    RetMessageConfigNotExist = 3501,
    RetMessageSectionNotTake = 3502,
    RetMessageGroupNotTake = 3503,
    RetMessageSectionIdNotMatch = 3504,
    RetMessageSectionCanNotFinish = 3505,
    RetMessageItemCanNotFinish = 3506,
    RetMessageItemRaidCanNotFinish = 3507,
    RetFriendAlreadyIsFriend = 3601,
    RetFriendIsNotFriend = 3602,
    RetFriendApplyExpire = 3603,
    RetFriendInBlacklist = 3604,
    RetFriendNotInBlacklist = 3605,
    RetFriendNumberLimit = 3606,
    RetFriendBlacklistNumberLimit = 3607,
    RetFriendDailyApplyLimit = 3608,
    RetFriendInHandleLimit = 3609,
    RetFriendApplyInCd = 3610,
    RetFriendRemarkNameFormatError = 3611,
    RetFriendPlayerNotFound = 3612,
    RetFriendInTargetBlacklist = 3613,
    RetFriendTargetNumberLimit = 3614,
    RetAssistQueryTooFast = 3615,
    RetAssistNotExist = 3616,
    RetAssistUsedAlready = 3617,
    RetFriendReportReasonFormatError = 3618,
    RetFriendReportSensitiveWords = 3619,
    RetAssistUsedTimesOver = 3620,
    RetAssistQuitAlready = 3621,
    RetAssistAvatarInLineup = 3622,
    RetAssistNoReward = 3623,
    RetFriendSearchNumLimit = 3624,
    RetFriendSearchInCd = 3625,
    RetFriendRemarkNameUtf8Error = 3626,
    RetFriendReportReasonUtf8Error = 3627,
    RetAssistSetAlready = 3628,
    RetFriendTargetForbidOtherApply = 3629,
    RetFriendMarkedCntMax = 3630,
    RetFriendMarkedAlready = 3631,
    RetFriendNotMarked = 3632,
    RetFriendChallengeLineupRecommendInCd = 3633,
    RetViewPlayerCardInCd = 3634,
    RetViewPlayerBattleRecordInCd = 3635,
    RetPlayerBoardHeadIconNotExist = 3701,
    RetPlayerBoardHeadIconLocked = 3702,
    RetPlayerBoardHeadIconAlreadyUnlocked = 3703,
    RetPlayerBoardDisplayAvatarNotExist = 3704,
    RetPlayerBoardDisplayAvatarExceedLimit = 3705,
    RetPlayerBoardDisplayRepeatedAvatar = 3706,
    RetPlayerBoardDisplayAvatarSamePos = 3707,
    RetPlayerBoardDisplayAvatarLocked = 3708,
    RetSignatureLengthExceedLimit = 3709,
    RetSignatureSensitiveWords = 3710,
    RetPlayerBoardAssistAvatarNotExist = 3712,
    RetPlayerBoardAssistAvatarLocked = 3713,
    RetSignatureUtf8Error = 3714,
    RetPlayerBoardAssistAvatarCntError = 3715,
    RetBattlePassTierNotValid = 3801,
    RetBattlePassLevelNotMeet = 3802,
    RetBattlePassRewardTakeAlready = 3803,
    RetBattlePassNotPremium = 3804,
    RetBattlePassNotDoing = 3805,
    RetBattlePassLevelInvalid = 3806,
    RetBattlePassNotUnlock = 3807,
    RetBattlePassNoReward = 3808,
    RetBattlePassQuestNotValid = 3809,
    RetBattlePassNotChooseOptional = 3810,
    RetBattlePassNotTakeReward = 3811,
    RetBattlePassOptionalNotValid = 3812,
    RetBattlePassBuyAlready = 3813,
    RetBattlePassNearEnd = 3814,
    RetMusicLocked = 3901,
    RetMusicNotExist = 3902,
    RetMusicUnlockFailed = 3903,
    RetPunkLordLackSummonTimes = 4001,
    RetPunkLordAttackingMonsterLimit = 4002,
    RetPunkLordMonsterNotExist = 4003,
    RetPunkLordMonsterAlreadyShared = 4004,
    RetPunkLordMonsterExpired = 4005,
    RetPunkLordSelfMonsterAttackLimit = 4006,
    RetPunkLordLackSupportTimes = 4007,
    RetPunkLordMonsterAlreadyKilled = 4008,
    RetPunkLordMonsterAttackerLimit = 4009,
    RetPunkLordWorldLevleNotValid = 4010,
    RetPunkLordRewardLevleNotExist = 4011,
    RetPunkLordPointNotMeet = 4012,
    RetPunkLordInAttacking = 4013,
    RetPunkLordOperationInCd = 4014,
    RetPunkLordRewardAlreadyTaken = 4015,
    RetPunkLordOverBonusRewardLimit = 4016,
    RetPunkLordNotInSchedule = 4017,
    RetPunkLordMonsterNotAttacked = 4018,
    RetPunkLordMonsterNotKilled = 4019,
    RetPunkLordMonsterKilledScoreAlreadyTake = 4020,
    RetPunkLordRewardLevleAlreadyTake = 4021,
    RetDailyActiveLevelInvalid = 4101,
    RetDailyActiveLevelRewardAlreadyTaken = 4102,
    RetDailyActiveLevelApNotEnough = 4103,
    RetDailyMeetPam = 4201,
    RetReplayIdNotMatch = 4251,
    RetReplayReqNotValid = 4252,
    RetFightActivityDifficultyLevelNotPassed = 4301,
    RetFightActivityDifficultyLevelRewardAlreadyTake = 4302,
    RetFightActivityStageNotOpen = 4303,
    RetFightActivityLevelNotUnlock = 4304,
    RetTrainVisitorVisitorNotExist = 4351,
    RetTrainVisitorBehaviorNotExist = 4352,
    RetTrainVisitorBehaviorFinished = 4353,
    RetTrainVisitorAllBehaviorRewardTaken = 4354,
    RetTrainVisitorGetOnMissionNotFinish = 4355,
    RetTrainVisitorNotGetOffOrBeTrainMember = 4356,
    RetTextJoinUnknowIsOverride = 4401,
    RetTextJoinIdNotExist = 4402,
    RetTextJoinCanNotOverride = 4403,
    RetTextJoinItemIdError = 4404,
    RetTextJoinSensitiveCheckError = 4405,
    RetTextJoinMustOverride = 4406,
    RetTextJoinTextEmpty = 4407,
    RetTextJoinTextFormatError = 4408,
    RetTextJoinTextUtf8Error = 4409,
    RetTextJoinBatchReqIdRepeat = 4410,
    RetTextJoinTypeNotSupportBatchReq = 4411,
    RetTextJoinAvatarIdNotExist = 4412,
    RetTextJoinUnknowType = 4413,
    RetPamMissionMissionIdError = 4451,
    RetPamMissionMissionExpire = 4452,
    RetChatTypeNotExist = 4501,
    RetMsgTypeNotExist = 4502,
    RetChatNoTargetUid = 4503,
    RetChatMsgEmpty = 4504,
    RetChatMsgExceedLimit = 4505,
    RetChatMsgSensitiveCheckError = 4506,
    RetChatMsgUtf8Error = 4507,
    RetChatForbidSwitchOpen = 4508,
    RetChatForbid = 4509,
    RetChatMsgIncludeSpecialStr = 4510,
    RetChatMsgEmojiNotExist = 4511,
    RetChatMsgEmojiGenderNotMatch = 4512,
    RetChatMsgEmojiNotMarked = 4513,
    RetChatMsgEmojiAlreadyMarked = 4514,
    RetChatMsgEmojiMarkedMaxLimit = 4515,
    RetBoxingClubChallengeNotOpen = 4601,
    RetMuseumNotOpen = 4651,
    RetMuseumTurnCntNotMatch = 4652,
    RetMuseumPhaseNotReach = 4653,
    RetMuseumUnknowStuff = 4654,
    RetMuseumUnknowArea = 4655,
    RetMuseumUnknowPos = 4656,
    RetMuseumStuffAlreadyInArea = 4657,
    RetMuseumStuffNotInArea = 4658,
    RetMuseumGetNpcRepeat = 4659,
    RetMuseumGetNpcUnlock = 4660,
    RetMuseumGetNpcNotEnough = 4661,
    RetMuseumChangeStuffAreaError = 4662,
    RetMuseumNotInit = 4663,
    RetMuseumEventError = 4664,
    RetMuseumUnknowChooseEventId = 4665,
    RetMuseumEventOrderNotMatch = 4666,
    RetMuseumEventPhaseNotUnlock = 4667,
    RetMuseumEventMissionNotFound = 4668,
    RetMuseumAreaLevelUpAlready = 4669,
    RetMuseumStuffAlreadyUsed = 4670,
    RetMuseumEventRoundNotUnlock = 4671,
    RetMuseumStuffInArea = 4672,
    RetMuseumStuffDispatch = 4673,
    RetMuseumIsEnd = 4674,
    RetMuseumStuffLeaving = 4675,
    RetMuseumEventMissionNotFinish = 4678,
    RetMuseumCollectRewardNotExist = 4679,
    RetMuseumCollectRewardAlreadyTaken = 4680,
    RetMuseumAcceptMissionMaxLimit = 4681,
    RetRogueChallengeNotOpen = 4701,
    RetRogueChallengeAssisRefreshLimit = 4702,
    RetAlleyNotInit = 4721,
    RetAlleyNotOpen = 4722,
    RetAlleyMapNotExist = 4724,
    RetAlleyEmptyPosList = 4725,
    RetAlleyLinePosInvalid = 4726,
    RetAlleyShopNotUnlock = 4727,
    RetAlleyDepotFull = 4728,
    RetAlleyShopNotInclude = 4729,
    RetAlleyEventNotUnlock = 4730,
    RetAlleyEventNotRefresh = 4731,
    RetAlleyEventStateDoing = 4732,
    RetAlleyEventStateFinish = 4733,
    RetAlleyEventError = 4734,
    RetAlleyRewardLevelError = 4735,
    RetAlleyRewardPrestigeNotEnough = 4736,
    RetAlleyShipEmpty = 4737,
    RetAlleyShipIdDismatch = 4738,
    RetAlleyShipNotExist = 4739,
    RetAlleyShipNotUnlock = 4740,
    RetAlleyGoodsNotExist = 4741,
    RetAlleyGoodsNotUnlock = 4742,
    RetAlleyProfitNotPositive = 4743,
    RetAlleySpecialOrderDismatch = 4744,
    RetAlleyOrderGoodsOverLimit = 4745,
    RetAlleySpecialOrderConditionNotMeet = 4746,
    RetAlleyDepotSizeOverLimit = 4747,
    RetAlleyGoodsNotEnough = 4748,
    RetAlleyOrderIndexInvalid = 4749,
    RetAlleyRewardAlreadyTake = 4750,
    RetAlleyRewardNotExist = 4751,
    RetAlleyMainMissionNotDoing = 4752,
    RetAlleyCriticalEventNotFinish = 4753,
    RetAlleyShopGoodsNotValid = 4754,
    RetAlleySlashNotOpen = 4755,
    RetAlleyPlacingAnchorInvalid = 4756,
    RetAlleyPlacingGoodsIndexInvalid = 4757,
    RetAlleySaveMapTooQuick = 4758,
    RetAlleyMapNotLink = 4759,
    RetAlleyFundsNotLowerBase = 4760,
    RetAlleyEventNotFinish = 4761,
    RetAlleyNormalOrderNotMeet = 4762,
    RetPlayerReturnNotOpen = 4801,
    RetPlayerReturnIsSigned = 4802,
    RetPlayerReturnPointNotEnough = 4803,
    RetPlayerReturnConditionInvalid = 4804,
    RetPlayerReturnHasSigned = 4805,
    RetPlayerReturnRewardTaken = 4806,
    RetAetherDivideNoLineup = 4851,
    RetAetherDivideLineupInvalid = 4852,
    RetChatBubbleIdError = 4901,
    RetChatBubbleIdNotUnlock = 4902,
    RetPhoneThemeIdError = 4903,
    RetPhoneThemeIdNotUnlock = 4904,
    RetChatBubbleSelectIsCurrent = 4905,
    RetPhoneThemeSelectIsCurrent = 4906,
    RetChessRogueConfigNotFound = 4951,
    RetChessRogueConfigInvalid = 4952,
    RetChessRogueNoValidRoom = 4963,
    RetChessRogueNoCellInfo = 4964,
    RetChessRogueCellNotFinish = 4965,
    RetChessRogueCellIsLocked = 4966,
    RetChessRogueScheduleNotMatch = 4967,
    RetChessRogueStatusFail = 4968,
    RetChessRogueAreaNotExist = 4969,
    RetChessRogueLineupFail = 4970,
    RetChessRogueAeonFail = 4980,
    RetChessRogueEnterCellFail = 4981,
    RetChessRogueRollDiceFail = 4982,
    RetChessRogueDiceStatusFail = 4983,
    RetChessRogueDiceCntNotFull = 4984,
    RetChessRogueUnlock = 4985,
    RetChessRoguePickAvatarFail = 4986,
    RetChessRogueAvatarInvalid = 4987,
    RetChessRogueCellCanNotSelect = 4988,
    RetChessRogueDiceConfirmed = 4989,
    RetChessRogueNousDiceNotMatch = 4990,
    RetChessRogueNousDiceRarityFail = 4991,
    RetChessRogueNousDiceSurfaceDuplicate = 4992,
    RetChessRogueNotInRogue = 4993,
    RetChessRogueNousDiceBranchLimit = 4994,
    RetHeliobusNotOpen = 5101,
    RetHeliobusSnsPostNotUnlock = 5102,
    RetHeliobusSnsAlreadyRead = 5103,
    RetHeliobusSnsAlreadyLiked = 5104,
    RetHeliobusSnsAlreadyCommented = 5105,
    RetHeliobusSnsInMission = 5106,
    RetHeliobusSnsAlreadyPosted = 5107,
    RetHeliobusSnsNotDoingMission = 5108,
    RetHeliobusRewardLevelMax = 5109,
    RetHeliobusIncomeNotEnough = 5110,
    RetHeliobusSnsCommentNotUnlock = 5111,
    RetHeliobusChallengeNotUnlock = 5112,
    RetHeliobusChallengeIdError = 5113,
    RetHeliobusSkillNotUnlock = 5114,
    RetHeliobusAcceptPostMissionFail = 5115,
    RetHeliobusSkillNotSelected = 5116,
    RetHeliobusPlaneTypeInvalid = 5117,
    RetReddotParamInvalid = 5151,
    RetReddotActivityNotOpen = 5152,
    RetRogueEndlessActivityConfigError = 5201,
    RetRogueEndlessActivityNotOpen = 5202,
    RetRogueEndlessActivityOverBonusRewardLimit = 5203,
    RetRogueEndlessActivityScoreNotMeet = 5204,
    RetRogueEndlessActivityRewardLevleAlreadyTake = 5205,
    RetHeartDialScriptNotFound = 5251,
    RetHeartDialScriptEmotionTheSame = 5252,
    RetHeartDialScriptStepNotNormal = 5253,
    RetHeartDialScriptConditionNotMatch = 5254,
    RetHeartDialScriptSubmitItemNumNotMatch = 5255,
    RetHeartDialScriptSubmitItemIdNotMatch = 5256,
    RetHeartDialDialogueNotFound = 5257,
    RetHeartDialDialogueAlreadyPerformed = 5258,
    RetHeartDialNpcNotFound = 5259,
    RetHeartDialTraceConfigNotFound = 5260,
    RetHeartDialFloorTraceExist = 5261,
    RetHeartDialTraceFloorNotMatch = 5262,
    RetTravelBrochureConfigError = 5301,
    RetTravelBrochureParamInvalid = 5302,
    RetTravelBrochureLocked = 5303,
    RetTravelBrochureCannotOperate = 5304,
    RetTravelBrochureWorldIdNotMatch = 5305,
    RetTravelBrochureHasNoWorldBook = 5306,
    RetTravelBrochurePageFull = 5307,
    RetMapRotationNotInRegion = 5351,
    RetMapRotationRotaterAlreadyDeployed = 5352,
    RetMapRotationEnergyNotEnough = 5353,
    RetMapRotationEntityNotOnCurPose = 5354,
    RetMapRotationRotaterNotDeployed = 5355,
    RetMapRotationPoseRotaterMismatch = 5356,
    RetMapRotationRotaterNotRemovable = 5357,
    RetMapRotationRotaterDisposable = 5358,
    RetSpaceZooActivityCatNotFound = 5401,
    RetSpaceZooActivityCatParamInvalid = 5402,
    RetSpaceZooActivityCatItemNotEnough = 5403,
    RetSpaceZooActivityCatBagFull = 5404,
    RetSpaceZooActivityCatNotToMutate = 5405,
    RetSpaceZooActivityCatStateError = 5406,
    RetSpaceZooActivityCatCatteryLocked = 5407,
    RetSpaceZooActivityCatOutNow = 5408,
    RetSpaceZooActivityCatConfigNotFound = 5409,
    RetSpaceZooActivityCatFeatureNotFound = 5410,
    RetSpaceZooActivityCatAddCatError = 5411,
    RetSpaceZooActivityCatMoneyNotEnough = 5412,
    RetSpaceZooActivityCatCondNotMatch = 5413,
    RetStrongChallengeActivityStageCfgMiss = 5501,
    RetStrongChallengeActivityStageNotOpen = 5502,
    RetStrongChallengeActivityBuffError = 5503,
    RetRollShopNotFound = 5551,
    RetRollShopGroupEmpty = 5552,
    RetRollShopEmpty = 5553,
    RetRollShopGachaReqDuplicated = 5554,
    RetRollShopRandomError = 5555,
    RetRollShopGroupTypeNotFound = 5556,
    RetRollShopHasStoredRewardAlready = 5557,
    RetRollShopNoStoredReward = 5558,
    RetRollShopNotInValidScene = 5559,
    RetRollShopInvalidRollShopType = 5560,
    RetActivityRaidCollectionPrevNotFinish = 5601,
    RetActivityRaidCollectionGroupEnterNextUnavailable = 5602,
    RetActivityRaidCollectionIsLast = 5603,
    RetActivityRaidCollectionIsNotNext = 5604,
    RetOfferingNotUnlock = 5651,
    RetOfferingLevelNotUnlock = 5652,
    RetOfferingReachMaxLevel = 5653,
    RetOfferingItemNotEnough = 5654,
    RetOfferingLongtailNotOpen = 5655,
    RetOfferingRewardCondition = 5656,
    RetDrinkMakerChatInvalid = 5701,
    RetDrinkMakerParamInvalid = 5702,
    RetDrinkMakerParamNotUnlock = 5703,
    RetDrinkMakerConfigNotFound = 5704,
    RetDrinkMakerNotLastChat = 5705,
    RetDrinkMakerDayAndFreePhaseNotOpen = 5706,
    RetMonopolyNotOpen = 5751,
    RetMonopolyConfigError = 5752,
    RetMonopolyDiceNotEnough = 5753,
    RetMonopolyCurCellNotFinish = 5754,
    RetMonopolyCoinNotEnough = 5755,
    RetMonopolyCellWaitPending = 5756,
    RetMonopolyCellStateError = 5757,
    RetMonopolyCellContentError = 5758,
    RetMonopolyItemNotEnough = 5759,
    RetMonopolyCellContentCannotGiveup = 5760,
    RetMonopolyAssetLevelInvalid = 5761,
    RetMonopolyTurnNotFinish = 5762,
    RetMonopolyGuideNotFinish = 5763,
    RetMonopolyRaffleRewardReissued = 5764,
    RetMonopolyNoGameActive = 5771,
    RetMonopolyGameRatioNotIncreasable = 5772,
    RetMonopolyGameRatioMax = 5773,
    RetMonopolyGameTargetRatioInvalid = 5774,
    RetMonopolyGameBingoFlipPosInvalid = 5775,
    RetMonopolyGameGuessAlreadyChoose = 5776,
    RetMonopolyGameGuessChooseInvalid = 5777,
    RetMonopolyGameGuessInformationAlreadyBought = 5778,
    RetMonopolyGameRaiseRatioNotUnlock = 5779,
    RetMonopolyFriendNotSynced = 5785,
    RetMonopolyGetFriendRankingListInCd = 5786,
    RetMonopolyLikeTargetNotFriend = 5787,
    RetMonopolyDailyAlreadyLiked = 5788,
    RetMonopolySocialEventStatusNotMatch = 5789,
    RetMonopolySocialEventServerCacheNotExist = 5790,
    RetMonopolyActivityIdNotMatch = 5791,
    RetMonopolyRafflePoolNotExist = 5792,
    RetMonopolyRafflePoolTimeNotMatch = 5793,
    RetMonopolyRafflePoolPhaseNotMeet = 5794,
    RetMonopolyRafflePoolShowTimeNotMeet = 5795,
    RetMonopolyRaffleTicketNotFound = 5796,
    RetMonopolyRaffleTicketTimeNotMeet = 5797,
    RetMonopolyRaffleTicketRewardAlreadyTaken = 5798,
    RetMonopolyRafflePoolNotInRaffleTime = 5799,
    RetMonopolyMbtiReportRewardAlreadyTaken = 5800,
    RetEvolveBuildLevelGaming = 5801,
    RetEveolveBuildLevelBanRandom = 5802,
    RetEvolveBuildFirstRewardAlreadyTaken = 5803,
    RetEvolveBuildLevelUnfinish = 5804,
    RetEvolveBuildShopAbilityMaxLevel = 5805,
    RetEvolveBuildShopAbilityMinLevel = 5806,
    RetEvolveBuildShopAbilityNotGet = 5807,
    RetEvolveBuildLevelLock = 5808,
    RetEvolveBuildExpNotEnough = 5809,
    RetEvolveBuildShopAbilityLevelError = 5810,
    RetEvolveBuildActivityNotOpen = 5811,
    RetEvolveBuildShopAbilityEmpty = 5812,
    RetEvolveBuildLevelNotStart = 5813,
    RetEvolveBuildShopLock = 5814,
    RetEvolveBuildRewardLock = 5815,
    RetEvolveBuildRewardLevelMax = 5816,
    RetEvolveBuildRewardAlreadyAllTaken = 5717,
    RetClockParkConfigError = 5851,
    RetClockParkEffectError = 5852,
    RetClockParkScriptAlreadyUnlock = 5853,
    RetClockParkScriptUnlockConditionNotMeet = 5854,
    RetClockParkTalentAlreadyUnlock = 5855,
    RetClockParkScriptLocked = 5856,
    RetClockParkHasOngoingScript = 5857,
    RetClockParkNoOngoingScript = 5858,
    RetClockParkDicePlacementError = 5859,
    RetClockParkMismatchStatus = 5860,
    RetClockParkNoBuff = 5861,
    RetClockParkSlotMachineGachaReqDuplicated = 5862,
    RetClockParkSlotMachineCostNotEnough = 5863,
    RetClockParkSlotMachineGachaCntExceedLimit = 5864,
    RetClockParkNotOpen = 5865,
    RetTournRogueStatusMismatch = 5901,
    RetMagicRogueStatusMismatch = 5902,
    RetAutoMountMagicUnitNoMatchedMagicScepter = 5903,
    RetMagicUnitWorkbenchReforgeGenFail = 5904,
    RetMatchAlreadyInMatch = 6201,
    RetMatchNotInMatch = 6202,
    RetMatchPlayNotOpen = 6203,
    RetCrossStateError = 6204,
    RetMatchVersionNotEqual = 6205,
    RetMatchPlayerNotInLobbyRoom = 6206,
    RetLobbyStateNotMatch = 6207,
    RetLobbyRoomNotExist = 6208,
    RetLobbyRoomPalyerFull = 6209,
    RetLobbyRoomPalyerNotReady = 6210,
    RetLobbyRoomPalyerFighting = 6211,
    RetFightRoomNotExist = 6250,
    RetFightMatch3PlayerStateErr = 6251,
    RetFightMatch3RoomStateErr = 6252,
    RetCrossStateTimeOut = 6253,
    RetSwordTrainingNoActiveGame = 6301,
    RetSwordTrainingNoPendingActionMatch = 6302,
    RetSwordTrainingPartnerAbilityInvalid = 6303,
    RetSwordTrainingSkillAlreadyLearned = 6304,
    RetSwordTrainingConditionNotMeet = 6305,
    RetSwordTrainingParentSkillNotLearned = 6306,
    RetSwordTrainingSkillTypeNotUnlock = 6307,
    RetSwordTrainingGameAlreadyExist = 6308,
    RetSwordTrainingEndingHintNotMatch = 6309,
    RetSwordTrainingStorylineConfigNotFound = 6310,
    RetSwordTrainingStoryConfigNotFound = 6311,
    RetSwordTrainingUnlockNotFinish = 6312,
    RetSwordTrainingOptionMismatch = 6313,
    RetSwordTrainingRestoreWithoutExamFailed = 6314,
    RetSwordTrainingNoRestoreGameAvailable = 6315,
    RetSwordTrainingEndingStoryNotMatch = 6316,
    RetSwordTrainingEndingNotFinish = 6317,
    RetSwordTrainingEndingRewardTaken = 6318,
    RetSwordTrainingCombatRankNotChange = 6319,
    RetSwordTrainingDirectBattleDisable = 6320,
    RetFightFestPhaseNotMatch = 6351,
    RetFightFestScoreRaceAlreadyFinish = 6352,
    RetFightFestChallengeLocked = 6353,
    RetFightFestCoachSkillLocked = 6354,
    RetFightFestCoachSkillEquipTypeExisted = 6355,
    RetFightFestScoreRaceMissionDoind = 6356,
    RetFightFestCoachSkillNoEquip = 6357,
    RetPetNotExist = 6401,
    RetPetAlreadySummoned = 6402,
    RetPetNotSummoned = 6403,
    RetMusicRhythmLevelTimeTooShort = 6451,
    RetMusicRhythmNotInLevel = 6452,
    RetMusicRhythmPreDifficultyNotPass = 6453,
    RetMusicRhythmSongLimited = 6454,
    RetMusicRhythmSongLocked = 6455,
    RetMusicRhythmTrackLocked = 6456,
    RetMusicRhythmLevelNotUnlock = 6457,
    RetMusicRhythmSongSfxLocked = 6458,
    RetTrainPartyCoinNotEnough = 6501,
    RetTrainPartyDiyTagNotMatch = 6502,
    RetTrainPartyUseCardMobilityNotEnough = 6503,
    RetTrainPartyAreaUnlockCoinNotEnough = 6504,
    RetTarotBookEnergyNotEnough = 6601,
    RetTarotBookPackNotAvailable = 6602,
    RetTarotBookStoryAlreadyUnlock = 6603,
    RetTarotBookCardNotEnough = 6604,
    RetTarotBookClueNotEnough = 6605,
    RetTarotBookUnlockStoryCardNotSame = 6606,
    RetTarotBookStoryNotUnlock = 6607,
    RetTarotBookStoryAlreadyFinish = 6608,
    RetTarotBookInteractionAlreadyFinish = 6609,
}
impl Retcode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RetSucc => "RET_SUCC",
            Self::RetFail => "RET_FAIL",
            Self::RetServerInternalError => "RET_SERVER_INTERNAL_ERROR",
            Self::RetTimeout => "RET_TIMEOUT",
            Self::RetRepeatedReq => "RET_REPEATED_REQ",
            Self::RetReqParaInvalid => "RET_REQ_PARA_INVALID",
            Self::RetPlayerDataError => "RET_PLAYER_DATA_ERROR",
            Self::RetPlayerClientPaused => "RET_PLAYER_CLIENT_PAUSED",
            Self::RetFuncCheckFailed => "RET_FUNC_CHECK_FAILED",
            Self::RetFeatureSwitchClosed => "RET_FEATURE_SWITCH_CLOSED",
            Self::RetFreqOverLimit => "RET_FREQ_OVER_LIMIT",
            Self::RetSystemBusy => "RET_SYSTEM_BUSY",
            Self::RetPlayerNotOnline => "RET_PLAYER_NOT_ONLINE",
            Self::RetOperationInCd => "RET_OPERATION_IN_CD",
            Self::RetRepeateLogin => "RET_REPEATE_LOGIN",
            Self::RetRetryLogin => "RET_RETRY_LOGIN",
            Self::RetWaitLogin => "RET_WAIT_LOGIN",
            Self::RetNotInWhiteList => "RET_NOT_IN_WHITE_LIST",
            Self::RetInBlackList => "RET_IN_BLACK_LIST",
            Self::RetAccountVerifyError => "RET_ACCOUNT_VERIFY_ERROR",
            Self::RetAccountParaError => "RET_ACCOUNT_PARA_ERROR",
            Self::RetAntiAddictLogin => "RET_ANTI_ADDICT_LOGIN",
            Self::RetCheckSumError => "RET_CHECK_SUM_ERROR",
            Self::RetReachMaxPlayerNum => "RET_REACH_MAX_PLAYER_NUM",
            Self::RetAlreadyRegistered => "RET_ALREADY_REGISTERED",
            Self::RetGenderError => "RET_GENDER_ERROR",
            Self::SetNicknameRetCallbackProcessing => {
                "SET_NICKNAME_RET_CALLBACK_PROCESSING"
            }
            Self::RetInGmBindAccess => "RET_IN_GM_BIND_ACCESS",
            Self::RetQuestRewardAlreadyTaken => "RET_QUEST_REWARD_ALREADY_TAKEN",
            Self::RetQuestNotAccept => "RET_QUEST_NOT_ACCEPT",
            Self::RetQuestNotFinish => "RET_QUEST_NOT_FINISH",
            Self::RetQuestStatusError => "RET_QUEST_STATUS_ERROR",
            Self::RetAchievementLevelNotReach => "RET_ACHIEVEMENT_LEVEL_NOT_REACH",
            Self::RetAchievementLevelAlreadyTaken => {
                "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN"
            }
            Self::RetAvatarNotExist => "RET_AVATAR_NOT_EXIST",
            Self::RetAvatarResExpNotEnough => "RET_AVATAR_RES_EXP_NOT_ENOUGH",
            Self::RetAvatarExpReachPromotionLimit => {
                "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT"
            }
            Self::RetAvatarReachMaxPromotion => "RET_AVATAR_REACH_MAX_PROMOTION",
            Self::RetSkilltreeConfigNotExist => "RET_SKILLTREE_CONFIG_NOT_EXIST",
            Self::RetSkilltreeAlreadyUnlock => "RET_SKILLTREE_ALREADY_UNLOCK",
            Self::RetSkilltreePreLocked => "RET_SKILLTREE_PRE_LOCKED",
            Self::RetSkilltreeLevelNotMeet => "RET_SKILLTREE_LEVEL_NOT_MEET",
            Self::RetSkilltreeRankNotMeet => "RET_SKILLTREE_RANK_NOT_MEET",
            Self::RetAvatarDressNoEquipment => "RET_AVATAR_DRESS_NO_EQUIPMENT",
            Self::RetAvatarExpItemNotExist => "RET_AVATAR_EXP_ITEM_NOT_EXIST",
            Self::RetSkilltreePointLocked => "RET_SKILLTREE_POINT_LOCKED",
            Self::RetSkilltreePointLevelUpgradeNotMatch => {
                "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH"
            }
            Self::RetSkilltreePointLevelReachMax => "RET_SKILLTREE_POINT_LEVEL_REACH_MAX",
            Self::RetWorldLevelNotMeet => "RET_WORLD_LEVEL_NOT_MEET",
            Self::RetPlayerLevelNotMeet => "RET_PLAYER_LEVEL_NOT_MEET",
            Self::RetAvatarRankNotMatch => "RET_AVATAR_RANK_NOT_MATCH",
            Self::RetAvatarRankReachMax => "RET_AVATAR_RANK_REACH_MAX",
            Self::RetHeroBasicTypeNotMatch => "RET_HERO_BASIC_TYPE_NOT_MATCH",
            Self::RetAvatarPromotionNotMeet => "RET_AVATAR_PROMOTION_NOT_MEET",
            Self::RetPromotionRewardConfigNotExist => {
                "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST"
            }
            Self::RetPromotionRewardAlreadyTaken => "RET_PROMOTION_REWARD_ALREADY_TAKEN",
            Self::RetAvatarSkinItemNotExist => "RET_AVATAR_SKIN_ITEM_NOT_EXIST",
            Self::RetAvatarSkinAlreadyDressed => "RET_AVATAR_SKIN_ALREADY_DRESSED",
            Self::RetAvatarNotDressSkin => "RET_AVATAR_NOT_DRESS_SKIN",
            Self::RetAvatarSkinNotMatchAvatar => "RET_AVATAR_SKIN_NOT_MATCH_AVATAR",
            Self::RetAvatarPathNotMatch => "RET_AVATAR_PATH_NOT_MATCH",
            Self::RetItemNotExist => "RET_ITEM_NOT_EXIST",
            Self::RetItemCostNotEnough => "RET_ITEM_COST_NOT_ENOUGH",
            Self::RetItemCostTooMuch => "RET_ITEM_COST_TOO_MUCH",
            Self::RetItemNoCost => "RET_ITEM_NO_COST",
            Self::RetItemNotEnough => "RET_ITEM_NOT_ENOUGH",
            Self::RetItemInvalid => "RET_ITEM_INVALID",
            Self::RetItemConfigNotExist => "RET_ITEM_CONFIG_NOT_EXIST",
            Self::RetScoinNotEnough => "RET_SCOIN_NOT_ENOUGH",
            Self::RetItemRewardExceedLimit => "RET_ITEM_REWARD_EXCEED_LIMIT",
            Self::RetItemInvalidUse => "RET_ITEM_INVALID_USE",
            Self::RetItemUseConfigNotExist => "RET_ITEM_USE_CONFIG_NOT_EXIST",
            Self::RetRewardConfigNotExist => "RET_REWARD_CONFIG_NOT_EXIST",
            Self::RetItemExceedLimit => "RET_ITEM_EXCEED_LIMIT",
            Self::RetItemCountInvalid => "RET_ITEM_COUNT_INVALID",
            Self::RetItemUseTargetTypeInvalid => "RET_ITEM_USE_TARGET_TYPE_INVALID",
            Self::RetItemUseSatietyFull => "RET_ITEM_USE_SATIETY_FULL",
            Self::RetItemComposeNotExist => "RET_ITEM_COMPOSE_NOT_EXIST",
            Self::RetRelicComposeNotExist => "RET_RELIC_COMPOSE_NOT_EXIST",
            Self::RetItemCanNotSell => "RET_ITEM_CAN_NOT_SELL",
            Self::RetItemSellExceddLimit => "RET_ITEM_SELL_EXCEDD_LIMIT",
            Self::RetItemNotInCostList => "RET_ITEM_NOT_IN_COST_LIST",
            Self::RetItemSpecialCostNotEnough => "RET_ITEM_SPECIAL_COST_NOT_ENOUGH",
            Self::RetItemSpecialCostTooMuch => "RET_ITEM_SPECIAL_COST_TOO_MUCH",
            Self::RetItemFormulaNotExist => "RET_ITEM_FORMULA_NOT_EXIST",
            Self::RetItemAutoGiftOptionalNotExist => {
                "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST"
            }
            Self::RetRelicComposeRelicInvalid => "RET_RELIC_COMPOSE_RELIC_INVALID",
            Self::RetRelicComposeMainAffixIdInvalid => {
                "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID"
            }
            Self::RetRelicComposeWrongFormulaType => {
                "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE"
            }
            Self::RetRelicComposeRelicNotExist => "RET_RELIC_COMPOSE_RELIC_NOT_EXIST",
            Self::RetRelicComposeBlackGoldCountInvalid => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID"
            }
            Self::RetRelicComposeBlackGoldNotNeed => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED"
            }
            Self::RetMonthCardCannotUse => "RET_MONTH_CARD_CANNOT_USE",
            Self::RetItemRewardExceedDisappear => "RET_ITEM_REWARD_EXCEED_DISAPPEAR",
            Self::RetItemNeedRecycle => "RET_ITEM_NEED_RECYCLE",
            Self::RetItemComposeExceedLimit => "RET_ITEM_COMPOSE_EXCEED_LIMIT",
            Self::RetItemCanNotDestroy => "RET_ITEM_CAN_NOT_DESTROY",
            Self::RetItemAlreadyMark => "RET_ITEM_ALREADY_MARK",
            Self::RetItemMarkExceedLimit => "RET_ITEM_MARK_EXCEED_LIMIT",
            Self::RetItemNotMark => "RET_ITEM_NOT_MARK",
            Self::RetItenTurnFoodNotSet => "RET_ITEN_TURN_FOOD_NOT_SET",
            Self::RetItemTurnFoodAlreadySet => "RET_ITEM_TURN_FOOD_ALREADY_SET",
            Self::RetItemTurnFoodConsumeTypeError => {
                "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR"
            }
            Self::RetItemTurnFoodSwitchAlreadyOpen => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN"
            }
            Self::RetItemTurnFoodSwitchAlreadyClose => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE"
            }
            Self::RetHcoinExchangeTooMuch => "RET_HCOIN_EXCHANGE_TOO_MUCH",
            Self::RetItemTurnFoodSceneTypeError => "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR",
            Self::RetEquipmentAlreadyDressed => "RET_EQUIPMENT_ALREADY_DRESSED",
            Self::RetEquipmentNotExist => "RET_EQUIPMENT_NOT_EXIST",
            Self::RetEquipmentReachLevelLimit => "RET_EQUIPMENT_REACH_LEVEL_LIMIT",
            Self::RetEquipmentConsumeSelf => "RET_EQUIPMENT_CONSUME_SELF",
            Self::RetEquipmentAlreadyLocked => "RET_EQUIPMENT_ALREADY_LOCKED",
            Self::RetEquipmentAlreadyUnlocked => "RET_EQUIPMENT_ALREADY_UNLOCKED",
            Self::RetEquipmentLocked => "RET_EQUIPMENT_LOCKED",
            Self::RetEquipmentSelectNumOverLimit => "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT",
            Self::RetEquipmentRankUpMustConsumeSameTid => {
                "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID"
            }
            Self::RetEquipmentPromotionReachMax => "RET_EQUIPMENT_PROMOTION_REACH_MAX",
            Self::RetEquipmentRankUpReachMax => "RET_EQUIPMENT_RANK_UP_REACH_MAX",
            Self::RetEquipmentLevelReachMax => "RET_EQUIPMENT_LEVEL_REACH_MAX",
            Self::RetEquipmentExceedLimit => "RET_EQUIPMENT_EXCEED_LIMIT",
            Self::RetRelicNotExist => "RET_RELIC_NOT_EXIST",
            Self::RetRelicReachLevelLimit => "RET_RELIC_REACH_LEVEL_LIMIT",
            Self::RetRelicConsumeSelf => "RET_RELIC_CONSUME_SELF",
            Self::RetRelicAlreadyDressed => "RET_RELIC_ALREADY_DRESSED",
            Self::RetRelicLocked => "RET_RELIC_LOCKED",
            Self::RetRelicAlreadyLocked => "RET_RELIC_ALREADY_LOCKED",
            Self::RetRelicAlreadyUnlocked => "RET_RELIC_ALREADY_UNLOCKED",
            Self::RetRelicLevelIsNotZero => "RET_RELIC_LEVEL_IS_NOT_ZERO",
            Self::RetUniqueIdRepeated => "RET_UNIQUE_ID_REPEATED",
            Self::RetEquipmentLevelNotMeet => "RET_EQUIPMENT_LEVEL_NOT_MEET",
            Self::RetEquipmentItemNotInCostList => "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST",
            Self::RetEquipmentLevelGreaterThanOne => {
                "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE"
            }
            Self::RetEquipmentAlreadyRanked => "RET_EQUIPMENT_ALREADY_RANKED",
            Self::RetRelicExceedLimit => "RET_RELIC_EXCEED_LIMIT",
            Self::RetRelicAlreadyDiscarded => "RET_RELIC_ALREADY_DISCARDED",
            Self::RetRelicAlreadyUndiscarded => "RET_RELIC_ALREADY_UNDISCARDED",
            Self::RetEquipmentBatchLockTooFast => "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST",
            Self::RetRelicFilterPlanSlotEmpty => "RET_RELIC_FILTER_PLAN_SLOT_EMPTY",
            Self::RetRelicFilterPlanNumExceedLimit => {
                "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT"
            }
            Self::RetRelicFilterPlanNameUtf8Error => {
                "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR"
            }
            Self::RetRelicFilterPlanNameFormatError => {
                "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR"
            }
            Self::RetRelicFilterPlanNoChange => "RET_RELIC_FILTER_PLAN_NO_CHANGE",
            Self::RetRelicReforgeNotConfirmed => "RET_RELIC_REFORGE_NOT_CONFIRMED",
            Self::RetLineupInvalidIndex => "RET_LINEUP_INVALID_INDEX",
            Self::RetLineupInvalidMemberPos => "RET_LINEUP_INVALID_MEMBER_POS",
            Self::RetLineupSwapNotExist => "RET_LINEUP_SWAP_NOT_EXIST",
            Self::RetLineupAvatarAlreadyIn => "RET_LINEUP_AVATAR_ALREADY_IN",
            Self::RetLineupCreateAvatarError => "RET_LINEUP_CREATE_AVATAR_ERROR",
            Self::RetLineupAvatarInitError => "RET_LINEUP_AVATAR_INIT_ERROR",
            Self::RetLineupNotExist => "RET_LINEUP_NOT_EXIST",
            Self::RetLineupOnlyOneMember => "RET_LINEUP_ONLY_ONE_MEMBER",
            Self::RetLineupSameLeaderSlot => "RET_LINEUP_SAME_LEADER_SLOT",
            Self::RetLineupNoLeaderSelect => "RET_LINEUP_NO_LEADER_SELECT",
            Self::RetLineupSwapSameSlot => "RET_LINEUP_SWAP_SAME_SLOT",
            Self::RetLineupAvatarNotExist => "RET_LINEUP_AVATAR_NOT_EXIST",
            Self::RetLineupTrialAvatarCanNotQuit => {
                "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT"
            }
            Self::RetLineupVirtualLineupPlaneNotMatch => {
                "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH"
            }
            Self::RetLineupNotValidLeader => "RET_LINEUP_NOT_VALID_LEADER",
            Self::RetLineupSameIndex => "RET_LINEUP_SAME_INDEX",
            Self::RetLineupIsEmpty => "RET_LINEUP_IS_EMPTY",
            Self::RetLineupNameFormatError => "RET_LINEUP_NAME_FORMAT_ERROR",
            Self::RetLineupTypeNotMatch => "RET_LINEUP_TYPE_NOT_MATCH",
            Self::RetLineupReplaceAllFailed => "RET_LINEUP_REPLACE_ALL_FAILED",
            Self::RetLineupNotAllowEdit => "RET_LINEUP_NOT_ALLOW_EDIT",
            Self::RetLineupAvatarIsAlive => "RET_LINEUP_AVATAR_IS_ALIVE",
            Self::RetLineupAssistHasOnlyMember => "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER",
            Self::RetLineupAssistCannotSwitch => "RET_LINEUP_ASSIST_CANNOT_SWITCH",
            Self::RetLineupAvatarTypeInvalid => "RET_LINEUP_AVATAR_TYPE_INVALID",
            Self::RetLineupNameUtf8Error => "RET_LINEUP_NAME_UTF8_ERROR",
            Self::RetLineupLeaderLock => "RET_LINEUP_LEADER_LOCK",
            Self::RetLineupStoryLineNotMatch => "RET_LINEUP_STORY_LINE_NOT_MATCH",
            Self::RetLineupAvatarLock => "RET_LINEUP_AVATAR_LOCK",
            Self::RetLineupAvatarInvalid => "RET_LINEUP_AVATAR_INVALID",
            Self::RetLineupAvatarAlreadyInit => "RET_LINEUP_AVATAR_ALREADY_INIT",
            Self::RetLineupLimited => "RET_LINEUP_LIMITED",
            Self::RetMailNotExist => "RET_MAIL_NOT_EXIST",
            Self::RetMailRangeInvalid => "RET_MAIL_RANGE_INVALID",
            Self::RetMailMailIdInvalid => "RET_MAIL_MAIL_ID_INVALID",
            Self::RetMailNoMailTakeAttachment => "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT",
            Self::RetMailNoMailToDel => "RET_MAIL_NO_MAIL_TO_DEL",
            Self::RetMailTypeInvalid => "RET_MAIL_TYPE_INVALID",
            Self::RetMailParaInvalid => "RET_MAIL_PARA_INVALID",
            Self::RetMailAttachementInvalid => "RET_MAIL_ATTACHEMENT_INVALID",
            Self::RetMailTicketInvalid => "RET_MAIL_TICKET_INVALID",
            Self::RetMailTicketRepeated => "RET_MAIL_TICKET_REPEATED",
            Self::RetStageSettleError => "RET_STAGE_SETTLE_ERROR",
            Self::RetStageConfigNotExist => "RET_STAGE_CONFIG_NOT_EXIST",
            Self::RetStageNotFound => "RET_STAGE_NOT_FOUND",
            Self::RetStageCocoonPropNotValid => "RET_STAGE_COCOON_PROP_NOT_VALID",
            Self::RetStageCocoonWaveNotValid => "RET_STAGE_COCOON_WAVE_NOT_VALID",
            Self::RetStagePropIdNotEqual => "RET_STAGE_PROP_ID_NOT_EQUAL",
            Self::RetStageCocoonWaveOver => "RET_STAGE_COCOON_WAVE_OVER",
            Self::RetStageWeekCocoonOverCnt => "RET_STAGE_WEEK_COCOON_OVER_CNT",
            Self::RetStageCocoonNotOpen => "RET_STAGE_COCOON_NOT_OPEN",
            Self::RetStageTrialNotOpen => "RET_STAGE_TRIAL_NOT_OPEN",
            Self::RetStageFarmNotOpen => "RET_STAGE_FARM_NOT_OPEN",
            Self::RetStageFarmTypeError => "RET_STAGE_FARM_TYPE_ERROR",
            Self::RetChapterLock => "RET_CHAPTER_LOCK",
            Self::RetChapterChallengeNumNotEnough => {
                "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH"
            }
            Self::RetChapterRewardIdNotExist => "RET_CHAPTER_REWARD_ID_NOT_EXIST",
            Self::RetChapterRewardAlreadyTaken => "RET_CHAPTER_REWARD_ALREADY_TAKEN",
            Self::RetBattleStageNotMatch => "RET_BATTLE_STAGE_NOT_MATCH",
            Self::RetInBattleNow => "RET_IN_BATTLE_NOW",
            Self::RetBattleCheat => "RET_BATTLE_CHEAT",
            Self::RetBattleFail => "RET_BATTLE_FAIL",
            Self::RetBattleNoLineup => "RET_BATTLE_NO_LINEUP",
            Self::RetBattleLineupEmpty => "RET_BATTLE_LINEUP_EMPTY",
            Self::RetBattleVersionNotMatch => "RET_BATTLE_VERSION_NOT_MATCH",
            Self::RetBattleQuitByServer => "RET_BATTLE_QUIT_BY_SERVER",
            Self::RetInBattleCheck => "RET_IN_BATTLE_CHECK",
            Self::RetBattleCheckNeedRetry => "RET_BATTLE_CHECK_NEED_RETRY",
            Self::RetBattleCostTimeCheckFail => "RET_BATTLE_COST_TIME_CHECK_FAIL",
            Self::RetLackExchangeStaminaTimes => "RET_LACK_EXCHANGE_STAMINA_TIMES",
            Self::RetLackStamina => "RET_LACK_STAMINA",
            Self::RetStaminaFull => "RET_STAMINA_FULL",
            Self::RetAuthkeySignTypeError => "RET_AUTHKEY_SIGN_TYPE_ERROR",
            Self::RetAuthkeySignVerError => "RET_AUTHKEY_SIGN_VER_ERROR",
            Self::RetNicknameFormatError => "RET_NICKNAME_FORMAT_ERROR",
            Self::RetSensitiveWords => "RET_SENSITIVE_WORDS",
            Self::RetLevelRewardHasTaken => "RET_LEVEL_REWARD_HAS_TAKEN",
            Self::RetLevelRewardLevelError => "RET_LEVEL_REWARD_LEVEL_ERROR",
            Self::RetLanguageInvalid => "RET_LANGUAGE_INVALID",
            Self::RetNicknameInCd => "RET_NICKNAME_IN_CD",
            Self::RetGameplayBirthdayInvalid => "RET_GAMEPLAY_BIRTHDAY_INVALID",
            Self::RetGameplayBirthdayAlreadySet => "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET",
            Self::RetNicknameUtf8Error => "RET_NICKNAME_UTF8_ERROR",
            Self::RetNicknameDigitLimitError => "RET_NICKNAME_DIGIT_LIMIT_ERROR",
            Self::RetSensitiveWordsPlatformError => "RET_SENSITIVE_WORDS_PLATFORM_ERROR",
            Self::RetPlayerSettingTypeInvalid => "RET_PLAYER_SETTING_TYPE_INVALID",
            Self::RetMazeLackTicket => "RET_MAZE_LACK_TICKET",
            Self::RetMazeNotUnlock => "RET_MAZE_NOT_UNLOCK",
            Self::RetMazeNoAbility => "RET_MAZE_NO_ABILITY",
            Self::RetMazeNoPlane => "RET_MAZE_NO_PLANE",
            Self::RetMazeMapNotExist => "RET_MAZE_MAP_NOT_EXIST",
            Self::RetMazeMpNotEnough => "RET_MAZE_MP_NOT_ENOUGH",
            Self::RetSpringNotEnable => "RET_SPRING_NOT_ENABLE",
            Self::RetSpringTooFar => "RET_SPRING_TOO_FAR",
            Self::RetNotInMaze => "RET_NOT_IN_MAZE",
            Self::RetMazeTimeOfDayTypeError => "RET_MAZE_TIME_OF_DAY_TYPE_ERROR",
            Self::RetSceneTransferLockedByTask => "RET_SCENE_TRANSFER_LOCKED_BY_TASK",
            Self::RetPlotNotUnlock => "RET_PLOT_NOT_UNLOCK",
            Self::RetMissionNotExist => "RET_MISSION_NOT_EXIST",
            Self::RetMissionAlreadyDone => "RET_MISSION_ALREADY_DONE",
            Self::RetDailyTaskNotFinish => "RET_DAILY_TASK_NOT_FINISH",
            Self::RetDailyTaskRewardHasTaken => "RET_DAILY_TASK_REWARD_HAS_TAKEN",
            Self::RetMissionNotFinish => "RET_MISSION_NOT_FINISH",
            Self::RetMissionNotDoing => "RET_MISSION_NOT_DOING",
            Self::RetMissionFinishWayNotMatch => "RET_MISSION_FINISH_WAY_NOT_MATCH",
            Self::RetMissionSceneNotMatch => "RET_MISSION_SCENE_NOT_MATCH",
            Self::RetMissionCustomValueNotValid => "RET_MISSION_CUSTOM_VALUE_NOT_VALID",
            Self::RetMissionSubMissionNotMatch => "RET_MISSION_SUB_MISSION_NOT_MATCH",
            Self::RetAdventureMapNotExist => "RET_ADVENTURE_MAP_NOT_EXIST",
            Self::RetSceneEntityNotExist => "RET_SCENE_ENTITY_NOT_EXIST",
            Self::RetNotInScene => "RET_NOT_IN_SCENE",
            Self::RetSceneMonsterNotExist => "RET_SCENE_MONSTER_NOT_EXIST",
            Self::RetInteractConfigNotExist => "RET_INTERACT_CONFIG_NOT_EXIST",
            Self::RetUnsupportedPropState => "RET_UNSUPPORTED_PROP_STATE",
            Self::RetSceneEntryIdNotMatch => "RET_SCENE_ENTRY_ID_NOT_MATCH",
            Self::RetSceneEntityMoveCheckFailed => "RET_SCENE_ENTITY_MOVE_CHECK_FAILED",
            Self::RetAssistMonsterCountLimit => "RET_ASSIST_MONSTER_COUNT_LIMIT",
            Self::RetSceneUseSkillFail => "RET_SCENE_USE_SKILL_FAIL",
            Self::RetPropIsHidden => "RET_PROP_IS_HIDDEN",
            Self::RetLoadingSuccAlready => "RET_LOADING_SUCC_ALREADY",
            Self::RetSceneEntityTypeInvalid => "RET_SCENE_ENTITY_TYPE_INVALID",
            Self::RetInteractTypeInvalid => "RET_INTERACT_TYPE_INVALID",
            Self::RetInteractNotInRegion => "RET_INTERACT_NOT_IN_REGION",
            Self::RetInteractSubTypeInvalid => "RET_INTERACT_SUB_TYPE_INVALID",
            Self::RetNotLeaderEntity => "RET_NOT_LEADER_ENTITY",
            Self::RetMonsterIsNotFarmElement => "RET_MONSTER_IS_NOT_FARM_ELEMENT",
            Self::RetMonsterConfigNotExist => "RET_MONSTER_CONFIG_NOT_EXIST",
            Self::RetAvatarHpAlreadyFull => "RET_AVATAR_HP_ALREADY_FULL",
            Self::RetCurInteractEntityNotMatch => "RET_CUR_INTERACT_ENTITY_NOT_MATCH",
            Self::RetPlaneTypeNotAllow => "RET_PLANE_TYPE_NOT_ALLOW",
            Self::RetGroupNotExist => "RET_GROUP_NOT_EXIST",
            Self::RetGroupSaveDataInCd => "RET_GROUP_SAVE_DATA_IN_CD",
            Self::RetGroupSaveLenghReachMax => "RET_GROUP_SAVE_LENGH_REACH_MAX",
            Self::RetRecentElementNotExist => "RET_RECENT_ELEMENT_NOT_EXIST",
            Self::RetRecentElementStageNotMatch => "RET_RECENT_ELEMENT_STAGE_NOT_MATCH",
            Self::RetScenePositionVersionNotMatch => {
                "RET_SCENE_POSITION_VERSION_NOT_MATCH"
            }
            Self::RetGameplayCounterNotExist => "RET_GAMEPLAY_COUNTER_NOT_EXIST",
            Self::RetGameplayCounterNotEnough => "RET_GAMEPLAY_COUNTER_NOT_ENOUGH",
            Self::RetGroupStateNotMatch => "RET_GROUP_STATE_NOT_MATCH",
            Self::RetSceneEntityPosNotMatch => "RET_SCENE_ENTITY_POS_NOT_MATCH",
            Self::RetGroupStateCustomSaveDataOff => {
                "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF"
            }
            Self::RetSceneNotMatch => "RET_SCENE_NOT_MATCH",
            Self::RetPropTypeInvalid => "RET_PROP_TYPE_INVALID",
            Self::RetBuyTimesLimit => "RET_BUY_TIMES_LIMIT",
            Self::RetBuyLimitType => "RET_BUY_LIMIT_TYPE",
            Self::RetShopNotOpen => "RET_SHOP_NOT_OPEN",
            Self::RetGoodsNotOpen => "RET_GOODS_NOT_OPEN",
            Self::RetCityLevelRewardTaken => "RET_CITY_LEVEL_REWARD_TAKEN",
            Self::RetCityLevelNotMeet => "RET_CITY_LEVEL_NOT_MEET",
            Self::RetSingleBuyLimit => "RET_SINGLE_BUY_LIMIT",
            Self::RetTutorialNotUnlock => "RET_TUTORIAL_NOT_UNLOCK",
            Self::RetTutorialUnlockAlready => "RET_TUTORIAL_UNLOCK_ALREADY",
            Self::RetTutorialFinishAlready => "RET_TUTORIAL_FINISH_ALREADY",
            Self::RetTutorialPreNotUnlock => "RET_TUTORIAL_PRE_NOT_UNLOCK",
            Self::RetTutorialPlayerLevelNotMatch => "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH",
            Self::RetTutorialTutorialNotFound => "RET_TUTORIAL_TUTORIAL_NOT_FOUND",
            Self::RetChallengeNotExist => "RET_CHALLENGE_NOT_EXIST",
            Self::RetChallengeNotUnlock => "RET_CHALLENGE_NOT_UNLOCK",
            Self::RetChallengeAlready => "RET_CHALLENGE_ALREADY",
            Self::RetChallengeLineupEditForbidden => {
                "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN"
            }
            Self::RetChallengeLineupEmpty => "RET_CHALLENGE_LINEUP_EMPTY",
            Self::RetChallengeNotDoing => "RET_CHALLENGE_NOT_DOING",
            Self::RetChallengeNotFinish => "RET_CHALLENGE_NOT_FINISH",
            Self::RetChallengeTargetNotFinish => "RET_CHALLENGE_TARGET_NOT_FINISH",
            Self::RetChallengeTargetRewardTaken => "RET_CHALLENGE_TARGET_REWARD_TAKEN",
            Self::RetChallengeTimeNotValid => "RET_CHALLENGE_TIME_NOT_VALID",
            Self::RetChallengeStarsCountNotMeet => "RET_CHALLENGE_STARS_COUNT_NOT_MEET",
            Self::RetChallengeStarsRewardTaken => "RET_CHALLENGE_STARS_REWARD_TAKEN",
            Self::RetChallengeStarsNotExist => "RET_CHALLENGE_STARS_NOT_EXIST",
            Self::RetChallengeCurSceneNotEntryFloor => {
                "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR"
            }
            Self::RetChallengeNoTeamArchive => "RET_CHALLENGE_NO_TEAM_ARCHIVE",
            Self::RetChallengeLineupAvatarTypeInvalid => {
                "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID"
            }
            Self::RetChallengeLineupRecommendInCd => {
                "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Self::RetBasicTypeAlready => "RET_BASIC_TYPE_ALREADY",
            Self::RetNoBasicType => "RET_NO_BASIC_TYPE",
            Self::RetNotChooseBasicType => "RET_NOT_CHOOSE_BASIC_TYPE",
            Self::RetNotFuncClose => "RET_NOT_FUNC_CLOSE",
            Self::RetNotChooseGender => "RET_NOT_CHOOSE_GENDER",
            Self::RetNotReqUnlockBasicType => "RET_NOT_REQ_UNLOCK_BASIC_TYPE",
            Self::RetAvatarPathLocked => "RET_AVATAR_PATH_LOCKED",
            Self::RetRogueStatusNotMatch => "RET_ROGUE_STATUS_NOT_MATCH",
            Self::RetRogueSelectBuffNotExist => "RET_ROGUE_SELECT_BUFF_NOT_EXIST",
            Self::RetRogueCoinNotEnough => "RET_ROGUE_COIN_NOT_ENOUGH",
            Self::RetRogueStaminaNotEnough => "RET_ROGUE_STAMINA_NOT_ENOUGH",
            Self::RetRogueAppraisalCountNotEnough => {
                "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH"
            }
            Self::RetRoguePropAlreadyUsed => "RET_ROGUE_PROP_ALREADY_USED",
            Self::RetRogueRecordAlreadySaved => "RET_ROGUE_RECORD_ALREADY_SAVED",
            Self::RetRogueRollBuffMaxCount => "RET_ROGUE_ROLL_BUFF_MAX_COUNT",
            Self::RetRoguePickAvatarInvalid => "RET_ROGUE_PICK_AVATAR_INVALID",
            Self::RetRogueQuestExpire => "RET_ROGUE_QUEST_EXPIRE",
            Self::RetRogueQuestRewardAlready => "RET_ROGUE_QUEST_REWARD_ALREADY",
            Self::RetRogueReviveCountNotEnough => "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH",
            Self::RetRogueAreaInvalid => "RET_ROGUE_AREA_INVALID",
            Self::RetRogueScoreRewardPoolInvalid => "RET_ROGUE_SCORE_REWARD_POOL_INVALID",
            Self::RetRogueScoreRewardRowInvalid => "RET_ROGUE_SCORE_REWARD_ROW_INVALID",
            Self::RetRogueAeonLevelNotMeet => "RET_ROGUE_AEON_LEVEL_NOT_MEET",
            Self::RetRogueAeonLevelRewardAlreadyTaken => {
                "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Self::RetRogueAeonConfigNotExist => "RET_ROGUE_AEON_CONFIG_NOT_EXIST",
            Self::RetRogueTrialAvatarInvalid => "RET_ROGUE_TRIAL_AVATAR_INVALID",
            Self::RetRogueHandbookRewardAlreadyTaken => {
                "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN"
            }
            Self::RetRogueRoomTypeNotMatch => "RET_ROGUE_ROOM_TYPE_NOT_MATCH",
            Self::RetRogueShopGoodNotFound => "RET_ROGUE_SHOP_GOOD_NOT_FOUND",
            Self::RetRogueShopGoodAlreadyBought => "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT",
            Self::RetRogueShopGoodAlreadyOwn => "RET_ROGUE_SHOP_GOOD_ALREADY_OWN",
            Self::RetRogueShopMiracleNotExist => "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST",
            Self::RetRogueShopNotExist => "RET_ROGUE_SHOP_NOT_EXIST",
            Self::RetRogueShopCannotRefresh => "RET_ROGUE_SHOP_CANNOT_REFRESH",
            Self::RetRogueSelectBuffCertainMismatch => {
                "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH"
            }
            Self::RetMissionEventConfigNotExist => "RET_MISSION_EVENT_CONFIG_NOT_EXIST",
            Self::RetMissionEventNotClient => "RET_MISSION_EVENT_NOT_CLIENT",
            Self::RetMissionEventFinished => "RET_MISSION_EVENT_FINISHED",
            Self::RetMissionEventDoing => "RET_MISSION_EVENT_DOING",
            Self::RetHasChallengeMissionEvent => "RET_HAS_CHALLENGE_MISSION_EVENT",
            Self::RetNotChallengeMissionEvent => "RET_NOT_CHALLENGE_MISSION_EVENT",
            Self::RetGachaIdNotExist => "RET_GACHA_ID_NOT_EXIST",
            Self::RetGachaNumInvalid => "RET_GACHA_NUM_INVALID",
            Self::RetGachaFirstGachaMustOne => "RET_GACHA_FIRST_GACHA_MUST_ONE",
            Self::RetGachaReqDuplicated => "RET_GACHA_REQ_DUPLICATED",
            Self::RetGachaNotInSchedule => "RET_GACHA_NOT_IN_SCHEDULE",
            Self::RetGachaNewbieClose => "RET_GACHA_NEWBIE_CLOSE",
            Self::RetGachaTodayLimited => "RET_GACHA_TODAY_LIMITED",
            Self::RetGachaNotSupport => "RET_GACHA_NOT_SUPPORT",
            Self::RetGachaCeilingNotEnough => "RET_GACHA_CEILING_NOT_ENOUGH",
            Self::RetGachaCeilingClose => "RET_GACHA_CEILING_CLOSE",
            Self::RetNotInRaid => "RET_NOT_IN_RAID",
            Self::RetRaidDoing => "RET_RAID_DOING",
            Self::RetNotProp => "RET_NOT_PROP",
            Self::RetRaidIdNotMatch => "RET_RAID_ID_NOT_MATCH",
            Self::RetRaidRestartNotMatch => "RET_RAID_RESTART_NOT_MATCH",
            Self::RetRaidLimit => "RET_RAID_LIMIT",
            Self::RetRaidAvatarListEmpty => "RET_RAID_AVATAR_LIST_EMPTY",
            Self::RetRaidAvatarNotExist => "RET_RAID_AVATAR_NOT_EXIST",
            Self::RetChallengeRaidRewardAlready => "RET_CHALLENGE_RAID_REWARD_ALREADY",
            Self::RetChallengeRaidScoreNotReach => "RET_CHALLENGE_RAID_SCORE_NOT_REACH",
            Self::RetChallengeRaidNotOpen => "RET_CHALLENGE_RAID_NOT_OPEN",
            Self::RetRaidFinished => "RET_RAID_FINISHED",
            Self::RetRaidWorldLevelNotLock => "RET_RAID_WORLD_LEVEL_NOT_LOCK",
            Self::RetRaidCannotUseAssist => "RET_RAID_CANNOT_USE_ASSIST",
            Self::RetRaidAvatarNotMatch => "RET_RAID_AVATAR_NOT_MATCH",
            Self::RetRaidCanNotSave => "RET_RAID_CAN_NOT_SAVE",
            Self::RetRaidNoSave => "RET_RAID_NO_SAVE",
            Self::RetActivityRaidNotOpen => "RET_ACTIVITY_RAID_NOT_OPEN",
            Self::RetRaidAvatarCaptainNotExist => "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST",
            Self::RetRaidStoryLineNotMatch => "RET_RAID_STORY_LINE_NOT_MATCH",
            Self::RetTalkEventAlreadyTaken => "RET_TALK_EVENT_ALREADY_TAKEN",
            Self::RetNpcAlreadyMeet => "RET_NPC_ALREADY_MEET",
            Self::RetNpcNotInConfig => "RET_NPC_NOT_IN_CONFIG",
            Self::RetDialogueGroupDismatch => "RET_DIALOGUE_GROUP_DISMATCH",
            Self::RetDialogueEventInvalid => "RET_DIALOGUE_EVENT_INVALID",
            Self::RetTalkEventTakeProtoNotMatch => "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH",
            Self::RetTalkEventNotValid => "RET_TALK_EVENT_NOT_VALID",
            Self::RetExpeditionConfigNotExist => "RET_EXPEDITION_CONFIG_NOT_EXIST",
            Self::RetExpeditionRewardConfigNotExist => {
                "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST"
            }
            Self::RetExpeditionNotUnlocked => "RET_EXPEDITION_NOT_UNLOCKED",
            Self::RetExpeditionAlreadyAccepted => "RET_EXPEDITION_ALREADY_ACCEPTED",
            Self::RetExpeditionRepeatedAvatar => "RET_EXPEDITION_REPEATED_AVATAR",
            Self::RetAvatarAlreadyDispatched => "RET_AVATAR_ALREADY_DISPATCHED",
            Self::RetExpeditionNotAccepted => "RET_EXPEDITION_NOT_ACCEPTED",
            Self::RetExpeditionNotFinish => "RET_EXPEDITION_NOT_FINISH",
            Self::RetExpeditionAlreadyFinish => "RET_EXPEDITION_ALREADY_FINISH",
            Self::RetExpeditionTeamCountLimit => "RET_EXPEDITION_TEAM_COUNT_LIMIT",
            Self::RetExpeditionAvatarNumNotMatch => "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH",
            Self::RetExpeditionNotOpen => "RET_EXPEDITION_NOT_OPEN",
            Self::RetExpeditionFriendAvatarNotValid => {
                "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID"
            }
            Self::RetExpeditionNotPublished => "RET_EXPEDITION_NOT_PUBLISHED",
            Self::RetLoginActivityHasTaken => "RET_LOGIN_ACTIVITY_HAS_TAKEN",
            Self::RetLoginActivityDaysLack => "RET_LOGIN_ACTIVITY_DAYS_LACK",
            Self::RetTrialActivityRewardAlreadyTake => {
                "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE"
            }
            Self::RetTrialActivityStageNotFinish => "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH",
            Self::RetMaterialSubmitActivityHasTaken => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN"
            }
            Self::RetMaterialSubmitActivityMaterialNotSubmitted => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED"
            }
            Self::RetMaterialSubmitActivityMaterialAlreadySubmitted => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED"
            }
            Self::RetFantasticStoryActivityStoryError => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR"
            }
            Self::RetFantasticStoryActivityStoryNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN"
            }
            Self::RetFantasticStoryActivityBattleError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR"
            }
            Self::RetFantasticStoryActivityBattleNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN"
            }
            Self::RetFantasticStoryActivityBattleAvatarError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR"
            }
            Self::RetFantasticStoryActivityBattleBuffError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR"
            }
            Self::RetFantasticStoryActivityPreBattleScoreNotEnough => {
                "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH"
            }
            Self::RetTrialActivityAlreadyInTrialActivity => {
                "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY"
            }
            Self::RetCommonActivityNotOpen => "RET_COMMON_ACTIVITY_NOT_OPEN",
            Self::RetMessageConfigNotExist => "RET_MESSAGE_CONFIG_NOT_EXIST",
            Self::RetMessageSectionNotTake => "RET_MESSAGE_SECTION_NOT_TAKE",
            Self::RetMessageGroupNotTake => "RET_MESSAGE_GROUP_NOT_TAKE",
            Self::RetMessageSectionIdNotMatch => "RET_MESSAGE_SECTION_ID_NOT_MATCH",
            Self::RetMessageSectionCanNotFinish => "RET_MESSAGE_SECTION_CAN_NOT_FINISH",
            Self::RetMessageItemCanNotFinish => "RET_MESSAGE_ITEM_CAN_NOT_FINISH",
            Self::RetMessageItemRaidCanNotFinish => {
                "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH"
            }
            Self::RetFriendAlreadyIsFriend => "RET_FRIEND_ALREADY_IS_FRIEND",
            Self::RetFriendIsNotFriend => "RET_FRIEND_IS_NOT_FRIEND",
            Self::RetFriendApplyExpire => "RET_FRIEND_APPLY_EXPIRE",
            Self::RetFriendInBlacklist => "RET_FRIEND_IN_BLACKLIST",
            Self::RetFriendNotInBlacklist => "RET_FRIEND_NOT_IN_BLACKLIST",
            Self::RetFriendNumberLimit => "RET_FRIEND_NUMBER_LIMIT",
            Self::RetFriendBlacklistNumberLimit => "RET_FRIEND_BLACKLIST_NUMBER_LIMIT",
            Self::RetFriendDailyApplyLimit => "RET_FRIEND_DAILY_APPLY_LIMIT",
            Self::RetFriendInHandleLimit => "RET_FRIEND_IN_HANDLE_LIMIT",
            Self::RetFriendApplyInCd => "RET_FRIEND_APPLY_IN_CD",
            Self::RetFriendRemarkNameFormatError => "RET_FRIEND_REMARK_NAME_FORMAT_ERROR",
            Self::RetFriendPlayerNotFound => "RET_FRIEND_PLAYER_NOT_FOUND",
            Self::RetFriendInTargetBlacklist => "RET_FRIEND_IN_TARGET_BLACKLIST",
            Self::RetFriendTargetNumberLimit => "RET_FRIEND_TARGET_NUMBER_LIMIT",
            Self::RetAssistQueryTooFast => "RET_ASSIST_QUERY_TOO_FAST",
            Self::RetAssistNotExist => "RET_ASSIST_NOT_EXIST",
            Self::RetAssistUsedAlready => "RET_ASSIST_USED_ALREADY",
            Self::RetFriendReportReasonFormatError => {
                "RET_FRIEND_REPORT_REASON_FORMAT_ERROR"
            }
            Self::RetFriendReportSensitiveWords => "RET_FRIEND_REPORT_SENSITIVE_WORDS",
            Self::RetAssistUsedTimesOver => "RET_ASSIST_USED_TIMES_OVER",
            Self::RetAssistQuitAlready => "RET_ASSIST_QUIT_ALREADY",
            Self::RetAssistAvatarInLineup => "RET_ASSIST_AVATAR_IN_LINEUP",
            Self::RetAssistNoReward => "RET_ASSIST_NO_REWARD",
            Self::RetFriendSearchNumLimit => "RET_FRIEND_SEARCH_NUM_LIMIT",
            Self::RetFriendSearchInCd => "RET_FRIEND_SEARCH_IN_CD",
            Self::RetFriendRemarkNameUtf8Error => "RET_FRIEND_REMARK_NAME_UTF8_ERROR",
            Self::RetFriendReportReasonUtf8Error => "RET_FRIEND_REPORT_REASON_UTF8_ERROR",
            Self::RetAssistSetAlready => "RET_ASSIST_SET_ALREADY",
            Self::RetFriendTargetForbidOtherApply => {
                "RET_FRIEND_TARGET_FORBID_OTHER_APPLY"
            }
            Self::RetFriendMarkedCntMax => "RET_FRIEND_MARKED_CNT_MAX",
            Self::RetFriendMarkedAlready => "RET_FRIEND_MARKED_ALREADY",
            Self::RetFriendNotMarked => "RET_FRIEND_NOT_MARKED",
            Self::RetFriendChallengeLineupRecommendInCd => {
                "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Self::RetViewPlayerCardInCd => "RET_VIEW_PLAYER_CARD_IN_CD",
            Self::RetViewPlayerBattleRecordInCd => "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD",
            Self::RetPlayerBoardHeadIconNotExist => {
                "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST"
            }
            Self::RetPlayerBoardHeadIconLocked => "RET_PLAYER_BOARD_HEAD_ICON_LOCKED",
            Self::RetPlayerBoardHeadIconAlreadyUnlocked => {
                "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED"
            }
            Self::RetPlayerBoardDisplayAvatarNotExist => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST"
            }
            Self::RetPlayerBoardDisplayAvatarExceedLimit => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT"
            }
            Self::RetPlayerBoardDisplayRepeatedAvatar => {
                "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR"
            }
            Self::RetPlayerBoardDisplayAvatarSamePos => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS"
            }
            Self::RetPlayerBoardDisplayAvatarLocked => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED"
            }
            Self::RetSignatureLengthExceedLimit => "RET_SIGNATURE_LENGTH_EXCEED_LIMIT",
            Self::RetSignatureSensitiveWords => "RET_SIGNATURE_SENSITIVE_WORDS",
            Self::RetPlayerBoardAssistAvatarNotExist => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST"
            }
            Self::RetPlayerBoardAssistAvatarLocked => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED"
            }
            Self::RetSignatureUtf8Error => "RET_SIGNATURE_UTF8_ERROR",
            Self::RetPlayerBoardAssistAvatarCntError => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR"
            }
            Self::RetBattlePassTierNotValid => "RET_BATTLE_PASS_TIER_NOT_VALID",
            Self::RetBattlePassLevelNotMeet => "RET_BATTLE_PASS_LEVEL_NOT_MEET",
            Self::RetBattlePassRewardTakeAlready => "RET_BATTLE_PASS_REWARD_TAKE_ALREADY",
            Self::RetBattlePassNotPremium => "RET_BATTLE_PASS_NOT_PREMIUM",
            Self::RetBattlePassNotDoing => "RET_BATTLE_PASS_NOT_DOING",
            Self::RetBattlePassLevelInvalid => "RET_BATTLE_PASS_LEVEL_INVALID",
            Self::RetBattlePassNotUnlock => "RET_BATTLE_PASS_NOT_UNLOCK",
            Self::RetBattlePassNoReward => "RET_BATTLE_PASS_NO_REWARD",
            Self::RetBattlePassQuestNotValid => "RET_BATTLE_PASS_QUEST_NOT_VALID",
            Self::RetBattlePassNotChooseOptional => "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL",
            Self::RetBattlePassNotTakeReward => "RET_BATTLE_PASS_NOT_TAKE_REWARD",
            Self::RetBattlePassOptionalNotValid => "RET_BATTLE_PASS_OPTIONAL_NOT_VALID",
            Self::RetBattlePassBuyAlready => "RET_BATTLE_PASS_BUY_ALREADY",
            Self::RetBattlePassNearEnd => "RET_BATTLE_PASS_NEAR_END",
            Self::RetMusicLocked => "RET_MUSIC_LOCKED",
            Self::RetMusicNotExist => "RET_MUSIC_NOT_EXIST",
            Self::RetMusicUnlockFailed => "RET_MUSIC_UNLOCK_FAILED",
            Self::RetPunkLordLackSummonTimes => "RET_PUNK_LORD_LACK_SUMMON_TIMES",
            Self::RetPunkLordAttackingMonsterLimit => {
                "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT"
            }
            Self::RetPunkLordMonsterNotExist => "RET_PUNK_LORD_MONSTER_NOT_EXIST",
            Self::RetPunkLordMonsterAlreadyShared => {
                "RET_PUNK_LORD_MONSTER_ALREADY_SHARED"
            }
            Self::RetPunkLordMonsterExpired => "RET_PUNK_LORD_MONSTER_EXPIRED",
            Self::RetPunkLordSelfMonsterAttackLimit => {
                "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT"
            }
            Self::RetPunkLordLackSupportTimes => "RET_PUNK_LORD_LACK_SUPPORT_TIMES",
            Self::RetPunkLordMonsterAlreadyKilled => {
                "RET_PUNK_LORD_MONSTER_ALREADY_KILLED"
            }
            Self::RetPunkLordMonsterAttackerLimit => {
                "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT"
            }
            Self::RetPunkLordWorldLevleNotValid => "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID",
            Self::RetPunkLordRewardLevleNotExist => {
                "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST"
            }
            Self::RetPunkLordPointNotMeet => "RET_PUNK_LORD_POINT_NOT_MEET",
            Self::RetPunkLordInAttacking => "RET_PUNK_LORD_IN_ATTACKING",
            Self::RetPunkLordOperationInCd => "RET_PUNK_LORD_OPERATION_IN_CD",
            Self::RetPunkLordRewardAlreadyTaken => "RET_PUNK_LORD_REWARD_ALREADY_TAKEN",
            Self::RetPunkLordOverBonusRewardLimit => {
                "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT"
            }
            Self::RetPunkLordNotInSchedule => "RET_PUNK_LORD_NOT_IN_SCHEDULE",
            Self::RetPunkLordMonsterNotAttacked => "RET_PUNK_LORD_MONSTER_NOT_ATTACKED",
            Self::RetPunkLordMonsterNotKilled => "RET_PUNK_LORD_MONSTER_NOT_KILLED",
            Self::RetPunkLordMonsterKilledScoreAlreadyTake => {
                "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE"
            }
            Self::RetPunkLordRewardLevleAlreadyTake => {
                "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE"
            }
            Self::RetDailyActiveLevelInvalid => "RET_DAILY_ACTIVE_LEVEL_INVALID",
            Self::RetDailyActiveLevelRewardAlreadyTaken => {
                "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Self::RetDailyActiveLevelApNotEnough => {
                "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH"
            }
            Self::RetDailyMeetPam => "RET_DAILY_MEET_PAM",
            Self::RetReplayIdNotMatch => "RET_REPLAY_ID_NOT_MATCH",
            Self::RetReplayReqNotValid => "RET_REPLAY_REQ_NOT_VALID",
            Self::RetFightActivityDifficultyLevelNotPassed => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED"
            }
            Self::RetFightActivityDifficultyLevelRewardAlreadyTake => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE"
            }
            Self::RetFightActivityStageNotOpen => "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN",
            Self::RetFightActivityLevelNotUnlock => "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK",
            Self::RetTrainVisitorVisitorNotExist => "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST",
            Self::RetTrainVisitorBehaviorNotExist => {
                "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST"
            }
            Self::RetTrainVisitorBehaviorFinished => {
                "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED"
            }
            Self::RetTrainVisitorAllBehaviorRewardTaken => {
                "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN"
            }
            Self::RetTrainVisitorGetOnMissionNotFinish => {
                "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH"
            }
            Self::RetTrainVisitorNotGetOffOrBeTrainMember => {
                "RET_TRAIN_VISITOR_NOT_GET_OFF_OR_BE_TRAIN_MEMBER"
            }
            Self::RetTextJoinUnknowIsOverride => "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE",
            Self::RetTextJoinIdNotExist => "RET_TEXT_JOIN_ID_NOT_EXIST",
            Self::RetTextJoinCanNotOverride => "RET_TEXT_JOIN_CAN_NOT_OVERRIDE",
            Self::RetTextJoinItemIdError => "RET_TEXT_JOIN_ITEM_ID_ERROR",
            Self::RetTextJoinSensitiveCheckError => "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR",
            Self::RetTextJoinMustOverride => "RET_TEXT_JOIN_MUST_OVERRIDE",
            Self::RetTextJoinTextEmpty => "RET_TEXT_JOIN_TEXT_EMPTY",
            Self::RetTextJoinTextFormatError => "RET_TEXT_JOIN_TEXT_FORMAT_ERROR",
            Self::RetTextJoinTextUtf8Error => "RET_TEXT_JOIN_TEXT_UTF8_ERROR",
            Self::RetTextJoinBatchReqIdRepeat => "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT",
            Self::RetTextJoinTypeNotSupportBatchReq => {
                "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ"
            }
            Self::RetTextJoinAvatarIdNotExist => "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST",
            Self::RetTextJoinUnknowType => "RET_TEXT_JOIN_UNKNOW_TYPE",
            Self::RetPamMissionMissionIdError => "RET_PAM_MISSION_MISSION_ID_ERROR",
            Self::RetPamMissionMissionExpire => "RET_PAM_MISSION_MISSION_EXPIRE",
            Self::RetChatTypeNotExist => "RET_CHAT_TYPE_NOT_EXIST",
            Self::RetMsgTypeNotExist => "RET_MSG_TYPE_NOT_EXIST",
            Self::RetChatNoTargetUid => "RET_CHAT_NO_TARGET_UID",
            Self::RetChatMsgEmpty => "RET_CHAT_MSG_EMPTY",
            Self::RetChatMsgExceedLimit => "RET_CHAT_MSG_EXCEED_LIMIT",
            Self::RetChatMsgSensitiveCheckError => "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR",
            Self::RetChatMsgUtf8Error => "RET_CHAT_MSG_UTF8_ERROR",
            Self::RetChatForbidSwitchOpen => "RET_CHAT_FORBID_SWITCH_OPEN",
            Self::RetChatForbid => "RET_CHAT_FORBID",
            Self::RetChatMsgIncludeSpecialStr => "RET_CHAT_MSG_INCLUDE_SPECIAL_STR",
            Self::RetChatMsgEmojiNotExist => "RET_CHAT_MSG_EMOJI_NOT_EXIST",
            Self::RetChatMsgEmojiGenderNotMatch => "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH",
            Self::RetChatMsgEmojiNotMarked => "RET_CHAT_MSG_EMOJI_NOT_MARKED",
            Self::RetChatMsgEmojiAlreadyMarked => "RET_CHAT_MSG_EMOJI_ALREADY_MARKED",
            Self::RetChatMsgEmojiMarkedMaxLimit => "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT",
            Self::RetBoxingClubChallengeNotOpen => "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN",
            Self::RetMuseumNotOpen => "RET_MUSEUM_NOT_OPEN",
            Self::RetMuseumTurnCntNotMatch => "RET_MUSEUM_TURN_CNT_NOT_MATCH",
            Self::RetMuseumPhaseNotReach => "RET_MUSEUM_PHASE_NOT_REACH",
            Self::RetMuseumUnknowStuff => "RET_MUSEUM_UNKNOW_STUFF",
            Self::RetMuseumUnknowArea => "RET_MUSEUM_UNKNOW_AREA",
            Self::RetMuseumUnknowPos => "RET_MUSEUM_UNKNOW_POS",
            Self::RetMuseumStuffAlreadyInArea => "RET_MUSEUM_STUFF_ALREADY_IN_AREA",
            Self::RetMuseumStuffNotInArea => "RET_MUSEUM_STUFF_NOT_IN_AREA",
            Self::RetMuseumGetNpcRepeat => "RET_MUSEUM_GET_NPC_REPEAT",
            Self::RetMuseumGetNpcUnlock => "RET_MUSEUM_GET_NPC_UNLOCK",
            Self::RetMuseumGetNpcNotEnough => "RET_MUSEUM_GET_NPC_NOT_ENOUGH",
            Self::RetMuseumChangeStuffAreaError => "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR",
            Self::RetMuseumNotInit => "RET_MUSEUM_NOT_INIT",
            Self::RetMuseumEventError => "RET_MUSEUM_EVENT_ERROR",
            Self::RetMuseumUnknowChooseEventId => "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID",
            Self::RetMuseumEventOrderNotMatch => "RET_MUSEUM_EVENT_ORDER_NOT_MATCH",
            Self::RetMuseumEventPhaseNotUnlock => "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK",
            Self::RetMuseumEventMissionNotFound => "RET_MUSEUM_EVENT_MISSION_NOT_FOUND",
            Self::RetMuseumAreaLevelUpAlready => "RET_MUSEUM_AREA_LEVEL_UP_ALREADY",
            Self::RetMuseumStuffAlreadyUsed => "RET_MUSEUM_STUFF_ALREADY_USED",
            Self::RetMuseumEventRoundNotUnlock => "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK",
            Self::RetMuseumStuffInArea => "RET_MUSEUM_STUFF_IN_AREA",
            Self::RetMuseumStuffDispatch => "RET_MUSEUM_STUFF_DISPATCH",
            Self::RetMuseumIsEnd => "RET_MUSEUM_IS_END",
            Self::RetMuseumStuffLeaving => "RET_MUSEUM_STUFF_LEAVING",
            Self::RetMuseumEventMissionNotFinish => "RET_MUSEUM_EVENT_MISSION_NOT_FINISH",
            Self::RetMuseumCollectRewardNotExist => "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST",
            Self::RetMuseumCollectRewardAlreadyTaken => {
                "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN"
            }
            Self::RetMuseumAcceptMissionMaxLimit => "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT",
            Self::RetRogueChallengeNotOpen => "RET_ROGUE_CHALLENGE_NOT_OPEN",
            Self::RetRogueChallengeAssisRefreshLimit => {
                "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT"
            }
            Self::RetAlleyNotInit => "RET_ALLEY_NOT_INIT",
            Self::RetAlleyNotOpen => "RET_ALLEY_NOT_OPEN",
            Self::RetAlleyMapNotExist => "RET_ALLEY_MAP_NOT_EXIST",
            Self::RetAlleyEmptyPosList => "RET_ALLEY_EMPTY_POS_LIST",
            Self::RetAlleyLinePosInvalid => "RET_ALLEY_LINE_POS_INVALID",
            Self::RetAlleyShopNotUnlock => "RET_ALLEY_SHOP_NOT_UNLOCK",
            Self::RetAlleyDepotFull => "RET_ALLEY_DEPOT_FULL",
            Self::RetAlleyShopNotInclude => "RET_ALLEY_SHOP_NOT_INCLUDE",
            Self::RetAlleyEventNotUnlock => "RET_ALLEY_EVENT_NOT_UNLOCK",
            Self::RetAlleyEventNotRefresh => "RET_ALLEY_EVENT_NOT_REFRESH",
            Self::RetAlleyEventStateDoing => "RET_ALLEY_EVENT_STATE_DOING",
            Self::RetAlleyEventStateFinish => "RET_ALLEY_EVENT_STATE_FINISH",
            Self::RetAlleyEventError => "RET_ALLEY_EVENT_ERROR",
            Self::RetAlleyRewardLevelError => "RET_ALLEY_REWARD_LEVEL_ERROR",
            Self::RetAlleyRewardPrestigeNotEnough => {
                "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH"
            }
            Self::RetAlleyShipEmpty => "RET_ALLEY_SHIP_EMPTY",
            Self::RetAlleyShipIdDismatch => "RET_ALLEY_SHIP_ID_DISMATCH",
            Self::RetAlleyShipNotExist => "RET_ALLEY_SHIP_NOT_EXIST",
            Self::RetAlleyShipNotUnlock => "RET_ALLEY_SHIP_NOT_UNLOCK",
            Self::RetAlleyGoodsNotExist => "RET_ALLEY_GOODS_NOT_EXIST",
            Self::RetAlleyGoodsNotUnlock => "RET_ALLEY_GOODS_NOT_UNLOCK",
            Self::RetAlleyProfitNotPositive => "RET_ALLEY_PROFIT_NOT_POSITIVE",
            Self::RetAlleySpecialOrderDismatch => "RET_ALLEY_SPECIAL_ORDER_DISMATCH",
            Self::RetAlleyOrderGoodsOverLimit => "RET_ALLEY_ORDER_GOODS_OVER_LIMIT",
            Self::RetAlleySpecialOrderConditionNotMeet => {
                "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET"
            }
            Self::RetAlleyDepotSizeOverLimit => "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT",
            Self::RetAlleyGoodsNotEnough => "RET_ALLEY_GOODS_NOT_ENOUGH",
            Self::RetAlleyOrderIndexInvalid => "RET_ALLEY_ORDER_INDEX_INVALID",
            Self::RetAlleyRewardAlreadyTake => "RET_ALLEY_REWARD_ALREADY_TAKE",
            Self::RetAlleyRewardNotExist => "RET_ALLEY_REWARD_NOT_EXIST",
            Self::RetAlleyMainMissionNotDoing => "RET_ALLEY_MAIN_MISSION_NOT_DOING",
            Self::RetAlleyCriticalEventNotFinish => "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH",
            Self::RetAlleyShopGoodsNotValid => "RET_ALLEY_SHOP_GOODS_NOT_VALID",
            Self::RetAlleySlashNotOpen => "RET_ALLEY_SLASH_NOT_OPEN",
            Self::RetAlleyPlacingAnchorInvalid => "RET_ALLEY_PLACING_ANCHOR_INVALID",
            Self::RetAlleyPlacingGoodsIndexInvalid => {
                "RET_ALLEY_PLACING_GOODS_INDEX_INVALID"
            }
            Self::RetAlleySaveMapTooQuick => "RET_ALLEY_SAVE_MAP_TOO_QUICK",
            Self::RetAlleyMapNotLink => "RET_ALLEY_MAP_NOT_LINK",
            Self::RetAlleyFundsNotLowerBase => "RET_ALLEY_FUNDS_NOT_LOWER_BASE",
            Self::RetAlleyEventNotFinish => "RET_ALLEY_EVENT_NOT_FINISH",
            Self::RetAlleyNormalOrderNotMeet => "RET_ALLEY_NORMAL_ORDER_NOT_MEET",
            Self::RetPlayerReturnNotOpen => "RET_PLAYER_RETURN_NOT_OPEN",
            Self::RetPlayerReturnIsSigned => "RET_PLAYER_RETURN_IS_SIGNED",
            Self::RetPlayerReturnPointNotEnough => "RET_PLAYER_RETURN_POINT_NOT_ENOUGH",
            Self::RetPlayerReturnConditionInvalid => {
                "RET_PLAYER_RETURN_CONDITION_INVALID"
            }
            Self::RetPlayerReturnHasSigned => "RET_PLAYER_RETURN_HAS_SIGNED",
            Self::RetPlayerReturnRewardTaken => "RET_PLAYER_RETURN_REWARD_TAKEN",
            Self::RetAetherDivideNoLineup => "RET_AETHER_DIVIDE_NO_LINEUP",
            Self::RetAetherDivideLineupInvalid => "RET_AETHER_DIVIDE_LINEUP_INVALID",
            Self::RetChatBubbleIdError => "RET_CHAT_BUBBLE_ID_ERROR",
            Self::RetChatBubbleIdNotUnlock => "RET_CHAT_BUBBLE_ID_NOT_UNLOCK",
            Self::RetPhoneThemeIdError => "RET_PHONE_THEME_ID_ERROR",
            Self::RetPhoneThemeIdNotUnlock => "RET_PHONE_THEME_ID_NOT_UNLOCK",
            Self::RetChatBubbleSelectIsCurrent => "RET_CHAT_BUBBLE_SELECT_IS_CURRENT",
            Self::RetPhoneThemeSelectIsCurrent => "RET_PHONE_THEME_SELECT_IS_CURRENT",
            Self::RetChessRogueConfigNotFound => "RET_CHESS_ROGUE_CONFIG_NOT_FOUND",
            Self::RetChessRogueConfigInvalid => "RET_CHESS_ROGUE_CONFIG_INVALID",
            Self::RetChessRogueNoValidRoom => "RET_CHESS_ROGUE_NO_VALID_ROOM",
            Self::RetChessRogueNoCellInfo => "RET_CHESS_ROGUE_NO_CELL_INFO",
            Self::RetChessRogueCellNotFinish => "RET_CHESS_ROGUE_CELL_NOT_FINISH",
            Self::RetChessRogueCellIsLocked => "RET_CHESS_ROGUE_CELL_IS_LOCKED",
            Self::RetChessRogueScheduleNotMatch => "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH",
            Self::RetChessRogueStatusFail => "RET_CHESS_ROGUE_STATUS_FAIL",
            Self::RetChessRogueAreaNotExist => "RET_CHESS_ROGUE_AREA_NOT_EXIST",
            Self::RetChessRogueLineupFail => "RET_CHESS_ROGUE_LINEUP_FAIL",
            Self::RetChessRogueAeonFail => "RET_CHESS_ROGUE_AEON_FAIL",
            Self::RetChessRogueEnterCellFail => "RET_CHESS_ROGUE_ENTER_CELL_FAIL",
            Self::RetChessRogueRollDiceFail => "RET_CHESS_ROGUE_ROLL_DICE_FAIL",
            Self::RetChessRogueDiceStatusFail => "RET_CHESS_ROGUE_DICE_STATUS_FAIL",
            Self::RetChessRogueDiceCntNotFull => "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL",
            Self::RetChessRogueUnlock => "RET_CHESS_ROGUE_UNLOCK",
            Self::RetChessRoguePickAvatarFail => "RET_CHESS_ROGUE_PICK_AVATAR_FAIL",
            Self::RetChessRogueAvatarInvalid => "RET_CHESS_ROGUE_AVATAR_INVALID",
            Self::RetChessRogueCellCanNotSelect => "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT",
            Self::RetChessRogueDiceConfirmed => "RET_CHESS_ROGUE_DICE_CONFIRMED",
            Self::RetChessRogueNousDiceNotMatch => "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH",
            Self::RetChessRogueNousDiceRarityFail => {
                "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL"
            }
            Self::RetChessRogueNousDiceSurfaceDuplicate => {
                "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE"
            }
            Self::RetChessRogueNotInRogue => "RET_CHESS_ROGUE_NOT_IN_ROGUE",
            Self::RetChessRogueNousDiceBranchLimit => {
                "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT"
            }
            Self::RetHeliobusNotOpen => "RET_HELIOBUS_NOT_OPEN",
            Self::RetHeliobusSnsPostNotUnlock => "RET_HELIOBUS_SNS_POST_NOT_UNLOCK",
            Self::RetHeliobusSnsAlreadyRead => "RET_HELIOBUS_SNS_ALREADY_READ",
            Self::RetHeliobusSnsAlreadyLiked => "RET_HELIOBUS_SNS_ALREADY_LIKED",
            Self::RetHeliobusSnsAlreadyCommented => "RET_HELIOBUS_SNS_ALREADY_COMMENTED",
            Self::RetHeliobusSnsInMission => "RET_HELIOBUS_SNS_IN_MISSION",
            Self::RetHeliobusSnsAlreadyPosted => "RET_HELIOBUS_SNS_ALREADY_POSTED",
            Self::RetHeliobusSnsNotDoingMission => "RET_HELIOBUS_SNS_NOT_DOING_MISSION",
            Self::RetHeliobusRewardLevelMax => "RET_HELIOBUS_REWARD_LEVEL_MAX",
            Self::RetHeliobusIncomeNotEnough => "RET_HELIOBUS_INCOME_NOT_ENOUGH",
            Self::RetHeliobusSnsCommentNotUnlock => "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK",
            Self::RetHeliobusChallengeNotUnlock => "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK",
            Self::RetHeliobusChallengeIdError => "RET_HELIOBUS_CHALLENGE_ID_ERROR",
            Self::RetHeliobusSkillNotUnlock => "RET_HELIOBUS_SKILL_NOT_UNLOCK",
            Self::RetHeliobusAcceptPostMissionFail => {
                "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL"
            }
            Self::RetHeliobusSkillNotSelected => "RET_HELIOBUS_SKILL_NOT_SELECTED",
            Self::RetHeliobusPlaneTypeInvalid => "RET_HELIOBUS_PLANE_TYPE_INVALID",
            Self::RetReddotParamInvalid => "RET_REDDOT_PARAM_INVALID",
            Self::RetReddotActivityNotOpen => "RET_REDDOT_ACTIVITY_NOT_OPEN",
            Self::RetRogueEndlessActivityConfigError => {
                "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR"
            }
            Self::RetRogueEndlessActivityNotOpen => "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN",
            Self::RetRogueEndlessActivityOverBonusRewardLimit => {
                "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT"
            }
            Self::RetRogueEndlessActivityScoreNotMeet => {
                "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET"
            }
            Self::RetRogueEndlessActivityRewardLevleAlreadyTake => {
                "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE"
            }
            Self::RetHeartDialScriptNotFound => "RET_HEART_DIAL_SCRIPT_NOT_FOUND",
            Self::RetHeartDialScriptEmotionTheSame => {
                "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME"
            }
            Self::RetHeartDialScriptStepNotNormal => {
                "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL"
            }
            Self::RetHeartDialScriptConditionNotMatch => {
                "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH"
            }
            Self::RetHeartDialScriptSubmitItemNumNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH"
            }
            Self::RetHeartDialScriptSubmitItemIdNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH"
            }
            Self::RetHeartDialDialogueNotFound => "RET_HEART_DIAL_DIALOGUE_NOT_FOUND",
            Self::RetHeartDialDialogueAlreadyPerformed => {
                "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED"
            }
            Self::RetHeartDialNpcNotFound => "RET_HEART_DIAL_NPC_NOT_FOUND",
            Self::RetHeartDialTraceConfigNotFound => {
                "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND"
            }
            Self::RetHeartDialFloorTraceExist => "RET_HEART_DIAL_FLOOR_TRACE_EXIST",
            Self::RetHeartDialTraceFloorNotMatch => {
                "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH"
            }
            Self::RetTravelBrochureConfigError => "RET_TRAVEL_BROCHURE_CONFIG_ERROR",
            Self::RetTravelBrochureParamInvalid => "RET_TRAVEL_BROCHURE_PARAM_INVALID",
            Self::RetTravelBrochureLocked => "RET_TRAVEL_BROCHURE_LOCKED",
            Self::RetTravelBrochureCannotOperate => "RET_TRAVEL_BROCHURE_CANNOT_OPERATE",
            Self::RetTravelBrochureWorldIdNotMatch => {
                "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH"
            }
            Self::RetTravelBrochureHasNoWorldBook => {
                "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK"
            }
            Self::RetTravelBrochurePageFull => "RET_TRAVEL_BROCHURE_PAGE_FULL",
            Self::RetMapRotationNotInRegion => "RET_MAP_ROTATION_NOT_IN_REGION",
            Self::RetMapRotationRotaterAlreadyDeployed => {
                "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED"
            }
            Self::RetMapRotationEnergyNotEnough => "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH",
            Self::RetMapRotationEntityNotOnCurPose => {
                "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE"
            }
            Self::RetMapRotationRotaterNotDeployed => {
                "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED"
            }
            Self::RetMapRotationPoseRotaterMismatch => {
                "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH"
            }
            Self::RetMapRotationRotaterNotRemovable => {
                "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE"
            }
            Self::RetMapRotationRotaterDisposable => {
                "RET_MAP_ROTATION_ROTATER_DISPOSABLE"
            }
            Self::RetSpaceZooActivityCatNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatParamInvalid => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID"
            }
            Self::RetSpaceZooActivityCatItemNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH"
            }
            Self::RetSpaceZooActivityCatBagFull => "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL",
            Self::RetSpaceZooActivityCatNotToMutate => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE"
            }
            Self::RetSpaceZooActivityCatStateError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR"
            }
            Self::RetSpaceZooActivityCatCatteryLocked => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED"
            }
            Self::RetSpaceZooActivityCatOutNow => "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW",
            Self::RetSpaceZooActivityCatConfigNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatFeatureNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatAddCatError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR"
            }
            Self::RetSpaceZooActivityCatMoneyNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH"
            }
            Self::RetSpaceZooActivityCatCondNotMatch => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH"
            }
            Self::RetStrongChallengeActivityStageCfgMiss => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS"
            }
            Self::RetStrongChallengeActivityStageNotOpen => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN"
            }
            Self::RetStrongChallengeActivityBuffError => {
                "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR"
            }
            Self::RetRollShopNotFound => "RET_ROLL_SHOP_NOT_FOUND",
            Self::RetRollShopGroupEmpty => "RET_ROLL_SHOP_GROUP_EMPTY",
            Self::RetRollShopEmpty => "RET_ROLL_SHOP_EMPTY",
            Self::RetRollShopGachaReqDuplicated => "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED",
            Self::RetRollShopRandomError => "RET_ROLL_SHOP_RANDOM_ERROR",
            Self::RetRollShopGroupTypeNotFound => "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND",
            Self::RetRollShopHasStoredRewardAlready => {
                "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY"
            }
            Self::RetRollShopNoStoredReward => "RET_ROLL_SHOP_NO_STORED_REWARD",
            Self::RetRollShopNotInValidScene => "RET_ROLL_SHOP_NOT_IN_VALID_SCENE",
            Self::RetRollShopInvalidRollShopType => {
                "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE"
            }
            Self::RetActivityRaidCollectionPrevNotFinish => {
                "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH"
            }
            Self::RetActivityRaidCollectionGroupEnterNextUnavailable => {
                "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE"
            }
            Self::RetActivityRaidCollectionIsLast => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_LAST"
            }
            Self::RetActivityRaidCollectionIsNotNext => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT"
            }
            Self::RetOfferingNotUnlock => "RET_OFFERING_NOT_UNLOCK",
            Self::RetOfferingLevelNotUnlock => "RET_OFFERING_LEVEL_NOT_UNLOCK",
            Self::RetOfferingReachMaxLevel => "RET_OFFERING_REACH_MAX_LEVEL",
            Self::RetOfferingItemNotEnough => "RET_OFFERING_ITEM_NOT_ENOUGH",
            Self::RetOfferingLongtailNotOpen => "RET_OFFERING_LONGTAIL_NOT_OPEN",
            Self::RetOfferingRewardCondition => "RET_OFFERING_REWARD_CONDITION",
            Self::RetDrinkMakerChatInvalid => "RET_DRINK_MAKER_CHAT_INVALID",
            Self::RetDrinkMakerParamInvalid => "RET_DRINK_MAKER_PARAM_INVALID",
            Self::RetDrinkMakerParamNotUnlock => "RET_DRINK_MAKER_PARAM_NOT_UNLOCK",
            Self::RetDrinkMakerConfigNotFound => "RET_DRINK_MAKER_CONFIG_NOT_FOUND",
            Self::RetDrinkMakerNotLastChat => "RET_DRINK_MAKER_NOT_LAST_CHAT",
            Self::RetDrinkMakerDayAndFreePhaseNotOpen => {
                "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN"
            }
            Self::RetMonopolyNotOpen => "RET_MONOPOLY_NOT_OPEN",
            Self::RetMonopolyConfigError => "RET_MONOPOLY_CONFIG_ERROR",
            Self::RetMonopolyDiceNotEnough => "RET_MONOPOLY_DICE_NOT_ENOUGH",
            Self::RetMonopolyCurCellNotFinish => "RET_MONOPOLY_CUR_CELL_NOT_FINISH",
            Self::RetMonopolyCoinNotEnough => "RET_MONOPOLY_COIN_NOT_ENOUGH",
            Self::RetMonopolyCellWaitPending => "RET_MONOPOLY_CELL_WAIT_PENDING",
            Self::RetMonopolyCellStateError => "RET_MONOPOLY_CELL_STATE_ERROR",
            Self::RetMonopolyCellContentError => "RET_MONOPOLY_CELL_CONTENT_ERROR",
            Self::RetMonopolyItemNotEnough => "RET_MONOPOLY_ITEM_NOT_ENOUGH",
            Self::RetMonopolyCellContentCannotGiveup => {
                "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP"
            }
            Self::RetMonopolyAssetLevelInvalid => "RET_MONOPOLY_ASSET_LEVEL_INVALID",
            Self::RetMonopolyTurnNotFinish => "RET_MONOPOLY_TURN_NOT_FINISH",
            Self::RetMonopolyGuideNotFinish => "RET_MONOPOLY_GUIDE_NOT_FINISH",
            Self::RetMonopolyRaffleRewardReissued => {
                "RET_MONOPOLY_RAFFLE_REWARD_REISSUED"
            }
            Self::RetMonopolyNoGameActive => "RET_MONOPOLY_NO_GAME_ACTIVE",
            Self::RetMonopolyGameRatioNotIncreasable => {
                "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE"
            }
            Self::RetMonopolyGameRatioMax => "RET_MONOPOLY_GAME_RATIO_MAX",
            Self::RetMonopolyGameTargetRatioInvalid => {
                "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID"
            }
            Self::RetMonopolyGameBingoFlipPosInvalid => {
                "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID"
            }
            Self::RetMonopolyGameGuessAlreadyChoose => {
                "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE"
            }
            Self::RetMonopolyGameGuessChooseInvalid => {
                "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID"
            }
            Self::RetMonopolyGameGuessInformationAlreadyBought => {
                "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT"
            }
            Self::RetMonopolyGameRaiseRatioNotUnlock => {
                "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK"
            }
            Self::RetMonopolyFriendNotSynced => "RET_MONOPOLY_FRIEND_NOT_SYNCED",
            Self::RetMonopolyGetFriendRankingListInCd => {
                "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD"
            }
            Self::RetMonopolyLikeTargetNotFriend => "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND",
            Self::RetMonopolyDailyAlreadyLiked => "RET_MONOPOLY_DAILY_ALREADY_LIKED",
            Self::RetMonopolySocialEventStatusNotMatch => {
                "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH"
            }
            Self::RetMonopolySocialEventServerCacheNotExist => {
                "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST"
            }
            Self::RetMonopolyActivityIdNotMatch => "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH",
            Self::RetMonopolyRafflePoolNotExist => "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST",
            Self::RetMonopolyRafflePoolTimeNotMatch => {
                "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH"
            }
            Self::RetMonopolyRafflePoolPhaseNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET"
            }
            Self::RetMonopolyRafflePoolShowTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET"
            }
            Self::RetMonopolyRaffleTicketNotFound => {
                "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND"
            }
            Self::RetMonopolyRaffleTicketTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET"
            }
            Self::RetMonopolyRaffleTicketRewardAlreadyTaken => {
                "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN"
            }
            Self::RetMonopolyRafflePoolNotInRaffleTime => {
                "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME"
            }
            Self::RetMonopolyMbtiReportRewardAlreadyTaken => {
                "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN"
            }
            Self::RetEvolveBuildLevelGaming => "RET_EVOLVE_BUILD_LEVEL_GAMING",
            Self::RetEveolveBuildLevelBanRandom => "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM",
            Self::RetEvolveBuildFirstRewardAlreadyTaken => {
                "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN"
            }
            Self::RetEvolveBuildLevelUnfinish => "RET_EVOLVE_BUILD_LEVEL_UNFINISH",
            Self::RetEvolveBuildShopAbilityMaxLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL"
            }
            Self::RetEvolveBuildShopAbilityMinLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL"
            }
            Self::RetEvolveBuildShopAbilityNotGet => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET"
            }
            Self::RetEvolveBuildLevelLock => "RET_EVOLVE_BUILD_LEVEL_LOCK",
            Self::RetEvolveBuildExpNotEnough => "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH",
            Self::RetEvolveBuildShopAbilityLevelError => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR"
            }
            Self::RetEvolveBuildActivityNotOpen => "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN",
            Self::RetEvolveBuildShopAbilityEmpty => "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY",
            Self::RetEvolveBuildLevelNotStart => "RET_EVOLVE_BUILD_LEVEL_NOT_START",
            Self::RetEvolveBuildShopLock => "RET_EVOLVE_BUILD_SHOP_LOCK",
            Self::RetEvolveBuildRewardLock => "RET_EVOLVE_BUILD_REWARD_LOCK",
            Self::RetEvolveBuildRewardLevelMax => "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX",
            Self::RetEvolveBuildRewardAlreadyAllTaken => {
                "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN"
            }
            Self::RetClockParkConfigError => "RET_CLOCK_PARK_CONFIG_ERROR",
            Self::RetClockParkEffectError => "RET_CLOCK_PARK_EFFECT_ERROR",
            Self::RetClockParkScriptAlreadyUnlock => {
                "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK"
            }
            Self::RetClockParkScriptUnlockConditionNotMeet => {
                "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET"
            }
            Self::RetClockParkTalentAlreadyUnlock => {
                "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK"
            }
            Self::RetClockParkScriptLocked => "RET_CLOCK_PARK_SCRIPT_LOCKED",
            Self::RetClockParkHasOngoingScript => "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT",
            Self::RetClockParkNoOngoingScript => "RET_CLOCK_PARK_NO_ONGOING_SCRIPT",
            Self::RetClockParkDicePlacementError => "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR",
            Self::RetClockParkMismatchStatus => "RET_CLOCK_PARK_MISMATCH_STATUS",
            Self::RetClockParkNoBuff => "RET_CLOCK_PARK_NO_BUFF",
            Self::RetClockParkSlotMachineGachaReqDuplicated => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED"
            }
            Self::RetClockParkSlotMachineCostNotEnough => {
                "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH"
            }
            Self::RetClockParkSlotMachineGachaCntExceedLimit => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT"
            }
            Self::RetClockParkNotOpen => "RET_CLOCK_PARK_NOT_OPEN",
            Self::RetTournRogueStatusMismatch => "RET_TOURN_ROGUE_STATUS_MISMATCH",
            Self::RetMagicRogueStatusMismatch => "RET_MAGIC_ROGUE_STATUS_MISMATCH",
            Self::RetAutoMountMagicUnitNoMatchedMagicScepter => {
                "RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER"
            }
            Self::RetMagicUnitWorkbenchReforgeGenFail => {
                "RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL"
            }
            Self::RetMatchAlreadyInMatch => "RET_MATCH_ALREADY_IN_MATCH",
            Self::RetMatchNotInMatch => "RET_MATCH_NOT_IN_MATCH",
            Self::RetMatchPlayNotOpen => "RET_MATCH_PLAY_NOT_OPEN",
            Self::RetCrossStateError => "RET_CROSS_STATE_ERROR",
            Self::RetMatchVersionNotEqual => "RET_MATCH_VERSION_NOT_EQUAL",
            Self::RetMatchPlayerNotInLobbyRoom => "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM",
            Self::RetLobbyStateNotMatch => "RET_LOBBY_STATE_NOT_MATCH",
            Self::RetLobbyRoomNotExist => "RET_LOBBY_ROOM_NOT_EXIST",
            Self::RetLobbyRoomPalyerFull => "RET_LOBBY_ROOM_PALYER_FULL",
            Self::RetLobbyRoomPalyerNotReady => "RET_LOBBY_ROOM_PALYER_NOT_READY",
            Self::RetLobbyRoomPalyerFighting => "RET_LOBBY_ROOM_PALYER_FIGHTING",
            Self::RetFightRoomNotExist => "RET_FIGHT_ROOM_NOT_EXIST",
            Self::RetFightMatch3PlayerStateErr => "RET_FIGHT_MATCH3_PLAYER_STATE_ERR",
            Self::RetFightMatch3RoomStateErr => "RET_FIGHT_MATCH3_ROOM_STATE_ERR",
            Self::RetCrossStateTimeOut => "RET_CROSS_STATE_TIME_OUT",
            Self::RetSwordTrainingNoActiveGame => "RET_SWORD_TRAINING_NO_ACTIVE_GAME",
            Self::RetSwordTrainingNoPendingActionMatch => {
                "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH"
            }
            Self::RetSwordTrainingPartnerAbilityInvalid => {
                "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID"
            }
            Self::RetSwordTrainingSkillAlreadyLearned => {
                "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED"
            }
            Self::RetSwordTrainingConditionNotMeet => {
                "RET_SWORD_TRAINING_CONDITION_NOT_MEET"
            }
            Self::RetSwordTrainingParentSkillNotLearned => {
                "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED"
            }
            Self::RetSwordTrainingSkillTypeNotUnlock => {
                "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK"
            }
            Self::RetSwordTrainingGameAlreadyExist => {
                "RET_SWORD_TRAINING_GAME_ALREADY_EXIST"
            }
            Self::RetSwordTrainingEndingHintNotMatch => {
                "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH"
            }
            Self::RetSwordTrainingStorylineConfigNotFound => {
                "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND"
            }
            Self::RetSwordTrainingStoryConfigNotFound => {
                "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND"
            }
            Self::RetSwordTrainingUnlockNotFinish => {
                "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH"
            }
            Self::RetSwordTrainingOptionMismatch => "RET_SWORD_TRAINING_OPTION_MISMATCH",
            Self::RetSwordTrainingRestoreWithoutExamFailed => {
                "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED"
            }
            Self::RetSwordTrainingNoRestoreGameAvailable => {
                "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE"
            }
            Self::RetSwordTrainingEndingStoryNotMatch => {
                "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH"
            }
            Self::RetSwordTrainingEndingNotFinish => {
                "RET_SWORD_TRAINING_ENDING_NOT_FINISH"
            }
            Self::RetSwordTrainingEndingRewardTaken => {
                "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN"
            }
            Self::RetSwordTrainingCombatRankNotChange => {
                "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE"
            }
            Self::RetSwordTrainingDirectBattleDisable => {
                "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE"
            }
            Self::RetFightFestPhaseNotMatch => "RET_FIGHT_FEST_PHASE_NOT_MATCH",
            Self::RetFightFestScoreRaceAlreadyFinish => {
                "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH"
            }
            Self::RetFightFestChallengeLocked => "RET_FIGHT_FEST_CHALLENGE_LOCKED",
            Self::RetFightFestCoachSkillLocked => "RET_FIGHT_FEST_COACH_SKILL_LOCKED",
            Self::RetFightFestCoachSkillEquipTypeExisted => {
                "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED"
            }
            Self::RetFightFestScoreRaceMissionDoind => {
                "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND"
            }
            Self::RetFightFestCoachSkillNoEquip => "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP",
            Self::RetPetNotExist => "RET_PET_NOT_EXIST",
            Self::RetPetAlreadySummoned => "RET_PET_ALREADY_SUMMONED",
            Self::RetPetNotSummoned => "RET_PET_NOT_SUMMONED",
            Self::RetMusicRhythmLevelTimeTooShort => {
                "RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT"
            }
            Self::RetMusicRhythmNotInLevel => "RET_MUSIC_RHYTHM_NOT_IN_LEVEL",
            Self::RetMusicRhythmPreDifficultyNotPass => {
                "RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS"
            }
            Self::RetMusicRhythmSongLimited => "RET_MUSIC_RHYTHM_SONG_LIMITED",
            Self::RetMusicRhythmSongLocked => "RET_MUSIC_RHYTHM_SONG_LOCKED",
            Self::RetMusicRhythmTrackLocked => "RET_MUSIC_RHYTHM_TRACK_LOCKED",
            Self::RetMusicRhythmLevelNotUnlock => "RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK",
            Self::RetMusicRhythmSongSfxLocked => "RET_MUSIC_RHYTHM_SONG_SFX_LOCKED",
            Self::RetTrainPartyCoinNotEnough => "RET_TRAIN_PARTY_COIN_NOT_ENOUGH",
            Self::RetTrainPartyDiyTagNotMatch => "RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH",
            Self::RetTrainPartyUseCardMobilityNotEnough => {
                "RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH"
            }
            Self::RetTrainPartyAreaUnlockCoinNotEnough => {
                "RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH"
            }
            Self::RetTarotBookEnergyNotEnough => "RET_TAROT_BOOK_ENERGY_NOT_ENOUGH",
            Self::RetTarotBookPackNotAvailable => "RET_TAROT_BOOK_PACK_NOT_AVAILABLE",
            Self::RetTarotBookStoryAlreadyUnlock => "RET_TAROT_BOOK_STORY_ALREADY_UNLOCK",
            Self::RetTarotBookCardNotEnough => "RET_TAROT_BOOK_CARD_NOT_ENOUGH",
            Self::RetTarotBookClueNotEnough => "RET_TAROT_BOOK_CLUE_NOT_ENOUGH",
            Self::RetTarotBookUnlockStoryCardNotSame => {
                "RET_TAROT_BOOK_UNLOCK_STORY_CARD_NOT_SAME"
            }
            Self::RetTarotBookStoryNotUnlock => "RET_TAROT_BOOK_STORY_NOT_UNLOCK",
            Self::RetTarotBookStoryAlreadyFinish => "RET_TAROT_BOOK_STORY_ALREADY_FINISH",
            Self::RetTarotBookInteractionAlreadyFinish => {
                "RET_TAROT_BOOK_INTERACTION_ALREADY_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RET_SUCC" => Some(Self::RetSucc),
            "RET_FAIL" => Some(Self::RetFail),
            "RET_SERVER_INTERNAL_ERROR" => Some(Self::RetServerInternalError),
            "RET_TIMEOUT" => Some(Self::RetTimeout),
            "RET_REPEATED_REQ" => Some(Self::RetRepeatedReq),
            "RET_REQ_PARA_INVALID" => Some(Self::RetReqParaInvalid),
            "RET_PLAYER_DATA_ERROR" => Some(Self::RetPlayerDataError),
            "RET_PLAYER_CLIENT_PAUSED" => Some(Self::RetPlayerClientPaused),
            "RET_FUNC_CHECK_FAILED" => Some(Self::RetFuncCheckFailed),
            "RET_FEATURE_SWITCH_CLOSED" => Some(Self::RetFeatureSwitchClosed),
            "RET_FREQ_OVER_LIMIT" => Some(Self::RetFreqOverLimit),
            "RET_SYSTEM_BUSY" => Some(Self::RetSystemBusy),
            "RET_PLAYER_NOT_ONLINE" => Some(Self::RetPlayerNotOnline),
            "RET_OPERATION_IN_CD" => Some(Self::RetOperationInCd),
            "RET_REPEATE_LOGIN" => Some(Self::RetRepeateLogin),
            "RET_RETRY_LOGIN" => Some(Self::RetRetryLogin),
            "RET_WAIT_LOGIN" => Some(Self::RetWaitLogin),
            "RET_NOT_IN_WHITE_LIST" => Some(Self::RetNotInWhiteList),
            "RET_IN_BLACK_LIST" => Some(Self::RetInBlackList),
            "RET_ACCOUNT_VERIFY_ERROR" => Some(Self::RetAccountVerifyError),
            "RET_ACCOUNT_PARA_ERROR" => Some(Self::RetAccountParaError),
            "RET_ANTI_ADDICT_LOGIN" => Some(Self::RetAntiAddictLogin),
            "RET_CHECK_SUM_ERROR" => Some(Self::RetCheckSumError),
            "RET_REACH_MAX_PLAYER_NUM" => Some(Self::RetReachMaxPlayerNum),
            "RET_ALREADY_REGISTERED" => Some(Self::RetAlreadyRegistered),
            "RET_GENDER_ERROR" => Some(Self::RetGenderError),
            "SET_NICKNAME_RET_CALLBACK_PROCESSING" => {
                Some(Self::SetNicknameRetCallbackProcessing)
            }
            "RET_IN_GM_BIND_ACCESS" => Some(Self::RetInGmBindAccess),
            "RET_QUEST_REWARD_ALREADY_TAKEN" => Some(Self::RetQuestRewardAlreadyTaken),
            "RET_QUEST_NOT_ACCEPT" => Some(Self::RetQuestNotAccept),
            "RET_QUEST_NOT_FINISH" => Some(Self::RetQuestNotFinish),
            "RET_QUEST_STATUS_ERROR" => Some(Self::RetQuestStatusError),
            "RET_ACHIEVEMENT_LEVEL_NOT_REACH" => Some(Self::RetAchievementLevelNotReach),
            "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN" => {
                Some(Self::RetAchievementLevelAlreadyTaken)
            }
            "RET_AVATAR_NOT_EXIST" => Some(Self::RetAvatarNotExist),
            "RET_AVATAR_RES_EXP_NOT_ENOUGH" => Some(Self::RetAvatarResExpNotEnough),
            "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT" => {
                Some(Self::RetAvatarExpReachPromotionLimit)
            }
            "RET_AVATAR_REACH_MAX_PROMOTION" => Some(Self::RetAvatarReachMaxPromotion),
            "RET_SKILLTREE_CONFIG_NOT_EXIST" => Some(Self::RetSkilltreeConfigNotExist),
            "RET_SKILLTREE_ALREADY_UNLOCK" => Some(Self::RetSkilltreeAlreadyUnlock),
            "RET_SKILLTREE_PRE_LOCKED" => Some(Self::RetSkilltreePreLocked),
            "RET_SKILLTREE_LEVEL_NOT_MEET" => Some(Self::RetSkilltreeLevelNotMeet),
            "RET_SKILLTREE_RANK_NOT_MEET" => Some(Self::RetSkilltreeRankNotMeet),
            "RET_AVATAR_DRESS_NO_EQUIPMENT" => Some(Self::RetAvatarDressNoEquipment),
            "RET_AVATAR_EXP_ITEM_NOT_EXIST" => Some(Self::RetAvatarExpItemNotExist),
            "RET_SKILLTREE_POINT_LOCKED" => Some(Self::RetSkilltreePointLocked),
            "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH" => {
                Some(Self::RetSkilltreePointLevelUpgradeNotMatch)
            }
            "RET_SKILLTREE_POINT_LEVEL_REACH_MAX" => {
                Some(Self::RetSkilltreePointLevelReachMax)
            }
            "RET_WORLD_LEVEL_NOT_MEET" => Some(Self::RetWorldLevelNotMeet),
            "RET_PLAYER_LEVEL_NOT_MEET" => Some(Self::RetPlayerLevelNotMeet),
            "RET_AVATAR_RANK_NOT_MATCH" => Some(Self::RetAvatarRankNotMatch),
            "RET_AVATAR_RANK_REACH_MAX" => Some(Self::RetAvatarRankReachMax),
            "RET_HERO_BASIC_TYPE_NOT_MATCH" => Some(Self::RetHeroBasicTypeNotMatch),
            "RET_AVATAR_PROMOTION_NOT_MEET" => Some(Self::RetAvatarPromotionNotMeet),
            "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetPromotionRewardConfigNotExist)
            }
            "RET_PROMOTION_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPromotionRewardAlreadyTaken)
            }
            "RET_AVATAR_SKIN_ITEM_NOT_EXIST" => Some(Self::RetAvatarSkinItemNotExist),
            "RET_AVATAR_SKIN_ALREADY_DRESSED" => Some(Self::RetAvatarSkinAlreadyDressed),
            "RET_AVATAR_NOT_DRESS_SKIN" => Some(Self::RetAvatarNotDressSkin),
            "RET_AVATAR_SKIN_NOT_MATCH_AVATAR" => Some(Self::RetAvatarSkinNotMatchAvatar),
            "RET_AVATAR_PATH_NOT_MATCH" => Some(Self::RetAvatarPathNotMatch),
            "RET_ITEM_NOT_EXIST" => Some(Self::RetItemNotExist),
            "RET_ITEM_COST_NOT_ENOUGH" => Some(Self::RetItemCostNotEnough),
            "RET_ITEM_COST_TOO_MUCH" => Some(Self::RetItemCostTooMuch),
            "RET_ITEM_NO_COST" => Some(Self::RetItemNoCost),
            "RET_ITEM_NOT_ENOUGH" => Some(Self::RetItemNotEnough),
            "RET_ITEM_INVALID" => Some(Self::RetItemInvalid),
            "RET_ITEM_CONFIG_NOT_EXIST" => Some(Self::RetItemConfigNotExist),
            "RET_SCOIN_NOT_ENOUGH" => Some(Self::RetScoinNotEnough),
            "RET_ITEM_REWARD_EXCEED_LIMIT" => Some(Self::RetItemRewardExceedLimit),
            "RET_ITEM_INVALID_USE" => Some(Self::RetItemInvalidUse),
            "RET_ITEM_USE_CONFIG_NOT_EXIST" => Some(Self::RetItemUseConfigNotExist),
            "RET_REWARD_CONFIG_NOT_EXIST" => Some(Self::RetRewardConfigNotExist),
            "RET_ITEM_EXCEED_LIMIT" => Some(Self::RetItemExceedLimit),
            "RET_ITEM_COUNT_INVALID" => Some(Self::RetItemCountInvalid),
            "RET_ITEM_USE_TARGET_TYPE_INVALID" => Some(Self::RetItemUseTargetTypeInvalid),
            "RET_ITEM_USE_SATIETY_FULL" => Some(Self::RetItemUseSatietyFull),
            "RET_ITEM_COMPOSE_NOT_EXIST" => Some(Self::RetItemComposeNotExist),
            "RET_RELIC_COMPOSE_NOT_EXIST" => Some(Self::RetRelicComposeNotExist),
            "RET_ITEM_CAN_NOT_SELL" => Some(Self::RetItemCanNotSell),
            "RET_ITEM_SELL_EXCEDD_LIMIT" => Some(Self::RetItemSellExceddLimit),
            "RET_ITEM_NOT_IN_COST_LIST" => Some(Self::RetItemNotInCostList),
            "RET_ITEM_SPECIAL_COST_NOT_ENOUGH" => Some(Self::RetItemSpecialCostNotEnough),
            "RET_ITEM_SPECIAL_COST_TOO_MUCH" => Some(Self::RetItemSpecialCostTooMuch),
            "RET_ITEM_FORMULA_NOT_EXIST" => Some(Self::RetItemFormulaNotExist),
            "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST" => {
                Some(Self::RetItemAutoGiftOptionalNotExist)
            }
            "RET_RELIC_COMPOSE_RELIC_INVALID" => Some(Self::RetRelicComposeRelicInvalid),
            "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID" => {
                Some(Self::RetRelicComposeMainAffixIdInvalid)
            }
            "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE" => {
                Some(Self::RetRelicComposeWrongFormulaType)
            }
            "RET_RELIC_COMPOSE_RELIC_NOT_EXIST" => {
                Some(Self::RetRelicComposeRelicNotExist)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID" => {
                Some(Self::RetRelicComposeBlackGoldCountInvalid)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED" => {
                Some(Self::RetRelicComposeBlackGoldNotNeed)
            }
            "RET_MONTH_CARD_CANNOT_USE" => Some(Self::RetMonthCardCannotUse),
            "RET_ITEM_REWARD_EXCEED_DISAPPEAR" => {
                Some(Self::RetItemRewardExceedDisappear)
            }
            "RET_ITEM_NEED_RECYCLE" => Some(Self::RetItemNeedRecycle),
            "RET_ITEM_COMPOSE_EXCEED_LIMIT" => Some(Self::RetItemComposeExceedLimit),
            "RET_ITEM_CAN_NOT_DESTROY" => Some(Self::RetItemCanNotDestroy),
            "RET_ITEM_ALREADY_MARK" => Some(Self::RetItemAlreadyMark),
            "RET_ITEM_MARK_EXCEED_LIMIT" => Some(Self::RetItemMarkExceedLimit),
            "RET_ITEM_NOT_MARK" => Some(Self::RetItemNotMark),
            "RET_ITEN_TURN_FOOD_NOT_SET" => Some(Self::RetItenTurnFoodNotSet),
            "RET_ITEM_TURN_FOOD_ALREADY_SET" => Some(Self::RetItemTurnFoodAlreadySet),
            "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodConsumeTypeError)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyOpen)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyClose)
            }
            "RET_HCOIN_EXCHANGE_TOO_MUCH" => Some(Self::RetHcoinExchangeTooMuch),
            "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodSceneTypeError)
            }
            "RET_EQUIPMENT_ALREADY_DRESSED" => Some(Self::RetEquipmentAlreadyDressed),
            "RET_EQUIPMENT_NOT_EXIST" => Some(Self::RetEquipmentNotExist),
            "RET_EQUIPMENT_REACH_LEVEL_LIMIT" => Some(Self::RetEquipmentReachLevelLimit),
            "RET_EQUIPMENT_CONSUME_SELF" => Some(Self::RetEquipmentConsumeSelf),
            "RET_EQUIPMENT_ALREADY_LOCKED" => Some(Self::RetEquipmentAlreadyLocked),
            "RET_EQUIPMENT_ALREADY_UNLOCKED" => Some(Self::RetEquipmentAlreadyUnlocked),
            "RET_EQUIPMENT_LOCKED" => Some(Self::RetEquipmentLocked),
            "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT" => {
                Some(Self::RetEquipmentSelectNumOverLimit)
            }
            "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID" => {
                Some(Self::RetEquipmentRankUpMustConsumeSameTid)
            }
            "RET_EQUIPMENT_PROMOTION_REACH_MAX" => {
                Some(Self::RetEquipmentPromotionReachMax)
            }
            "RET_EQUIPMENT_RANK_UP_REACH_MAX" => Some(Self::RetEquipmentRankUpReachMax),
            "RET_EQUIPMENT_LEVEL_REACH_MAX" => Some(Self::RetEquipmentLevelReachMax),
            "RET_EQUIPMENT_EXCEED_LIMIT" => Some(Self::RetEquipmentExceedLimit),
            "RET_RELIC_NOT_EXIST" => Some(Self::RetRelicNotExist),
            "RET_RELIC_REACH_LEVEL_LIMIT" => Some(Self::RetRelicReachLevelLimit),
            "RET_RELIC_CONSUME_SELF" => Some(Self::RetRelicConsumeSelf),
            "RET_RELIC_ALREADY_DRESSED" => Some(Self::RetRelicAlreadyDressed),
            "RET_RELIC_LOCKED" => Some(Self::RetRelicLocked),
            "RET_RELIC_ALREADY_LOCKED" => Some(Self::RetRelicAlreadyLocked),
            "RET_RELIC_ALREADY_UNLOCKED" => Some(Self::RetRelicAlreadyUnlocked),
            "RET_RELIC_LEVEL_IS_NOT_ZERO" => Some(Self::RetRelicLevelIsNotZero),
            "RET_UNIQUE_ID_REPEATED" => Some(Self::RetUniqueIdRepeated),
            "RET_EQUIPMENT_LEVEL_NOT_MEET" => Some(Self::RetEquipmentLevelNotMeet),
            "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST" => {
                Some(Self::RetEquipmentItemNotInCostList)
            }
            "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE" => {
                Some(Self::RetEquipmentLevelGreaterThanOne)
            }
            "RET_EQUIPMENT_ALREADY_RANKED" => Some(Self::RetEquipmentAlreadyRanked),
            "RET_RELIC_EXCEED_LIMIT" => Some(Self::RetRelicExceedLimit),
            "RET_RELIC_ALREADY_DISCARDED" => Some(Self::RetRelicAlreadyDiscarded),
            "RET_RELIC_ALREADY_UNDISCARDED" => Some(Self::RetRelicAlreadyUndiscarded),
            "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST" => {
                Some(Self::RetEquipmentBatchLockTooFast)
            }
            "RET_RELIC_FILTER_PLAN_SLOT_EMPTY" => Some(Self::RetRelicFilterPlanSlotEmpty),
            "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT" => {
                Some(Self::RetRelicFilterPlanNumExceedLimit)
            }
            "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR" => {
                Some(Self::RetRelicFilterPlanNameUtf8Error)
            }
            "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR" => {
                Some(Self::RetRelicFilterPlanNameFormatError)
            }
            "RET_RELIC_FILTER_PLAN_NO_CHANGE" => Some(Self::RetRelicFilterPlanNoChange),
            "RET_RELIC_REFORGE_NOT_CONFIRMED" => Some(Self::RetRelicReforgeNotConfirmed),
            "RET_LINEUP_INVALID_INDEX" => Some(Self::RetLineupInvalidIndex),
            "RET_LINEUP_INVALID_MEMBER_POS" => Some(Self::RetLineupInvalidMemberPos),
            "RET_LINEUP_SWAP_NOT_EXIST" => Some(Self::RetLineupSwapNotExist),
            "RET_LINEUP_AVATAR_ALREADY_IN" => Some(Self::RetLineupAvatarAlreadyIn),
            "RET_LINEUP_CREATE_AVATAR_ERROR" => Some(Self::RetLineupCreateAvatarError),
            "RET_LINEUP_AVATAR_INIT_ERROR" => Some(Self::RetLineupAvatarInitError),
            "RET_LINEUP_NOT_EXIST" => Some(Self::RetLineupNotExist),
            "RET_LINEUP_ONLY_ONE_MEMBER" => Some(Self::RetLineupOnlyOneMember),
            "RET_LINEUP_SAME_LEADER_SLOT" => Some(Self::RetLineupSameLeaderSlot),
            "RET_LINEUP_NO_LEADER_SELECT" => Some(Self::RetLineupNoLeaderSelect),
            "RET_LINEUP_SWAP_SAME_SLOT" => Some(Self::RetLineupSwapSameSlot),
            "RET_LINEUP_AVATAR_NOT_EXIST" => Some(Self::RetLineupAvatarNotExist),
            "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT" => {
                Some(Self::RetLineupTrialAvatarCanNotQuit)
            }
            "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH" => {
                Some(Self::RetLineupVirtualLineupPlaneNotMatch)
            }
            "RET_LINEUP_NOT_VALID_LEADER" => Some(Self::RetLineupNotValidLeader),
            "RET_LINEUP_SAME_INDEX" => Some(Self::RetLineupSameIndex),
            "RET_LINEUP_IS_EMPTY" => Some(Self::RetLineupIsEmpty),
            "RET_LINEUP_NAME_FORMAT_ERROR" => Some(Self::RetLineupNameFormatError),
            "RET_LINEUP_TYPE_NOT_MATCH" => Some(Self::RetLineupTypeNotMatch),
            "RET_LINEUP_REPLACE_ALL_FAILED" => Some(Self::RetLineupReplaceAllFailed),
            "RET_LINEUP_NOT_ALLOW_EDIT" => Some(Self::RetLineupNotAllowEdit),
            "RET_LINEUP_AVATAR_IS_ALIVE" => Some(Self::RetLineupAvatarIsAlive),
            "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER" => {
                Some(Self::RetLineupAssistHasOnlyMember)
            }
            "RET_LINEUP_ASSIST_CANNOT_SWITCH" => Some(Self::RetLineupAssistCannotSwitch),
            "RET_LINEUP_AVATAR_TYPE_INVALID" => Some(Self::RetLineupAvatarTypeInvalid),
            "RET_LINEUP_NAME_UTF8_ERROR" => Some(Self::RetLineupNameUtf8Error),
            "RET_LINEUP_LEADER_LOCK" => Some(Self::RetLineupLeaderLock),
            "RET_LINEUP_STORY_LINE_NOT_MATCH" => Some(Self::RetLineupStoryLineNotMatch),
            "RET_LINEUP_AVATAR_LOCK" => Some(Self::RetLineupAvatarLock),
            "RET_LINEUP_AVATAR_INVALID" => Some(Self::RetLineupAvatarInvalid),
            "RET_LINEUP_AVATAR_ALREADY_INIT" => Some(Self::RetLineupAvatarAlreadyInit),
            "RET_LINEUP_LIMITED" => Some(Self::RetLineupLimited),
            "RET_MAIL_NOT_EXIST" => Some(Self::RetMailNotExist),
            "RET_MAIL_RANGE_INVALID" => Some(Self::RetMailRangeInvalid),
            "RET_MAIL_MAIL_ID_INVALID" => Some(Self::RetMailMailIdInvalid),
            "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT" => Some(Self::RetMailNoMailTakeAttachment),
            "RET_MAIL_NO_MAIL_TO_DEL" => Some(Self::RetMailNoMailToDel),
            "RET_MAIL_TYPE_INVALID" => Some(Self::RetMailTypeInvalid),
            "RET_MAIL_PARA_INVALID" => Some(Self::RetMailParaInvalid),
            "RET_MAIL_ATTACHEMENT_INVALID" => Some(Self::RetMailAttachementInvalid),
            "RET_MAIL_TICKET_INVALID" => Some(Self::RetMailTicketInvalid),
            "RET_MAIL_TICKET_REPEATED" => Some(Self::RetMailTicketRepeated),
            "RET_STAGE_SETTLE_ERROR" => Some(Self::RetStageSettleError),
            "RET_STAGE_CONFIG_NOT_EXIST" => Some(Self::RetStageConfigNotExist),
            "RET_STAGE_NOT_FOUND" => Some(Self::RetStageNotFound),
            "RET_STAGE_COCOON_PROP_NOT_VALID" => Some(Self::RetStageCocoonPropNotValid),
            "RET_STAGE_COCOON_WAVE_NOT_VALID" => Some(Self::RetStageCocoonWaveNotValid),
            "RET_STAGE_PROP_ID_NOT_EQUAL" => Some(Self::RetStagePropIdNotEqual),
            "RET_STAGE_COCOON_WAVE_OVER" => Some(Self::RetStageCocoonWaveOver),
            "RET_STAGE_WEEK_COCOON_OVER_CNT" => Some(Self::RetStageWeekCocoonOverCnt),
            "RET_STAGE_COCOON_NOT_OPEN" => Some(Self::RetStageCocoonNotOpen),
            "RET_STAGE_TRIAL_NOT_OPEN" => Some(Self::RetStageTrialNotOpen),
            "RET_STAGE_FARM_NOT_OPEN" => Some(Self::RetStageFarmNotOpen),
            "RET_STAGE_FARM_TYPE_ERROR" => Some(Self::RetStageFarmTypeError),
            "RET_CHAPTER_LOCK" => Some(Self::RetChapterLock),
            "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH" => {
                Some(Self::RetChapterChallengeNumNotEnough)
            }
            "RET_CHAPTER_REWARD_ID_NOT_EXIST" => Some(Self::RetChapterRewardIdNotExist),
            "RET_CHAPTER_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetChapterRewardAlreadyTaken)
            }
            "RET_BATTLE_STAGE_NOT_MATCH" => Some(Self::RetBattleStageNotMatch),
            "RET_IN_BATTLE_NOW" => Some(Self::RetInBattleNow),
            "RET_BATTLE_CHEAT" => Some(Self::RetBattleCheat),
            "RET_BATTLE_FAIL" => Some(Self::RetBattleFail),
            "RET_BATTLE_NO_LINEUP" => Some(Self::RetBattleNoLineup),
            "RET_BATTLE_LINEUP_EMPTY" => Some(Self::RetBattleLineupEmpty),
            "RET_BATTLE_VERSION_NOT_MATCH" => Some(Self::RetBattleVersionNotMatch),
            "RET_BATTLE_QUIT_BY_SERVER" => Some(Self::RetBattleQuitByServer),
            "RET_IN_BATTLE_CHECK" => Some(Self::RetInBattleCheck),
            "RET_BATTLE_CHECK_NEED_RETRY" => Some(Self::RetBattleCheckNeedRetry),
            "RET_BATTLE_COST_TIME_CHECK_FAIL" => Some(Self::RetBattleCostTimeCheckFail),
            "RET_LACK_EXCHANGE_STAMINA_TIMES" => Some(Self::RetLackExchangeStaminaTimes),
            "RET_LACK_STAMINA" => Some(Self::RetLackStamina),
            "RET_STAMINA_FULL" => Some(Self::RetStaminaFull),
            "RET_AUTHKEY_SIGN_TYPE_ERROR" => Some(Self::RetAuthkeySignTypeError),
            "RET_AUTHKEY_SIGN_VER_ERROR" => Some(Self::RetAuthkeySignVerError),
            "RET_NICKNAME_FORMAT_ERROR" => Some(Self::RetNicknameFormatError),
            "RET_SENSITIVE_WORDS" => Some(Self::RetSensitiveWords),
            "RET_LEVEL_REWARD_HAS_TAKEN" => Some(Self::RetLevelRewardHasTaken),
            "RET_LEVEL_REWARD_LEVEL_ERROR" => Some(Self::RetLevelRewardLevelError),
            "RET_LANGUAGE_INVALID" => Some(Self::RetLanguageInvalid),
            "RET_NICKNAME_IN_CD" => Some(Self::RetNicknameInCd),
            "RET_GAMEPLAY_BIRTHDAY_INVALID" => Some(Self::RetGameplayBirthdayInvalid),
            "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET" => {
                Some(Self::RetGameplayBirthdayAlreadySet)
            }
            "RET_NICKNAME_UTF8_ERROR" => Some(Self::RetNicknameUtf8Error),
            "RET_NICKNAME_DIGIT_LIMIT_ERROR" => Some(Self::RetNicknameDigitLimitError),
            "RET_SENSITIVE_WORDS_PLATFORM_ERROR" => {
                Some(Self::RetSensitiveWordsPlatformError)
            }
            "RET_PLAYER_SETTING_TYPE_INVALID" => Some(Self::RetPlayerSettingTypeInvalid),
            "RET_MAZE_LACK_TICKET" => Some(Self::RetMazeLackTicket),
            "RET_MAZE_NOT_UNLOCK" => Some(Self::RetMazeNotUnlock),
            "RET_MAZE_NO_ABILITY" => Some(Self::RetMazeNoAbility),
            "RET_MAZE_NO_PLANE" => Some(Self::RetMazeNoPlane),
            "RET_MAZE_MAP_NOT_EXIST" => Some(Self::RetMazeMapNotExist),
            "RET_MAZE_MP_NOT_ENOUGH" => Some(Self::RetMazeMpNotEnough),
            "RET_SPRING_NOT_ENABLE" => Some(Self::RetSpringNotEnable),
            "RET_SPRING_TOO_FAR" => Some(Self::RetSpringTooFar),
            "RET_NOT_IN_MAZE" => Some(Self::RetNotInMaze),
            "RET_MAZE_TIME_OF_DAY_TYPE_ERROR" => Some(Self::RetMazeTimeOfDayTypeError),
            "RET_SCENE_TRANSFER_LOCKED_BY_TASK" => {
                Some(Self::RetSceneTransferLockedByTask)
            }
            "RET_PLOT_NOT_UNLOCK" => Some(Self::RetPlotNotUnlock),
            "RET_MISSION_NOT_EXIST" => Some(Self::RetMissionNotExist),
            "RET_MISSION_ALREADY_DONE" => Some(Self::RetMissionAlreadyDone),
            "RET_DAILY_TASK_NOT_FINISH" => Some(Self::RetDailyTaskNotFinish),
            "RET_DAILY_TASK_REWARD_HAS_TAKEN" => Some(Self::RetDailyTaskRewardHasTaken),
            "RET_MISSION_NOT_FINISH" => Some(Self::RetMissionNotFinish),
            "RET_MISSION_NOT_DOING" => Some(Self::RetMissionNotDoing),
            "RET_MISSION_FINISH_WAY_NOT_MATCH" => Some(Self::RetMissionFinishWayNotMatch),
            "RET_MISSION_SCENE_NOT_MATCH" => Some(Self::RetMissionSceneNotMatch),
            "RET_MISSION_CUSTOM_VALUE_NOT_VALID" => {
                Some(Self::RetMissionCustomValueNotValid)
            }
            "RET_MISSION_SUB_MISSION_NOT_MATCH" => {
                Some(Self::RetMissionSubMissionNotMatch)
            }
            "RET_ADVENTURE_MAP_NOT_EXIST" => Some(Self::RetAdventureMapNotExist),
            "RET_SCENE_ENTITY_NOT_EXIST" => Some(Self::RetSceneEntityNotExist),
            "RET_NOT_IN_SCENE" => Some(Self::RetNotInScene),
            "RET_SCENE_MONSTER_NOT_EXIST" => Some(Self::RetSceneMonsterNotExist),
            "RET_INTERACT_CONFIG_NOT_EXIST" => Some(Self::RetInteractConfigNotExist),
            "RET_UNSUPPORTED_PROP_STATE" => Some(Self::RetUnsupportedPropState),
            "RET_SCENE_ENTRY_ID_NOT_MATCH" => Some(Self::RetSceneEntryIdNotMatch),
            "RET_SCENE_ENTITY_MOVE_CHECK_FAILED" => {
                Some(Self::RetSceneEntityMoveCheckFailed)
            }
            "RET_ASSIST_MONSTER_COUNT_LIMIT" => Some(Self::RetAssistMonsterCountLimit),
            "RET_SCENE_USE_SKILL_FAIL" => Some(Self::RetSceneUseSkillFail),
            "RET_PROP_IS_HIDDEN" => Some(Self::RetPropIsHidden),
            "RET_LOADING_SUCC_ALREADY" => Some(Self::RetLoadingSuccAlready),
            "RET_SCENE_ENTITY_TYPE_INVALID" => Some(Self::RetSceneEntityTypeInvalid),
            "RET_INTERACT_TYPE_INVALID" => Some(Self::RetInteractTypeInvalid),
            "RET_INTERACT_NOT_IN_REGION" => Some(Self::RetInteractNotInRegion),
            "RET_INTERACT_SUB_TYPE_INVALID" => Some(Self::RetInteractSubTypeInvalid),
            "RET_NOT_LEADER_ENTITY" => Some(Self::RetNotLeaderEntity),
            "RET_MONSTER_IS_NOT_FARM_ELEMENT" => Some(Self::RetMonsterIsNotFarmElement),
            "RET_MONSTER_CONFIG_NOT_EXIST" => Some(Self::RetMonsterConfigNotExist),
            "RET_AVATAR_HP_ALREADY_FULL" => Some(Self::RetAvatarHpAlreadyFull),
            "RET_CUR_INTERACT_ENTITY_NOT_MATCH" => {
                Some(Self::RetCurInteractEntityNotMatch)
            }
            "RET_PLANE_TYPE_NOT_ALLOW" => Some(Self::RetPlaneTypeNotAllow),
            "RET_GROUP_NOT_EXIST" => Some(Self::RetGroupNotExist),
            "RET_GROUP_SAVE_DATA_IN_CD" => Some(Self::RetGroupSaveDataInCd),
            "RET_GROUP_SAVE_LENGH_REACH_MAX" => Some(Self::RetGroupSaveLenghReachMax),
            "RET_RECENT_ELEMENT_NOT_EXIST" => Some(Self::RetRecentElementNotExist),
            "RET_RECENT_ELEMENT_STAGE_NOT_MATCH" => {
                Some(Self::RetRecentElementStageNotMatch)
            }
            "RET_SCENE_POSITION_VERSION_NOT_MATCH" => {
                Some(Self::RetScenePositionVersionNotMatch)
            }
            "RET_GAMEPLAY_COUNTER_NOT_EXIST" => Some(Self::RetGameplayCounterNotExist),
            "RET_GAMEPLAY_COUNTER_NOT_ENOUGH" => Some(Self::RetGameplayCounterNotEnough),
            "RET_GROUP_STATE_NOT_MATCH" => Some(Self::RetGroupStateNotMatch),
            "RET_SCENE_ENTITY_POS_NOT_MATCH" => Some(Self::RetSceneEntityPosNotMatch),
            "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF" => {
                Some(Self::RetGroupStateCustomSaveDataOff)
            }
            "RET_SCENE_NOT_MATCH" => Some(Self::RetSceneNotMatch),
            "RET_PROP_TYPE_INVALID" => Some(Self::RetPropTypeInvalid),
            "RET_BUY_TIMES_LIMIT" => Some(Self::RetBuyTimesLimit),
            "RET_BUY_LIMIT_TYPE" => Some(Self::RetBuyLimitType),
            "RET_SHOP_NOT_OPEN" => Some(Self::RetShopNotOpen),
            "RET_GOODS_NOT_OPEN" => Some(Self::RetGoodsNotOpen),
            "RET_CITY_LEVEL_REWARD_TAKEN" => Some(Self::RetCityLevelRewardTaken),
            "RET_CITY_LEVEL_NOT_MEET" => Some(Self::RetCityLevelNotMeet),
            "RET_SINGLE_BUY_LIMIT" => Some(Self::RetSingleBuyLimit),
            "RET_TUTORIAL_NOT_UNLOCK" => Some(Self::RetTutorialNotUnlock),
            "RET_TUTORIAL_UNLOCK_ALREADY" => Some(Self::RetTutorialUnlockAlready),
            "RET_TUTORIAL_FINISH_ALREADY" => Some(Self::RetTutorialFinishAlready),
            "RET_TUTORIAL_PRE_NOT_UNLOCK" => Some(Self::RetTutorialPreNotUnlock),
            "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH" => {
                Some(Self::RetTutorialPlayerLevelNotMatch)
            }
            "RET_TUTORIAL_TUTORIAL_NOT_FOUND" => Some(Self::RetTutorialTutorialNotFound),
            "RET_CHALLENGE_NOT_EXIST" => Some(Self::RetChallengeNotExist),
            "RET_CHALLENGE_NOT_UNLOCK" => Some(Self::RetChallengeNotUnlock),
            "RET_CHALLENGE_ALREADY" => Some(Self::RetChallengeAlready),
            "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN" => {
                Some(Self::RetChallengeLineupEditForbidden)
            }
            "RET_CHALLENGE_LINEUP_EMPTY" => Some(Self::RetChallengeLineupEmpty),
            "RET_CHALLENGE_NOT_DOING" => Some(Self::RetChallengeNotDoing),
            "RET_CHALLENGE_NOT_FINISH" => Some(Self::RetChallengeNotFinish),
            "RET_CHALLENGE_TARGET_NOT_FINISH" => Some(Self::RetChallengeTargetNotFinish),
            "RET_CHALLENGE_TARGET_REWARD_TAKEN" => {
                Some(Self::RetChallengeTargetRewardTaken)
            }
            "RET_CHALLENGE_TIME_NOT_VALID" => Some(Self::RetChallengeTimeNotValid),
            "RET_CHALLENGE_STARS_COUNT_NOT_MEET" => {
                Some(Self::RetChallengeStarsCountNotMeet)
            }
            "RET_CHALLENGE_STARS_REWARD_TAKEN" => {
                Some(Self::RetChallengeStarsRewardTaken)
            }
            "RET_CHALLENGE_STARS_NOT_EXIST" => Some(Self::RetChallengeStarsNotExist),
            "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR" => {
                Some(Self::RetChallengeCurSceneNotEntryFloor)
            }
            "RET_CHALLENGE_NO_TEAM_ARCHIVE" => Some(Self::RetChallengeNoTeamArchive),
            "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID" => {
                Some(Self::RetChallengeLineupAvatarTypeInvalid)
            }
            "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetChallengeLineupRecommendInCd)
            }
            "RET_BASIC_TYPE_ALREADY" => Some(Self::RetBasicTypeAlready),
            "RET_NO_BASIC_TYPE" => Some(Self::RetNoBasicType),
            "RET_NOT_CHOOSE_BASIC_TYPE" => Some(Self::RetNotChooseBasicType),
            "RET_NOT_FUNC_CLOSE" => Some(Self::RetNotFuncClose),
            "RET_NOT_CHOOSE_GENDER" => Some(Self::RetNotChooseGender),
            "RET_NOT_REQ_UNLOCK_BASIC_TYPE" => Some(Self::RetNotReqUnlockBasicType),
            "RET_AVATAR_PATH_LOCKED" => Some(Self::RetAvatarPathLocked),
            "RET_ROGUE_STATUS_NOT_MATCH" => Some(Self::RetRogueStatusNotMatch),
            "RET_ROGUE_SELECT_BUFF_NOT_EXIST" => Some(Self::RetRogueSelectBuffNotExist),
            "RET_ROGUE_COIN_NOT_ENOUGH" => Some(Self::RetRogueCoinNotEnough),
            "RET_ROGUE_STAMINA_NOT_ENOUGH" => Some(Self::RetRogueStaminaNotEnough),
            "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueAppraisalCountNotEnough)
            }
            "RET_ROGUE_PROP_ALREADY_USED" => Some(Self::RetRoguePropAlreadyUsed),
            "RET_ROGUE_RECORD_ALREADY_SAVED" => Some(Self::RetRogueRecordAlreadySaved),
            "RET_ROGUE_ROLL_BUFF_MAX_COUNT" => Some(Self::RetRogueRollBuffMaxCount),
            "RET_ROGUE_PICK_AVATAR_INVALID" => Some(Self::RetRoguePickAvatarInvalid),
            "RET_ROGUE_QUEST_EXPIRE" => Some(Self::RetRogueQuestExpire),
            "RET_ROGUE_QUEST_REWARD_ALREADY" => Some(Self::RetRogueQuestRewardAlready),
            "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueReviveCountNotEnough)
            }
            "RET_ROGUE_AREA_INVALID" => Some(Self::RetRogueAreaInvalid),
            "RET_ROGUE_SCORE_REWARD_POOL_INVALID" => {
                Some(Self::RetRogueScoreRewardPoolInvalid)
            }
            "RET_ROGUE_SCORE_REWARD_ROW_INVALID" => {
                Some(Self::RetRogueScoreRewardRowInvalid)
            }
            "RET_ROGUE_AEON_LEVEL_NOT_MEET" => Some(Self::RetRogueAeonLevelNotMeet),
            "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueAeonLevelRewardAlreadyTaken)
            }
            "RET_ROGUE_AEON_CONFIG_NOT_EXIST" => Some(Self::RetRogueAeonConfigNotExist),
            "RET_ROGUE_TRIAL_AVATAR_INVALID" => Some(Self::RetRogueTrialAvatarInvalid),
            "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueHandbookRewardAlreadyTaken)
            }
            "RET_ROGUE_ROOM_TYPE_NOT_MATCH" => Some(Self::RetRogueRoomTypeNotMatch),
            "RET_ROGUE_SHOP_GOOD_NOT_FOUND" => Some(Self::RetRogueShopGoodNotFound),
            "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT" => {
                Some(Self::RetRogueShopGoodAlreadyBought)
            }
            "RET_ROGUE_SHOP_GOOD_ALREADY_OWN" => Some(Self::RetRogueShopGoodAlreadyOwn),
            "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST" => Some(Self::RetRogueShopMiracleNotExist),
            "RET_ROGUE_SHOP_NOT_EXIST" => Some(Self::RetRogueShopNotExist),
            "RET_ROGUE_SHOP_CANNOT_REFRESH" => Some(Self::RetRogueShopCannotRefresh),
            "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH" => {
                Some(Self::RetRogueSelectBuffCertainMismatch)
            }
            "RET_MISSION_EVENT_CONFIG_NOT_EXIST" => {
                Some(Self::RetMissionEventConfigNotExist)
            }
            "RET_MISSION_EVENT_NOT_CLIENT" => Some(Self::RetMissionEventNotClient),
            "RET_MISSION_EVENT_FINISHED" => Some(Self::RetMissionEventFinished),
            "RET_MISSION_EVENT_DOING" => Some(Self::RetMissionEventDoing),
            "RET_HAS_CHALLENGE_MISSION_EVENT" => Some(Self::RetHasChallengeMissionEvent),
            "RET_NOT_CHALLENGE_MISSION_EVENT" => Some(Self::RetNotChallengeMissionEvent),
            "RET_GACHA_ID_NOT_EXIST" => Some(Self::RetGachaIdNotExist),
            "RET_GACHA_NUM_INVALID" => Some(Self::RetGachaNumInvalid),
            "RET_GACHA_FIRST_GACHA_MUST_ONE" => Some(Self::RetGachaFirstGachaMustOne),
            "RET_GACHA_REQ_DUPLICATED" => Some(Self::RetGachaReqDuplicated),
            "RET_GACHA_NOT_IN_SCHEDULE" => Some(Self::RetGachaNotInSchedule),
            "RET_GACHA_NEWBIE_CLOSE" => Some(Self::RetGachaNewbieClose),
            "RET_GACHA_TODAY_LIMITED" => Some(Self::RetGachaTodayLimited),
            "RET_GACHA_NOT_SUPPORT" => Some(Self::RetGachaNotSupport),
            "RET_GACHA_CEILING_NOT_ENOUGH" => Some(Self::RetGachaCeilingNotEnough),
            "RET_GACHA_CEILING_CLOSE" => Some(Self::RetGachaCeilingClose),
            "RET_NOT_IN_RAID" => Some(Self::RetNotInRaid),
            "RET_RAID_DOING" => Some(Self::RetRaidDoing),
            "RET_NOT_PROP" => Some(Self::RetNotProp),
            "RET_RAID_ID_NOT_MATCH" => Some(Self::RetRaidIdNotMatch),
            "RET_RAID_RESTART_NOT_MATCH" => Some(Self::RetRaidRestartNotMatch),
            "RET_RAID_LIMIT" => Some(Self::RetRaidLimit),
            "RET_RAID_AVATAR_LIST_EMPTY" => Some(Self::RetRaidAvatarListEmpty),
            "RET_RAID_AVATAR_NOT_EXIST" => Some(Self::RetRaidAvatarNotExist),
            "RET_CHALLENGE_RAID_REWARD_ALREADY" => {
                Some(Self::RetChallengeRaidRewardAlready)
            }
            "RET_CHALLENGE_RAID_SCORE_NOT_REACH" => {
                Some(Self::RetChallengeRaidScoreNotReach)
            }
            "RET_CHALLENGE_RAID_NOT_OPEN" => Some(Self::RetChallengeRaidNotOpen),
            "RET_RAID_FINISHED" => Some(Self::RetRaidFinished),
            "RET_RAID_WORLD_LEVEL_NOT_LOCK" => Some(Self::RetRaidWorldLevelNotLock),
            "RET_RAID_CANNOT_USE_ASSIST" => Some(Self::RetRaidCannotUseAssist),
            "RET_RAID_AVATAR_NOT_MATCH" => Some(Self::RetRaidAvatarNotMatch),
            "RET_RAID_CAN_NOT_SAVE" => Some(Self::RetRaidCanNotSave),
            "RET_RAID_NO_SAVE" => Some(Self::RetRaidNoSave),
            "RET_ACTIVITY_RAID_NOT_OPEN" => Some(Self::RetActivityRaidNotOpen),
            "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST" => {
                Some(Self::RetRaidAvatarCaptainNotExist)
            }
            "RET_RAID_STORY_LINE_NOT_MATCH" => Some(Self::RetRaidStoryLineNotMatch),
            "RET_TALK_EVENT_ALREADY_TAKEN" => Some(Self::RetTalkEventAlreadyTaken),
            "RET_NPC_ALREADY_MEET" => Some(Self::RetNpcAlreadyMeet),
            "RET_NPC_NOT_IN_CONFIG" => Some(Self::RetNpcNotInConfig),
            "RET_DIALOGUE_GROUP_DISMATCH" => Some(Self::RetDialogueGroupDismatch),
            "RET_DIALOGUE_EVENT_INVALID" => Some(Self::RetDialogueEventInvalid),
            "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH" => {
                Some(Self::RetTalkEventTakeProtoNotMatch)
            }
            "RET_TALK_EVENT_NOT_VALID" => Some(Self::RetTalkEventNotValid),
            "RET_EXPEDITION_CONFIG_NOT_EXIST" => Some(Self::RetExpeditionConfigNotExist),
            "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetExpeditionRewardConfigNotExist)
            }
            "RET_EXPEDITION_NOT_UNLOCKED" => Some(Self::RetExpeditionNotUnlocked),
            "RET_EXPEDITION_ALREADY_ACCEPTED" => Some(Self::RetExpeditionAlreadyAccepted),
            "RET_EXPEDITION_REPEATED_AVATAR" => Some(Self::RetExpeditionRepeatedAvatar),
            "RET_AVATAR_ALREADY_DISPATCHED" => Some(Self::RetAvatarAlreadyDispatched),
            "RET_EXPEDITION_NOT_ACCEPTED" => Some(Self::RetExpeditionNotAccepted),
            "RET_EXPEDITION_NOT_FINISH" => Some(Self::RetExpeditionNotFinish),
            "RET_EXPEDITION_ALREADY_FINISH" => Some(Self::RetExpeditionAlreadyFinish),
            "RET_EXPEDITION_TEAM_COUNT_LIMIT" => Some(Self::RetExpeditionTeamCountLimit),
            "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH" => {
                Some(Self::RetExpeditionAvatarNumNotMatch)
            }
            "RET_EXPEDITION_NOT_OPEN" => Some(Self::RetExpeditionNotOpen),
            "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID" => {
                Some(Self::RetExpeditionFriendAvatarNotValid)
            }
            "RET_EXPEDITION_NOT_PUBLISHED" => Some(Self::RetExpeditionNotPublished),
            "RET_LOGIN_ACTIVITY_HAS_TAKEN" => Some(Self::RetLoginActivityHasTaken),
            "RET_LOGIN_ACTIVITY_DAYS_LACK" => Some(Self::RetLoginActivityDaysLack),
            "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE" => {
                Some(Self::RetTrialActivityRewardAlreadyTake)
            }
            "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH" => {
                Some(Self::RetTrialActivityStageNotFinish)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN" => {
                Some(Self::RetMaterialSubmitActivityHasTaken)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED" => {
                Some(Self::RetMaterialSubmitActivityMaterialNotSubmitted)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED" => {
                Some(Self::RetMaterialSubmitActivityMaterialAlreadySubmitted)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR" => {
                Some(Self::RetFantasticStoryActivityStoryError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityStoryNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityBattleNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleAvatarError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleBuffError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH" => {
                Some(Self::RetFantasticStoryActivityPreBattleScoreNotEnough)
            }
            "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY" => {
                Some(Self::RetTrialActivityAlreadyInTrialActivity)
            }
            "RET_COMMON_ACTIVITY_NOT_OPEN" => Some(Self::RetCommonActivityNotOpen),
            "RET_MESSAGE_CONFIG_NOT_EXIST" => Some(Self::RetMessageConfigNotExist),
            "RET_MESSAGE_SECTION_NOT_TAKE" => Some(Self::RetMessageSectionNotTake),
            "RET_MESSAGE_GROUP_NOT_TAKE" => Some(Self::RetMessageGroupNotTake),
            "RET_MESSAGE_SECTION_ID_NOT_MATCH" => Some(Self::RetMessageSectionIdNotMatch),
            "RET_MESSAGE_SECTION_CAN_NOT_FINISH" => {
                Some(Self::RetMessageSectionCanNotFinish)
            }
            "RET_MESSAGE_ITEM_CAN_NOT_FINISH" => Some(Self::RetMessageItemCanNotFinish),
            "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH" => {
                Some(Self::RetMessageItemRaidCanNotFinish)
            }
            "RET_FRIEND_ALREADY_IS_FRIEND" => Some(Self::RetFriendAlreadyIsFriend),
            "RET_FRIEND_IS_NOT_FRIEND" => Some(Self::RetFriendIsNotFriend),
            "RET_FRIEND_APPLY_EXPIRE" => Some(Self::RetFriendApplyExpire),
            "RET_FRIEND_IN_BLACKLIST" => Some(Self::RetFriendInBlacklist),
            "RET_FRIEND_NOT_IN_BLACKLIST" => Some(Self::RetFriendNotInBlacklist),
            "RET_FRIEND_NUMBER_LIMIT" => Some(Self::RetFriendNumberLimit),
            "RET_FRIEND_BLACKLIST_NUMBER_LIMIT" => {
                Some(Self::RetFriendBlacklistNumberLimit)
            }
            "RET_FRIEND_DAILY_APPLY_LIMIT" => Some(Self::RetFriendDailyApplyLimit),
            "RET_FRIEND_IN_HANDLE_LIMIT" => Some(Self::RetFriendInHandleLimit),
            "RET_FRIEND_APPLY_IN_CD" => Some(Self::RetFriendApplyInCd),
            "RET_FRIEND_REMARK_NAME_FORMAT_ERROR" => {
                Some(Self::RetFriendRemarkNameFormatError)
            }
            "RET_FRIEND_PLAYER_NOT_FOUND" => Some(Self::RetFriendPlayerNotFound),
            "RET_FRIEND_IN_TARGET_BLACKLIST" => Some(Self::RetFriendInTargetBlacklist),
            "RET_FRIEND_TARGET_NUMBER_LIMIT" => Some(Self::RetFriendTargetNumberLimit),
            "RET_ASSIST_QUERY_TOO_FAST" => Some(Self::RetAssistQueryTooFast),
            "RET_ASSIST_NOT_EXIST" => Some(Self::RetAssistNotExist),
            "RET_ASSIST_USED_ALREADY" => Some(Self::RetAssistUsedAlready),
            "RET_FRIEND_REPORT_REASON_FORMAT_ERROR" => {
                Some(Self::RetFriendReportReasonFormatError)
            }
            "RET_FRIEND_REPORT_SENSITIVE_WORDS" => {
                Some(Self::RetFriendReportSensitiveWords)
            }
            "RET_ASSIST_USED_TIMES_OVER" => Some(Self::RetAssistUsedTimesOver),
            "RET_ASSIST_QUIT_ALREADY" => Some(Self::RetAssistQuitAlready),
            "RET_ASSIST_AVATAR_IN_LINEUP" => Some(Self::RetAssistAvatarInLineup),
            "RET_ASSIST_NO_REWARD" => Some(Self::RetAssistNoReward),
            "RET_FRIEND_SEARCH_NUM_LIMIT" => Some(Self::RetFriendSearchNumLimit),
            "RET_FRIEND_SEARCH_IN_CD" => Some(Self::RetFriendSearchInCd),
            "RET_FRIEND_REMARK_NAME_UTF8_ERROR" => {
                Some(Self::RetFriendRemarkNameUtf8Error)
            }
            "RET_FRIEND_REPORT_REASON_UTF8_ERROR" => {
                Some(Self::RetFriendReportReasonUtf8Error)
            }
            "RET_ASSIST_SET_ALREADY" => Some(Self::RetAssistSetAlready),
            "RET_FRIEND_TARGET_FORBID_OTHER_APPLY" => {
                Some(Self::RetFriendTargetForbidOtherApply)
            }
            "RET_FRIEND_MARKED_CNT_MAX" => Some(Self::RetFriendMarkedCntMax),
            "RET_FRIEND_MARKED_ALREADY" => Some(Self::RetFriendMarkedAlready),
            "RET_FRIEND_NOT_MARKED" => Some(Self::RetFriendNotMarked),
            "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetFriendChallengeLineupRecommendInCd)
            }
            "RET_VIEW_PLAYER_CARD_IN_CD" => Some(Self::RetViewPlayerCardInCd),
            "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD" => {
                Some(Self::RetViewPlayerBattleRecordInCd)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST" => {
                Some(Self::RetPlayerBoardHeadIconNotExist)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_LOCKED" => {
                Some(Self::RetPlayerBoardHeadIconLocked)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED" => {
                Some(Self::RetPlayerBoardHeadIconAlreadyUnlocked)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardDisplayAvatarNotExist)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT" => {
                Some(Self::RetPlayerBoardDisplayAvatarExceedLimit)
            }
            "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR" => {
                Some(Self::RetPlayerBoardDisplayRepeatedAvatar)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS" => {
                Some(Self::RetPlayerBoardDisplayAvatarSamePos)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardDisplayAvatarLocked)
            }
            "RET_SIGNATURE_LENGTH_EXCEED_LIMIT" => {
                Some(Self::RetSignatureLengthExceedLimit)
            }
            "RET_SIGNATURE_SENSITIVE_WORDS" => Some(Self::RetSignatureSensitiveWords),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardAssistAvatarNotExist)
            }
            "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardAssistAvatarLocked)
            }
            "RET_SIGNATURE_UTF8_ERROR" => Some(Self::RetSignatureUtf8Error),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR" => {
                Some(Self::RetPlayerBoardAssistAvatarCntError)
            }
            "RET_BATTLE_PASS_TIER_NOT_VALID" => Some(Self::RetBattlePassTierNotValid),
            "RET_BATTLE_PASS_LEVEL_NOT_MEET" => Some(Self::RetBattlePassLevelNotMeet),
            "RET_BATTLE_PASS_REWARD_TAKE_ALREADY" => {
                Some(Self::RetBattlePassRewardTakeAlready)
            }
            "RET_BATTLE_PASS_NOT_PREMIUM" => Some(Self::RetBattlePassNotPremium),
            "RET_BATTLE_PASS_NOT_DOING" => Some(Self::RetBattlePassNotDoing),
            "RET_BATTLE_PASS_LEVEL_INVALID" => Some(Self::RetBattlePassLevelInvalid),
            "RET_BATTLE_PASS_NOT_UNLOCK" => Some(Self::RetBattlePassNotUnlock),
            "RET_BATTLE_PASS_NO_REWARD" => Some(Self::RetBattlePassNoReward),
            "RET_BATTLE_PASS_QUEST_NOT_VALID" => Some(Self::RetBattlePassQuestNotValid),
            "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL" => {
                Some(Self::RetBattlePassNotChooseOptional)
            }
            "RET_BATTLE_PASS_NOT_TAKE_REWARD" => Some(Self::RetBattlePassNotTakeReward),
            "RET_BATTLE_PASS_OPTIONAL_NOT_VALID" => {
                Some(Self::RetBattlePassOptionalNotValid)
            }
            "RET_BATTLE_PASS_BUY_ALREADY" => Some(Self::RetBattlePassBuyAlready),
            "RET_BATTLE_PASS_NEAR_END" => Some(Self::RetBattlePassNearEnd),
            "RET_MUSIC_LOCKED" => Some(Self::RetMusicLocked),
            "RET_MUSIC_NOT_EXIST" => Some(Self::RetMusicNotExist),
            "RET_MUSIC_UNLOCK_FAILED" => Some(Self::RetMusicUnlockFailed),
            "RET_PUNK_LORD_LACK_SUMMON_TIMES" => Some(Self::RetPunkLordLackSummonTimes),
            "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT" => {
                Some(Self::RetPunkLordAttackingMonsterLimit)
            }
            "RET_PUNK_LORD_MONSTER_NOT_EXIST" => Some(Self::RetPunkLordMonsterNotExist),
            "RET_PUNK_LORD_MONSTER_ALREADY_SHARED" => {
                Some(Self::RetPunkLordMonsterAlreadyShared)
            }
            "RET_PUNK_LORD_MONSTER_EXPIRED" => Some(Self::RetPunkLordMonsterExpired),
            "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT" => {
                Some(Self::RetPunkLordSelfMonsterAttackLimit)
            }
            "RET_PUNK_LORD_LACK_SUPPORT_TIMES" => Some(Self::RetPunkLordLackSupportTimes),
            "RET_PUNK_LORD_MONSTER_ALREADY_KILLED" => {
                Some(Self::RetPunkLordMonsterAlreadyKilled)
            }
            "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT" => {
                Some(Self::RetPunkLordMonsterAttackerLimit)
            }
            "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID" => {
                Some(Self::RetPunkLordWorldLevleNotValid)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST" => {
                Some(Self::RetPunkLordRewardLevleNotExist)
            }
            "RET_PUNK_LORD_POINT_NOT_MEET" => Some(Self::RetPunkLordPointNotMeet),
            "RET_PUNK_LORD_IN_ATTACKING" => Some(Self::RetPunkLordInAttacking),
            "RET_PUNK_LORD_OPERATION_IN_CD" => Some(Self::RetPunkLordOperationInCd),
            "RET_PUNK_LORD_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPunkLordRewardAlreadyTaken)
            }
            "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetPunkLordOverBonusRewardLimit)
            }
            "RET_PUNK_LORD_NOT_IN_SCHEDULE" => Some(Self::RetPunkLordNotInSchedule),
            "RET_PUNK_LORD_MONSTER_NOT_ATTACKED" => {
                Some(Self::RetPunkLordMonsterNotAttacked)
            }
            "RET_PUNK_LORD_MONSTER_NOT_KILLED" => Some(Self::RetPunkLordMonsterNotKilled),
            "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordMonsterKilledScoreAlreadyTake)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordRewardLevleAlreadyTake)
            }
            "RET_DAILY_ACTIVE_LEVEL_INVALID" => Some(Self::RetDailyActiveLevelInvalid),
            "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetDailyActiveLevelRewardAlreadyTaken)
            }
            "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH" => {
                Some(Self::RetDailyActiveLevelApNotEnough)
            }
            "RET_DAILY_MEET_PAM" => Some(Self::RetDailyMeetPam),
            "RET_REPLAY_ID_NOT_MATCH" => Some(Self::RetReplayIdNotMatch),
            "RET_REPLAY_REQ_NOT_VALID" => Some(Self::RetReplayReqNotValid),
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED" => {
                Some(Self::RetFightActivityDifficultyLevelNotPassed)
            }
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE" => {
                Some(Self::RetFightActivityDifficultyLevelRewardAlreadyTake)
            }
            "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetFightActivityStageNotOpen)
            }
            "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetFightActivityLevelNotUnlock)
            }
            "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorVisitorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorBehaviorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED" => {
                Some(Self::RetTrainVisitorBehaviorFinished)
            }
            "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN" => {
                Some(Self::RetTrainVisitorAllBehaviorRewardTaken)
            }
            "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH" => {
                Some(Self::RetTrainVisitorGetOnMissionNotFinish)
            }
            "RET_TRAIN_VISITOR_NOT_GET_OFF_OR_BE_TRAIN_MEMBER" => {
                Some(Self::RetTrainVisitorNotGetOffOrBeTrainMember)
            }
            "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE" => Some(Self::RetTextJoinUnknowIsOverride),
            "RET_TEXT_JOIN_ID_NOT_EXIST" => Some(Self::RetTextJoinIdNotExist),
            "RET_TEXT_JOIN_CAN_NOT_OVERRIDE" => Some(Self::RetTextJoinCanNotOverride),
            "RET_TEXT_JOIN_ITEM_ID_ERROR" => Some(Self::RetTextJoinItemIdError),
            "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetTextJoinSensitiveCheckError)
            }
            "RET_TEXT_JOIN_MUST_OVERRIDE" => Some(Self::RetTextJoinMustOverride),
            "RET_TEXT_JOIN_TEXT_EMPTY" => Some(Self::RetTextJoinTextEmpty),
            "RET_TEXT_JOIN_TEXT_FORMAT_ERROR" => Some(Self::RetTextJoinTextFormatError),
            "RET_TEXT_JOIN_TEXT_UTF8_ERROR" => Some(Self::RetTextJoinTextUtf8Error),
            "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT" => {
                Some(Self::RetTextJoinBatchReqIdRepeat)
            }
            "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ" => {
                Some(Self::RetTextJoinTypeNotSupportBatchReq)
            }
            "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST" => {
                Some(Self::RetTextJoinAvatarIdNotExist)
            }
            "RET_TEXT_JOIN_UNKNOW_TYPE" => Some(Self::RetTextJoinUnknowType),
            "RET_PAM_MISSION_MISSION_ID_ERROR" => Some(Self::RetPamMissionMissionIdError),
            "RET_PAM_MISSION_MISSION_EXPIRE" => Some(Self::RetPamMissionMissionExpire),
            "RET_CHAT_TYPE_NOT_EXIST" => Some(Self::RetChatTypeNotExist),
            "RET_MSG_TYPE_NOT_EXIST" => Some(Self::RetMsgTypeNotExist),
            "RET_CHAT_NO_TARGET_UID" => Some(Self::RetChatNoTargetUid),
            "RET_CHAT_MSG_EMPTY" => Some(Self::RetChatMsgEmpty),
            "RET_CHAT_MSG_EXCEED_LIMIT" => Some(Self::RetChatMsgExceedLimit),
            "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetChatMsgSensitiveCheckError)
            }
            "RET_CHAT_MSG_UTF8_ERROR" => Some(Self::RetChatMsgUtf8Error),
            "RET_CHAT_FORBID_SWITCH_OPEN" => Some(Self::RetChatForbidSwitchOpen),
            "RET_CHAT_FORBID" => Some(Self::RetChatForbid),
            "RET_CHAT_MSG_INCLUDE_SPECIAL_STR" => Some(Self::RetChatMsgIncludeSpecialStr),
            "RET_CHAT_MSG_EMOJI_NOT_EXIST" => Some(Self::RetChatMsgEmojiNotExist),
            "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH" => {
                Some(Self::RetChatMsgEmojiGenderNotMatch)
            }
            "RET_CHAT_MSG_EMOJI_NOT_MARKED" => Some(Self::RetChatMsgEmojiNotMarked),
            "RET_CHAT_MSG_EMOJI_ALREADY_MARKED" => {
                Some(Self::RetChatMsgEmojiAlreadyMarked)
            }
            "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT" => {
                Some(Self::RetChatMsgEmojiMarkedMaxLimit)
            }
            "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN" => {
                Some(Self::RetBoxingClubChallengeNotOpen)
            }
            "RET_MUSEUM_NOT_OPEN" => Some(Self::RetMuseumNotOpen),
            "RET_MUSEUM_TURN_CNT_NOT_MATCH" => Some(Self::RetMuseumTurnCntNotMatch),
            "RET_MUSEUM_PHASE_NOT_REACH" => Some(Self::RetMuseumPhaseNotReach),
            "RET_MUSEUM_UNKNOW_STUFF" => Some(Self::RetMuseumUnknowStuff),
            "RET_MUSEUM_UNKNOW_AREA" => Some(Self::RetMuseumUnknowArea),
            "RET_MUSEUM_UNKNOW_POS" => Some(Self::RetMuseumUnknowPos),
            "RET_MUSEUM_STUFF_ALREADY_IN_AREA" => Some(Self::RetMuseumStuffAlreadyInArea),
            "RET_MUSEUM_STUFF_NOT_IN_AREA" => Some(Self::RetMuseumStuffNotInArea),
            "RET_MUSEUM_GET_NPC_REPEAT" => Some(Self::RetMuseumGetNpcRepeat),
            "RET_MUSEUM_GET_NPC_UNLOCK" => Some(Self::RetMuseumGetNpcUnlock),
            "RET_MUSEUM_GET_NPC_NOT_ENOUGH" => Some(Self::RetMuseumGetNpcNotEnough),
            "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR" => {
                Some(Self::RetMuseumChangeStuffAreaError)
            }
            "RET_MUSEUM_NOT_INIT" => Some(Self::RetMuseumNotInit),
            "RET_MUSEUM_EVENT_ERROR" => Some(Self::RetMuseumEventError),
            "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID" => {
                Some(Self::RetMuseumUnknowChooseEventId)
            }
            "RET_MUSEUM_EVENT_ORDER_NOT_MATCH" => Some(Self::RetMuseumEventOrderNotMatch),
            "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventPhaseNotUnlock)
            }
            "RET_MUSEUM_EVENT_MISSION_NOT_FOUND" => {
                Some(Self::RetMuseumEventMissionNotFound)
            }
            "RET_MUSEUM_AREA_LEVEL_UP_ALREADY" => Some(Self::RetMuseumAreaLevelUpAlready),
            "RET_MUSEUM_STUFF_ALREADY_USED" => Some(Self::RetMuseumStuffAlreadyUsed),
            "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventRoundNotUnlock)
            }
            "RET_MUSEUM_STUFF_IN_AREA" => Some(Self::RetMuseumStuffInArea),
            "RET_MUSEUM_STUFF_DISPATCH" => Some(Self::RetMuseumStuffDispatch),
            "RET_MUSEUM_IS_END" => Some(Self::RetMuseumIsEnd),
            "RET_MUSEUM_STUFF_LEAVING" => Some(Self::RetMuseumStuffLeaving),
            "RET_MUSEUM_EVENT_MISSION_NOT_FINISH" => {
                Some(Self::RetMuseumEventMissionNotFinish)
            }
            "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST" => {
                Some(Self::RetMuseumCollectRewardNotExist)
            }
            "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMuseumCollectRewardAlreadyTaken)
            }
            "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT" => {
                Some(Self::RetMuseumAcceptMissionMaxLimit)
            }
            "RET_ROGUE_CHALLENGE_NOT_OPEN" => Some(Self::RetRogueChallengeNotOpen),
            "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT" => {
                Some(Self::RetRogueChallengeAssisRefreshLimit)
            }
            "RET_ALLEY_NOT_INIT" => Some(Self::RetAlleyNotInit),
            "RET_ALLEY_NOT_OPEN" => Some(Self::RetAlleyNotOpen),
            "RET_ALLEY_MAP_NOT_EXIST" => Some(Self::RetAlleyMapNotExist),
            "RET_ALLEY_EMPTY_POS_LIST" => Some(Self::RetAlleyEmptyPosList),
            "RET_ALLEY_LINE_POS_INVALID" => Some(Self::RetAlleyLinePosInvalid),
            "RET_ALLEY_SHOP_NOT_UNLOCK" => Some(Self::RetAlleyShopNotUnlock),
            "RET_ALLEY_DEPOT_FULL" => Some(Self::RetAlleyDepotFull),
            "RET_ALLEY_SHOP_NOT_INCLUDE" => Some(Self::RetAlleyShopNotInclude),
            "RET_ALLEY_EVENT_NOT_UNLOCK" => Some(Self::RetAlleyEventNotUnlock),
            "RET_ALLEY_EVENT_NOT_REFRESH" => Some(Self::RetAlleyEventNotRefresh),
            "RET_ALLEY_EVENT_STATE_DOING" => Some(Self::RetAlleyEventStateDoing),
            "RET_ALLEY_EVENT_STATE_FINISH" => Some(Self::RetAlleyEventStateFinish),
            "RET_ALLEY_EVENT_ERROR" => Some(Self::RetAlleyEventError),
            "RET_ALLEY_REWARD_LEVEL_ERROR" => Some(Self::RetAlleyRewardLevelError),
            "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH" => {
                Some(Self::RetAlleyRewardPrestigeNotEnough)
            }
            "RET_ALLEY_SHIP_EMPTY" => Some(Self::RetAlleyShipEmpty),
            "RET_ALLEY_SHIP_ID_DISMATCH" => Some(Self::RetAlleyShipIdDismatch),
            "RET_ALLEY_SHIP_NOT_EXIST" => Some(Self::RetAlleyShipNotExist),
            "RET_ALLEY_SHIP_NOT_UNLOCK" => Some(Self::RetAlleyShipNotUnlock),
            "RET_ALLEY_GOODS_NOT_EXIST" => Some(Self::RetAlleyGoodsNotExist),
            "RET_ALLEY_GOODS_NOT_UNLOCK" => Some(Self::RetAlleyGoodsNotUnlock),
            "RET_ALLEY_PROFIT_NOT_POSITIVE" => Some(Self::RetAlleyProfitNotPositive),
            "RET_ALLEY_SPECIAL_ORDER_DISMATCH" => {
                Some(Self::RetAlleySpecialOrderDismatch)
            }
            "RET_ALLEY_ORDER_GOODS_OVER_LIMIT" => Some(Self::RetAlleyOrderGoodsOverLimit),
            "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET" => {
                Some(Self::RetAlleySpecialOrderConditionNotMeet)
            }
            "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT" => Some(Self::RetAlleyDepotSizeOverLimit),
            "RET_ALLEY_GOODS_NOT_ENOUGH" => Some(Self::RetAlleyGoodsNotEnough),
            "RET_ALLEY_ORDER_INDEX_INVALID" => Some(Self::RetAlleyOrderIndexInvalid),
            "RET_ALLEY_REWARD_ALREADY_TAKE" => Some(Self::RetAlleyRewardAlreadyTake),
            "RET_ALLEY_REWARD_NOT_EXIST" => Some(Self::RetAlleyRewardNotExist),
            "RET_ALLEY_MAIN_MISSION_NOT_DOING" => Some(Self::RetAlleyMainMissionNotDoing),
            "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH" => {
                Some(Self::RetAlleyCriticalEventNotFinish)
            }
            "RET_ALLEY_SHOP_GOODS_NOT_VALID" => Some(Self::RetAlleyShopGoodsNotValid),
            "RET_ALLEY_SLASH_NOT_OPEN" => Some(Self::RetAlleySlashNotOpen),
            "RET_ALLEY_PLACING_ANCHOR_INVALID" => {
                Some(Self::RetAlleyPlacingAnchorInvalid)
            }
            "RET_ALLEY_PLACING_GOODS_INDEX_INVALID" => {
                Some(Self::RetAlleyPlacingGoodsIndexInvalid)
            }
            "RET_ALLEY_SAVE_MAP_TOO_QUICK" => Some(Self::RetAlleySaveMapTooQuick),
            "RET_ALLEY_MAP_NOT_LINK" => Some(Self::RetAlleyMapNotLink),
            "RET_ALLEY_FUNDS_NOT_LOWER_BASE" => Some(Self::RetAlleyFundsNotLowerBase),
            "RET_ALLEY_EVENT_NOT_FINISH" => Some(Self::RetAlleyEventNotFinish),
            "RET_ALLEY_NORMAL_ORDER_NOT_MEET" => Some(Self::RetAlleyNormalOrderNotMeet),
            "RET_PLAYER_RETURN_NOT_OPEN" => Some(Self::RetPlayerReturnNotOpen),
            "RET_PLAYER_RETURN_IS_SIGNED" => Some(Self::RetPlayerReturnIsSigned),
            "RET_PLAYER_RETURN_POINT_NOT_ENOUGH" => {
                Some(Self::RetPlayerReturnPointNotEnough)
            }
            "RET_PLAYER_RETURN_CONDITION_INVALID" => {
                Some(Self::RetPlayerReturnConditionInvalid)
            }
            "RET_PLAYER_RETURN_HAS_SIGNED" => Some(Self::RetPlayerReturnHasSigned),
            "RET_PLAYER_RETURN_REWARD_TAKEN" => Some(Self::RetPlayerReturnRewardTaken),
            "RET_AETHER_DIVIDE_NO_LINEUP" => Some(Self::RetAetherDivideNoLineup),
            "RET_AETHER_DIVIDE_LINEUP_INVALID" => {
                Some(Self::RetAetherDivideLineupInvalid)
            }
            "RET_CHAT_BUBBLE_ID_ERROR" => Some(Self::RetChatBubbleIdError),
            "RET_CHAT_BUBBLE_ID_NOT_UNLOCK" => Some(Self::RetChatBubbleIdNotUnlock),
            "RET_PHONE_THEME_ID_ERROR" => Some(Self::RetPhoneThemeIdError),
            "RET_PHONE_THEME_ID_NOT_UNLOCK" => Some(Self::RetPhoneThemeIdNotUnlock),
            "RET_CHAT_BUBBLE_SELECT_IS_CURRENT" => {
                Some(Self::RetChatBubbleSelectIsCurrent)
            }
            "RET_PHONE_THEME_SELECT_IS_CURRENT" => {
                Some(Self::RetPhoneThemeSelectIsCurrent)
            }
            "RET_CHESS_ROGUE_CONFIG_NOT_FOUND" => Some(Self::RetChessRogueConfigNotFound),
            "RET_CHESS_ROGUE_CONFIG_INVALID" => Some(Self::RetChessRogueConfigInvalid),
            "RET_CHESS_ROGUE_NO_VALID_ROOM" => Some(Self::RetChessRogueNoValidRoom),
            "RET_CHESS_ROGUE_NO_CELL_INFO" => Some(Self::RetChessRogueNoCellInfo),
            "RET_CHESS_ROGUE_CELL_NOT_FINISH" => Some(Self::RetChessRogueCellNotFinish),
            "RET_CHESS_ROGUE_CELL_IS_LOCKED" => Some(Self::RetChessRogueCellIsLocked),
            "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH" => {
                Some(Self::RetChessRogueScheduleNotMatch)
            }
            "RET_CHESS_ROGUE_STATUS_FAIL" => Some(Self::RetChessRogueStatusFail),
            "RET_CHESS_ROGUE_AREA_NOT_EXIST" => Some(Self::RetChessRogueAreaNotExist),
            "RET_CHESS_ROGUE_LINEUP_FAIL" => Some(Self::RetChessRogueLineupFail),
            "RET_CHESS_ROGUE_AEON_FAIL" => Some(Self::RetChessRogueAeonFail),
            "RET_CHESS_ROGUE_ENTER_CELL_FAIL" => Some(Self::RetChessRogueEnterCellFail),
            "RET_CHESS_ROGUE_ROLL_DICE_FAIL" => Some(Self::RetChessRogueRollDiceFail),
            "RET_CHESS_ROGUE_DICE_STATUS_FAIL" => Some(Self::RetChessRogueDiceStatusFail),
            "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL" => {
                Some(Self::RetChessRogueDiceCntNotFull)
            }
            "RET_CHESS_ROGUE_UNLOCK" => Some(Self::RetChessRogueUnlock),
            "RET_CHESS_ROGUE_PICK_AVATAR_FAIL" => Some(Self::RetChessRoguePickAvatarFail),
            "RET_CHESS_ROGUE_AVATAR_INVALID" => Some(Self::RetChessRogueAvatarInvalid),
            "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT" => {
                Some(Self::RetChessRogueCellCanNotSelect)
            }
            "RET_CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::RetChessRogueDiceConfirmed),
            "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH" => {
                Some(Self::RetChessRogueNousDiceNotMatch)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL" => {
                Some(Self::RetChessRogueNousDiceRarityFail)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE" => {
                Some(Self::RetChessRogueNousDiceSurfaceDuplicate)
            }
            "RET_CHESS_ROGUE_NOT_IN_ROGUE" => Some(Self::RetChessRogueNotInRogue),
            "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT" => {
                Some(Self::RetChessRogueNousDiceBranchLimit)
            }
            "RET_HELIOBUS_NOT_OPEN" => Some(Self::RetHeliobusNotOpen),
            "RET_HELIOBUS_SNS_POST_NOT_UNLOCK" => Some(Self::RetHeliobusSnsPostNotUnlock),
            "RET_HELIOBUS_SNS_ALREADY_READ" => Some(Self::RetHeliobusSnsAlreadyRead),
            "RET_HELIOBUS_SNS_ALREADY_LIKED" => Some(Self::RetHeliobusSnsAlreadyLiked),
            "RET_HELIOBUS_SNS_ALREADY_COMMENTED" => {
                Some(Self::RetHeliobusSnsAlreadyCommented)
            }
            "RET_HELIOBUS_SNS_IN_MISSION" => Some(Self::RetHeliobusSnsInMission),
            "RET_HELIOBUS_SNS_ALREADY_POSTED" => Some(Self::RetHeliobusSnsAlreadyPosted),
            "RET_HELIOBUS_SNS_NOT_DOING_MISSION" => {
                Some(Self::RetHeliobusSnsNotDoingMission)
            }
            "RET_HELIOBUS_REWARD_LEVEL_MAX" => Some(Self::RetHeliobusRewardLevelMax),
            "RET_HELIOBUS_INCOME_NOT_ENOUGH" => Some(Self::RetHeliobusIncomeNotEnough),
            "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK" => {
                Some(Self::RetHeliobusSnsCommentNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK" => {
                Some(Self::RetHeliobusChallengeNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_ID_ERROR" => Some(Self::RetHeliobusChallengeIdError),
            "RET_HELIOBUS_SKILL_NOT_UNLOCK" => Some(Self::RetHeliobusSkillNotUnlock),
            "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL" => {
                Some(Self::RetHeliobusAcceptPostMissionFail)
            }
            "RET_HELIOBUS_SKILL_NOT_SELECTED" => Some(Self::RetHeliobusSkillNotSelected),
            "RET_HELIOBUS_PLANE_TYPE_INVALID" => Some(Self::RetHeliobusPlaneTypeInvalid),
            "RET_REDDOT_PARAM_INVALID" => Some(Self::RetReddotParamInvalid),
            "RET_REDDOT_ACTIVITY_NOT_OPEN" => Some(Self::RetReddotActivityNotOpen),
            "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR" => {
                Some(Self::RetRogueEndlessActivityConfigError)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetRogueEndlessActivityNotOpen)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetRogueEndlessActivityOverBonusRewardLimit)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET" => {
                Some(Self::RetRogueEndlessActivityScoreNotMeet)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetRogueEndlessActivityRewardLevleAlreadyTake)
            }
            "RET_HEART_DIAL_SCRIPT_NOT_FOUND" => Some(Self::RetHeartDialScriptNotFound),
            "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME" => {
                Some(Self::RetHeartDialScriptEmotionTheSame)
            }
            "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL" => {
                Some(Self::RetHeartDialScriptStepNotNormal)
            }
            "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptConditionNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemNumNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemIdNotMatch)
            }
            "RET_HEART_DIAL_DIALOGUE_NOT_FOUND" => {
                Some(Self::RetHeartDialDialogueNotFound)
            }
            "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED" => {
                Some(Self::RetHeartDialDialogueAlreadyPerformed)
            }
            "RET_HEART_DIAL_NPC_NOT_FOUND" => Some(Self::RetHeartDialNpcNotFound),
            "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND" => {
                Some(Self::RetHeartDialTraceConfigNotFound)
            }
            "RET_HEART_DIAL_FLOOR_TRACE_EXIST" => Some(Self::RetHeartDialFloorTraceExist),
            "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH" => {
                Some(Self::RetHeartDialTraceFloorNotMatch)
            }
            "RET_TRAVEL_BROCHURE_CONFIG_ERROR" => {
                Some(Self::RetTravelBrochureConfigError)
            }
            "RET_TRAVEL_BROCHURE_PARAM_INVALID" => {
                Some(Self::RetTravelBrochureParamInvalid)
            }
            "RET_TRAVEL_BROCHURE_LOCKED" => Some(Self::RetTravelBrochureLocked),
            "RET_TRAVEL_BROCHURE_CANNOT_OPERATE" => {
                Some(Self::RetTravelBrochureCannotOperate)
            }
            "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH" => {
                Some(Self::RetTravelBrochureWorldIdNotMatch)
            }
            "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK" => {
                Some(Self::RetTravelBrochureHasNoWorldBook)
            }
            "RET_TRAVEL_BROCHURE_PAGE_FULL" => Some(Self::RetTravelBrochurePageFull),
            "RET_MAP_ROTATION_NOT_IN_REGION" => Some(Self::RetMapRotationNotInRegion),
            "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterAlreadyDeployed)
            }
            "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH" => {
                Some(Self::RetMapRotationEnergyNotEnough)
            }
            "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE" => {
                Some(Self::RetMapRotationEntityNotOnCurPose)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterNotDeployed)
            }
            "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH" => {
                Some(Self::RetMapRotationPoseRotaterMismatch)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE" => {
                Some(Self::RetMapRotationRotaterNotRemovable)
            }
            "RET_MAP_ROTATION_ROTATER_DISPOSABLE" => {
                Some(Self::RetMapRotationRotaterDisposable)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID" => {
                Some(Self::RetSpaceZooActivityCatParamInvalid)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatItemNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL" => {
                Some(Self::RetSpaceZooActivityCatBagFull)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE" => {
                Some(Self::RetSpaceZooActivityCatNotToMutate)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR" => {
                Some(Self::RetSpaceZooActivityCatStateError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED" => {
                Some(Self::RetSpaceZooActivityCatCatteryLocked)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW" => {
                Some(Self::RetSpaceZooActivityCatOutNow)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatConfigNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatFeatureNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR" => {
                Some(Self::RetSpaceZooActivityCatAddCatError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatMoneyNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH" => {
                Some(Self::RetSpaceZooActivityCatCondNotMatch)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS" => {
                Some(Self::RetStrongChallengeActivityStageCfgMiss)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetStrongChallengeActivityStageNotOpen)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR" => {
                Some(Self::RetStrongChallengeActivityBuffError)
            }
            "RET_ROLL_SHOP_NOT_FOUND" => Some(Self::RetRollShopNotFound),
            "RET_ROLL_SHOP_GROUP_EMPTY" => Some(Self::RetRollShopGroupEmpty),
            "RET_ROLL_SHOP_EMPTY" => Some(Self::RetRollShopEmpty),
            "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetRollShopGachaReqDuplicated)
            }
            "RET_ROLL_SHOP_RANDOM_ERROR" => Some(Self::RetRollShopRandomError),
            "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND" => {
                Some(Self::RetRollShopGroupTypeNotFound)
            }
            "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY" => {
                Some(Self::RetRollShopHasStoredRewardAlready)
            }
            "RET_ROLL_SHOP_NO_STORED_REWARD" => Some(Self::RetRollShopNoStoredReward),
            "RET_ROLL_SHOP_NOT_IN_VALID_SCENE" => Some(Self::RetRollShopNotInValidScene),
            "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE" => {
                Some(Self::RetRollShopInvalidRollShopType)
            }
            "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH" => {
                Some(Self::RetActivityRaidCollectionPrevNotFinish)
            }
            "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE" => {
                Some(Self::RetActivityRaidCollectionGroupEnterNextUnavailable)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_LAST" => {
                Some(Self::RetActivityRaidCollectionIsLast)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT" => {
                Some(Self::RetActivityRaidCollectionIsNotNext)
            }
            "RET_OFFERING_NOT_UNLOCK" => Some(Self::RetOfferingNotUnlock),
            "RET_OFFERING_LEVEL_NOT_UNLOCK" => Some(Self::RetOfferingLevelNotUnlock),
            "RET_OFFERING_REACH_MAX_LEVEL" => Some(Self::RetOfferingReachMaxLevel),
            "RET_OFFERING_ITEM_NOT_ENOUGH" => Some(Self::RetOfferingItemNotEnough),
            "RET_OFFERING_LONGTAIL_NOT_OPEN" => Some(Self::RetOfferingLongtailNotOpen),
            "RET_OFFERING_REWARD_CONDITION" => Some(Self::RetOfferingRewardCondition),
            "RET_DRINK_MAKER_CHAT_INVALID" => Some(Self::RetDrinkMakerChatInvalid),
            "RET_DRINK_MAKER_PARAM_INVALID" => Some(Self::RetDrinkMakerParamInvalid),
            "RET_DRINK_MAKER_PARAM_NOT_UNLOCK" => Some(Self::RetDrinkMakerParamNotUnlock),
            "RET_DRINK_MAKER_CONFIG_NOT_FOUND" => Some(Self::RetDrinkMakerConfigNotFound),
            "RET_DRINK_MAKER_NOT_LAST_CHAT" => Some(Self::RetDrinkMakerNotLastChat),
            "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN" => {
                Some(Self::RetDrinkMakerDayAndFreePhaseNotOpen)
            }
            "RET_MONOPOLY_NOT_OPEN" => Some(Self::RetMonopolyNotOpen),
            "RET_MONOPOLY_CONFIG_ERROR" => Some(Self::RetMonopolyConfigError),
            "RET_MONOPOLY_DICE_NOT_ENOUGH" => Some(Self::RetMonopolyDiceNotEnough),
            "RET_MONOPOLY_CUR_CELL_NOT_FINISH" => Some(Self::RetMonopolyCurCellNotFinish),
            "RET_MONOPOLY_COIN_NOT_ENOUGH" => Some(Self::RetMonopolyCoinNotEnough),
            "RET_MONOPOLY_CELL_WAIT_PENDING" => Some(Self::RetMonopolyCellWaitPending),
            "RET_MONOPOLY_CELL_STATE_ERROR" => Some(Self::RetMonopolyCellStateError),
            "RET_MONOPOLY_CELL_CONTENT_ERROR" => Some(Self::RetMonopolyCellContentError),
            "RET_MONOPOLY_ITEM_NOT_ENOUGH" => Some(Self::RetMonopolyItemNotEnough),
            "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP" => {
                Some(Self::RetMonopolyCellContentCannotGiveup)
            }
            "RET_MONOPOLY_ASSET_LEVEL_INVALID" => {
                Some(Self::RetMonopolyAssetLevelInvalid)
            }
            "RET_MONOPOLY_TURN_NOT_FINISH" => Some(Self::RetMonopolyTurnNotFinish),
            "RET_MONOPOLY_GUIDE_NOT_FINISH" => Some(Self::RetMonopolyGuideNotFinish),
            "RET_MONOPOLY_RAFFLE_REWARD_REISSUED" => {
                Some(Self::RetMonopolyRaffleRewardReissued)
            }
            "RET_MONOPOLY_NO_GAME_ACTIVE" => Some(Self::RetMonopolyNoGameActive),
            "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE" => {
                Some(Self::RetMonopolyGameRatioNotIncreasable)
            }
            "RET_MONOPOLY_GAME_RATIO_MAX" => Some(Self::RetMonopolyGameRatioMax),
            "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID" => {
                Some(Self::RetMonopolyGameTargetRatioInvalid)
            }
            "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID" => {
                Some(Self::RetMonopolyGameBingoFlipPosInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE" => {
                Some(Self::RetMonopolyGameGuessAlreadyChoose)
            }
            "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID" => {
                Some(Self::RetMonopolyGameGuessChooseInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT" => {
                Some(Self::RetMonopolyGameGuessInformationAlreadyBought)
            }
            "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK" => {
                Some(Self::RetMonopolyGameRaiseRatioNotUnlock)
            }
            "RET_MONOPOLY_FRIEND_NOT_SYNCED" => Some(Self::RetMonopolyFriendNotSynced),
            "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD" => {
                Some(Self::RetMonopolyGetFriendRankingListInCd)
            }
            "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND" => {
                Some(Self::RetMonopolyLikeTargetNotFriend)
            }
            "RET_MONOPOLY_DAILY_ALREADY_LIKED" => {
                Some(Self::RetMonopolyDailyAlreadyLiked)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH" => {
                Some(Self::RetMonopolySocialEventStatusNotMatch)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST" => {
                Some(Self::RetMonopolySocialEventServerCacheNotExist)
            }
            "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH" => {
                Some(Self::RetMonopolyActivityIdNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST" => {
                Some(Self::RetMonopolyRafflePoolNotExist)
            }
            "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH" => {
                Some(Self::RetMonopolyRafflePoolTimeNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolPhaseNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolShowTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND" => {
                Some(Self::RetMonopolyRaffleTicketNotFound)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRaffleTicketTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyRaffleTicketRewardAlreadyTaken)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME" => {
                Some(Self::RetMonopolyRafflePoolNotInRaffleTime)
            }
            "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyMbtiReportRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_GAMING" => Some(Self::RetEvolveBuildLevelGaming),
            "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM" => {
                Some(Self::RetEveolveBuildLevelBanRandom)
            }
            "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetEvolveBuildFirstRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_UNFINISH" => Some(Self::RetEvolveBuildLevelUnfinish),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMaxLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMinLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET" => {
                Some(Self::RetEvolveBuildShopAbilityNotGet)
            }
            "RET_EVOLVE_BUILD_LEVEL_LOCK" => Some(Self::RetEvolveBuildLevelLock),
            "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH" => Some(Self::RetEvolveBuildExpNotEnough),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR" => {
                Some(Self::RetEvolveBuildShopAbilityLevelError)
            }
            "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetEvolveBuildActivityNotOpen)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY" => {
                Some(Self::RetEvolveBuildShopAbilityEmpty)
            }
            "RET_EVOLVE_BUILD_LEVEL_NOT_START" => Some(Self::RetEvolveBuildLevelNotStart),
            "RET_EVOLVE_BUILD_SHOP_LOCK" => Some(Self::RetEvolveBuildShopLock),
            "RET_EVOLVE_BUILD_REWARD_LOCK" => Some(Self::RetEvolveBuildRewardLock),
            "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX" => {
                Some(Self::RetEvolveBuildRewardLevelMax)
            }
            "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN" => {
                Some(Self::RetEvolveBuildRewardAlreadyAllTaken)
            }
            "RET_CLOCK_PARK_CONFIG_ERROR" => Some(Self::RetClockParkConfigError),
            "RET_CLOCK_PARK_EFFECT_ERROR" => Some(Self::RetClockParkEffectError),
            "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkScriptAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET" => {
                Some(Self::RetClockParkScriptUnlockConditionNotMeet)
            }
            "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkTalentAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_LOCKED" => Some(Self::RetClockParkScriptLocked),
            "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT" => {
                Some(Self::RetClockParkHasOngoingScript)
            }
            "RET_CLOCK_PARK_NO_ONGOING_SCRIPT" => Some(Self::RetClockParkNoOngoingScript),
            "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR" => {
                Some(Self::RetClockParkDicePlacementError)
            }
            "RET_CLOCK_PARK_MISMATCH_STATUS" => Some(Self::RetClockParkMismatchStatus),
            "RET_CLOCK_PARK_NO_BUFF" => Some(Self::RetClockParkNoBuff),
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetClockParkSlotMachineGachaReqDuplicated)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH" => {
                Some(Self::RetClockParkSlotMachineCostNotEnough)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT" => {
                Some(Self::RetClockParkSlotMachineGachaCntExceedLimit)
            }
            "RET_CLOCK_PARK_NOT_OPEN" => Some(Self::RetClockParkNotOpen),
            "RET_TOURN_ROGUE_STATUS_MISMATCH" => Some(Self::RetTournRogueStatusMismatch),
            "RET_MAGIC_ROGUE_STATUS_MISMATCH" => Some(Self::RetMagicRogueStatusMismatch),
            "RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER" => {
                Some(Self::RetAutoMountMagicUnitNoMatchedMagicScepter)
            }
            "RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL" => {
                Some(Self::RetMagicUnitWorkbenchReforgeGenFail)
            }
            "RET_MATCH_ALREADY_IN_MATCH" => Some(Self::RetMatchAlreadyInMatch),
            "RET_MATCH_NOT_IN_MATCH" => Some(Self::RetMatchNotInMatch),
            "RET_MATCH_PLAY_NOT_OPEN" => Some(Self::RetMatchPlayNotOpen),
            "RET_CROSS_STATE_ERROR" => Some(Self::RetCrossStateError),
            "RET_MATCH_VERSION_NOT_EQUAL" => Some(Self::RetMatchVersionNotEqual),
            "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM" => {
                Some(Self::RetMatchPlayerNotInLobbyRoom)
            }
            "RET_LOBBY_STATE_NOT_MATCH" => Some(Self::RetLobbyStateNotMatch),
            "RET_LOBBY_ROOM_NOT_EXIST" => Some(Self::RetLobbyRoomNotExist),
            "RET_LOBBY_ROOM_PALYER_FULL" => Some(Self::RetLobbyRoomPalyerFull),
            "RET_LOBBY_ROOM_PALYER_NOT_READY" => Some(Self::RetLobbyRoomPalyerNotReady),
            "RET_LOBBY_ROOM_PALYER_FIGHTING" => Some(Self::RetLobbyRoomPalyerFighting),
            "RET_FIGHT_ROOM_NOT_EXIST" => Some(Self::RetFightRoomNotExist),
            "RET_FIGHT_MATCH3_PLAYER_STATE_ERR" => {
                Some(Self::RetFightMatch3PlayerStateErr)
            }
            "RET_FIGHT_MATCH3_ROOM_STATE_ERR" => Some(Self::RetFightMatch3RoomStateErr),
            "RET_CROSS_STATE_TIME_OUT" => Some(Self::RetCrossStateTimeOut),
            "RET_SWORD_TRAINING_NO_ACTIVE_GAME" => {
                Some(Self::RetSwordTrainingNoActiveGame)
            }
            "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH" => {
                Some(Self::RetSwordTrainingNoPendingActionMatch)
            }
            "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID" => {
                Some(Self::RetSwordTrainingPartnerAbilityInvalid)
            }
            "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED" => {
                Some(Self::RetSwordTrainingSkillAlreadyLearned)
            }
            "RET_SWORD_TRAINING_CONDITION_NOT_MEET" => {
                Some(Self::RetSwordTrainingConditionNotMeet)
            }
            "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED" => {
                Some(Self::RetSwordTrainingParentSkillNotLearned)
            }
            "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK" => {
                Some(Self::RetSwordTrainingSkillTypeNotUnlock)
            }
            "RET_SWORD_TRAINING_GAME_ALREADY_EXIST" => {
                Some(Self::RetSwordTrainingGameAlreadyExist)
            }
            "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingHintNotMatch)
            }
            "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStorylineConfigNotFound)
            }
            "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStoryConfigNotFound)
            }
            "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH" => {
                Some(Self::RetSwordTrainingUnlockNotFinish)
            }
            "RET_SWORD_TRAINING_OPTION_MISMATCH" => {
                Some(Self::RetSwordTrainingOptionMismatch)
            }
            "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED" => {
                Some(Self::RetSwordTrainingRestoreWithoutExamFailed)
            }
            "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE" => {
                Some(Self::RetSwordTrainingNoRestoreGameAvailable)
            }
            "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingStoryNotMatch)
            }
            "RET_SWORD_TRAINING_ENDING_NOT_FINISH" => {
                Some(Self::RetSwordTrainingEndingNotFinish)
            }
            "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN" => {
                Some(Self::RetSwordTrainingEndingRewardTaken)
            }
            "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE" => {
                Some(Self::RetSwordTrainingCombatRankNotChange)
            }
            "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE" => {
                Some(Self::RetSwordTrainingDirectBattleDisable)
            }
            "RET_FIGHT_FEST_PHASE_NOT_MATCH" => Some(Self::RetFightFestPhaseNotMatch),
            "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH" => {
                Some(Self::RetFightFestScoreRaceAlreadyFinish)
            }
            "RET_FIGHT_FEST_CHALLENGE_LOCKED" => Some(Self::RetFightFestChallengeLocked),
            "RET_FIGHT_FEST_COACH_SKILL_LOCKED" => {
                Some(Self::RetFightFestCoachSkillLocked)
            }
            "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED" => {
                Some(Self::RetFightFestCoachSkillEquipTypeExisted)
            }
            "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND" => {
                Some(Self::RetFightFestScoreRaceMissionDoind)
            }
            "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP" => {
                Some(Self::RetFightFestCoachSkillNoEquip)
            }
            "RET_PET_NOT_EXIST" => Some(Self::RetPetNotExist),
            "RET_PET_ALREADY_SUMMONED" => Some(Self::RetPetAlreadySummoned),
            "RET_PET_NOT_SUMMONED" => Some(Self::RetPetNotSummoned),
            "RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT" => {
                Some(Self::RetMusicRhythmLevelTimeTooShort)
            }
            "RET_MUSIC_RHYTHM_NOT_IN_LEVEL" => Some(Self::RetMusicRhythmNotInLevel),
            "RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS" => {
                Some(Self::RetMusicRhythmPreDifficultyNotPass)
            }
            "RET_MUSIC_RHYTHM_SONG_LIMITED" => Some(Self::RetMusicRhythmSongLimited),
            "RET_MUSIC_RHYTHM_SONG_LOCKED" => Some(Self::RetMusicRhythmSongLocked),
            "RET_MUSIC_RHYTHM_TRACK_LOCKED" => Some(Self::RetMusicRhythmTrackLocked),
            "RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetMusicRhythmLevelNotUnlock)
            }
            "RET_MUSIC_RHYTHM_SONG_SFX_LOCKED" => Some(Self::RetMusicRhythmSongSfxLocked),
            "RET_TRAIN_PARTY_COIN_NOT_ENOUGH" => Some(Self::RetTrainPartyCoinNotEnough),
            "RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH" => {
                Some(Self::RetTrainPartyDiyTagNotMatch)
            }
            "RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH" => {
                Some(Self::RetTrainPartyUseCardMobilityNotEnough)
            }
            "RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH" => {
                Some(Self::RetTrainPartyAreaUnlockCoinNotEnough)
            }
            "RET_TAROT_BOOK_ENERGY_NOT_ENOUGH" => Some(Self::RetTarotBookEnergyNotEnough),
            "RET_TAROT_BOOK_PACK_NOT_AVAILABLE" => {
                Some(Self::RetTarotBookPackNotAvailable)
            }
            "RET_TAROT_BOOK_STORY_ALREADY_UNLOCK" => {
                Some(Self::RetTarotBookStoryAlreadyUnlock)
            }
            "RET_TAROT_BOOK_CARD_NOT_ENOUGH" => Some(Self::RetTarotBookCardNotEnough),
            "RET_TAROT_BOOK_CLUE_NOT_ENOUGH" => Some(Self::RetTarotBookClueNotEnough),
            "RET_TAROT_BOOK_UNLOCK_STORY_CARD_NOT_SAME" => {
                Some(Self::RetTarotBookUnlockStoryCardNotSame)
            }
            "RET_TAROT_BOOK_STORY_NOT_UNLOCK" => Some(Self::RetTarotBookStoryNotUnlock),
            "RET_TAROT_BOOK_STORY_ALREADY_FINISH" => {
                Some(Self::RetTarotBookStoryAlreadyFinish)
            }
            "RET_TAROT_BOOK_INTERACTION_ALREADY_FINISH" => {
                Some(Self::RetTarotBookInteractionAlreadyFinish)
            }
            _ => None,
        }
    }
}
/// OOCDHGFCJBK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdActivityType {
    None = 0,
    CmdTakeLoginActivityRewardScRsp = 2627,
    CmdGetMaterialSubmitActivityDataCsReq = 2675,
    CmdTakeLoginActivityRewardCsReq = 2684,
    CmdTakeMaterialSubmitActivityRewardCsReq = 2653,
    CmdTakeTrialActivityRewardScRsp = 2699,
    CmdTakeTrialActivityRewardCsReq = 2672,
    CmdSubmitMaterialSubmitActivityMaterialScRsp = 2607,
    CmdTakeMaterialSubmitActivityRewardScRsp = 2690,
    CmdStartTrialActivityCsReq = 2603,
    CmdEnterTrialActivityStageCsReq = 2645,
    CmdEnterTrialActivityStageScRsp = 2664,
    CmdLeaveTrialActivityCsReq = 2661,
    CmdGetLoginActivityCsReq = 2636,
    CmdSubmitMaterialSubmitActivityMaterialCsReq = 2626,
    CmdCurTrialActivityScNotify = 2633,
    CmdStartTrialActivityScRsp = 2640,
    CmdLeaveTrialActivityScRsp = 2630,
    CmdGetActivityScheduleConfigCsReq = 2667,
    CmdGetTrialActivityDataScRsp = 2692,
    CmdGetTrialActivityDataCsReq = 2694,
    CmdGetLoginActivityScRsp = 2695,
    CmdGetActivityScheduleConfigScRsp = 2628,
    CmdTrialActivityDataChangeScNotify = 2660,
    CmdGetMaterialSubmitActivityDataScRsp = 2619,
}
impl CmdActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdActivityTypeNone",
            Self::CmdTakeLoginActivityRewardScRsp => "CmdTakeLoginActivityRewardScRsp",
            Self::CmdGetMaterialSubmitActivityDataCsReq => {
                "CmdGetMaterialSubmitActivityDataCsReq"
            }
            Self::CmdTakeLoginActivityRewardCsReq => "CmdTakeLoginActivityRewardCsReq",
            Self::CmdTakeMaterialSubmitActivityRewardCsReq => {
                "CmdTakeMaterialSubmitActivityRewardCsReq"
            }
            Self::CmdTakeTrialActivityRewardScRsp => "CmdTakeTrialActivityRewardScRsp",
            Self::CmdTakeTrialActivityRewardCsReq => "CmdTakeTrialActivityRewardCsReq",
            Self::CmdSubmitMaterialSubmitActivityMaterialScRsp => {
                "CmdSubmitMaterialSubmitActivityMaterialScRsp"
            }
            Self::CmdTakeMaterialSubmitActivityRewardScRsp => {
                "CmdTakeMaterialSubmitActivityRewardScRsp"
            }
            Self::CmdStartTrialActivityCsReq => "CmdStartTrialActivityCsReq",
            Self::CmdEnterTrialActivityStageCsReq => "CmdEnterTrialActivityStageCsReq",
            Self::CmdEnterTrialActivityStageScRsp => "CmdEnterTrialActivityStageScRsp",
            Self::CmdLeaveTrialActivityCsReq => "CmdLeaveTrialActivityCsReq",
            Self::CmdGetLoginActivityCsReq => "CmdGetLoginActivityCsReq",
            Self::CmdSubmitMaterialSubmitActivityMaterialCsReq => {
                "CmdSubmitMaterialSubmitActivityMaterialCsReq"
            }
            Self::CmdCurTrialActivityScNotify => "CmdCurTrialActivityScNotify",
            Self::CmdStartTrialActivityScRsp => "CmdStartTrialActivityScRsp",
            Self::CmdLeaveTrialActivityScRsp => "CmdLeaveTrialActivityScRsp",
            Self::CmdGetActivityScheduleConfigCsReq => {
                "CmdGetActivityScheduleConfigCsReq"
            }
            Self::CmdGetTrialActivityDataScRsp => "CmdGetTrialActivityDataScRsp",
            Self::CmdGetTrialActivityDataCsReq => "CmdGetTrialActivityDataCsReq",
            Self::CmdGetLoginActivityScRsp => "CmdGetLoginActivityScRsp",
            Self::CmdGetActivityScheduleConfigScRsp => {
                "CmdGetActivityScheduleConfigScRsp"
            }
            Self::CmdTrialActivityDataChangeScNotify => {
                "CmdTrialActivityDataChangeScNotify"
            }
            Self::CmdGetMaterialSubmitActivityDataScRsp => {
                "CmdGetMaterialSubmitActivityDataScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdActivityTypeNone" => Some(Self::None),
            "CmdTakeLoginActivityRewardScRsp" => {
                Some(Self::CmdTakeLoginActivityRewardScRsp)
            }
            "CmdGetMaterialSubmitActivityDataCsReq" => {
                Some(Self::CmdGetMaterialSubmitActivityDataCsReq)
            }
            "CmdTakeLoginActivityRewardCsReq" => {
                Some(Self::CmdTakeLoginActivityRewardCsReq)
            }
            "CmdTakeMaterialSubmitActivityRewardCsReq" => {
                Some(Self::CmdTakeMaterialSubmitActivityRewardCsReq)
            }
            "CmdTakeTrialActivityRewardScRsp" => {
                Some(Self::CmdTakeTrialActivityRewardScRsp)
            }
            "CmdTakeTrialActivityRewardCsReq" => {
                Some(Self::CmdTakeTrialActivityRewardCsReq)
            }
            "CmdSubmitMaterialSubmitActivityMaterialScRsp" => {
                Some(Self::CmdSubmitMaterialSubmitActivityMaterialScRsp)
            }
            "CmdTakeMaterialSubmitActivityRewardScRsp" => {
                Some(Self::CmdTakeMaterialSubmitActivityRewardScRsp)
            }
            "CmdStartTrialActivityCsReq" => Some(Self::CmdStartTrialActivityCsReq),
            "CmdEnterTrialActivityStageCsReq" => {
                Some(Self::CmdEnterTrialActivityStageCsReq)
            }
            "CmdEnterTrialActivityStageScRsp" => {
                Some(Self::CmdEnterTrialActivityStageScRsp)
            }
            "CmdLeaveTrialActivityCsReq" => Some(Self::CmdLeaveTrialActivityCsReq),
            "CmdGetLoginActivityCsReq" => Some(Self::CmdGetLoginActivityCsReq),
            "CmdSubmitMaterialSubmitActivityMaterialCsReq" => {
                Some(Self::CmdSubmitMaterialSubmitActivityMaterialCsReq)
            }
            "CmdCurTrialActivityScNotify" => Some(Self::CmdCurTrialActivityScNotify),
            "CmdStartTrialActivityScRsp" => Some(Self::CmdStartTrialActivityScRsp),
            "CmdLeaveTrialActivityScRsp" => Some(Self::CmdLeaveTrialActivityScRsp),
            "CmdGetActivityScheduleConfigCsReq" => {
                Some(Self::CmdGetActivityScheduleConfigCsReq)
            }
            "CmdGetTrialActivityDataScRsp" => Some(Self::CmdGetTrialActivityDataScRsp),
            "CmdGetTrialActivityDataCsReq" => Some(Self::CmdGetTrialActivityDataCsReq),
            "CmdGetLoginActivityScRsp" => Some(Self::CmdGetLoginActivityScRsp),
            "CmdGetActivityScheduleConfigScRsp" => {
                Some(Self::CmdGetActivityScheduleConfigScRsp)
            }
            "CmdTrialActivityDataChangeScNotify" => {
                Some(Self::CmdTrialActivityDataChangeScNotify)
            }
            "CmdGetMaterialSubmitActivityDataScRsp" => {
                Some(Self::CmdGetMaterialSubmitActivityDataScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrialActivityStatus {
    None = 0,
    Finish = 1,
}
impl TrialActivityStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "TRIAL_ACTIVITY_STATUS_NONE",
            Self::Finish => "TRIAL_ACTIVITY_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRIAL_ACTIVITY_STATUS_NONE" => Some(Self::None),
            "TRIAL_ACTIVITY_STATUS_FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
/// OICBCLEPNHC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAdventureType {
    None = 0,
    CmdEnterAdventureCsReq = 1336,
    CmdGetFarmStageGachaInfoCsReq = 1384,
    CmdQuickStartCocoonStageScRsp = 1328,
    CmdQuickStartFarmElementCsReq = 1352,
    CmdQuickStartCocoonStageCsReq = 1367,
    CmdGetFarmStageGachaInfoScRsp = 1327,
    CmdQuickStartFarmElementScRsp = 1374,
    CmdEnterAdventureScRsp = 1395,
}
impl CmdAdventureType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAdventureTypeNone",
            Self::CmdEnterAdventureCsReq => "CmdEnterAdventureCsReq",
            Self::CmdGetFarmStageGachaInfoCsReq => "CmdGetFarmStageGachaInfoCsReq",
            Self::CmdQuickStartCocoonStageScRsp => "CmdQuickStartCocoonStageScRsp",
            Self::CmdQuickStartFarmElementCsReq => "CmdQuickStartFarmElementCsReq",
            Self::CmdQuickStartCocoonStageCsReq => "CmdQuickStartCocoonStageCsReq",
            Self::CmdGetFarmStageGachaInfoScRsp => "CmdGetFarmStageGachaInfoScRsp",
            Self::CmdQuickStartFarmElementScRsp => "CmdQuickStartFarmElementScRsp",
            Self::CmdEnterAdventureScRsp => "CmdEnterAdventureScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAdventureTypeNone" => Some(Self::None),
            "CmdEnterAdventureCsReq" => Some(Self::CmdEnterAdventureCsReq),
            "CmdGetFarmStageGachaInfoCsReq" => Some(Self::CmdGetFarmStageGachaInfoCsReq),
            "CmdQuickStartCocoonStageScRsp" => Some(Self::CmdQuickStartCocoonStageScRsp),
            "CmdQuickStartFarmElementCsReq" => Some(Self::CmdQuickStartFarmElementCsReq),
            "CmdQuickStartCocoonStageCsReq" => Some(Self::CmdQuickStartCocoonStageCsReq),
            "CmdGetFarmStageGachaInfoScRsp" => Some(Self::CmdGetFarmStageGachaInfoScRsp),
            "CmdQuickStartFarmElementScRsp" => Some(Self::CmdQuickStartFarmElementScRsp),
            "CmdEnterAdventureScRsp" => Some(Self::CmdEnterAdventureScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAetherDivideType {
    None = 0,
    CmdAetherDivideSpiritExpUpCsReq = 4822,
    CmdSwitchAetherDivideLineUpSlotCsReq = 4811,
    CmdGetAetherDivideInfoCsReq = 4845,
    CmdGetAetherDivideChallengeInfoCsReq = 4805,
    CmdEnterAetherDivideSceneScRsp = 4850,
    CmdSetAetherDivideLineUpCsReq = 4810,
    CmdAetherDivideSpiritExpUpScRsp = 4814,
    CmdAetherDivideSkillItemScNotify = 4825,
    CmdLeaveAetherDivideSceneScRsp = 4823,
    CmdAetherDivideRefreshEndlessCsReq = 4834,
    CmdAetherDivideSpiritInfoScNotify = 4842,
    CmdEquipAetherDividePassiveSkillCsReq = 4813,
    CmdStartAetherDivideChallengeBattleCsReq = 4809,
    CmdStartAetherDivideStageBattleCsReq = 4835,
    CmdGetAetherDivideChallengeInfoScRsp = 4824,
    CmdAetherDivideRefreshEndlessScNotify = 4837,
    CmdClearAetherDividePassiveSkillCsReq = 4804,
    CmdStartAetherDivideSceneBattleScRsp = 4849,
    CmdAetherDivideTainerInfoScNotify = 4829,
    CmdAetherDivideFinishChallengeScNotify = 4820,
    CmdClearAetherDividePassiveSkillScRsp = 4840,
    CmdAetherDivideRefreshEndlessScRsp = 4819,
    CmdAetherDivideTakeChallengeRewardCsReq = 4838,
    CmdAetherDivideLineupScNotify = 4844,
    CmdStartAetherDivideSceneBattleCsReq = 4815,
    CmdStartAetherDivideChallengeBattleScRsp = 4843,
    CmdLeaveAetherDivideSceneCsReq = 4830,
    CmdSetAetherDivideLineUpScRsp = 4848,
    CmdAetherDivideTakeChallengeRewardScRsp = 4833,
    CmdSwitchAetherDivideLineUpSlotScRsp = 4806,
    CmdGetAetherDivideInfoScRsp = 4828,
    CmdEquipAetherDividePassiveSkillScRsp = 4817,
    CmdStartAetherDivideStageBattleScRsp = 4818,
    CmdEnterAetherDivideSceneCsReq = 4812,
}
impl CmdAetherDivideType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAetherDivideTypeNone",
            Self::CmdAetherDivideSpiritExpUpCsReq => "CmdAetherDivideSpiritExpUpCsReq",
            Self::CmdSwitchAetherDivideLineUpSlotCsReq => {
                "CmdSwitchAetherDivideLineUpSlotCsReq"
            }
            Self::CmdGetAetherDivideInfoCsReq => "CmdGetAetherDivideInfoCsReq",
            Self::CmdGetAetherDivideChallengeInfoCsReq => {
                "CmdGetAetherDivideChallengeInfoCsReq"
            }
            Self::CmdEnterAetherDivideSceneScRsp => "CmdEnterAetherDivideSceneScRsp",
            Self::CmdSetAetherDivideLineUpCsReq => "CmdSetAetherDivideLineUpCsReq",
            Self::CmdAetherDivideSpiritExpUpScRsp => "CmdAetherDivideSpiritExpUpScRsp",
            Self::CmdAetherDivideSkillItemScNotify => "CmdAetherDivideSkillItemScNotify",
            Self::CmdLeaveAetherDivideSceneScRsp => "CmdLeaveAetherDivideSceneScRsp",
            Self::CmdAetherDivideRefreshEndlessCsReq => {
                "CmdAetherDivideRefreshEndlessCsReq"
            }
            Self::CmdAetherDivideSpiritInfoScNotify => {
                "CmdAetherDivideSpiritInfoScNotify"
            }
            Self::CmdEquipAetherDividePassiveSkillCsReq => {
                "CmdEquipAetherDividePassiveSkillCsReq"
            }
            Self::CmdStartAetherDivideChallengeBattleCsReq => {
                "CmdStartAetherDivideChallengeBattleCsReq"
            }
            Self::CmdStartAetherDivideStageBattleCsReq => {
                "CmdStartAetherDivideStageBattleCsReq"
            }
            Self::CmdGetAetherDivideChallengeInfoScRsp => {
                "CmdGetAetherDivideChallengeInfoScRsp"
            }
            Self::CmdAetherDivideRefreshEndlessScNotify => {
                "CmdAetherDivideRefreshEndlessScNotify"
            }
            Self::CmdClearAetherDividePassiveSkillCsReq => {
                "CmdClearAetherDividePassiveSkillCsReq"
            }
            Self::CmdStartAetherDivideSceneBattleScRsp => {
                "CmdStartAetherDivideSceneBattleScRsp"
            }
            Self::CmdAetherDivideTainerInfoScNotify => {
                "CmdAetherDivideTainerInfoScNotify"
            }
            Self::CmdAetherDivideFinishChallengeScNotify => {
                "CmdAetherDivideFinishChallengeScNotify"
            }
            Self::CmdClearAetherDividePassiveSkillScRsp => {
                "CmdClearAetherDividePassiveSkillScRsp"
            }
            Self::CmdAetherDivideRefreshEndlessScRsp => {
                "CmdAetherDivideRefreshEndlessScRsp"
            }
            Self::CmdAetherDivideTakeChallengeRewardCsReq => {
                "CmdAetherDivideTakeChallengeRewardCsReq"
            }
            Self::CmdAetherDivideLineupScNotify => "CmdAetherDivideLineupScNotify",
            Self::CmdStartAetherDivideSceneBattleCsReq => {
                "CmdStartAetherDivideSceneBattleCsReq"
            }
            Self::CmdStartAetherDivideChallengeBattleScRsp => {
                "CmdStartAetherDivideChallengeBattleScRsp"
            }
            Self::CmdLeaveAetherDivideSceneCsReq => "CmdLeaveAetherDivideSceneCsReq",
            Self::CmdSetAetherDivideLineUpScRsp => "CmdSetAetherDivideLineUpScRsp",
            Self::CmdAetherDivideTakeChallengeRewardScRsp => {
                "CmdAetherDivideTakeChallengeRewardScRsp"
            }
            Self::CmdSwitchAetherDivideLineUpSlotScRsp => {
                "CmdSwitchAetherDivideLineUpSlotScRsp"
            }
            Self::CmdGetAetherDivideInfoScRsp => "CmdGetAetherDivideInfoScRsp",
            Self::CmdEquipAetherDividePassiveSkillScRsp => {
                "CmdEquipAetherDividePassiveSkillScRsp"
            }
            Self::CmdStartAetherDivideStageBattleScRsp => {
                "CmdStartAetherDivideStageBattleScRsp"
            }
            Self::CmdEnterAetherDivideSceneCsReq => "CmdEnterAetherDivideSceneCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAetherDivideTypeNone" => Some(Self::None),
            "CmdAetherDivideSpiritExpUpCsReq" => {
                Some(Self::CmdAetherDivideSpiritExpUpCsReq)
            }
            "CmdSwitchAetherDivideLineUpSlotCsReq" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotCsReq)
            }
            "CmdGetAetherDivideInfoCsReq" => Some(Self::CmdGetAetherDivideInfoCsReq),
            "CmdGetAetherDivideChallengeInfoCsReq" => {
                Some(Self::CmdGetAetherDivideChallengeInfoCsReq)
            }
            "CmdEnterAetherDivideSceneScRsp" => {
                Some(Self::CmdEnterAetherDivideSceneScRsp)
            }
            "CmdSetAetherDivideLineUpCsReq" => Some(Self::CmdSetAetherDivideLineUpCsReq),
            "CmdAetherDivideSpiritExpUpScRsp" => {
                Some(Self::CmdAetherDivideSpiritExpUpScRsp)
            }
            "CmdAetherDivideSkillItemScNotify" => {
                Some(Self::CmdAetherDivideSkillItemScNotify)
            }
            "CmdLeaveAetherDivideSceneScRsp" => {
                Some(Self::CmdLeaveAetherDivideSceneScRsp)
            }
            "CmdAetherDivideRefreshEndlessCsReq" => {
                Some(Self::CmdAetherDivideRefreshEndlessCsReq)
            }
            "CmdAetherDivideSpiritInfoScNotify" => {
                Some(Self::CmdAetherDivideSpiritInfoScNotify)
            }
            "CmdEquipAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdEquipAetherDividePassiveSkillCsReq)
            }
            "CmdStartAetherDivideChallengeBattleCsReq" => {
                Some(Self::CmdStartAetherDivideChallengeBattleCsReq)
            }
            "CmdStartAetherDivideStageBattleCsReq" => {
                Some(Self::CmdStartAetherDivideStageBattleCsReq)
            }
            "CmdGetAetherDivideChallengeInfoScRsp" => {
                Some(Self::CmdGetAetherDivideChallengeInfoScRsp)
            }
            "CmdAetherDivideRefreshEndlessScNotify" => {
                Some(Self::CmdAetherDivideRefreshEndlessScNotify)
            }
            "CmdClearAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdClearAetherDividePassiveSkillCsReq)
            }
            "CmdStartAetherDivideSceneBattleScRsp" => {
                Some(Self::CmdStartAetherDivideSceneBattleScRsp)
            }
            "CmdAetherDivideTainerInfoScNotify" => {
                Some(Self::CmdAetherDivideTainerInfoScNotify)
            }
            "CmdAetherDivideFinishChallengeScNotify" => {
                Some(Self::CmdAetherDivideFinishChallengeScNotify)
            }
            "CmdClearAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdClearAetherDividePassiveSkillScRsp)
            }
            "CmdAetherDivideRefreshEndlessScRsp" => {
                Some(Self::CmdAetherDivideRefreshEndlessScRsp)
            }
            "CmdAetherDivideTakeChallengeRewardCsReq" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardCsReq)
            }
            "CmdAetherDivideLineupScNotify" => Some(Self::CmdAetherDivideLineupScNotify),
            "CmdStartAetherDivideSceneBattleCsReq" => {
                Some(Self::CmdStartAetherDivideSceneBattleCsReq)
            }
            "CmdStartAetherDivideChallengeBattleScRsp" => {
                Some(Self::CmdStartAetherDivideChallengeBattleScRsp)
            }
            "CmdLeaveAetherDivideSceneCsReq" => {
                Some(Self::CmdLeaveAetherDivideSceneCsReq)
            }
            "CmdSetAetherDivideLineUpScRsp" => Some(Self::CmdSetAetherDivideLineUpScRsp),
            "CmdAetherDivideTakeChallengeRewardScRsp" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardScRsp)
            }
            "CmdSwitchAetherDivideLineUpSlotScRsp" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotScRsp)
            }
            "CmdGetAetherDivideInfoScRsp" => Some(Self::CmdGetAetherDivideInfoScRsp),
            "CmdEquipAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdEquipAetherDividePassiveSkillScRsp)
            }
            "CmdStartAetherDivideStageBattleScRsp" => {
                Some(Self::CmdStartAetherDivideStageBattleScRsp)
            }
            "CmdEnterAetherDivideSceneCsReq" => {
                Some(Self::CmdEnterAetherDivideSceneCsReq)
            }
            _ => None,
        }
    }
}
/// OPHHPCJIIEM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAlleyType {
    None = 0,
    CmdGetAlleyInfoScRsp = 4795,
    CmdAlleyShipUsedCountScNotify = 4776,
    CmdLogisticsScoreRewardSyncInfoScNotify = 4708,
    CmdAlleyTakeEventRewardScRsp = 4713,
    CmdGetSaveLogisticsMapCsReq = 4758,
    CmdGetSaveLogisticsMapScRsp = 4710,
    CmdStartAlleyEventScRsp = 4774,
    CmdLogisticsInfoScNotify = 4748,
    CmdAlleyPlacingGameCsReq = 4746,
    CmdActivityRaidPlacingGameScRsp = 4737,
    CmdRefreshAlleyOrderScRsp = 4719,
    CmdPrestigeLevelUpCsReq = 4753,
    CmdAlleyShipmentEventEffectsScNotify = 4788,
    CmdAlleyPlacingGameScRsp = 4725,
    CmdAlleyEventEffectNotify = 4793,
    CmdRefreshAlleyOrderCsReq = 4775,
    CmdPrestigeLevelUpScRsp = 4790,
    CmdActivityRaidPlacingGameCsReq = 4718,
    CmdStartAlleyEventCsReq = 4752,
    CmdAlleyGuaranteedFundsCsReq = 4735,
    CmdLogisticsGameCsReq = 4784,
    CmdSaveLogisticsScRsp = 4750,
    CmdAlleyGuaranteedFundsScRsp = 4773,
    CmdTakePrestigeRewardScRsp = 4743,
    CmdAlleyShipUnlockScNotify = 4778,
    CmdGetAlleyInfoCsReq = 4736,
    CmdAlleyFundsScNotify = 4759,
    CmdAlleyOrderChangedScNotify = 4726,
    CmdAlleyShopLevelScNotify = 4712,
    CmdTakePrestigeRewardCsReq = 4734,
    CmdLogisticsDetonateStarSkiffCsReq = 4721,
    CmdAlleyTakeEventRewardCsReq = 4717,
    CmdSaveLogisticsCsReq = 4729,
    CmdLogisticsDetonateStarSkiffScRsp = 4765,
    CmdAlleyEventChangeNotify = 4724,
    CmdLogisticsGameScRsp = 4727,
}
impl CmdAlleyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAlleyTypeNone",
            Self::CmdGetAlleyInfoScRsp => "CmdGetAlleyInfoScRsp",
            Self::CmdAlleyShipUsedCountScNotify => "CmdAlleyShipUsedCountScNotify",
            Self::CmdLogisticsScoreRewardSyncInfoScNotify => {
                "CmdLogisticsScoreRewardSyncInfoScNotify"
            }
            Self::CmdAlleyTakeEventRewardScRsp => "CmdAlleyTakeEventRewardScRsp",
            Self::CmdGetSaveLogisticsMapCsReq => "CmdGetSaveLogisticsMapCsReq",
            Self::CmdGetSaveLogisticsMapScRsp => "CmdGetSaveLogisticsMapScRsp",
            Self::CmdStartAlleyEventScRsp => "CmdStartAlleyEventScRsp",
            Self::CmdLogisticsInfoScNotify => "CmdLogisticsInfoScNotify",
            Self::CmdAlleyPlacingGameCsReq => "CmdAlleyPlacingGameCsReq",
            Self::CmdActivityRaidPlacingGameScRsp => "CmdActivityRaidPlacingGameScRsp",
            Self::CmdRefreshAlleyOrderScRsp => "CmdRefreshAlleyOrderScRsp",
            Self::CmdPrestigeLevelUpCsReq => "CmdPrestigeLevelUpCsReq",
            Self::CmdAlleyShipmentEventEffectsScNotify => {
                "CmdAlleyShipmentEventEffectsScNotify"
            }
            Self::CmdAlleyPlacingGameScRsp => "CmdAlleyPlacingGameScRsp",
            Self::CmdAlleyEventEffectNotify => "CmdAlleyEventEffectNotify",
            Self::CmdRefreshAlleyOrderCsReq => "CmdRefreshAlleyOrderCsReq",
            Self::CmdPrestigeLevelUpScRsp => "CmdPrestigeLevelUpScRsp",
            Self::CmdActivityRaidPlacingGameCsReq => "CmdActivityRaidPlacingGameCsReq",
            Self::CmdStartAlleyEventCsReq => "CmdStartAlleyEventCsReq",
            Self::CmdAlleyGuaranteedFundsCsReq => "CmdAlleyGuaranteedFundsCsReq",
            Self::CmdLogisticsGameCsReq => "CmdLogisticsGameCsReq",
            Self::CmdSaveLogisticsScRsp => "CmdSaveLogisticsScRsp",
            Self::CmdAlleyGuaranteedFundsScRsp => "CmdAlleyGuaranteedFundsScRsp",
            Self::CmdTakePrestigeRewardScRsp => "CmdTakePrestigeRewardScRsp",
            Self::CmdAlleyShipUnlockScNotify => "CmdAlleyShipUnlockScNotify",
            Self::CmdGetAlleyInfoCsReq => "CmdGetAlleyInfoCsReq",
            Self::CmdAlleyFundsScNotify => "CmdAlleyFundsScNotify",
            Self::CmdAlleyOrderChangedScNotify => "CmdAlleyOrderChangedScNotify",
            Self::CmdAlleyShopLevelScNotify => "CmdAlleyShopLevelScNotify",
            Self::CmdTakePrestigeRewardCsReq => "CmdTakePrestigeRewardCsReq",
            Self::CmdLogisticsDetonateStarSkiffCsReq => {
                "CmdLogisticsDetonateStarSkiffCsReq"
            }
            Self::CmdAlleyTakeEventRewardCsReq => "CmdAlleyTakeEventRewardCsReq",
            Self::CmdSaveLogisticsCsReq => "CmdSaveLogisticsCsReq",
            Self::CmdLogisticsDetonateStarSkiffScRsp => {
                "CmdLogisticsDetonateStarSkiffScRsp"
            }
            Self::CmdAlleyEventChangeNotify => "CmdAlleyEventChangeNotify",
            Self::CmdLogisticsGameScRsp => "CmdLogisticsGameScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAlleyTypeNone" => Some(Self::None),
            "CmdGetAlleyInfoScRsp" => Some(Self::CmdGetAlleyInfoScRsp),
            "CmdAlleyShipUsedCountScNotify" => Some(Self::CmdAlleyShipUsedCountScNotify),
            "CmdLogisticsScoreRewardSyncInfoScNotify" => {
                Some(Self::CmdLogisticsScoreRewardSyncInfoScNotify)
            }
            "CmdAlleyTakeEventRewardScRsp" => Some(Self::CmdAlleyTakeEventRewardScRsp),
            "CmdGetSaveLogisticsMapCsReq" => Some(Self::CmdGetSaveLogisticsMapCsReq),
            "CmdGetSaveLogisticsMapScRsp" => Some(Self::CmdGetSaveLogisticsMapScRsp),
            "CmdStartAlleyEventScRsp" => Some(Self::CmdStartAlleyEventScRsp),
            "CmdLogisticsInfoScNotify" => Some(Self::CmdLogisticsInfoScNotify),
            "CmdAlleyPlacingGameCsReq" => Some(Self::CmdAlleyPlacingGameCsReq),
            "CmdActivityRaidPlacingGameScRsp" => {
                Some(Self::CmdActivityRaidPlacingGameScRsp)
            }
            "CmdRefreshAlleyOrderScRsp" => Some(Self::CmdRefreshAlleyOrderScRsp),
            "CmdPrestigeLevelUpCsReq" => Some(Self::CmdPrestigeLevelUpCsReq),
            "CmdAlleyShipmentEventEffectsScNotify" => {
                Some(Self::CmdAlleyShipmentEventEffectsScNotify)
            }
            "CmdAlleyPlacingGameScRsp" => Some(Self::CmdAlleyPlacingGameScRsp),
            "CmdAlleyEventEffectNotify" => Some(Self::CmdAlleyEventEffectNotify),
            "CmdRefreshAlleyOrderCsReq" => Some(Self::CmdRefreshAlleyOrderCsReq),
            "CmdPrestigeLevelUpScRsp" => Some(Self::CmdPrestigeLevelUpScRsp),
            "CmdActivityRaidPlacingGameCsReq" => {
                Some(Self::CmdActivityRaidPlacingGameCsReq)
            }
            "CmdStartAlleyEventCsReq" => Some(Self::CmdStartAlleyEventCsReq),
            "CmdAlleyGuaranteedFundsCsReq" => Some(Self::CmdAlleyGuaranteedFundsCsReq),
            "CmdLogisticsGameCsReq" => Some(Self::CmdLogisticsGameCsReq),
            "CmdSaveLogisticsScRsp" => Some(Self::CmdSaveLogisticsScRsp),
            "CmdAlleyGuaranteedFundsScRsp" => Some(Self::CmdAlleyGuaranteedFundsScRsp),
            "CmdTakePrestigeRewardScRsp" => Some(Self::CmdTakePrestigeRewardScRsp),
            "CmdAlleyShipUnlockScNotify" => Some(Self::CmdAlleyShipUnlockScNotify),
            "CmdGetAlleyInfoCsReq" => Some(Self::CmdGetAlleyInfoCsReq),
            "CmdAlleyFundsScNotify" => Some(Self::CmdAlleyFundsScNotify),
            "CmdAlleyOrderChangedScNotify" => Some(Self::CmdAlleyOrderChangedScNotify),
            "CmdAlleyShopLevelScNotify" => Some(Self::CmdAlleyShopLevelScNotify),
            "CmdTakePrestigeRewardCsReq" => Some(Self::CmdTakePrestigeRewardCsReq),
            "CmdLogisticsDetonateStarSkiffCsReq" => {
                Some(Self::CmdLogisticsDetonateStarSkiffCsReq)
            }
            "CmdAlleyTakeEventRewardCsReq" => Some(Self::CmdAlleyTakeEventRewardCsReq),
            "CmdSaveLogisticsCsReq" => Some(Self::CmdSaveLogisticsCsReq),
            "CmdLogisticsDetonateStarSkiffScRsp" => {
                Some(Self::CmdLogisticsDetonateStarSkiffScRsp)
            }
            "CmdAlleyEventChangeNotify" => Some(Self::CmdAlleyEventChangeNotify),
            "CmdLogisticsGameScRsp" => Some(Self::CmdLogisticsGameScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gmkehflbchj {
    Left = 0,
    Right = 1,
    Up = 2,
    Down = 3,
    LeftUp = 4,
    LeftDown = 5,
    RightUp = 6,
    RightDown = 7,
}
impl Gmkehflbchj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Left => "LEFT",
            Self::Right => "RIGHT",
            Self::Up => "UP",
            Self::Down => "DOWN",
            Self::LeftUp => "LEFT_UP",
            Self::LeftDown => "LEFT_DOWN",
            Self::RightUp => "RIGHT_UP",
            Self::RightDown => "RIGHT_DOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEFT" => Some(Self::Left),
            "RIGHT" => Some(Self::Right),
            "UP" => Some(Self::Up),
            "DOWN" => Some(Self::Down),
            "LEFT_UP" => Some(Self::LeftUp),
            "LEFT_DOWN" => Some(Self::LeftDown),
            "RIGHT_UP" => Some(Self::RightUp),
            "RIGHT_DOWN" => Some(Self::RightDown),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlleyEventType {
    None = 0,
    AlleyMainEvent = 1,
    AlleyCriticalEvent = 2,
    AlleyDailyEvent = 3,
}
impl AlleyEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ALLEY_EVENT_TYPE_NONE",
            Self::AlleyMainEvent => "ALLEY_MAIN_EVENT",
            Self::AlleyCriticalEvent => "ALLEY_CRITICAL_EVENT",
            Self::AlleyDailyEvent => "ALLEY_DAILY_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_EVENT_TYPE_NONE" => Some(Self::None),
            "ALLEY_MAIN_EVENT" => Some(Self::AlleyMainEvent),
            "ALLEY_CRITICAL_EVENT" => Some(Self::AlleyCriticalEvent),
            "ALLEY_DAILY_EVENT" => Some(Self::AlleyDailyEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlleyEventState {
    AlleyStateNone = 0,
    AlleyEventDoing = 1,
    AlleyEventFinish = 2,
    AlleyEventRewarded = 3,
}
impl AlleyEventState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AlleyStateNone => "ALLEY_STATE_NONE",
            Self::AlleyEventDoing => "ALLEY_EVENT_DOING",
            Self::AlleyEventFinish => "ALLEY_EVENT_FINISH",
            Self::AlleyEventRewarded => "ALLEY_EVENT_REWARDED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_STATE_NONE" => Some(Self::AlleyStateNone),
            "ALLEY_EVENT_DOING" => Some(Self::AlleyEventDoing),
            "ALLEY_EVENT_FINISH" => Some(Self::AlleyEventFinish),
            "ALLEY_EVENT_REWARDED" => Some(Self::AlleyEventRewarded),
            _ => None,
        }
    }
}
/// NAFNLNANJEH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdArchiveType {
    None = 0,
    CmdGetUpdatedArchiveDataCsReq = 2384,
    CmdGetUpdatedArchiveDataScRsp = 2327,
    CmdGetArchiveDataCsReq = 2336,
    CmdGetArchiveDataScRsp = 2395,
}
impl CmdArchiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdArchiveTypeNone",
            Self::CmdGetUpdatedArchiveDataCsReq => "CmdGetUpdatedArchiveDataCsReq",
            Self::CmdGetUpdatedArchiveDataScRsp => "CmdGetUpdatedArchiveDataScRsp",
            Self::CmdGetArchiveDataCsReq => "CmdGetArchiveDataCsReq",
            Self::CmdGetArchiveDataScRsp => "CmdGetArchiveDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdArchiveTypeNone" => Some(Self::None),
            "CmdGetUpdatedArchiveDataCsReq" => Some(Self::CmdGetUpdatedArchiveDataCsReq),
            "CmdGetUpdatedArchiveDataScRsp" => Some(Self::CmdGetUpdatedArchiveDataScRsp),
            "CmdGetArchiveDataCsReq" => Some(Self::CmdGetArchiveDataCsReq),
            "CmdGetArchiveDataScRsp" => Some(Self::CmdGetArchiveDataScRsp),
            _ => None,
        }
    }
}
/// FCHLNHJAPPJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAvatarType {
    None = 0,
    CmdTakeOffEquipmentScRsp = 343,
    CmdTakeOffAvatarSkinScRsp = 378,
    CmdGetAvatarDataCsReq = 336,
    CmdPromoteAvatarScRsp = 374,
    CmdMarkAvatarCsReq = 350,
    CmdTakeOffRelicCsReq = 319,
    CmdDressAvatarCsReq = 324,
    CmdPromoteAvatarCsReq = 352,
    CmdGrowthTargetAvatarChangedScNotify = 376,
    CmdRankUpAvatarCsReq = 325,
    CmdDressAvatarSkinCsReq = 390,
    CmdTakePromotionRewardScRsp = 353,
    CmdTakeOffRelicScRsp = 326,
    CmdAddAvatarScNotify = 346,
    CmdAddMultiPathAvatarScNotify = 388,
    CmdUnlockSkilltreeScRsp = 328,
    CmdTakeOffAvatarSkinCsReq = 312,
    CmdAvatarExpUpScRsp = 327,
    CmdDressAvatarSkinScRsp = 359,
    CmdDressRelicAvatarCsReq = 305,
    CmdUnlockAvatarSkinScNotify = 329,
    CmdDressAvatarScRsp = 393,
    CmdSetGrowthTargetAvatarCsReq = 358,
    CmdAvatarExpUpCsReq = 384,
    CmdDressRelicAvatarScRsp = 375,
    CmdTakePromotionRewardCsReq = 307,
    CmdMarkAvatarScRsp = 348,
    CmdTakeOffEquipmentCsReq = 334,
    CmdUnlockSkilltreeCsReq = 367,
    CmdGetAvatarDataScRsp = 395,
    CmdRankUpAvatarScRsp = 396,
    CmdSetGrowthTargetAvatarScRsp = 310,
}
impl CmdAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAvatarTypeNone",
            Self::CmdTakeOffEquipmentScRsp => "CmdTakeOffEquipmentScRsp",
            Self::CmdTakeOffAvatarSkinScRsp => "CmdTakeOffAvatarSkinScRsp",
            Self::CmdGetAvatarDataCsReq => "CmdGetAvatarDataCsReq",
            Self::CmdPromoteAvatarScRsp => "CmdPromoteAvatarScRsp",
            Self::CmdMarkAvatarCsReq => "CmdMarkAvatarCsReq",
            Self::CmdTakeOffRelicCsReq => "CmdTakeOffRelicCsReq",
            Self::CmdDressAvatarCsReq => "CmdDressAvatarCsReq",
            Self::CmdPromoteAvatarCsReq => "CmdPromoteAvatarCsReq",
            Self::CmdGrowthTargetAvatarChangedScNotify => {
                "CmdGrowthTargetAvatarChangedScNotify"
            }
            Self::CmdRankUpAvatarCsReq => "CmdRankUpAvatarCsReq",
            Self::CmdDressAvatarSkinCsReq => "CmdDressAvatarSkinCsReq",
            Self::CmdTakePromotionRewardScRsp => "CmdTakePromotionRewardScRsp",
            Self::CmdTakeOffRelicScRsp => "CmdTakeOffRelicScRsp",
            Self::CmdAddAvatarScNotify => "CmdAddAvatarScNotify",
            Self::CmdAddMultiPathAvatarScNotify => "CmdAddMultiPathAvatarScNotify",
            Self::CmdUnlockSkilltreeScRsp => "CmdUnlockSkilltreeScRsp",
            Self::CmdTakeOffAvatarSkinCsReq => "CmdTakeOffAvatarSkinCsReq",
            Self::CmdAvatarExpUpScRsp => "CmdAvatarExpUpScRsp",
            Self::CmdDressAvatarSkinScRsp => "CmdDressAvatarSkinScRsp",
            Self::CmdDressRelicAvatarCsReq => "CmdDressRelicAvatarCsReq",
            Self::CmdUnlockAvatarSkinScNotify => "CmdUnlockAvatarSkinScNotify",
            Self::CmdDressAvatarScRsp => "CmdDressAvatarScRsp",
            Self::CmdSetGrowthTargetAvatarCsReq => "CmdSetGrowthTargetAvatarCsReq",
            Self::CmdAvatarExpUpCsReq => "CmdAvatarExpUpCsReq",
            Self::CmdDressRelicAvatarScRsp => "CmdDressRelicAvatarScRsp",
            Self::CmdTakePromotionRewardCsReq => "CmdTakePromotionRewardCsReq",
            Self::CmdMarkAvatarScRsp => "CmdMarkAvatarScRsp",
            Self::CmdTakeOffEquipmentCsReq => "CmdTakeOffEquipmentCsReq",
            Self::CmdUnlockSkilltreeCsReq => "CmdUnlockSkilltreeCsReq",
            Self::CmdGetAvatarDataScRsp => "CmdGetAvatarDataScRsp",
            Self::CmdRankUpAvatarScRsp => "CmdRankUpAvatarScRsp",
            Self::CmdSetGrowthTargetAvatarScRsp => "CmdSetGrowthTargetAvatarScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAvatarTypeNone" => Some(Self::None),
            "CmdTakeOffEquipmentScRsp" => Some(Self::CmdTakeOffEquipmentScRsp),
            "CmdTakeOffAvatarSkinScRsp" => Some(Self::CmdTakeOffAvatarSkinScRsp),
            "CmdGetAvatarDataCsReq" => Some(Self::CmdGetAvatarDataCsReq),
            "CmdPromoteAvatarScRsp" => Some(Self::CmdPromoteAvatarScRsp),
            "CmdMarkAvatarCsReq" => Some(Self::CmdMarkAvatarCsReq),
            "CmdTakeOffRelicCsReq" => Some(Self::CmdTakeOffRelicCsReq),
            "CmdDressAvatarCsReq" => Some(Self::CmdDressAvatarCsReq),
            "CmdPromoteAvatarCsReq" => Some(Self::CmdPromoteAvatarCsReq),
            "CmdGrowthTargetAvatarChangedScNotify" => {
                Some(Self::CmdGrowthTargetAvatarChangedScNotify)
            }
            "CmdRankUpAvatarCsReq" => Some(Self::CmdRankUpAvatarCsReq),
            "CmdDressAvatarSkinCsReq" => Some(Self::CmdDressAvatarSkinCsReq),
            "CmdTakePromotionRewardScRsp" => Some(Self::CmdTakePromotionRewardScRsp),
            "CmdTakeOffRelicScRsp" => Some(Self::CmdTakeOffRelicScRsp),
            "CmdAddAvatarScNotify" => Some(Self::CmdAddAvatarScNotify),
            "CmdAddMultiPathAvatarScNotify" => Some(Self::CmdAddMultiPathAvatarScNotify),
            "CmdUnlockSkilltreeScRsp" => Some(Self::CmdUnlockSkilltreeScRsp),
            "CmdTakeOffAvatarSkinCsReq" => Some(Self::CmdTakeOffAvatarSkinCsReq),
            "CmdAvatarExpUpScRsp" => Some(Self::CmdAvatarExpUpScRsp),
            "CmdDressAvatarSkinScRsp" => Some(Self::CmdDressAvatarSkinScRsp),
            "CmdDressRelicAvatarCsReq" => Some(Self::CmdDressRelicAvatarCsReq),
            "CmdUnlockAvatarSkinScNotify" => Some(Self::CmdUnlockAvatarSkinScNotify),
            "CmdDressAvatarScRsp" => Some(Self::CmdDressAvatarScRsp),
            "CmdSetGrowthTargetAvatarCsReq" => Some(Self::CmdSetGrowthTargetAvatarCsReq),
            "CmdAvatarExpUpCsReq" => Some(Self::CmdAvatarExpUpCsReq),
            "CmdDressRelicAvatarScRsp" => Some(Self::CmdDressRelicAvatarScRsp),
            "CmdTakePromotionRewardCsReq" => Some(Self::CmdTakePromotionRewardCsReq),
            "CmdMarkAvatarScRsp" => Some(Self::CmdMarkAvatarScRsp),
            "CmdTakeOffEquipmentCsReq" => Some(Self::CmdTakeOffEquipmentCsReq),
            "CmdUnlockSkilltreeCsReq" => Some(Self::CmdUnlockSkilltreeCsReq),
            "CmdGetAvatarDataScRsp" => Some(Self::CmdGetAvatarDataScRsp),
            "CmdRankUpAvatarScRsp" => Some(Self::CmdRankUpAvatarScRsp),
            "CmdSetGrowthTargetAvatarScRsp" => Some(Self::CmdSetGrowthTargetAvatarScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kiajahejhea {
    GrowthTargetFunctionTypeIncludeSkilltreeOnDemand = 0,
}
impl Kiajahejhea {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GrowthTargetFunctionTypeIncludeSkilltreeOnDemand => {
                "GROWTH_TARGET_FUNCTION_TYPE_INCLUDE_SKILLTREE_ON_DEMAND"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GROWTH_TARGET_FUNCTION_TYPE_INCLUDE_SKILLTREE_ON_DEMAND" => {
                Some(Self::GrowthTargetFunctionTypeIncludeSkilltreeOnDemand)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddAvatarSrcState {
    AddAvatarSrcNone = 0,
    AddAvatarSrcGacha = 1,
    AddAvatarSrcRogue = 2,
}
impl AddAvatarSrcState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddAvatarSrcNone => "ADD_AVATAR_SRC_NONE",
            Self::AddAvatarSrcGacha => "ADD_AVATAR_SRC_GACHA",
            Self::AddAvatarSrcRogue => "ADD_AVATAR_SRC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_AVATAR_SRC_NONE" => Some(Self::AddAvatarSrcNone),
            "ADD_AVATAR_SRC_GACHA" => Some(Self::AddAvatarSrcGacha),
            "ADD_AVATAR_SRC_ROGUE" => Some(Self::AddAvatarSrcRogue),
            _ => None,
        }
    }
}
/// LFKAJPHFPHM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleType {
    None = 0,
    CmdQuitBattleScNotify = 124,
    CmdGetCurBattleInfoCsReq = 167,
    CmdPveBattleResultScRsp = 195,
    CmdPveBattleResultCsReq = 136,
    CmdSyncClientResVersionCsReq = 152,
    CmdQuitBattleCsReq = 184,
    CmdServerSimulateBattleFinishScNotify = 143,
    CmdQuitBattleScRsp = 127,
    CmdBattleLogReportScRsp = 134,
    CmdBattleLogReportCsReq = 193,
    CmdReBattleAfterBattleLoseCsNotify = 146,
    CmdSyncClientResVersionScRsp = 174,
    CmdGetCurBattleInfoScRsp = 128,
    CmdRebattleByClientCsNotify = 125,
}
impl CmdBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattleTypeNone",
            Self::CmdQuitBattleScNotify => "CmdQuitBattleScNotify",
            Self::CmdGetCurBattleInfoCsReq => "CmdGetCurBattleInfoCsReq",
            Self::CmdPveBattleResultScRsp => "CmdPVEBattleResultScRsp",
            Self::CmdPveBattleResultCsReq => "CmdPVEBattleResultCsReq",
            Self::CmdSyncClientResVersionCsReq => "CmdSyncClientResVersionCsReq",
            Self::CmdQuitBattleCsReq => "CmdQuitBattleCsReq",
            Self::CmdServerSimulateBattleFinishScNotify => {
                "CmdServerSimulateBattleFinishScNotify"
            }
            Self::CmdQuitBattleScRsp => "CmdQuitBattleScRsp",
            Self::CmdBattleLogReportScRsp => "CmdBattleLogReportScRsp",
            Self::CmdBattleLogReportCsReq => "CmdBattleLogReportCsReq",
            Self::CmdReBattleAfterBattleLoseCsNotify => {
                "CmdReBattleAfterBattleLoseCsNotify"
            }
            Self::CmdSyncClientResVersionScRsp => "CmdSyncClientResVersionScRsp",
            Self::CmdGetCurBattleInfoScRsp => "CmdGetCurBattleInfoScRsp",
            Self::CmdRebattleByClientCsNotify => "CmdRebattleByClientCsNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleTypeNone" => Some(Self::None),
            "CmdQuitBattleScNotify" => Some(Self::CmdQuitBattleScNotify),
            "CmdGetCurBattleInfoCsReq" => Some(Self::CmdGetCurBattleInfoCsReq),
            "CmdPVEBattleResultScRsp" => Some(Self::CmdPveBattleResultScRsp),
            "CmdPVEBattleResultCsReq" => Some(Self::CmdPveBattleResultCsReq),
            "CmdSyncClientResVersionCsReq" => Some(Self::CmdSyncClientResVersionCsReq),
            "CmdQuitBattleCsReq" => Some(Self::CmdQuitBattleCsReq),
            "CmdServerSimulateBattleFinishScNotify" => {
                Some(Self::CmdServerSimulateBattleFinishScNotify)
            }
            "CmdQuitBattleScRsp" => Some(Self::CmdQuitBattleScRsp),
            "CmdBattleLogReportScRsp" => Some(Self::CmdBattleLogReportScRsp),
            "CmdBattleLogReportCsReq" => Some(Self::CmdBattleLogReportCsReq),
            "CmdReBattleAfterBattleLoseCsNotify" => {
                Some(Self::CmdReBattleAfterBattleLoseCsNotify)
            }
            "CmdSyncClientResVersionScRsp" => Some(Self::CmdSyncClientResVersionScRsp),
            "CmdGetCurBattleInfoScRsp" => Some(Self::CmdGetCurBattleInfoScRsp),
            "CmdRebattleByClientCsNotify" => Some(Self::CmdRebattleByClientCsNotify),
            _ => None,
        }
    }
}
/// MMPBIENFEPH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleCollegeType {
    None = 0,
    CmdBattleCollegeDataChangeScNotify = 5784,
    CmdStartBattleCollegeCsReq = 5727,
    CmdGetBattleCollegeDataCsReq = 5736,
    CmdGetBattleCollegeDataScRsp = 5795,
    CmdStartBattleCollegeScRsp = 5767,
}
impl CmdBattleCollegeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattleCollegeTypeNone",
            Self::CmdBattleCollegeDataChangeScNotify => {
                "CmdBattleCollegeDataChangeScNotify"
            }
            Self::CmdStartBattleCollegeCsReq => "CmdStartBattleCollegeCsReq",
            Self::CmdGetBattleCollegeDataCsReq => "CmdGetBattleCollegeDataCsReq",
            Self::CmdGetBattleCollegeDataScRsp => "CmdGetBattleCollegeDataScRsp",
            Self::CmdStartBattleCollegeScRsp => "CmdStartBattleCollegeScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleCollegeTypeNone" => Some(Self::None),
            "CmdBattleCollegeDataChangeScNotify" => {
                Some(Self::CmdBattleCollegeDataChangeScNotify)
            }
            "CmdStartBattleCollegeCsReq" => Some(Self::CmdStartBattleCollegeCsReq),
            "CmdGetBattleCollegeDataCsReq" => Some(Self::CmdGetBattleCollegeDataCsReq),
            "CmdGetBattleCollegeDataScRsp" => Some(Self::CmdGetBattleCollegeDataScRsp),
            "CmdStartBattleCollegeScRsp" => Some(Self::CmdStartBattleCollegeScRsp),
            _ => None,
        }
    }
}
/// JJDFBHFHKJG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattlePassType {
    None = 0,
    CmdBuyBpLevelCsReq = 3028,
    CmdBuyBpLevelScRsp = 3052,
    CmdTakeAllRewardScRsp = 3024,
    CmdBattlePassInfoNotify = 3036,
    CmdTakeBpRewardCsReq = 3027,
    CmdTakeBpRewardScRsp = 3067,
    CmdTakeAllRewardCsReq = 3074,
}
impl CmdBattlePassType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattlePassTypeNone",
            Self::CmdBuyBpLevelCsReq => "CmdBuyBpLevelCsReq",
            Self::CmdBuyBpLevelScRsp => "CmdBuyBpLevelScRsp",
            Self::CmdTakeAllRewardScRsp => "CmdTakeAllRewardScRsp",
            Self::CmdBattlePassInfoNotify => "CmdBattlePassInfoNotify",
            Self::CmdTakeBpRewardCsReq => "CmdTakeBpRewardCsReq",
            Self::CmdTakeBpRewardScRsp => "CmdTakeBpRewardScRsp",
            Self::CmdTakeAllRewardCsReq => "CmdTakeAllRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattlePassTypeNone" => Some(Self::None),
            "CmdBuyBpLevelCsReq" => Some(Self::CmdBuyBpLevelCsReq),
            "CmdBuyBpLevelScRsp" => Some(Self::CmdBuyBpLevelScRsp),
            "CmdTakeAllRewardScRsp" => Some(Self::CmdTakeAllRewardScRsp),
            "CmdBattlePassInfoNotify" => Some(Self::CmdBattlePassInfoNotify),
            "CmdTakeBpRewardCsReq" => Some(Self::CmdTakeBpRewardCsReq),
            "CmdTakeBpRewardScRsp" => Some(Self::CmdTakeBpRewardScRsp),
            "CmdTakeAllRewardCsReq" => Some(Self::CmdTakeAllRewardCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BpTierType {
    None = 0,
    Free = 1,
    Premium1 = 2,
    Premium2 = 3,
}
impl BpTierType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BP_TIER_TYPE_NONE",
            Self::Free => "BP_TIER_TYPE_FREE",
            Self::Premium1 => "BP_TIER_TYPE_PREMIUM_1",
            Self::Premium2 => "BP_TIER_TYPE_PREMIUM_2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_TIER_TYPE_NONE" => Some(Self::None),
            "BP_TIER_TYPE_FREE" => Some(Self::Free),
            "BP_TIER_TYPE_PREMIUM_1" => Some(Self::Premium1),
            "BP_TIER_TYPE_PREMIUM_2" => Some(Self::Premium2),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BpRewardType {
    BpRewaradTypeNone = 0,
    BpRewaradTypeFree = 1,
    BpRewaradTypePremium1 = 2,
    BpRewaradTypePremium2 = 3,
    BpRewaradTypePremiumOptional = 4,
}
impl BpRewardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BpRewaradTypeNone => "BP_REWARAD_TYPE_NONE",
            Self::BpRewaradTypeFree => "BP_REWARAD_TYPE_FREE",
            Self::BpRewaradTypePremium1 => "BP_REWARAD_TYPE_PREMIUM_1",
            Self::BpRewaradTypePremium2 => "BP_REWARAD_TYPE_PREMIUM_2",
            Self::BpRewaradTypePremiumOptional => "BP_REWARAD_TYPE_PREMIUM_OPTIONAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_REWARAD_TYPE_NONE" => Some(Self::BpRewaradTypeNone),
            "BP_REWARAD_TYPE_FREE" => Some(Self::BpRewaradTypeFree),
            "BP_REWARAD_TYPE_PREMIUM_1" => Some(Self::BpRewaradTypePremium1),
            "BP_REWARAD_TYPE_PREMIUM_2" => Some(Self::BpRewaradTypePremium2),
            "BP_REWARAD_TYPE_PREMIUM_OPTIONAL" => {
                Some(Self::BpRewaradTypePremiumOptional)
            }
            _ => None,
        }
    }
}
/// JIEJGELPGFL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBoxingClubType {
    None = 0,
    CmdSetBoxingClubResonanceLineupScRsp = 4225,
    CmdBoxingClubRewardScNotify = 4224,
    CmdGiveUpBoxingClubChallengeCsReq = 4252,
    CmdMatchBoxingClubOpponentScRsp = 4227,
    CmdSetBoxingClubResonanceLineupCsReq = 4246,
    CmdChooseBoxingClubStageOptionalBuffScRsp = 4205,
    CmdBoxingClubChallengeUpdateScNotify = 4293,
    CmdChooseBoxingClubStageOptionalBuffCsReq = 4296,
    CmdChooseBoxingClubResonanceCsReq = 4234,
    CmdMatchBoxingClubOpponentCsReq = 4284,
    CmdStartBoxingClubBattleScRsp = 4228,
    CmdGiveUpBoxingClubChallengeScRsp = 4274,
    CmdChooseBoxingClubResonanceScRsp = 4243,
    CmdGetBoxingClubInfoScRsp = 4295,
    CmdStartBoxingClubBattleCsReq = 4267,
    CmdGetBoxingClubInfoCsReq = 4236,
}
impl CmdBoxingClubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBoxingClubTypeNone",
            Self::CmdSetBoxingClubResonanceLineupScRsp => {
                "CmdSetBoxingClubResonanceLineupScRsp"
            }
            Self::CmdBoxingClubRewardScNotify => "CmdBoxingClubRewardScNotify",
            Self::CmdGiveUpBoxingClubChallengeCsReq => {
                "CmdGiveUpBoxingClubChallengeCsReq"
            }
            Self::CmdMatchBoxingClubOpponentScRsp => "CmdMatchBoxingClubOpponentScRsp",
            Self::CmdSetBoxingClubResonanceLineupCsReq => {
                "CmdSetBoxingClubResonanceLineupCsReq"
            }
            Self::CmdChooseBoxingClubStageOptionalBuffScRsp => {
                "CmdChooseBoxingClubStageOptionalBuffScRsp"
            }
            Self::CmdBoxingClubChallengeUpdateScNotify => {
                "CmdBoxingClubChallengeUpdateScNotify"
            }
            Self::CmdChooseBoxingClubStageOptionalBuffCsReq => {
                "CmdChooseBoxingClubStageOptionalBuffCsReq"
            }
            Self::CmdChooseBoxingClubResonanceCsReq => {
                "CmdChooseBoxingClubResonanceCsReq"
            }
            Self::CmdMatchBoxingClubOpponentCsReq => "CmdMatchBoxingClubOpponentCsReq",
            Self::CmdStartBoxingClubBattleScRsp => "CmdStartBoxingClubBattleScRsp",
            Self::CmdGiveUpBoxingClubChallengeScRsp => {
                "CmdGiveUpBoxingClubChallengeScRsp"
            }
            Self::CmdChooseBoxingClubResonanceScRsp => {
                "CmdChooseBoxingClubResonanceScRsp"
            }
            Self::CmdGetBoxingClubInfoScRsp => "CmdGetBoxingClubInfoScRsp",
            Self::CmdStartBoxingClubBattleCsReq => "CmdStartBoxingClubBattleCsReq",
            Self::CmdGetBoxingClubInfoCsReq => "CmdGetBoxingClubInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBoxingClubTypeNone" => Some(Self::None),
            "CmdSetBoxingClubResonanceLineupScRsp" => {
                Some(Self::CmdSetBoxingClubResonanceLineupScRsp)
            }
            "CmdBoxingClubRewardScNotify" => Some(Self::CmdBoxingClubRewardScNotify),
            "CmdGiveUpBoxingClubChallengeCsReq" => {
                Some(Self::CmdGiveUpBoxingClubChallengeCsReq)
            }
            "CmdMatchBoxingClubOpponentScRsp" => {
                Some(Self::CmdMatchBoxingClubOpponentScRsp)
            }
            "CmdSetBoxingClubResonanceLineupCsReq" => {
                Some(Self::CmdSetBoxingClubResonanceLineupCsReq)
            }
            "CmdChooseBoxingClubStageOptionalBuffScRsp" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffScRsp)
            }
            "CmdBoxingClubChallengeUpdateScNotify" => {
                Some(Self::CmdBoxingClubChallengeUpdateScNotify)
            }
            "CmdChooseBoxingClubStageOptionalBuffCsReq" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffCsReq)
            }
            "CmdChooseBoxingClubResonanceCsReq" => {
                Some(Self::CmdChooseBoxingClubResonanceCsReq)
            }
            "CmdMatchBoxingClubOpponentCsReq" => {
                Some(Self::CmdMatchBoxingClubOpponentCsReq)
            }
            "CmdStartBoxingClubBattleScRsp" => Some(Self::CmdStartBoxingClubBattleScRsp),
            "CmdGiveUpBoxingClubChallengeScRsp" => {
                Some(Self::CmdGiveUpBoxingClubChallengeScRsp)
            }
            "CmdChooseBoxingClubResonanceScRsp" => {
                Some(Self::CmdChooseBoxingClubResonanceScRsp)
            }
            "CmdGetBoxingClubInfoScRsp" => Some(Self::CmdGetBoxingClubInfoScRsp),
            "CmdStartBoxingClubBattleCsReq" => Some(Self::CmdStartBoxingClubBattleCsReq),
            "CmdGetBoxingClubInfoCsReq" => Some(Self::CmdGetBoxingClubInfoCsReq),
            _ => None,
        }
    }
}
/// KBILPNDAKLP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChallengeType {
    None = 0,
    CmdGetCurChallengeScRsp = 1734,
    CmdStartChallengeCsReq = 1784,
    CmdLeaveChallengeScRsp = 1728,
    CmdChallengeSettleNotify = 1752,
    CmdStartChallengeScRsp = 1727,
    CmdRestartChallengePhaseCsReq = 1790,
    CmdGetCurChallengeCsReq = 1793,
    CmdGetChallengeGroupStatisticsScRsp = 1719,
    CmdTakeChallengeRewardCsReq = 1796,
    CmdChallengeBossPhaseSettleNotify = 1729,
    CmdStartPartialChallengeScRsp = 1707,
    CmdEnterChallengeNextPhaseCsReq = 1712,
    CmdEnterChallengeNextPhaseScRsp = 1778,
    CmdStartPartialChallengeCsReq = 1726,
    CmdGetChallengeScRsp = 1795,
    CmdChallengeLineupNotify = 1743,
    CmdTakeChallengeRewardScRsp = 1705,
    CmdGetChallengeGroupStatisticsCsReq = 1775,
    CmdRestartChallengePhaseScRsp = 1759,
    CmdLeaveChallengeCsReq = 1767,
    CmdGetChallengeCsReq = 1736,
}
impl CmdChallengeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChallengeTypeNone",
            Self::CmdGetCurChallengeScRsp => "CmdGetCurChallengeScRsp",
            Self::CmdStartChallengeCsReq => "CmdStartChallengeCsReq",
            Self::CmdLeaveChallengeScRsp => "CmdLeaveChallengeScRsp",
            Self::CmdChallengeSettleNotify => "CmdChallengeSettleNotify",
            Self::CmdStartChallengeScRsp => "CmdStartChallengeScRsp",
            Self::CmdRestartChallengePhaseCsReq => "CmdRestartChallengePhaseCsReq",
            Self::CmdGetCurChallengeCsReq => "CmdGetCurChallengeCsReq",
            Self::CmdGetChallengeGroupStatisticsScRsp => {
                "CmdGetChallengeGroupStatisticsScRsp"
            }
            Self::CmdTakeChallengeRewardCsReq => "CmdTakeChallengeRewardCsReq",
            Self::CmdChallengeBossPhaseSettleNotify => {
                "CmdChallengeBossPhaseSettleNotify"
            }
            Self::CmdStartPartialChallengeScRsp => "CmdStartPartialChallengeScRsp",
            Self::CmdEnterChallengeNextPhaseCsReq => "CmdEnterChallengeNextPhaseCsReq",
            Self::CmdEnterChallengeNextPhaseScRsp => "CmdEnterChallengeNextPhaseScRsp",
            Self::CmdStartPartialChallengeCsReq => "CmdStartPartialChallengeCsReq",
            Self::CmdGetChallengeScRsp => "CmdGetChallengeScRsp",
            Self::CmdChallengeLineupNotify => "CmdChallengeLineupNotify",
            Self::CmdTakeChallengeRewardScRsp => "CmdTakeChallengeRewardScRsp",
            Self::CmdGetChallengeGroupStatisticsCsReq => {
                "CmdGetChallengeGroupStatisticsCsReq"
            }
            Self::CmdRestartChallengePhaseScRsp => "CmdRestartChallengePhaseScRsp",
            Self::CmdLeaveChallengeCsReq => "CmdLeaveChallengeCsReq",
            Self::CmdGetChallengeCsReq => "CmdGetChallengeCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChallengeTypeNone" => Some(Self::None),
            "CmdGetCurChallengeScRsp" => Some(Self::CmdGetCurChallengeScRsp),
            "CmdStartChallengeCsReq" => Some(Self::CmdStartChallengeCsReq),
            "CmdLeaveChallengeScRsp" => Some(Self::CmdLeaveChallengeScRsp),
            "CmdChallengeSettleNotify" => Some(Self::CmdChallengeSettleNotify),
            "CmdStartChallengeScRsp" => Some(Self::CmdStartChallengeScRsp),
            "CmdRestartChallengePhaseCsReq" => Some(Self::CmdRestartChallengePhaseCsReq),
            "CmdGetCurChallengeCsReq" => Some(Self::CmdGetCurChallengeCsReq),
            "CmdGetChallengeGroupStatisticsScRsp" => {
                Some(Self::CmdGetChallengeGroupStatisticsScRsp)
            }
            "CmdTakeChallengeRewardCsReq" => Some(Self::CmdTakeChallengeRewardCsReq),
            "CmdChallengeBossPhaseSettleNotify" => {
                Some(Self::CmdChallengeBossPhaseSettleNotify)
            }
            "CmdStartPartialChallengeScRsp" => Some(Self::CmdStartPartialChallengeScRsp),
            "CmdEnterChallengeNextPhaseCsReq" => {
                Some(Self::CmdEnterChallengeNextPhaseCsReq)
            }
            "CmdEnterChallengeNextPhaseScRsp" => {
                Some(Self::CmdEnterChallengeNextPhaseScRsp)
            }
            "CmdStartPartialChallengeCsReq" => Some(Self::CmdStartPartialChallengeCsReq),
            "CmdGetChallengeScRsp" => Some(Self::CmdGetChallengeScRsp),
            "CmdChallengeLineupNotify" => Some(Self::CmdChallengeLineupNotify),
            "CmdTakeChallengeRewardScRsp" => Some(Self::CmdTakeChallengeRewardScRsp),
            "CmdGetChallengeGroupStatisticsCsReq" => {
                Some(Self::CmdGetChallengeGroupStatisticsCsReq)
            }
            "CmdRestartChallengePhaseScRsp" => Some(Self::CmdRestartChallengePhaseScRsp),
            "CmdLeaveChallengeCsReq" => Some(Self::CmdLeaveChallengeCsReq),
            "CmdGetChallengeCsReq" => Some(Self::CmdGetChallengeCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChallengeStatus {
    ChallengeUnknown = 0,
    ChallengeDoing = 1,
    ChallengeFinish = 2,
    ChallengeFailed = 3,
}
impl ChallengeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChallengeUnknown => "CHALLENGE_UNKNOWN",
            Self::ChallengeDoing => "CHALLENGE_DOING",
            Self::ChallengeFinish => "CHALLENGE_FINISH",
            Self::ChallengeFailed => "CHALLENGE_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHALLENGE_UNKNOWN" => Some(Self::ChallengeUnknown),
            "CHALLENGE_DOING" => Some(Self::ChallengeDoing),
            "CHALLENGE_FINISH" => Some(Self::ChallengeFinish),
            "CHALLENGE_FAILED" => Some(Self::ChallengeFailed),
            _ => None,
        }
    }
}
/// GECFEADPKPM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChatType {
    None = 0,
    CmdGetChatEmojiListCsReq = 3924,
    CmdRevcMsgScNotify = 3984,
    CmdMarkChatEmojiScRsp = 3943,
    CmdGetLoginChatInfoCsReq = 3996,
    CmdBatchMarkChatEmojiScRsp = 3925,
    CmdGetPrivateChatHistoryScRsp = 3928,
    CmdMarkChatEmojiCsReq = 3934,
    CmdSendMsgScRsp = 3995,
    CmdGetPrivateChatHistoryCsReq = 3967,
    CmdSendMsgCsReq = 3936,
    CmdBatchMarkChatEmojiCsReq = 3946,
    CmdGetChatFriendHistoryCsReq = 3952,
    CmdPrivateMsgOfflineUsersScNotify = 3927,
    CmdGetChatEmojiListScRsp = 3993,
    CmdGetLoginChatInfoScRsp = 3905,
    CmdGetChatFriendHistoryScRsp = 3974,
}
impl CmdChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChatTypeNone",
            Self::CmdGetChatEmojiListCsReq => "CmdGetChatEmojiListCsReq",
            Self::CmdRevcMsgScNotify => "CmdRevcMsgScNotify",
            Self::CmdMarkChatEmojiScRsp => "CmdMarkChatEmojiScRsp",
            Self::CmdGetLoginChatInfoCsReq => "CmdGetLoginChatInfoCsReq",
            Self::CmdBatchMarkChatEmojiScRsp => "CmdBatchMarkChatEmojiScRsp",
            Self::CmdGetPrivateChatHistoryScRsp => "CmdGetPrivateChatHistoryScRsp",
            Self::CmdMarkChatEmojiCsReq => "CmdMarkChatEmojiCsReq",
            Self::CmdSendMsgScRsp => "CmdSendMsgScRsp",
            Self::CmdGetPrivateChatHistoryCsReq => "CmdGetPrivateChatHistoryCsReq",
            Self::CmdSendMsgCsReq => "CmdSendMsgCsReq",
            Self::CmdBatchMarkChatEmojiCsReq => "CmdBatchMarkChatEmojiCsReq",
            Self::CmdGetChatFriendHistoryCsReq => "CmdGetChatFriendHistoryCsReq",
            Self::CmdPrivateMsgOfflineUsersScNotify => {
                "CmdPrivateMsgOfflineUsersScNotify"
            }
            Self::CmdGetChatEmojiListScRsp => "CmdGetChatEmojiListScRsp",
            Self::CmdGetLoginChatInfoScRsp => "CmdGetLoginChatInfoScRsp",
            Self::CmdGetChatFriendHistoryScRsp => "CmdGetChatFriendHistoryScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChatTypeNone" => Some(Self::None),
            "CmdGetChatEmojiListCsReq" => Some(Self::CmdGetChatEmojiListCsReq),
            "CmdRevcMsgScNotify" => Some(Self::CmdRevcMsgScNotify),
            "CmdMarkChatEmojiScRsp" => Some(Self::CmdMarkChatEmojiScRsp),
            "CmdGetLoginChatInfoCsReq" => Some(Self::CmdGetLoginChatInfoCsReq),
            "CmdBatchMarkChatEmojiScRsp" => Some(Self::CmdBatchMarkChatEmojiScRsp),
            "CmdGetPrivateChatHistoryScRsp" => Some(Self::CmdGetPrivateChatHistoryScRsp),
            "CmdMarkChatEmojiCsReq" => Some(Self::CmdMarkChatEmojiCsReq),
            "CmdSendMsgScRsp" => Some(Self::CmdSendMsgScRsp),
            "CmdGetPrivateChatHistoryCsReq" => Some(Self::CmdGetPrivateChatHistoryCsReq),
            "CmdSendMsgCsReq" => Some(Self::CmdSendMsgCsReq),
            "CmdBatchMarkChatEmojiCsReq" => Some(Self::CmdBatchMarkChatEmojiCsReq),
            "CmdGetChatFriendHistoryCsReq" => Some(Self::CmdGetChatFriendHistoryCsReq),
            "CmdPrivateMsgOfflineUsersScNotify" => {
                Some(Self::CmdPrivateMsgOfflineUsersScNotify)
            }
            "CmdGetChatEmojiListScRsp" => Some(Self::CmdGetChatEmojiListScRsp),
            "CmdGetLoginChatInfoScRsp" => Some(Self::CmdGetLoginChatInfoScRsp),
            "CmdGetChatFriendHistoryScRsp" => Some(Self::CmdGetChatFriendHistoryScRsp),
            _ => None,
        }
    }
}
/// JPEOOBGEDAJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChessRogueType {
    None = 0,
    CmdChessRogueGiveUpRollScRsp = 5509,
    CmdChessRoguePickAvatarScRsp = 5406,
    CmdChessRogueQuitCsReq = 5563,
    CmdChessRogueRollDiceCsReq = 5485,
    CmdChessRogueReviveAvatarScRsp = 5434,
    CmdChessRogueCheatRollCsReq = 5595,
    CmdChessRogueNousEditDiceCsReq = 5472,
    CmdChessRogueGiveUpScRsp = 5433,
    CmdSelectChessRogueSubStoryCsReq = 5496,
    CmdChessRogueNousDiceUpdateNotify = 5585,
    CmdGetChessRogueStoryAeonTalkInfoCsReq = 5483,
    CmdChessRogueQueryCsReq = 5492,
    CmdChessRogueUpdateUnlockLevelScNotify = 5533,
    CmdGetChessRogueNousStoryInfoScRsp = 5567,
    CmdChessRogueConfirmRollScRsp = 5514,
    CmdFinishChessRogueNousSubStoryCsReq = 5519,
    CmdChessRogueQueryBpScRsp = 5431,
    CmdChessRogueCellUpdateNotify = 5442,
    CmdChessRogueLeaveCsReq = 5558,
    CmdGetChessRogueStoryAeonTalkInfoScRsp = 5553,
    CmdChessRogueQueryAeonDimensionsCsReq = 5518,
    CmdChessRogueQueryAeonDimensionsScRsp = 5463,
    CmdChessRogueUpdateActionPointScNotify = 5543,
    CmdChessRogueCheatRollScRsp = 5411,
    CmdSelectChessRogueNousSubStoryScRsp = 5529,
    CmdChessRogueGoAheadCsReq = 5520,
    CmdChessRogueUpdateReviveInfoScNotify = 5576,
    CmdEnhanceChessRogueBuffScRsp = 5541,
    CmdChessRogueUpdateLevelBaseInfoScNotify = 5469,
    CmdSelectChessRogueSubStoryScRsp = 5405,
    CmdChessRogueEnterCsReq = 5441,
    CmdChessRogueNousGetRogueTalentInfoCsReq = 5513,
    CmdChessRogueReRollDiceScRsp = 5477,
    CmdGetChessRogueBuffEnhanceInfoScRsp = 5414,
    CmdFinishChessRogueNousSubStoryScRsp = 5584,
    CmdFinishChessRogueSubStoryScRsp = 5479,
    CmdChessRogueChangeyAeonDimensionNotify = 5437,
    CmdChessRogueUpdateDicePassiveAccumulateValueScNotify = 5454,
    CmdFinishChessRogueSubStoryCsReq = 5516,
    CmdChessRoguePickAvatarCsReq = 5580,
    CmdChessRogueSelectCellScRsp = 5419,
    CmdGetChessRogueNousStoryInfoCsReq = 5422,
    CmdChessRogueQuitScRsp = 5435,
    CmdChessRogueLayerAccountInfoNotify = 5586,
    CmdChessRogueUpdateBoardScNotify = 5490,
    CmdChessRogueNousEnableRogueTalentScRsp = 5596,
    CmdGetChessRogueStoryInfoCsReq = 5557,
    CmdChessRogueGiveUpRollCsReq = 5445,
    CmdChessRogueNousEnableRogueTalentCsReq = 5493,
    CmdChessRogueEnterNextLayerScRsp = 5583,
    CmdGetChessRogueBuffEnhanceInfoCsReq = 5457,
    CmdChessRogueEnterCellCsReq = 5581,
    CmdChessRogueReviveAvatarCsReq = 5473,
    CmdChessRogueRollDiceScRsp = 5425,
    CmdChessRogueQueryBpCsReq = 5545,
    CmdEnterChessRogueAeonRoomScRsp = 5552,
    CmdEnterChessRogueAeonRoomCsReq = 5482,
    CmdChessRogueSelectCellCsReq = 5506,
    CmdChessRogueSkipTeachingLevelCsReq = 5528,
    CmdChessRogueStartCsReq = 5452,
    CmdChessRogueGoAheadScRsp = 5578,
    CmdChessRogueConfirmRollCsReq = 5591,
    CmdChessRogueLeaveScRsp = 5562,
    CmdChessRogueNousEditDiceScRsp = 5443,
    CmdChessRogueUpdateDiceInfoScNotify = 5536,
    CmdChessRogueUpdateAllowedSelectCellScNotify = 5521,
    CmdChessRogueNousGetRogueTalentInfoScRsp = 5432,
    CmdChessRogueEnterScRsp = 5510,
    CmdChessRogueFinishCurRoomNotify = 5564,
    CmdChessRogueEnterCellScRsp = 5556,
    CmdSyncChessRogueNousMainStoryScNotify = 5497,
    CmdChessRogueSkipTeachingLevelScRsp = 5577,
    CmdEnhanceChessRogueBuffCsReq = 5550,
    CmdSyncChessRogueNousValueScNotify = 5589,
    CmdChessRogueStartScRsp = 5582,
    CmdGetChessRogueStoryInfoScRsp = 5530,
    CmdChessRogueNousDiceSurfaceUnlockNotify = 5568,
    CmdChessRogueEnterNextLayerCsReq = 5440,
    CmdChessRogueUpdateAeonModifierValueScNotify = 5438,
    CmdSelectChessRogueNousSubStoryCsReq = 5409,
    CmdSyncChessRogueNousSubStoryScNotify = 5498,
    CmdChessRogueMoveCellNotify = 5456,
    CmdChessRogueSelectBpCsReq = 5572,
    CmdChessRogueQueryScRsp = 5565,
    CmdSyncChessRogueMainStoryFinishScNotify = 5429,
    CmdChessRogueSelectBpScRsp = 5465,
    CmdChessRogueQuestFinishNotify = 5539,
    CmdChessRogueReRollDiceCsReq = 5423,
    CmdChessRogueGiveUpCsReq = 5460,
    CmdChessRogueUpdateMoneyInfoScNotify = 5501,
}
impl CmdChessRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChessRogueTypeNone",
            Self::CmdChessRogueGiveUpRollScRsp => "CmdChessRogueGiveUpRollScRsp",
            Self::CmdChessRoguePickAvatarScRsp => "CmdChessRoguePickAvatarScRsp",
            Self::CmdChessRogueQuitCsReq => "CmdChessRogueQuitCsReq",
            Self::CmdChessRogueRollDiceCsReq => "CmdChessRogueRollDiceCsReq",
            Self::CmdChessRogueReviveAvatarScRsp => "CmdChessRogueReviveAvatarScRsp",
            Self::CmdChessRogueCheatRollCsReq => "CmdChessRogueCheatRollCsReq",
            Self::CmdChessRogueNousEditDiceCsReq => "CmdChessRogueNousEditDiceCsReq",
            Self::CmdChessRogueGiveUpScRsp => "CmdChessRogueGiveUpScRsp",
            Self::CmdSelectChessRogueSubStoryCsReq => "CmdSelectChessRogueSubStoryCsReq",
            Self::CmdChessRogueNousDiceUpdateNotify => {
                "CmdChessRogueNousDiceUpdateNotify"
            }
            Self::CmdGetChessRogueStoryAeonTalkInfoCsReq => {
                "CmdGetChessRogueStoryAeonTalkInfoCsReq"
            }
            Self::CmdChessRogueQueryCsReq => "CmdChessRogueQueryCsReq",
            Self::CmdChessRogueUpdateUnlockLevelScNotify => {
                "CmdChessRogueUpdateUnlockLevelScNotify"
            }
            Self::CmdGetChessRogueNousStoryInfoScRsp => {
                "CmdGetChessRogueNousStoryInfoScRsp"
            }
            Self::CmdChessRogueConfirmRollScRsp => "CmdChessRogueConfirmRollScRsp",
            Self::CmdFinishChessRogueNousSubStoryCsReq => {
                "CmdFinishChessRogueNousSubStoryCsReq"
            }
            Self::CmdChessRogueQueryBpScRsp => "CmdChessRogueQueryBpScRsp",
            Self::CmdChessRogueCellUpdateNotify => "CmdChessRogueCellUpdateNotify",
            Self::CmdChessRogueLeaveCsReq => "CmdChessRogueLeaveCsReq",
            Self::CmdGetChessRogueStoryAeonTalkInfoScRsp => {
                "CmdGetChessRogueStoryAeonTalkInfoScRsp"
            }
            Self::CmdChessRogueQueryAeonDimensionsCsReq => {
                "CmdChessRogueQueryAeonDimensionsCsReq"
            }
            Self::CmdChessRogueQueryAeonDimensionsScRsp => {
                "CmdChessRogueQueryAeonDimensionsScRsp"
            }
            Self::CmdChessRogueUpdateActionPointScNotify => {
                "CmdChessRogueUpdateActionPointScNotify"
            }
            Self::CmdChessRogueCheatRollScRsp => "CmdChessRogueCheatRollScRsp",
            Self::CmdSelectChessRogueNousSubStoryScRsp => {
                "CmdSelectChessRogueNousSubStoryScRsp"
            }
            Self::CmdChessRogueGoAheadCsReq => "CmdChessRogueGoAheadCsReq",
            Self::CmdChessRogueUpdateReviveInfoScNotify => {
                "CmdChessRogueUpdateReviveInfoScNotify"
            }
            Self::CmdEnhanceChessRogueBuffScRsp => "CmdEnhanceChessRogueBuffScRsp",
            Self::CmdChessRogueUpdateLevelBaseInfoScNotify => {
                "CmdChessRogueUpdateLevelBaseInfoScNotify"
            }
            Self::CmdSelectChessRogueSubStoryScRsp => "CmdSelectChessRogueSubStoryScRsp",
            Self::CmdChessRogueEnterCsReq => "CmdChessRogueEnterCsReq",
            Self::CmdChessRogueNousGetRogueTalentInfoCsReq => {
                "CmdChessRogueNousGetRogueTalentInfoCsReq"
            }
            Self::CmdChessRogueReRollDiceScRsp => "CmdChessRogueReRollDiceScRsp",
            Self::CmdGetChessRogueBuffEnhanceInfoScRsp => {
                "CmdGetChessRogueBuffEnhanceInfoScRsp"
            }
            Self::CmdFinishChessRogueNousSubStoryScRsp => {
                "CmdFinishChessRogueNousSubStoryScRsp"
            }
            Self::CmdFinishChessRogueSubStoryScRsp => "CmdFinishChessRogueSubStoryScRsp",
            Self::CmdChessRogueChangeyAeonDimensionNotify => {
                "CmdChessRogueChangeyAeonDimensionNotify"
            }
            Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify => {
                "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify"
            }
            Self::CmdFinishChessRogueSubStoryCsReq => "CmdFinishChessRogueSubStoryCsReq",
            Self::CmdChessRoguePickAvatarCsReq => "CmdChessRoguePickAvatarCsReq",
            Self::CmdChessRogueSelectCellScRsp => "CmdChessRogueSelectCellScRsp",
            Self::CmdGetChessRogueNousStoryInfoCsReq => {
                "CmdGetChessRogueNousStoryInfoCsReq"
            }
            Self::CmdChessRogueQuitScRsp => "CmdChessRogueQuitScRsp",
            Self::CmdChessRogueLayerAccountInfoNotify => {
                "CmdChessRogueLayerAccountInfoNotify"
            }
            Self::CmdChessRogueUpdateBoardScNotify => "CmdChessRogueUpdateBoardScNotify",
            Self::CmdChessRogueNousEnableRogueTalentScRsp => {
                "CmdChessRogueNousEnableRogueTalentScRsp"
            }
            Self::CmdGetChessRogueStoryInfoCsReq => "CmdGetChessRogueStoryInfoCsReq",
            Self::CmdChessRogueGiveUpRollCsReq => "CmdChessRogueGiveUpRollCsReq",
            Self::CmdChessRogueNousEnableRogueTalentCsReq => {
                "CmdChessRogueNousEnableRogueTalentCsReq"
            }
            Self::CmdChessRogueEnterNextLayerScRsp => "CmdChessRogueEnterNextLayerScRsp",
            Self::CmdGetChessRogueBuffEnhanceInfoCsReq => {
                "CmdGetChessRogueBuffEnhanceInfoCsReq"
            }
            Self::CmdChessRogueEnterCellCsReq => "CmdChessRogueEnterCellCsReq",
            Self::CmdChessRogueReviveAvatarCsReq => "CmdChessRogueReviveAvatarCsReq",
            Self::CmdChessRogueRollDiceScRsp => "CmdChessRogueRollDiceScRsp",
            Self::CmdChessRogueQueryBpCsReq => "CmdChessRogueQueryBpCsReq",
            Self::CmdEnterChessRogueAeonRoomScRsp => "CmdEnterChessRogueAeonRoomScRsp",
            Self::CmdEnterChessRogueAeonRoomCsReq => "CmdEnterChessRogueAeonRoomCsReq",
            Self::CmdChessRogueSelectCellCsReq => "CmdChessRogueSelectCellCsReq",
            Self::CmdChessRogueSkipTeachingLevelCsReq => {
                "CmdChessRogueSkipTeachingLevelCsReq"
            }
            Self::CmdChessRogueStartCsReq => "CmdChessRogueStartCsReq",
            Self::CmdChessRogueGoAheadScRsp => "CmdChessRogueGoAheadScRsp",
            Self::CmdChessRogueConfirmRollCsReq => "CmdChessRogueConfirmRollCsReq",
            Self::CmdChessRogueLeaveScRsp => "CmdChessRogueLeaveScRsp",
            Self::CmdChessRogueNousEditDiceScRsp => "CmdChessRogueNousEditDiceScRsp",
            Self::CmdChessRogueUpdateDiceInfoScNotify => {
                "CmdChessRogueUpdateDiceInfoScNotify"
            }
            Self::CmdChessRogueUpdateAllowedSelectCellScNotify => {
                "CmdChessRogueUpdateAllowedSelectCellScNotify"
            }
            Self::CmdChessRogueNousGetRogueTalentInfoScRsp => {
                "CmdChessRogueNousGetRogueTalentInfoScRsp"
            }
            Self::CmdChessRogueEnterScRsp => "CmdChessRogueEnterScRsp",
            Self::CmdChessRogueFinishCurRoomNotify => "CmdChessRogueFinishCurRoomNotify",
            Self::CmdChessRogueEnterCellScRsp => "CmdChessRogueEnterCellScRsp",
            Self::CmdSyncChessRogueNousMainStoryScNotify => {
                "CmdSyncChessRogueNousMainStoryScNotify"
            }
            Self::CmdChessRogueSkipTeachingLevelScRsp => {
                "CmdChessRogueSkipTeachingLevelScRsp"
            }
            Self::CmdEnhanceChessRogueBuffCsReq => "CmdEnhanceChessRogueBuffCsReq",
            Self::CmdSyncChessRogueNousValueScNotify => {
                "CmdSyncChessRogueNousValueScNotify"
            }
            Self::CmdChessRogueStartScRsp => "CmdChessRogueStartScRsp",
            Self::CmdGetChessRogueStoryInfoScRsp => "CmdGetChessRogueStoryInfoScRsp",
            Self::CmdChessRogueNousDiceSurfaceUnlockNotify => {
                "CmdChessRogueNousDiceSurfaceUnlockNotify"
            }
            Self::CmdChessRogueEnterNextLayerCsReq => "CmdChessRogueEnterNextLayerCsReq",
            Self::CmdChessRogueUpdateAeonModifierValueScNotify => {
                "CmdChessRogueUpdateAeonModifierValueScNotify"
            }
            Self::CmdSelectChessRogueNousSubStoryCsReq => {
                "CmdSelectChessRogueNousSubStoryCsReq"
            }
            Self::CmdSyncChessRogueNousSubStoryScNotify => {
                "CmdSyncChessRogueNousSubStoryScNotify"
            }
            Self::CmdChessRogueMoveCellNotify => "CmdChessRogueMoveCellNotify",
            Self::CmdChessRogueSelectBpCsReq => "CmdChessRogueSelectBpCsReq",
            Self::CmdChessRogueQueryScRsp => "CmdChessRogueQueryScRsp",
            Self::CmdSyncChessRogueMainStoryFinishScNotify => {
                "CmdSyncChessRogueMainStoryFinishScNotify"
            }
            Self::CmdChessRogueSelectBpScRsp => "CmdChessRogueSelectBpScRsp",
            Self::CmdChessRogueQuestFinishNotify => "CmdChessRogueQuestFinishNotify",
            Self::CmdChessRogueReRollDiceCsReq => "CmdChessRogueReRollDiceCsReq",
            Self::CmdChessRogueGiveUpCsReq => "CmdChessRogueGiveUpCsReq",
            Self::CmdChessRogueUpdateMoneyInfoScNotify => {
                "CmdChessRogueUpdateMoneyInfoScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChessRogueTypeNone" => Some(Self::None),
            "CmdChessRogueGiveUpRollScRsp" => Some(Self::CmdChessRogueGiveUpRollScRsp),
            "CmdChessRoguePickAvatarScRsp" => Some(Self::CmdChessRoguePickAvatarScRsp),
            "CmdChessRogueQuitCsReq" => Some(Self::CmdChessRogueQuitCsReq),
            "CmdChessRogueRollDiceCsReq" => Some(Self::CmdChessRogueRollDiceCsReq),
            "CmdChessRogueReviveAvatarScRsp" => {
                Some(Self::CmdChessRogueReviveAvatarScRsp)
            }
            "CmdChessRogueCheatRollCsReq" => Some(Self::CmdChessRogueCheatRollCsReq),
            "CmdChessRogueNousEditDiceCsReq" => {
                Some(Self::CmdChessRogueNousEditDiceCsReq)
            }
            "CmdChessRogueGiveUpScRsp" => Some(Self::CmdChessRogueGiveUpScRsp),
            "CmdSelectChessRogueSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueSubStoryCsReq)
            }
            "CmdChessRogueNousDiceUpdateNotify" => {
                Some(Self::CmdChessRogueNousDiceUpdateNotify)
            }
            "CmdGetChessRogueStoryAeonTalkInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoCsReq)
            }
            "CmdChessRogueQueryCsReq" => Some(Self::CmdChessRogueQueryCsReq),
            "CmdChessRogueUpdateUnlockLevelScNotify" => {
                Some(Self::CmdChessRogueUpdateUnlockLevelScNotify)
            }
            "CmdGetChessRogueNousStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueNousStoryInfoScRsp)
            }
            "CmdChessRogueConfirmRollScRsp" => Some(Self::CmdChessRogueConfirmRollScRsp),
            "CmdFinishChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueNousSubStoryCsReq)
            }
            "CmdChessRogueQueryBpScRsp" => Some(Self::CmdChessRogueQueryBpScRsp),
            "CmdChessRogueCellUpdateNotify" => Some(Self::CmdChessRogueCellUpdateNotify),
            "CmdChessRogueLeaveCsReq" => Some(Self::CmdChessRogueLeaveCsReq),
            "CmdGetChessRogueStoryAeonTalkInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoScRsp)
            }
            "CmdChessRogueQueryAeonDimensionsCsReq" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsCsReq)
            }
            "CmdChessRogueQueryAeonDimensionsScRsp" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsScRsp)
            }
            "CmdChessRogueUpdateActionPointScNotify" => {
                Some(Self::CmdChessRogueUpdateActionPointScNotify)
            }
            "CmdChessRogueCheatRollScRsp" => Some(Self::CmdChessRogueCheatRollScRsp),
            "CmdSelectChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueNousSubStoryScRsp)
            }
            "CmdChessRogueGoAheadCsReq" => Some(Self::CmdChessRogueGoAheadCsReq),
            "CmdChessRogueUpdateReviveInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateReviveInfoScNotify)
            }
            "CmdEnhanceChessRogueBuffScRsp" => Some(Self::CmdEnhanceChessRogueBuffScRsp),
            "CmdChessRogueUpdateLevelBaseInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateLevelBaseInfoScNotify)
            }
            "CmdSelectChessRogueSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueSubStoryScRsp)
            }
            "CmdChessRogueEnterCsReq" => Some(Self::CmdChessRogueEnterCsReq),
            "CmdChessRogueNousGetRogueTalentInfoCsReq" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoCsReq)
            }
            "CmdChessRogueReRollDiceScRsp" => Some(Self::CmdChessRogueReRollDiceScRsp),
            "CmdGetChessRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoScRsp)
            }
            "CmdFinishChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueNousSubStoryScRsp)
            }
            "CmdFinishChessRogueSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueSubStoryScRsp)
            }
            "CmdChessRogueChangeyAeonDimensionNotify" => {
                Some(Self::CmdChessRogueChangeyAeonDimensionNotify)
            }
            "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify" => {
                Some(Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify)
            }
            "CmdFinishChessRogueSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueSubStoryCsReq)
            }
            "CmdChessRoguePickAvatarCsReq" => Some(Self::CmdChessRoguePickAvatarCsReq),
            "CmdChessRogueSelectCellScRsp" => Some(Self::CmdChessRogueSelectCellScRsp),
            "CmdGetChessRogueNousStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueNousStoryInfoCsReq)
            }
            "CmdChessRogueQuitScRsp" => Some(Self::CmdChessRogueQuitScRsp),
            "CmdChessRogueLayerAccountInfoNotify" => {
                Some(Self::CmdChessRogueLayerAccountInfoNotify)
            }
            "CmdChessRogueUpdateBoardScNotify" => {
                Some(Self::CmdChessRogueUpdateBoardScNotify)
            }
            "CmdChessRogueNousEnableRogueTalentScRsp" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentScRsp)
            }
            "CmdGetChessRogueStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryInfoCsReq)
            }
            "CmdChessRogueGiveUpRollCsReq" => Some(Self::CmdChessRogueGiveUpRollCsReq),
            "CmdChessRogueNousEnableRogueTalentCsReq" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentCsReq)
            }
            "CmdChessRogueEnterNextLayerScRsp" => {
                Some(Self::CmdChessRogueEnterNextLayerScRsp)
            }
            "CmdGetChessRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoCsReq)
            }
            "CmdChessRogueEnterCellCsReq" => Some(Self::CmdChessRogueEnterCellCsReq),
            "CmdChessRogueReviveAvatarCsReq" => {
                Some(Self::CmdChessRogueReviveAvatarCsReq)
            }
            "CmdChessRogueRollDiceScRsp" => Some(Self::CmdChessRogueRollDiceScRsp),
            "CmdChessRogueQueryBpCsReq" => Some(Self::CmdChessRogueQueryBpCsReq),
            "CmdEnterChessRogueAeonRoomScRsp" => {
                Some(Self::CmdEnterChessRogueAeonRoomScRsp)
            }
            "CmdEnterChessRogueAeonRoomCsReq" => {
                Some(Self::CmdEnterChessRogueAeonRoomCsReq)
            }
            "CmdChessRogueSelectCellCsReq" => Some(Self::CmdChessRogueSelectCellCsReq),
            "CmdChessRogueSkipTeachingLevelCsReq" => {
                Some(Self::CmdChessRogueSkipTeachingLevelCsReq)
            }
            "CmdChessRogueStartCsReq" => Some(Self::CmdChessRogueStartCsReq),
            "CmdChessRogueGoAheadScRsp" => Some(Self::CmdChessRogueGoAheadScRsp),
            "CmdChessRogueConfirmRollCsReq" => Some(Self::CmdChessRogueConfirmRollCsReq),
            "CmdChessRogueLeaveScRsp" => Some(Self::CmdChessRogueLeaveScRsp),
            "CmdChessRogueNousEditDiceScRsp" => {
                Some(Self::CmdChessRogueNousEditDiceScRsp)
            }
            "CmdChessRogueUpdateDiceInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateDiceInfoScNotify)
            }
            "CmdChessRogueUpdateAllowedSelectCellScNotify" => {
                Some(Self::CmdChessRogueUpdateAllowedSelectCellScNotify)
            }
            "CmdChessRogueNousGetRogueTalentInfoScRsp" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoScRsp)
            }
            "CmdChessRogueEnterScRsp" => Some(Self::CmdChessRogueEnterScRsp),
            "CmdChessRogueFinishCurRoomNotify" => {
                Some(Self::CmdChessRogueFinishCurRoomNotify)
            }
            "CmdChessRogueEnterCellScRsp" => Some(Self::CmdChessRogueEnterCellScRsp),
            "CmdSyncChessRogueNousMainStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousMainStoryScNotify)
            }
            "CmdChessRogueSkipTeachingLevelScRsp" => {
                Some(Self::CmdChessRogueSkipTeachingLevelScRsp)
            }
            "CmdEnhanceChessRogueBuffCsReq" => Some(Self::CmdEnhanceChessRogueBuffCsReq),
            "CmdSyncChessRogueNousValueScNotify" => {
                Some(Self::CmdSyncChessRogueNousValueScNotify)
            }
            "CmdChessRogueStartScRsp" => Some(Self::CmdChessRogueStartScRsp),
            "CmdGetChessRogueStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryInfoScRsp)
            }
            "CmdChessRogueNousDiceSurfaceUnlockNotify" => {
                Some(Self::CmdChessRogueNousDiceSurfaceUnlockNotify)
            }
            "CmdChessRogueEnterNextLayerCsReq" => {
                Some(Self::CmdChessRogueEnterNextLayerCsReq)
            }
            "CmdChessRogueUpdateAeonModifierValueScNotify" => {
                Some(Self::CmdChessRogueUpdateAeonModifierValueScNotify)
            }
            "CmdSelectChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueNousSubStoryCsReq)
            }
            "CmdSyncChessRogueNousSubStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousSubStoryScNotify)
            }
            "CmdChessRogueMoveCellNotify" => Some(Self::CmdChessRogueMoveCellNotify),
            "CmdChessRogueSelectBpCsReq" => Some(Self::CmdChessRogueSelectBpCsReq),
            "CmdChessRogueQueryScRsp" => Some(Self::CmdChessRogueQueryScRsp),
            "CmdSyncChessRogueMainStoryFinishScNotify" => {
                Some(Self::CmdSyncChessRogueMainStoryFinishScNotify)
            }
            "CmdChessRogueSelectBpScRsp" => Some(Self::CmdChessRogueSelectBpScRsp),
            "CmdChessRogueQuestFinishNotify" => {
                Some(Self::CmdChessRogueQuestFinishNotify)
            }
            "CmdChessRogueReRollDiceCsReq" => Some(Self::CmdChessRogueReRollDiceCsReq),
            "CmdChessRogueGiveUpCsReq" => Some(Self::CmdChessRogueGiveUpCsReq),
            "CmdChessRogueUpdateMoneyInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateMoneyInfoScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojkkcjdfmhc {
    ChessRogueDiceIdle = 0,
    ChessRogueDiceRolled = 1,
    ChessRogueDiceConfirmed = 2,
    ChessRogueDiceGiveup = 3,
}
impl Ojkkcjdfmhc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceIdle => "CHESS_ROGUE_DICE_IDLE",
            Self::ChessRogueDiceRolled => "CHESS_ROGUE_DICE_ROLLED",
            Self::ChessRogueDiceConfirmed => "CHESS_ROGUE_DICE_CONFIRMED",
            Self::ChessRogueDiceGiveup => "CHESS_ROGUE_DICE_GIVEUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_IDLE" => Some(Self::ChessRogueDiceIdle),
            "CHESS_ROGUE_DICE_ROLLED" => Some(Self::ChessRogueDiceRolled),
            "CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::ChessRogueDiceConfirmed),
            "CHESS_ROGUE_DICE_GIVEUP" => Some(Self::ChessRogueDiceGiveup),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lmfhfmebakb {
    ChessRogueDiceFixed = 0,
    ChessRogueDiceEditable = 1,
}
impl Lmfhfmebakb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceFixed => "CHESS_ROGUE_DICE_FIXED",
            Self::ChessRogueDiceEditable => "CHESS_ROGUE_DICE_EDITABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_FIXED" => Some(Self::ChessRogueDiceFixed),
            "CHESS_ROGUE_DICE_EDITABLE" => Some(Self::ChessRogueDiceEditable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lnbeaahbnaj {
    Idle = 0,
    Selected = 1,
    Processing = 2,
    Finish = 3,
}
impl Lnbeaahbnaj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Idle => "IDLE",
            Self::Selected => "SELECTED",
            Self::Processing => "PROCESSING",
            Self::Finish => "FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IDLE" => Some(Self::Idle),
            "SELECTED" => Some(Self::Selected),
            "PROCESSING" => Some(Self::Processing),
            "FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Diodbaolfdn {
    ChessRogueCellSpecialTypeNone = 0,
    ChessRogueCellSpecialTypeLocked = 1,
    ChessRogueCellSpecialTypeReplicate = 2,
    ChessRogueCellSpecialTypeProtected = 3,
    ChessRogueCellSpecialTypeSeed = 4,
    ChessRogueCellSpecialTypeStamp = 5,
}
impl Diodbaolfdn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueCellSpecialTypeNone => "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE",
            Self::ChessRogueCellSpecialTypeLocked => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED"
            }
            Self::ChessRogueCellSpecialTypeReplicate => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE"
            }
            Self::ChessRogueCellSpecialTypeProtected => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED"
            }
            Self::ChessRogueCellSpecialTypeSeed => "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED",
            Self::ChessRogueCellSpecialTypeStamp => "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE" => {
                Some(Self::ChessRogueCellSpecialTypeNone)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED" => {
                Some(Self::ChessRogueCellSpecialTypeLocked)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE" => {
                Some(Self::ChessRogueCellSpecialTypeReplicate)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED" => {
                Some(Self::ChessRogueCellSpecialTypeProtected)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED" => {
                Some(Self::ChessRogueCellSpecialTypeSeed)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP" => {
                Some(Self::ChessRogueCellSpecialTypeStamp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lmibfmlfcgo {
    ChessRogueLevelIdle = 0,
    ChessRogueLevelProcessing = 1,
    ChessRogueLevelPending = 2,
    ChessRogueLevelFinish = 3,
    ChessRogueLevelFailed = 4,
    ChessRogueLevelForceFinish = 5,
}
impl Lmibfmlfcgo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueLevelIdle => "CHESS_ROGUE_LEVEL_IDLE",
            Self::ChessRogueLevelProcessing => "CHESS_ROGUE_LEVEL_PROCESSING",
            Self::ChessRogueLevelPending => "CHESS_ROGUE_LEVEL_PENDING",
            Self::ChessRogueLevelFinish => "CHESS_ROGUE_LEVEL_FINISH",
            Self::ChessRogueLevelFailed => "CHESS_ROGUE_LEVEL_FAILED",
            Self::ChessRogueLevelForceFinish => "CHESS_ROGUE_LEVEL_FORCE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_LEVEL_IDLE" => Some(Self::ChessRogueLevelIdle),
            "CHESS_ROGUE_LEVEL_PROCESSING" => Some(Self::ChessRogueLevelProcessing),
            "CHESS_ROGUE_LEVEL_PENDING" => Some(Self::ChessRogueLevelPending),
            "CHESS_ROGUE_LEVEL_FINISH" => Some(Self::ChessRogueLevelFinish),
            "CHESS_ROGUE_LEVEL_FAILED" => Some(Self::ChessRogueLevelFailed),
            "CHESS_ROGUE_LEVEL_FORCE_FINISH" => Some(Self::ChessRogueLevelForceFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jloepepjmdp {
    ChessRogueAccountByNone = 0,
    ChessRogueAccountByNormalFinish = 1,
    ChessRogueAccountByNormalQuit = 2,
    ChessRogueAccountByDialog = 3,
    ChessRogueAccountByFailed = 4,
    ChessRogueAccountByCustomOp = 5,
}
impl Jloepepjmdp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueAccountByNone => "CHESS_ROGUE_ACCOUNT_BY_NONE",
            Self::ChessRogueAccountByNormalFinish => {
                "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH"
            }
            Self::ChessRogueAccountByNormalQuit => "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT",
            Self::ChessRogueAccountByDialog => "CHESS_ROGUE_ACCOUNT_BY_DIALOG",
            Self::ChessRogueAccountByFailed => "CHESS_ROGUE_ACCOUNT_BY_FAILED",
            Self::ChessRogueAccountByCustomOp => "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_ACCOUNT_BY_NONE" => Some(Self::ChessRogueAccountByNone),
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH" => {
                Some(Self::ChessRogueAccountByNormalFinish)
            }
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT" => {
                Some(Self::ChessRogueAccountByNormalQuit)
            }
            "CHESS_ROGUE_ACCOUNT_BY_DIALOG" => Some(Self::ChessRogueAccountByDialog),
            "CHESS_ROGUE_ACCOUNT_BY_FAILED" => Some(Self::ChessRogueAccountByFailed),
            "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP" => Some(Self::ChessRogueAccountByCustomOp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hlpagpllffa {
    ChessRogueBuffSourceTypeNone = 0,
    ChessRogueBuffSourceTypeSelect = 1,
    ChessRogueBuffSourceTypeEnhance = 2,
    ChessRogueBuffSourceTypeMiracle = 3,
    ChessRogueBuffSourceTypeDialogue = 4,
    ChessRogueBuffSourceTypeBonus = 5,
    ChessRogueBuffSourceTypeShop = 6,
    ChessRogueBuffSourceTypeDice = 7,
    ChessRogueBuffSourceTypeAeon = 8,
    ChessRogueBuffSourceTypeMazeSkill = 9,
    ChessRogueBuffSourceTypeLevelMechanism = 10,
}
impl Hlpagpllffa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueBuffSourceTypeNone => "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE",
            Self::ChessRogueBuffSourceTypeSelect => "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Self::ChessRogueBuffSourceTypeEnhance => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE"
            }
            Self::ChessRogueBuffSourceTypeMiracle => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE"
            }
            Self::ChessRogueBuffSourceTypeDialogue => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE"
            }
            Self::ChessRogueBuffSourceTypeBonus => "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Self::ChessRogueBuffSourceTypeShop => "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Self::ChessRogueBuffSourceTypeDice => "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE",
            Self::ChessRogueBuffSourceTypeAeon => "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON",
            Self::ChessRogueBuffSourceTypeMazeSkill => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::ChessRogueBuffSourceTypeLevelMechanism => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueBuffSourceTypeNone)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueBuffSourceTypeSelect)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => {
                Some(Self::ChessRogueBuffSourceTypeEnhance)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => {
                Some(Self::ChessRogueBuffSourceTypeMiracle)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueBuffSourceTypeDialogue)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueBuffSourceTypeBonus)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueBuffSourceTypeShop)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE" => {
                Some(Self::ChessRogueBuffSourceTypeDice)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON" => {
                Some(Self::ChessRogueBuffSourceTypeAeon)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueBuffSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueBuffSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cfbbajgoaah {
    ChessRogueMiracleSourceTypeNone = 0,
    ChessRogueMiracleSourceTypeSelect = 1,
    ChessRogueMiracleSourceTypeDialogue = 2,
    ChessRogueMiracleSourceTypeBonus = 3,
    ChessRogueMiracleSourceTypeUse = 4,
    ChessRogueMiracleSourceTypeReset = 5,
    ChessRogueMiracleSourceTypeReplace = 6,
    ChessRogueMiracleSourceTypeTrade = 7,
    ChessRogueMiracleSourceTypeGet = 8,
    ChessRogueMiracleSourceTypeShop = 9,
    ChessRogueMiracleSourceTypeMazeSkill = 10,
    ChessRogueMiracleSourceTypeLevelMechanism = 11,
}
impl Cfbbajgoaah {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueMiracleSourceTypeNone => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE"
            }
            Self::ChessRogueMiracleSourceTypeSelect => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT"
            }
            Self::ChessRogueMiracleSourceTypeDialogue => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE"
            }
            Self::ChessRogueMiracleSourceTypeBonus => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS"
            }
            Self::ChessRogueMiracleSourceTypeUse => "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Self::ChessRogueMiracleSourceTypeReset => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET"
            }
            Self::ChessRogueMiracleSourceTypeReplace => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE"
            }
            Self::ChessRogueMiracleSourceTypeTrade => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE"
            }
            Self::ChessRogueMiracleSourceTypeGet => "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Self::ChessRogueMiracleSourceTypeShop => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP"
            }
            Self::ChessRogueMiracleSourceTypeMazeSkill => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::ChessRogueMiracleSourceTypeLevelMechanism => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueMiracleSourceTypeNone)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueMiracleSourceTypeSelect)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueMiracleSourceTypeDialogue)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueMiracleSourceTypeBonus)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE" => {
                Some(Self::ChessRogueMiracleSourceTypeUse)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET" => {
                Some(Self::ChessRogueMiracleSourceTypeReset)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::ChessRogueMiracleSourceTypeReplace)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => {
                Some(Self::ChessRogueMiracleSourceTypeTrade)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET" => {
                Some(Self::ChessRogueMiracleSourceTypeGet)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueMiracleSourceTypeShop)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueMiracleSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueMiracleSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Anehjmafblj {
    ChessRogueUpdateLevelStatusByNone = 0,
    ChessRogueUpdateLevelStatusByDialog = 1,
}
impl Anehjmafblj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueUpdateLevelStatusByNone => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE"
            }
            Self::ChessRogueUpdateLevelStatusByDialog => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE" => {
                Some(Self::ChessRogueUpdateLevelStatusByNone)
            }
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG" => {
                Some(Self::ChessRogueUpdateLevelStatusByDialog)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fapfdnfccih {
    ChessRogueCellUpdateReasonNone = 0,
    ChessRogueCellUpdateReasonModifier = 1,
}
impl Fapfdnfccih {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueCellUpdateReasonNone => "CHESS_ROGUE_CELL_UPDATE_REASON_NONE",
            Self::ChessRogueCellUpdateReasonModifier => {
                "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_UPDATE_REASON_NONE" => {
                Some(Self::ChessRogueCellUpdateReasonNone)
            }
            "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER" => {
                Some(Self::ChessRogueCellUpdateReasonModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bnmgdbfhfhb {
    ChessRogueAeonTypeNone = 0,
    ChessRogueAeonTypeKnight = 1,
    ChessRogueAeonTypeMemory = 2,
    ChessRogueAeonTypeWarlock = 3,
    ChessRogueAeonTypePriest = 4,
    ChessRogueAeonTypeRogue = 5,
    ChessRogueAeonTypeWarrior = 6,
    ChessRogueAeonTypeHappy = 7,
    ChessRogueAeonTypeBreed = 8,
}
impl Bnmgdbfhfhb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueAeonTypeNone => "CHESS_ROGUE_AEON_TYPE_NONE",
            Self::ChessRogueAeonTypeKnight => "CHESS_ROGUE_AEON_TYPE_KNIGHT",
            Self::ChessRogueAeonTypeMemory => "CHESS_ROGUE_AEON_TYPE_MEMORY",
            Self::ChessRogueAeonTypeWarlock => "CHESS_ROGUE_AEON_TYPE_WARLOCK",
            Self::ChessRogueAeonTypePriest => "CHESS_ROGUE_AEON_TYPE_PRIEST",
            Self::ChessRogueAeonTypeRogue => "CHESS_ROGUE_AEON_TYPE_ROGUE",
            Self::ChessRogueAeonTypeWarrior => "CHESS_ROGUE_AEON_TYPE_WARRIOR",
            Self::ChessRogueAeonTypeHappy => "CHESS_ROGUE_AEON_TYPE_HAPPY",
            Self::ChessRogueAeonTypeBreed => "CHESS_ROGUE_AEON_TYPE_BREED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_AEON_TYPE_NONE" => Some(Self::ChessRogueAeonTypeNone),
            "CHESS_ROGUE_AEON_TYPE_KNIGHT" => Some(Self::ChessRogueAeonTypeKnight),
            "CHESS_ROGUE_AEON_TYPE_MEMORY" => Some(Self::ChessRogueAeonTypeMemory),
            "CHESS_ROGUE_AEON_TYPE_WARLOCK" => Some(Self::ChessRogueAeonTypeWarlock),
            "CHESS_ROGUE_AEON_TYPE_PRIEST" => Some(Self::ChessRogueAeonTypePriest),
            "CHESS_ROGUE_AEON_TYPE_ROGUE" => Some(Self::ChessRogueAeonTypeRogue),
            "CHESS_ROGUE_AEON_TYPE_WARRIOR" => Some(Self::ChessRogueAeonTypeWarrior),
            "CHESS_ROGUE_AEON_TYPE_HAPPY" => Some(Self::ChessRogueAeonTypeHappy),
            "CHESS_ROGUE_AEON_TYPE_BREED" => Some(Self::ChessRogueAeonTypeBreed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mljebnbgolj {
    ChessRogueDiceSourceTypeNone = 0,
    ChessRogueDiceSourceTypeNormal = 1,
    ChessRogueDiceSourceTypeRepeat = 2,
    ChessRogueDiceSourceTypeCheat = 3,
}
impl Mljebnbgolj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceSourceTypeNone => "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE",
            Self::ChessRogueDiceSourceTypeNormal => "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL",
            Self::ChessRogueDiceSourceTypeRepeat => "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT",
            Self::ChessRogueDiceSourceTypeCheat => "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueDiceSourceTypeNone)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL" => {
                Some(Self::ChessRogueDiceSourceTypeNormal)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT" => {
                Some(Self::ChessRogueDiceSourceTypeRepeat)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT" => {
                Some(Self::ChessRogueDiceSourceTypeCheat)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mihbdjcmcbg {
    ChessRogueNousMainStoryStatusNone = 0,
    ChessRogueNousMainStoryStatusUnlock = 1,
    ChessRogueNousMainStoryStatusFinish = 2,
    ChessRogueNousMainStoryStatusCanTrigger = 3,
}
impl Mihbdjcmcbg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueNousMainStoryStatusNone => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE"
            }
            Self::ChessRogueNousMainStoryStatusUnlock => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK"
            }
            Self::ChessRogueNousMainStoryStatusFinish => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH"
            }
            Self::ChessRogueNousMainStoryStatusCanTrigger => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE" => {
                Some(Self::ChessRogueNousMainStoryStatusNone)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK" => {
                Some(Self::ChessRogueNousMainStoryStatusUnlock)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH" => {
                Some(Self::ChessRogueNousMainStoryStatusFinish)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER" => {
                Some(Self::ChessRogueNousMainStoryStatusCanTrigger)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChessRogueNousDicePhase {
    None = 0,
    PhaseOne = 1,
    PhaseTwo = 2,
}
impl ChessRogueNousDicePhase {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::PhaseOne => "PHASE_ONE",
            Self::PhaseTwo => "PHASE_TWO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "PHASE_ONE" => Some(Self::PhaseOne),
            "PHASE_TWO" => Some(Self::PhaseTwo),
            _ => None,
        }
    }
}
/// HGKAAJOOOCG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdClockParkType {
    None = 0,
    CmdClockParkGetOngoingScriptInfoScRsp = 7246,
    CmdClockParkStartScriptCsReq = 7209,
    CmdClockParkBattleEndScNotify = 7204,
    CmdClockParkUnlockTalentScRsp = 7249,
    CmdClockParkUnlockTalentCsReq = 7215,
    CmdClockParkQuitScriptScRsp = 7248,
    CmdClockParkUseBuffCsReq = 7211,
    CmdClockParkHandleWaitOperationScRsp = 7228,
    CmdClockParkStartScriptScRsp = 7243,
    CmdClockParkGetInfoScRsp = 7250,
    CmdClockParkFinishScriptScNotify = 7235,
    CmdClockParkGetInfoCsReq = 7212,
    CmdClockParkUseBuffScRsp = 7206,
    CmdClockParkGetOngoingScriptInfoCsReq = 7247,
    CmdClockParkQuitScriptCsReq = 7210,
    CmdClockParkHandleWaitOperationCsReq = 7245,
}
impl CmdClockParkType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdClockParkTypeNone",
            Self::CmdClockParkGetOngoingScriptInfoScRsp => {
                "CmdClockParkGetOngoingScriptInfoScRsp"
            }
            Self::CmdClockParkStartScriptCsReq => "CmdClockParkStartScriptCsReq",
            Self::CmdClockParkBattleEndScNotify => "CmdClockParkBattleEndScNotify",
            Self::CmdClockParkUnlockTalentScRsp => "CmdClockParkUnlockTalentScRsp",
            Self::CmdClockParkUnlockTalentCsReq => "CmdClockParkUnlockTalentCsReq",
            Self::CmdClockParkQuitScriptScRsp => "CmdClockParkQuitScriptScRsp",
            Self::CmdClockParkUseBuffCsReq => "CmdClockParkUseBuffCsReq",
            Self::CmdClockParkHandleWaitOperationScRsp => {
                "CmdClockParkHandleWaitOperationScRsp"
            }
            Self::CmdClockParkStartScriptScRsp => "CmdClockParkStartScriptScRsp",
            Self::CmdClockParkGetInfoScRsp => "CmdClockParkGetInfoScRsp",
            Self::CmdClockParkFinishScriptScNotify => "CmdClockParkFinishScriptScNotify",
            Self::CmdClockParkGetInfoCsReq => "CmdClockParkGetInfoCsReq",
            Self::CmdClockParkUseBuffScRsp => "CmdClockParkUseBuffScRsp",
            Self::CmdClockParkGetOngoingScriptInfoCsReq => {
                "CmdClockParkGetOngoingScriptInfoCsReq"
            }
            Self::CmdClockParkQuitScriptCsReq => "CmdClockParkQuitScriptCsReq",
            Self::CmdClockParkHandleWaitOperationCsReq => {
                "CmdClockParkHandleWaitOperationCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdClockParkTypeNone" => Some(Self::None),
            "CmdClockParkGetOngoingScriptInfoScRsp" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoScRsp)
            }
            "CmdClockParkStartScriptCsReq" => Some(Self::CmdClockParkStartScriptCsReq),
            "CmdClockParkBattleEndScNotify" => Some(Self::CmdClockParkBattleEndScNotify),
            "CmdClockParkUnlockTalentScRsp" => Some(Self::CmdClockParkUnlockTalentScRsp),
            "CmdClockParkUnlockTalentCsReq" => Some(Self::CmdClockParkUnlockTalentCsReq),
            "CmdClockParkQuitScriptScRsp" => Some(Self::CmdClockParkQuitScriptScRsp),
            "CmdClockParkUseBuffCsReq" => Some(Self::CmdClockParkUseBuffCsReq),
            "CmdClockParkHandleWaitOperationScRsp" => {
                Some(Self::CmdClockParkHandleWaitOperationScRsp)
            }
            "CmdClockParkStartScriptScRsp" => Some(Self::CmdClockParkStartScriptScRsp),
            "CmdClockParkGetInfoScRsp" => Some(Self::CmdClockParkGetInfoScRsp),
            "CmdClockParkFinishScriptScNotify" => {
                Some(Self::CmdClockParkFinishScriptScNotify)
            }
            "CmdClockParkGetInfoCsReq" => Some(Self::CmdClockParkGetInfoCsReq),
            "CmdClockParkUseBuffScRsp" => Some(Self::CmdClockParkUseBuffScRsp),
            "CmdClockParkGetOngoingScriptInfoCsReq" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoCsReq)
            }
            "CmdClockParkQuitScriptCsReq" => Some(Self::CmdClockParkQuitScriptCsReq),
            "CmdClockParkHandleWaitOperationCsReq" => {
                Some(Self::CmdClockParkHandleWaitOperationCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClockParkPlayStatus {
    ClockParkPlayNone = 0,
    ClockParkPlayNormalDeath = 1,
    ClockParkPlayNormalPass = 2,
    ClockParkPlayFinishScript = 5,
}
impl ClockParkPlayStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ClockParkPlayNone => "CLOCK_PARK_PLAY_NONE",
            Self::ClockParkPlayNormalDeath => "CLOCK_PARK_PLAY_NORMAL_DEATH",
            Self::ClockParkPlayNormalPass => "CLOCK_PARK_PLAY_NORMAL_PASS",
            Self::ClockParkPlayFinishScript => "CLOCK_PARK_PLAY_FINISH_SCRIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLOCK_PARK_PLAY_NONE" => Some(Self::ClockParkPlayNone),
            "CLOCK_PARK_PLAY_NORMAL_DEATH" => Some(Self::ClockParkPlayNormalDeath),
            "CLOCK_PARK_PLAY_NORMAL_PASS" => Some(Self::ClockParkPlayNormalPass),
            "CLOCK_PARK_PLAY_FINISH_SCRIPT" => Some(Self::ClockParkPlayFinishScript),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MissionStatus {
    MissionNone = 0,
    MissionDoing = 1,
    MissionFinish = 2,
    MissionPrepared = 3,
}
impl MissionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MissionNone => "MISSION_NONE",
            Self::MissionDoing => "MISSION_DOING",
            Self::MissionFinish => "MISSION_FINISH",
            Self::MissionPrepared => "MISSION_PREPARED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_NONE" => Some(Self::MissionNone),
            "MISSION_DOING" => Some(Self::MissionDoing),
            "MISSION_FINISH" => Some(Self::MissionFinish),
            "MISSION_PREPARED" => Some(Self::MissionPrepared),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageSectionStatus {
    MessageSectionNone = 0,
    MessageSectionDoing = 1,
    MessageSectionFinish = 2,
    MessageSectionFrozen = 3,
}
impl MessageSectionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MessageSectionNone => "MESSAGE_SECTION_NONE",
            Self::MessageSectionDoing => "MESSAGE_SECTION_DOING",
            Self::MessageSectionFinish => "MESSAGE_SECTION_FINISH",
            Self::MessageSectionFrozen => "MESSAGE_SECTION_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_SECTION_NONE" => Some(Self::MessageSectionNone),
            "MESSAGE_SECTION_DOING" => Some(Self::MessageSectionDoing),
            "MESSAGE_SECTION_FINISH" => Some(Self::MessageSectionFinish),
            "MESSAGE_SECTION_FROZEN" => Some(Self::MessageSectionFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageGroupStatus {
    MessageGroupNone = 0,
    MessageGroupDoing = 1,
    MessageGroupFinish = 2,
    MessageGroupFrozen = 3,
}
impl MessageGroupStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MessageGroupNone => "MESSAGE_GROUP_NONE",
            Self::MessageGroupDoing => "MESSAGE_GROUP_DOING",
            Self::MessageGroupFinish => "MESSAGE_GROUP_FINISH",
            Self::MessageGroupFrozen => "MESSAGE_GROUP_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_GROUP_NONE" => Some(Self::MessageGroupNone),
            "MESSAGE_GROUP_DOING" => Some(Self::MessageGroupDoing),
            "MESSAGE_GROUP_FINISH" => Some(Self::MessageGroupFinish),
            "MESSAGE_GROUP_FROZEN" => Some(Self::MessageGroupFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleRecordType {
    BattleRecordNone = 0,
    BattleRecordChallenge = 1,
    BattleRecordRogue = 2,
}
impl BattleRecordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleRecordNone => "BATTLE_RECORD_NONE",
            Self::BattleRecordChallenge => "BATTLE_RECORD_CHALLENGE",
            Self::BattleRecordRogue => "BATTLE_RECORD_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_RECORD_NONE" => Some(Self::BattleRecordNone),
            "BATTLE_RECORD_CHALLENGE" => Some(Self::BattleRecordChallenge),
            "BATTLE_RECORD_ROGUE" => Some(Self::BattleRecordRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RebattleType {
    None = 0,
    RebattleMidway = 1,
    RebattleLose = 2,
    RebattleMidwayLineup = 3,
    RebattleLoseLineup = 4,
    QuitMidway = 5,
    QuitLose = 6,
}
impl RebattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "REBATTLE_TYPE_NONE",
            Self::RebattleMidway => "REBATTLE_TYPE_REBATTLE_MIDWAY",
            Self::RebattleLose => "REBATTLE_TYPE_REBATTLE_LOSE",
            Self::RebattleMidwayLineup => "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP",
            Self::RebattleLoseLineup => "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP",
            Self::QuitMidway => "REBATTLE_TYPE_QUIT_MIDWAY",
            Self::QuitLose => "REBATTLE_TYPE_QUIT_LOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REBATTLE_TYPE_NONE" => Some(Self::None),
            "REBATTLE_TYPE_REBATTLE_MIDWAY" => Some(Self::RebattleMidway),
            "REBATTLE_TYPE_REBATTLE_LOSE" => Some(Self::RebattleLose),
            "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP" => Some(Self::RebattleMidwayLineup),
            "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP" => Some(Self::RebattleLoseLineup),
            "REBATTLE_TYPE_QUIT_MIDWAY" => Some(Self::QuitMidway),
            "REBATTLE_TYPE_QUIT_LOSE" => Some(Self::QuitLose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentPackageStatus {
    None = 0,
    Init = 1,
    Doing = 2,
    Finished = 3,
    Release = 4,
}
impl ContentPackageStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ContentPackageStatus_None",
            Self::Init => "ContentPackageStatus_Init",
            Self::Doing => "ContentPackageStatus_Doing",
            Self::Finished => "ContentPackageStatus_Finished",
            Self::Release => "ContentPackageStatus_Release",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ContentPackageStatus_None" => Some(Self::None),
            "ContentPackageStatus_Init" => Some(Self::Init),
            "ContentPackageStatus_Doing" => Some(Self::Doing),
            "ContentPackageStatus_Finished" => Some(Self::Finished),
            "ContentPackageStatus_Release" => Some(Self::Release),
            _ => None,
        }
    }
}
/// KHDDLFHACDF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdContentPackageType {
    None = 0,
    CmdContentPackageGetDataScRsp = 7550,
    CmdContentPackageUnlockScRsp = 7515,
    CmdContentPackageGetDataCsReq = 7512,
    CmdContentPackageSyncDataScNotify = 7530,
    CmdContentPackageUnlockCsReq = 7523,
    CmdContentPackageTransferScNotify = 7549,
}
impl CmdContentPackageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdContentPackageTypeNone",
            Self::CmdContentPackageGetDataScRsp => "CmdContentPackageGetDataScRsp",
            Self::CmdContentPackageUnlockScRsp => "CmdContentPackageUnlockScRsp",
            Self::CmdContentPackageGetDataCsReq => "CmdContentPackageGetDataCsReq",
            Self::CmdContentPackageSyncDataScNotify => {
                "CmdContentPackageSyncDataScNotify"
            }
            Self::CmdContentPackageUnlockCsReq => "CmdContentPackageUnlockCsReq",
            Self::CmdContentPackageTransferScNotify => {
                "CmdContentPackageTransferScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdContentPackageTypeNone" => Some(Self::None),
            "CmdContentPackageGetDataScRsp" => Some(Self::CmdContentPackageGetDataScRsp),
            "CmdContentPackageUnlockScRsp" => Some(Self::CmdContentPackageUnlockScRsp),
            "CmdContentPackageGetDataCsReq" => Some(Self::CmdContentPackageGetDataCsReq),
            "CmdContentPackageSyncDataScNotify" => {
                Some(Self::CmdContentPackageSyncDataScNotify)
            }
            "CmdContentPackageUnlockCsReq" => Some(Self::CmdContentPackageUnlockCsReq),
            "CmdContentPackageTransferScNotify" => {
                Some(Self::CmdContentPackageTransferScNotify)
            }
            _ => None,
        }
    }
}
/// KBKPPDINMFH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdDailyActiveType {
    None = 0,
    CmdTakeApRewardCsReq = 3336,
    CmdDailyActiveInfoNotify = 3367,
    CmdTakeApRewardScRsp = 3395,
    CmdTakeAllApRewardScRsp = 3352,
    CmdTakeAllApRewardCsReq = 3328,
    CmdGetDailyActiveInfoCsReq = 3384,
    CmdGetDailyActiveInfoScRsp = 3327,
}
impl CmdDailyActiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdDailyActiveTypeNone",
            Self::CmdTakeApRewardCsReq => "CmdTakeApRewardCsReq",
            Self::CmdDailyActiveInfoNotify => "CmdDailyActiveInfoNotify",
            Self::CmdTakeApRewardScRsp => "CmdTakeApRewardScRsp",
            Self::CmdTakeAllApRewardScRsp => "CmdTakeAllApRewardScRsp",
            Self::CmdTakeAllApRewardCsReq => "CmdTakeAllApRewardCsReq",
            Self::CmdGetDailyActiveInfoCsReq => "CmdGetDailyActiveInfoCsReq",
            Self::CmdGetDailyActiveInfoScRsp => "CmdGetDailyActiveInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDailyActiveTypeNone" => Some(Self::None),
            "CmdTakeApRewardCsReq" => Some(Self::CmdTakeApRewardCsReq),
            "CmdDailyActiveInfoNotify" => Some(Self::CmdDailyActiveInfoNotify),
            "CmdTakeApRewardScRsp" => Some(Self::CmdTakeApRewardScRsp),
            "CmdTakeAllApRewardScRsp" => Some(Self::CmdTakeAllApRewardScRsp),
            "CmdTakeAllApRewardCsReq" => Some(Self::CmdTakeAllApRewardCsReq),
            "CmdGetDailyActiveInfoCsReq" => Some(Self::CmdGetDailyActiveInfoCsReq),
            "CmdGetDailyActiveInfoScRsp" => Some(Self::CmdGetDailyActiveInfoScRsp),
            _ => None,
        }
    }
}
/// DCCJLNEOHGJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdDrinkMakerType {
    None = 0,
    CmdEndDrinkMakerSequenceCsReq = 6997,
    CmdEndDrinkMakerSequenceScRsp = 6986,
    CmdDrinkMakerChallengeScRsp = 6992,
    CmdMakeMissionDrinkCsReq = 6985,
    CmdDrinkMakerChallengeCsReq = 6988,
    CmdMakeDrinkCsReq = 6987,
    CmdDrinkMakerUpdateTipsNotify = 6996,
    CmdGetDrinkMakerDataScRsp = 6995,
    CmdDrinkMakerDayEndScNotify = 6982,
    CmdGetDrinkMakerDataCsReq = 7000,
    CmdMakeDrinkScRsp = 6983,
    CmdMakeMissionDrinkScRsp = 6990,
}
impl CmdDrinkMakerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdDrinkMakerTypeNone",
            Self::CmdEndDrinkMakerSequenceCsReq => "CmdEndDrinkMakerSequenceCsReq",
            Self::CmdEndDrinkMakerSequenceScRsp => "CmdEndDrinkMakerSequenceScRsp",
            Self::CmdDrinkMakerChallengeScRsp => "CmdDrinkMakerChallengeScRsp",
            Self::CmdMakeMissionDrinkCsReq => "CmdMakeMissionDrinkCsReq",
            Self::CmdDrinkMakerChallengeCsReq => "CmdDrinkMakerChallengeCsReq",
            Self::CmdMakeDrinkCsReq => "CmdMakeDrinkCsReq",
            Self::CmdDrinkMakerUpdateTipsNotify => "CmdDrinkMakerUpdateTipsNotify",
            Self::CmdGetDrinkMakerDataScRsp => "CmdGetDrinkMakerDataScRsp",
            Self::CmdDrinkMakerDayEndScNotify => "CmdDrinkMakerDayEndScNotify",
            Self::CmdGetDrinkMakerDataCsReq => "CmdGetDrinkMakerDataCsReq",
            Self::CmdMakeDrinkScRsp => "CmdMakeDrinkScRsp",
            Self::CmdMakeMissionDrinkScRsp => "CmdMakeMissionDrinkScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDrinkMakerTypeNone" => Some(Self::None),
            "CmdEndDrinkMakerSequenceCsReq" => Some(Self::CmdEndDrinkMakerSequenceCsReq),
            "CmdEndDrinkMakerSequenceScRsp" => Some(Self::CmdEndDrinkMakerSequenceScRsp),
            "CmdDrinkMakerChallengeScRsp" => Some(Self::CmdDrinkMakerChallengeScRsp),
            "CmdMakeMissionDrinkCsReq" => Some(Self::CmdMakeMissionDrinkCsReq),
            "CmdDrinkMakerChallengeCsReq" => Some(Self::CmdDrinkMakerChallengeCsReq),
            "CmdMakeDrinkCsReq" => Some(Self::CmdMakeDrinkCsReq),
            "CmdDrinkMakerUpdateTipsNotify" => Some(Self::CmdDrinkMakerUpdateTipsNotify),
            "CmdGetDrinkMakerDataScRsp" => Some(Self::CmdGetDrinkMakerDataScRsp),
            "CmdDrinkMakerDayEndScNotify" => Some(Self::CmdDrinkMakerDayEndScNotify),
            "CmdGetDrinkMakerDataCsReq" => Some(Self::CmdGetDrinkMakerDataCsReq),
            "CmdMakeDrinkScRsp" => Some(Self::CmdMakeDrinkScRsp),
            "CmdMakeMissionDrinkScRsp" => Some(Self::CmdMakeMissionDrinkScRsp),
            _ => None,
        }
    }
}
/// DNKDKMABMLF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdEraFlipperType {
    None = 0,
    CmdEnterEraFlipperRegionCsReq = 6559,
    CmdEraFlipperDataChangeScNotify = 6597,
    CmdResetEraFlipperDataCsReq = 6565,
    CmdChangeEraFlipperDataScRsp = 6573,
    CmdResetEraFlipperDataScRsp = 6599,
    CmdChangeEraFlipperDataCsReq = 6580,
    CmdGetEraFlipperDataCsReq = 6562,
    CmdGetEraFlipperDataScRsp = 6600,
    CmdEnterEraFlipperRegionScRsp = 6593,
}
impl CmdEraFlipperType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdEraFlipperTypeNone",
            Self::CmdEnterEraFlipperRegionCsReq => "CmdEnterEraFlipperRegionCsReq",
            Self::CmdEraFlipperDataChangeScNotify => "CmdEraFlipperDataChangeScNotify",
            Self::CmdResetEraFlipperDataCsReq => "CmdResetEraFlipperDataCsReq",
            Self::CmdChangeEraFlipperDataScRsp => "CmdChangeEraFlipperDataScRsp",
            Self::CmdResetEraFlipperDataScRsp => "CmdResetEraFlipperDataScRsp",
            Self::CmdChangeEraFlipperDataCsReq => "CmdChangeEraFlipperDataCsReq",
            Self::CmdGetEraFlipperDataCsReq => "CmdGetEraFlipperDataCsReq",
            Self::CmdGetEraFlipperDataScRsp => "CmdGetEraFlipperDataScRsp",
            Self::CmdEnterEraFlipperRegionScRsp => "CmdEnterEraFlipperRegionScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdEraFlipperTypeNone" => Some(Self::None),
            "CmdEnterEraFlipperRegionCsReq" => Some(Self::CmdEnterEraFlipperRegionCsReq),
            "CmdEraFlipperDataChangeScNotify" => {
                Some(Self::CmdEraFlipperDataChangeScNotify)
            }
            "CmdResetEraFlipperDataCsReq" => Some(Self::CmdResetEraFlipperDataCsReq),
            "CmdChangeEraFlipperDataScRsp" => Some(Self::CmdChangeEraFlipperDataScRsp),
            "CmdResetEraFlipperDataScRsp" => Some(Self::CmdResetEraFlipperDataScRsp),
            "CmdChangeEraFlipperDataCsReq" => Some(Self::CmdChangeEraFlipperDataCsReq),
            "CmdGetEraFlipperDataCsReq" => Some(Self::CmdGetEraFlipperDataCsReq),
            "CmdGetEraFlipperDataScRsp" => Some(Self::CmdGetEraFlipperDataScRsp),
            "CmdEnterEraFlipperRegionScRsp" => Some(Self::CmdEnterEraFlipperRegionScRsp),
            _ => None,
        }
    }
}
/// GFFCFDJJHND
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdEvolveBuildType {
    CmdEvolveBuildNone = 0,
    CmdEvolveBuildReRandomStageCsReq = 7128,
    CmdEvolveBuildStartStageScRsp = 7149,
    CmdEvolveBuildShopAbilityDownScRsp = 7111,
    CmdEvolveBuildShopAbilityDownCsReq = 7140,
    CmdEvolveBuildStartLevelScRsp = 7123,
    CmdEvolveBuildShopAbilityUpCsReq = 7117,
    CmdEvolveBuildStartLevelCsReq = 7130,
    CmdEvolveBuildFinishScNotify = 7145,
    CmdEvolveBuildQueryInfoCsReq = 7112,
    CmdEvolveBuildCoinNotify = 7114,
    CmdEvolveBuildTakeExpRewardScRsp = 7135,
    CmdEvolveBuildLeaveCsReq = 7147,
    CmdEvolveBuildStartStageCsReq = 7115,
    CmdEvolveBuildGiveupCsReq = 7109,
    CmdEvolveBuildShopAbilityUpScRsp = 7104,
    CmdEvolveBuildTakeExpRewardCsReq = 7106,
    CmdEvolveBuildReRandomStageScRsp = 7110,
    CmdEvolveBuildUnlockInfoNotify = 7142,
    CmdEvolveBuildShopAbilityResetCsReq = 7118,
    CmdEvolveBuildGiveupScRsp = 7143,
    CmdEvolveBuildQueryInfoScRsp = 7150,
    CmdEvolveBuildLeaveScRsp = 7146,
    CmdEvolveBuildShopAbilityResetScRsp = 7122,
}
impl CmdEvolveBuildType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CmdEvolveBuildNone => "CmdEvolveBuildNone",
            Self::CmdEvolveBuildReRandomStageCsReq => "CmdEvolveBuildReRandomStageCsReq",
            Self::CmdEvolveBuildStartStageScRsp => "CmdEvolveBuildStartStageScRsp",
            Self::CmdEvolveBuildShopAbilityDownScRsp => {
                "CmdEvolveBuildShopAbilityDownScRsp"
            }
            Self::CmdEvolveBuildShopAbilityDownCsReq => {
                "CmdEvolveBuildShopAbilityDownCsReq"
            }
            Self::CmdEvolveBuildStartLevelScRsp => "CmdEvolveBuildStartLevelScRsp",
            Self::CmdEvolveBuildShopAbilityUpCsReq => "CmdEvolveBuildShopAbilityUpCsReq",
            Self::CmdEvolveBuildStartLevelCsReq => "CmdEvolveBuildStartLevelCsReq",
            Self::CmdEvolveBuildFinishScNotify => "CmdEvolveBuildFinishScNotify",
            Self::CmdEvolveBuildQueryInfoCsReq => "CmdEvolveBuildQueryInfoCsReq",
            Self::CmdEvolveBuildCoinNotify => "CmdEvolveBuildCoinNotify",
            Self::CmdEvolveBuildTakeExpRewardScRsp => "CmdEvolveBuildTakeExpRewardScRsp",
            Self::CmdEvolveBuildLeaveCsReq => "CmdEvolveBuildLeaveCsReq",
            Self::CmdEvolveBuildStartStageCsReq => "CmdEvolveBuildStartStageCsReq",
            Self::CmdEvolveBuildGiveupCsReq => "CmdEvolveBuildGiveupCsReq",
            Self::CmdEvolveBuildShopAbilityUpScRsp => "CmdEvolveBuildShopAbilityUpScRsp",
            Self::CmdEvolveBuildTakeExpRewardCsReq => "CmdEvolveBuildTakeExpRewardCsReq",
            Self::CmdEvolveBuildReRandomStageScRsp => "CmdEvolveBuildReRandomStageScRsp",
            Self::CmdEvolveBuildUnlockInfoNotify => "CmdEvolveBuildUnlockInfoNotify",
            Self::CmdEvolveBuildShopAbilityResetCsReq => {
                "CmdEvolveBuildShopAbilityResetCsReq"
            }
            Self::CmdEvolveBuildGiveupScRsp => "CmdEvolveBuildGiveupScRsp",
            Self::CmdEvolveBuildQueryInfoScRsp => "CmdEvolveBuildQueryInfoScRsp",
            Self::CmdEvolveBuildLeaveScRsp => "CmdEvolveBuildLeaveScRsp",
            Self::CmdEvolveBuildShopAbilityResetScRsp => {
                "CmdEvolveBuildShopAbilityResetScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdEvolveBuildNone" => Some(Self::CmdEvolveBuildNone),
            "CmdEvolveBuildReRandomStageCsReq" => {
                Some(Self::CmdEvolveBuildReRandomStageCsReq)
            }
            "CmdEvolveBuildStartStageScRsp" => Some(Self::CmdEvolveBuildStartStageScRsp),
            "CmdEvolveBuildShopAbilityDownScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityDownScRsp)
            }
            "CmdEvolveBuildShopAbilityDownCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityDownCsReq)
            }
            "CmdEvolveBuildStartLevelScRsp" => Some(Self::CmdEvolveBuildStartLevelScRsp),
            "CmdEvolveBuildShopAbilityUpCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityUpCsReq)
            }
            "CmdEvolveBuildStartLevelCsReq" => Some(Self::CmdEvolveBuildStartLevelCsReq),
            "CmdEvolveBuildFinishScNotify" => Some(Self::CmdEvolveBuildFinishScNotify),
            "CmdEvolveBuildQueryInfoCsReq" => Some(Self::CmdEvolveBuildQueryInfoCsReq),
            "CmdEvolveBuildCoinNotify" => Some(Self::CmdEvolveBuildCoinNotify),
            "CmdEvolveBuildTakeExpRewardScRsp" => {
                Some(Self::CmdEvolveBuildTakeExpRewardScRsp)
            }
            "CmdEvolveBuildLeaveCsReq" => Some(Self::CmdEvolveBuildLeaveCsReq),
            "CmdEvolveBuildStartStageCsReq" => Some(Self::CmdEvolveBuildStartStageCsReq),
            "CmdEvolveBuildGiveupCsReq" => Some(Self::CmdEvolveBuildGiveupCsReq),
            "CmdEvolveBuildShopAbilityUpScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityUpScRsp)
            }
            "CmdEvolveBuildTakeExpRewardCsReq" => {
                Some(Self::CmdEvolveBuildTakeExpRewardCsReq)
            }
            "CmdEvolveBuildReRandomStageScRsp" => {
                Some(Self::CmdEvolveBuildReRandomStageScRsp)
            }
            "CmdEvolveBuildUnlockInfoNotify" => {
                Some(Self::CmdEvolveBuildUnlockInfoNotify)
            }
            "CmdEvolveBuildShopAbilityResetCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityResetCsReq)
            }
            "CmdEvolveBuildGiveupScRsp" => Some(Self::CmdEvolveBuildGiveupScRsp),
            "CmdEvolveBuildQueryInfoScRsp" => Some(Self::CmdEvolveBuildQueryInfoScRsp),
            "CmdEvolveBuildLeaveScRsp" => Some(Self::CmdEvolveBuildLeaveScRsp),
            "CmdEvolveBuildShopAbilityResetScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityResetScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Clchcldhima {
    EvolvePeriodNone = 0,
    EvolvePeriodFirst = 1,
    EvolvePeriodSecond = 2,
    EvolvePeriodThird = 3,
    EvolvePeriodExtra = 4,
}
impl Clchcldhima {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvolvePeriodNone => "EVOLVE_PERIOD_NONE",
            Self::EvolvePeriodFirst => "EVOLVE_PERIOD_FIRST",
            Self::EvolvePeriodSecond => "EVOLVE_PERIOD_SECOND",
            Self::EvolvePeriodThird => "EVOLVE_PERIOD_THIRD",
            Self::EvolvePeriodExtra => "EVOLVE_PERIOD_EXTRA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_PERIOD_NONE" => Some(Self::EvolvePeriodNone),
            "EVOLVE_PERIOD_FIRST" => Some(Self::EvolvePeriodFirst),
            "EVOLVE_PERIOD_SECOND" => Some(Self::EvolvePeriodSecond),
            "EVOLVE_PERIOD_THIRD" => Some(Self::EvolvePeriodThird),
            "EVOLVE_PERIOD_EXTRA" => Some(Self::EvolvePeriodExtra),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ljgiadhjlhp {
    EvolveBattleResultNone = 0,
    EvolveBattleResultWin = 1,
    EvolveBattleResultAllAvatarDead = 2,
    EvolveBattleResultNoDeadLine = 3,
    EvolveBattleResultQuit = 4,
}
impl Ljgiadhjlhp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvolveBattleResultNone => "EVOLVE_BATTLE_RESULT_NONE",
            Self::EvolveBattleResultWin => "EVOLVE_BATTLE_RESULT_WIN",
            Self::EvolveBattleResultAllAvatarDead => {
                "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD"
            }
            Self::EvolveBattleResultNoDeadLine => "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE",
            Self::EvolveBattleResultQuit => "EVOLVE_BATTLE_RESULT_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_BATTLE_RESULT_NONE" => Some(Self::EvolveBattleResultNone),
            "EVOLVE_BATTLE_RESULT_WIN" => Some(Self::EvolveBattleResultWin),
            "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD" => {
                Some(Self::EvolveBattleResultAllAvatarDead)
            }
            "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE" => {
                Some(Self::EvolveBattleResultNoDeadLine)
            }
            "EVOLVE_BATTLE_RESULT_QUIT" => Some(Self::EvolveBattleResultQuit),
            _ => None,
        }
    }
}
/// IDDMMKCEHPP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdExpeditionType {
    None = 0,
    CmdAcceptMultipleExpeditionCsReq = 2505,
    CmdAcceptActivityExpeditionScRsp = 2534,
    CmdCancelActivityExpeditionScRsp = 2546,
    CmdTakeMultipleExpeditionRewardCsReq = 2519,
    CmdCancelExpeditionScRsp = 2528,
    CmdExpeditionDataChangeScNotify = 2524,
    CmdTakeMultipleActivityExpeditionRewardCsReq = 2507,
    CmdTakeMultipleActivityExpeditionRewardScRsp = 2553,
    CmdAcceptActivityExpeditionCsReq = 2593,
    CmdGetExpeditionDataScRsp = 2595,
    CmdAcceptMultipleExpeditionScRsp = 2575,
    CmdTakeExpeditionRewardScRsp = 2574,
    CmdTakeActivityExpeditionRewardCsReq = 2525,
    CmdGetExpeditionDataCsReq = 2536,
    CmdTakeExpeditionRewardCsReq = 2552,
    CmdTakeActivityExpeditionRewardScRsp = 2596,
    CmdCancelActivityExpeditionCsReq = 2543,
    CmdTakeMultipleExpeditionRewardScRsp = 2526,
    CmdAcceptExpeditionScRsp = 2527,
    CmdCancelExpeditionCsReq = 2567,
    CmdAcceptExpeditionCsReq = 2584,
}
impl CmdExpeditionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdExpeditionTypeNone",
            Self::CmdAcceptMultipleExpeditionCsReq => "CmdAcceptMultipleExpeditionCsReq",
            Self::CmdAcceptActivityExpeditionScRsp => "CmdAcceptActivityExpeditionScRsp",
            Self::CmdCancelActivityExpeditionScRsp => "CmdCancelActivityExpeditionScRsp",
            Self::CmdTakeMultipleExpeditionRewardCsReq => {
                "CmdTakeMultipleExpeditionRewardCsReq"
            }
            Self::CmdCancelExpeditionScRsp => "CmdCancelExpeditionScRsp",
            Self::CmdExpeditionDataChangeScNotify => "CmdExpeditionDataChangeScNotify",
            Self::CmdTakeMultipleActivityExpeditionRewardCsReq => {
                "CmdTakeMultipleActivityExpeditionRewardCsReq"
            }
            Self::CmdTakeMultipleActivityExpeditionRewardScRsp => {
                "CmdTakeMultipleActivityExpeditionRewardScRsp"
            }
            Self::CmdAcceptActivityExpeditionCsReq => "CmdAcceptActivityExpeditionCsReq",
            Self::CmdGetExpeditionDataScRsp => "CmdGetExpeditionDataScRsp",
            Self::CmdAcceptMultipleExpeditionScRsp => "CmdAcceptMultipleExpeditionScRsp",
            Self::CmdTakeExpeditionRewardScRsp => "CmdTakeExpeditionRewardScRsp",
            Self::CmdTakeActivityExpeditionRewardCsReq => {
                "CmdTakeActivityExpeditionRewardCsReq"
            }
            Self::CmdGetExpeditionDataCsReq => "CmdGetExpeditionDataCsReq",
            Self::CmdTakeExpeditionRewardCsReq => "CmdTakeExpeditionRewardCsReq",
            Self::CmdTakeActivityExpeditionRewardScRsp => {
                "CmdTakeActivityExpeditionRewardScRsp"
            }
            Self::CmdCancelActivityExpeditionCsReq => "CmdCancelActivityExpeditionCsReq",
            Self::CmdTakeMultipleExpeditionRewardScRsp => {
                "CmdTakeMultipleExpeditionRewardScRsp"
            }
            Self::CmdAcceptExpeditionScRsp => "CmdAcceptExpeditionScRsp",
            Self::CmdCancelExpeditionCsReq => "CmdCancelExpeditionCsReq",
            Self::CmdAcceptExpeditionCsReq => "CmdAcceptExpeditionCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdExpeditionTypeNone" => Some(Self::None),
            "CmdAcceptMultipleExpeditionCsReq" => {
                Some(Self::CmdAcceptMultipleExpeditionCsReq)
            }
            "CmdAcceptActivityExpeditionScRsp" => {
                Some(Self::CmdAcceptActivityExpeditionScRsp)
            }
            "CmdCancelActivityExpeditionScRsp" => {
                Some(Self::CmdCancelActivityExpeditionScRsp)
            }
            "CmdTakeMultipleExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleExpeditionRewardCsReq)
            }
            "CmdCancelExpeditionScRsp" => Some(Self::CmdCancelExpeditionScRsp),
            "CmdExpeditionDataChangeScNotify" => {
                Some(Self::CmdExpeditionDataChangeScNotify)
            }
            "CmdTakeMultipleActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleActivityExpeditionRewardCsReq)
            }
            "CmdTakeMultipleActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleActivityExpeditionRewardScRsp)
            }
            "CmdAcceptActivityExpeditionCsReq" => {
                Some(Self::CmdAcceptActivityExpeditionCsReq)
            }
            "CmdGetExpeditionDataScRsp" => Some(Self::CmdGetExpeditionDataScRsp),
            "CmdAcceptMultipleExpeditionScRsp" => {
                Some(Self::CmdAcceptMultipleExpeditionScRsp)
            }
            "CmdTakeExpeditionRewardScRsp" => Some(Self::CmdTakeExpeditionRewardScRsp),
            "CmdTakeActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeActivityExpeditionRewardCsReq)
            }
            "CmdGetExpeditionDataCsReq" => Some(Self::CmdGetExpeditionDataCsReq),
            "CmdTakeExpeditionRewardCsReq" => Some(Self::CmdTakeExpeditionRewardCsReq),
            "CmdTakeActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeActivityExpeditionRewardScRsp)
            }
            "CmdCancelActivityExpeditionCsReq" => {
                Some(Self::CmdCancelActivityExpeditionCsReq)
            }
            "CmdTakeMultipleExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleExpeditionRewardScRsp)
            }
            "CmdAcceptExpeditionScRsp" => Some(Self::CmdAcceptExpeditionScRsp),
            "CmdCancelExpeditionCsReq" => Some(Self::CmdCancelExpeditionCsReq),
            "CmdAcceptExpeditionCsReq" => Some(Self::CmdAcceptExpeditionCsReq),
            _ => None,
        }
    }
}
/// PKLOFCCIGBJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFantasticStoryActivityType {
    None = 0,
    CmdFinishChapterScNotify = 4984,
    CmdEnterFantasticStoryActivityStageScRsp = 4967,
    CmdFantasticStoryActivityBattleEndScNotify = 4928,
    CmdGetFantasticStoryActivityDataScRsp = 4995,
    CmdEnterFantasticStoryActivityStageCsReq = 4927,
    CmdGetFantasticStoryActivityDataCsReq = 4936,
}
impl CmdFantasticStoryActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFantasticStoryActivityTypeNone",
            Self::CmdFinishChapterScNotify => "CmdFinishChapterScNotify",
            Self::CmdEnterFantasticStoryActivityStageScRsp => {
                "CmdEnterFantasticStoryActivityStageScRsp"
            }
            Self::CmdFantasticStoryActivityBattleEndScNotify => {
                "CmdFantasticStoryActivityBattleEndScNotify"
            }
            Self::CmdGetFantasticStoryActivityDataScRsp => {
                "CmdGetFantasticStoryActivityDataScRsp"
            }
            Self::CmdEnterFantasticStoryActivityStageCsReq => {
                "CmdEnterFantasticStoryActivityStageCsReq"
            }
            Self::CmdGetFantasticStoryActivityDataCsReq => {
                "CmdGetFantasticStoryActivityDataCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFantasticStoryActivityTypeNone" => Some(Self::None),
            "CmdFinishChapterScNotify" => Some(Self::CmdFinishChapterScNotify),
            "CmdEnterFantasticStoryActivityStageScRsp" => {
                Some(Self::CmdEnterFantasticStoryActivityStageScRsp)
            }
            "CmdFantasticStoryActivityBattleEndScNotify" => {
                Some(Self::CmdFantasticStoryActivityBattleEndScNotify)
            }
            "CmdGetFantasticStoryActivityDataScRsp" => {
                Some(Self::CmdGetFantasticStoryActivityDataScRsp)
            }
            "CmdEnterFantasticStoryActivityStageCsReq" => {
                Some(Self::CmdEnterFantasticStoryActivityStageCsReq)
            }
            "CmdGetFantasticStoryActivityDataCsReq" => {
                Some(Self::CmdGetFantasticStoryActivityDataCsReq)
            }
            _ => None,
        }
    }
}
/// HFMKNNECELL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFeverTimeActivityType {
    None = 0,
    CmdGetFeverTimeActivityDataScRsp = 7151,
    CmdFeverTimeActivityBattleEndScNotify = 7153,
    CmdEnterFeverTimeActivityStageScRsp = 7160,
    CmdEnterFeverTimeActivityStageCsReq = 7159,
    CmdGetFeverTimeActivityDataCsReq = 7158,
}
impl CmdFeverTimeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFeverTimeActivityTypeNone",
            Self::CmdGetFeverTimeActivityDataScRsp => "CmdGetFeverTimeActivityDataScRsp",
            Self::CmdFeverTimeActivityBattleEndScNotify => {
                "CmdFeverTimeActivityBattleEndScNotify"
            }
            Self::CmdEnterFeverTimeActivityStageScRsp => {
                "CmdEnterFeverTimeActivityStageScRsp"
            }
            Self::CmdEnterFeverTimeActivityStageCsReq => {
                "CmdEnterFeverTimeActivityStageCsReq"
            }
            Self::CmdGetFeverTimeActivityDataCsReq => "CmdGetFeverTimeActivityDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFeverTimeActivityTypeNone" => Some(Self::None),
            "CmdGetFeverTimeActivityDataScRsp" => {
                Some(Self::CmdGetFeverTimeActivityDataScRsp)
            }
            "CmdFeverTimeActivityBattleEndScNotify" => {
                Some(Self::CmdFeverTimeActivityBattleEndScNotify)
            }
            "CmdEnterFeverTimeActivityStageScRsp" => {
                Some(Self::CmdEnterFeverTimeActivityStageScRsp)
            }
            "CmdEnterFeverTimeActivityStageCsReq" => {
                Some(Self::CmdEnterFeverTimeActivityStageCsReq)
            }
            "CmdGetFeverTimeActivityDataCsReq" => {
                Some(Self::CmdGetFeverTimeActivityDataCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Khlnfkmnpgn {
    FeverTimeBattleRankC = 0,
    FeverTimeBattleRankB = 1,
    FeverTimeBattleRankA = 2,
    FeverTimeBattleRankS = 3,
    FeverTimeBattleRankSs = 4,
}
impl Khlnfkmnpgn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FeverTimeBattleRankC => "FEVER_TIME_BATTLE_RANK_C",
            Self::FeverTimeBattleRankB => "FEVER_TIME_BATTLE_RANK_B",
            Self::FeverTimeBattleRankA => "FEVER_TIME_BATTLE_RANK_A",
            Self::FeverTimeBattleRankS => "FEVER_TIME_BATTLE_RANK_S",
            Self::FeverTimeBattleRankSs => "FEVER_TIME_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEVER_TIME_BATTLE_RANK_C" => Some(Self::FeverTimeBattleRankC),
            "FEVER_TIME_BATTLE_RANK_B" => Some(Self::FeverTimeBattleRankB),
            "FEVER_TIME_BATTLE_RANK_A" => Some(Self::FeverTimeBattleRankA),
            "FEVER_TIME_BATTLE_RANK_S" => Some(Self::FeverTimeBattleRankS),
            "FEVER_TIME_BATTLE_RANK_SS" => Some(Self::FeverTimeBattleRankSs),
            _ => None,
        }
    }
}
/// HNPICADLHJG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightType {
    None = 0,
    CmdFightKickOutScNotify = 30027,
    CmdFightEnterScRsp = 30095,
    CmdFightEnterCsReq = 30036,
    CmdFightSessionStopScNotify = 30052,
    CmdFightLeaveScNotify = 30084,
    CmdFightHeartBeatScRsp = 30028,
    CmdFightHeartBeatCsReq = 30067,
}
impl CmdFightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightTypeNone",
            Self::CmdFightKickOutScNotify => "CmdFightKickOutScNotify",
            Self::CmdFightEnterScRsp => "CmdFightEnterScRsp",
            Self::CmdFightEnterCsReq => "CmdFightEnterCsReq",
            Self::CmdFightSessionStopScNotify => "CmdFightSessionStopScNotify",
            Self::CmdFightLeaveScNotify => "CmdFightLeaveScNotify",
            Self::CmdFightHeartBeatScRsp => "CmdFightHeartBeatScRsp",
            Self::CmdFightHeartBeatCsReq => "CmdFightHeartBeatCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightTypeNone" => Some(Self::None),
            "CmdFightKickOutScNotify" => Some(Self::CmdFightKickOutScNotify),
            "CmdFightEnterScRsp" => Some(Self::CmdFightEnterScRsp),
            "CmdFightEnterCsReq" => Some(Self::CmdFightEnterCsReq),
            "CmdFightSessionStopScNotify" => Some(Self::CmdFightSessionStopScNotify),
            "CmdFightLeaveScNotify" => Some(Self::CmdFightLeaveScNotify),
            "CmdFightHeartBeatScRsp" => Some(Self::CmdFightHeartBeatScRsp),
            "CmdFightHeartBeatCsReq" => Some(Self::CmdFightHeartBeatCsReq),
            _ => None,
        }
    }
}
/// GJNJCCMPKEF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightActivityType {
    None = 0,
    CmdEnterFightActivityStageScRsp = 3667,
    CmdEnterFightActivityStageCsReq = 3627,
    CmdFightActivityDataChangeScNotify = 3684,
    CmdTakeFightActivityRewardCsReq = 3628,
    CmdTakeFightActivityRewardScRsp = 3652,
    CmdGetFightActivityDataScRsp = 3695,
    CmdGetFightActivityDataCsReq = 3636,
}
impl CmdFightActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightActivityTypeNone",
            Self::CmdEnterFightActivityStageScRsp => "CmdEnterFightActivityStageScRsp",
            Self::CmdEnterFightActivityStageCsReq => "CmdEnterFightActivityStageCsReq",
            Self::CmdFightActivityDataChangeScNotify => {
                "CmdFightActivityDataChangeScNotify"
            }
            Self::CmdTakeFightActivityRewardCsReq => "CmdTakeFightActivityRewardCsReq",
            Self::CmdTakeFightActivityRewardScRsp => "CmdTakeFightActivityRewardScRsp",
            Self::CmdGetFightActivityDataScRsp => "CmdGetFightActivityDataScRsp",
            Self::CmdGetFightActivityDataCsReq => "CmdGetFightActivityDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightActivityTypeNone" => Some(Self::None),
            "CmdEnterFightActivityStageScRsp" => {
                Some(Self::CmdEnterFightActivityStageScRsp)
            }
            "CmdEnterFightActivityStageCsReq" => {
                Some(Self::CmdEnterFightActivityStageCsReq)
            }
            "CmdFightActivityDataChangeScNotify" => {
                Some(Self::CmdFightActivityDataChangeScNotify)
            }
            "CmdTakeFightActivityRewardCsReq" => {
                Some(Self::CmdTakeFightActivityRewardCsReq)
            }
            "CmdTakeFightActivityRewardScRsp" => {
                Some(Self::CmdTakeFightActivityRewardScRsp)
            }
            "CmdGetFightActivityDataScRsp" => Some(Self::CmdGetFightActivityDataScRsp),
            "CmdGetFightActivityDataCsReq" => Some(Self::CmdGetFightActivityDataCsReq),
            _ => None,
        }
    }
}
/// EMMCCGKHOJC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightFestType {
    None = 0,
    CmdFightFestUpdateCoinNotify = 7293,
    CmdStartFightFestCsReq = 7280,
    CmdGetFightFestDataCsReq = 7262,
    CmdFightFestScoreUpdateNotify = 7265,
    CmdStartFightFestScRsp = 7273,
    CmdFightFestUnlockSkillNotify = 7299,
    CmdFightFestUpdateChallengeRecordNotify = 7259,
    CmdGetFightFestDataScRsp = 7300,
}
impl CmdFightFestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightFestTypeNone",
            Self::CmdFightFestUpdateCoinNotify => "CmdFightFestUpdateCoinNotify",
            Self::CmdStartFightFestCsReq => "CmdStartFightFestCsReq",
            Self::CmdGetFightFestDataCsReq => "CmdGetFightFestDataCsReq",
            Self::CmdFightFestScoreUpdateNotify => "CmdFightFestScoreUpdateNotify",
            Self::CmdStartFightFestScRsp => "CmdStartFightFestScRsp",
            Self::CmdFightFestUnlockSkillNotify => "CmdFightFestUnlockSkillNotify",
            Self::CmdFightFestUpdateChallengeRecordNotify => {
                "CmdFightFestUpdateChallengeRecordNotify"
            }
            Self::CmdGetFightFestDataScRsp => "CmdGetFightFestDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightFestTypeNone" => Some(Self::None),
            "CmdFightFestUpdateCoinNotify" => Some(Self::CmdFightFestUpdateCoinNotify),
            "CmdStartFightFestCsReq" => Some(Self::CmdStartFightFestCsReq),
            "CmdGetFightFestDataCsReq" => Some(Self::CmdGetFightFestDataCsReq),
            "CmdFightFestScoreUpdateNotify" => Some(Self::CmdFightFestScoreUpdateNotify),
            "CmdStartFightFestScRsp" => Some(Self::CmdStartFightFestScRsp),
            "CmdFightFestUnlockSkillNotify" => Some(Self::CmdFightFestUnlockSkillNotify),
            "CmdFightFestUpdateChallengeRecordNotify" => {
                Some(Self::CmdFightFestUpdateChallengeRecordNotify)
            }
            "CmdGetFightFestDataScRsp" => Some(Self::CmdGetFightFestDataScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ljcpebpibfl {
    FightFestBattleRankC = 0,
    FightFestBattleRankB = 1,
    FightFestBattleRankA = 2,
    FightFestBattleRankS = 3,
    FightFestBattleRankSs = 4,
}
impl Ljcpebpibfl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightFestBattleRankC => "FIGHT_FEST_BATTLE_RANK_C",
            Self::FightFestBattleRankB => "FIGHT_FEST_BATTLE_RANK_B",
            Self::FightFestBattleRankA => "FIGHT_FEST_BATTLE_RANK_A",
            Self::FightFestBattleRankS => "FIGHT_FEST_BATTLE_RANK_S",
            Self::FightFestBattleRankSs => "FIGHT_FEST_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_BATTLE_RANK_C" => Some(Self::FightFestBattleRankC),
            "FIGHT_FEST_BATTLE_RANK_B" => Some(Self::FightFestBattleRankB),
            "FIGHT_FEST_BATTLE_RANK_A" => Some(Self::FightFestBattleRankA),
            "FIGHT_FEST_BATTLE_RANK_S" => Some(Self::FightFestBattleRankS),
            "FIGHT_FEST_BATTLE_RANK_SS" => Some(Self::FightFestBattleRankSs),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nodacjnflib {
    FightFestTypeNone = 0,
    FightFestTypeMain = 1,
    FightFestTypeScore = 2,
    FightFestTypeChallenge = 3,
    FightFestTypeTeach = 4,
}
impl Nodacjnflib {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightFestTypeNone => "FIGHT_FEST_TYPE_NONE",
            Self::FightFestTypeMain => "FIGHT_FEST_TYPE_MAIN",
            Self::FightFestTypeScore => "FIGHT_FEST_TYPE_SCORE",
            Self::FightFestTypeChallenge => "FIGHT_FEST_TYPE_CHALLENGE",
            Self::FightFestTypeTeach => "FIGHT_FEST_TYPE_TEACH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_TYPE_NONE" => Some(Self::FightFestTypeNone),
            "FIGHT_FEST_TYPE_MAIN" => Some(Self::FightFestTypeMain),
            "FIGHT_FEST_TYPE_SCORE" => Some(Self::FightFestTypeScore),
            "FIGHT_FEST_TYPE_CHALLENGE" => Some(Self::FightFestTypeChallenge),
            "FIGHT_FEST_TYPE_TEACH" => Some(Self::FightFestTypeTeach),
            _ => None,
        }
    }
}
/// GKIILKHJENB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightMathc3Type {
    None = 0,
    CmdFightMatch3SwapCsReq = 30128,
    CmdFightMatch3ChatScNotify = 30134,
    CmdFightMatch3SwapScRsp = 30152,
    CmdFightMatch3DataScRsp = 30195,
    CmdFightMatch3TurnEndScNotify = 30167,
    CmdFightMatch3StartCountDownScNotify = 30184,
    CmdFightMatch3DataCsReq = 30136,
    CmdFightMatch3ForceUpdateNotify = 30143,
    CmdFightMatch3ChatCsReq = 30124,
    CmdFightMatch3OpponentDataScNotify = 30174,
    CmdFightMatch3ChatScRsp = 30193,
    CmdFightMatch3TurnStartScNotify = 30127,
}
impl CmdFightMathc3Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightMathc3TypeNone",
            Self::CmdFightMatch3SwapCsReq => "CmdFightMatch3SwapCsReq",
            Self::CmdFightMatch3ChatScNotify => "CmdFightMatch3ChatScNotify",
            Self::CmdFightMatch3SwapScRsp => "CmdFightMatch3SwapScRsp",
            Self::CmdFightMatch3DataScRsp => "CmdFightMatch3DataScRsp",
            Self::CmdFightMatch3TurnEndScNotify => "CmdFightMatch3TurnEndScNotify",
            Self::CmdFightMatch3StartCountDownScNotify => {
                "CmdFightMatch3StartCountDownScNotify"
            }
            Self::CmdFightMatch3DataCsReq => "CmdFightMatch3DataCsReq",
            Self::CmdFightMatch3ForceUpdateNotify => "CmdFightMatch3ForceUpdateNotify",
            Self::CmdFightMatch3ChatCsReq => "CmdFightMatch3ChatCsReq",
            Self::CmdFightMatch3OpponentDataScNotify => {
                "CmdFightMatch3OpponentDataScNotify"
            }
            Self::CmdFightMatch3ChatScRsp => "CmdFightMatch3ChatScRsp",
            Self::CmdFightMatch3TurnStartScNotify => "CmdFightMatch3TurnStartScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightMathc3TypeNone" => Some(Self::None),
            "CmdFightMatch3SwapCsReq" => Some(Self::CmdFightMatch3SwapCsReq),
            "CmdFightMatch3ChatScNotify" => Some(Self::CmdFightMatch3ChatScNotify),
            "CmdFightMatch3SwapScRsp" => Some(Self::CmdFightMatch3SwapScRsp),
            "CmdFightMatch3DataScRsp" => Some(Self::CmdFightMatch3DataScRsp),
            "CmdFightMatch3TurnEndScNotify" => Some(Self::CmdFightMatch3TurnEndScNotify),
            "CmdFightMatch3StartCountDownScNotify" => {
                Some(Self::CmdFightMatch3StartCountDownScNotify)
            }
            "CmdFightMatch3DataCsReq" => Some(Self::CmdFightMatch3DataCsReq),
            "CmdFightMatch3ForceUpdateNotify" => {
                Some(Self::CmdFightMatch3ForceUpdateNotify)
            }
            "CmdFightMatch3ChatCsReq" => Some(Self::CmdFightMatch3ChatCsReq),
            "CmdFightMatch3OpponentDataScNotify" => {
                Some(Self::CmdFightMatch3OpponentDataScNotify)
            }
            "CmdFightMatch3ChatScRsp" => Some(Self::CmdFightMatch3ChatScRsp),
            "CmdFightMatch3TurnStartScNotify" => {
                Some(Self::CmdFightMatch3TurnStartScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oboichhnoaa {
    Match3StateIdle = 0,
    Match3StateStart = 1,
    Match3StateMatch = 2,
    Match3StateGame = 3,
    Match3StateHalftime = 4,
    Match3StateOver = 5,
}
impl Oboichhnoaa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3StateIdle => "MATCH3_STATE_IDLE",
            Self::Match3StateStart => "MATCH3_STATE_START",
            Self::Match3StateMatch => "MATCH3_STATE_MATCH",
            Self::Match3StateGame => "MATCH3_STATE_GAME",
            Self::Match3StateHalftime => "MATCH3_STATE_HALFTIME",
            Self::Match3StateOver => "MATCH3_STATE_OVER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_STATE_IDLE" => Some(Self::Match3StateIdle),
            "MATCH3_STATE_START" => Some(Self::Match3StateStart),
            "MATCH3_STATE_MATCH" => Some(Self::Match3StateMatch),
            "MATCH3_STATE_GAME" => Some(Self::Match3StateGame),
            "MATCH3_STATE_HALFTIME" => Some(Self::Match3StateHalftime),
            "MATCH3_STATE_OVER" => Some(Self::Match3StateOver),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ckmjgcgaeei {
    Match3PlayerStateAlive = 0,
    Match3PlayerStateDying = 1,
    Match3PlayerStateDead = 2,
    Match3PlayerStateLeave = 3,
}
impl Ckmjgcgaeei {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3PlayerStateAlive => "MATCH3_PLAYER_STATE_ALIVE",
            Self::Match3PlayerStateDying => "MATCH3_PLAYER_STATE_DYING",
            Self::Match3PlayerStateDead => "MATCH3_PLAYER_STATE_DEAD",
            Self::Match3PlayerStateLeave => "MATCH3_PLAYER_STATE_LEAVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_PLAYER_STATE_ALIVE" => Some(Self::Match3PlayerStateAlive),
            "MATCH3_PLAYER_STATE_DYING" => Some(Self::Match3PlayerStateDying),
            "MATCH3_PLAYER_STATE_DEAD" => Some(Self::Match3PlayerStateDead),
            "MATCH3_PLAYER_STATE_LEAVE" => Some(Self::Match3PlayerStateLeave),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gmbhheielfc {
    EventBegin = 0,
    EventBreak = 1,
    EventFall = 2,
    EventRefresh = 3,
    EventBirdSkill = 4,
    EventEnv = 5,
    EventShuffle = 6,
    EventSettleTag = 7,
}
impl Gmbhheielfc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EventBegin => "EVENT_BEGIN",
            Self::EventBreak => "EVENT_BREAK",
            Self::EventFall => "EVENT_FALL",
            Self::EventRefresh => "EVENT_REFRESH",
            Self::EventBirdSkill => "EVENT_BIRD_SKILL",
            Self::EventEnv => "EVENT_ENV",
            Self::EventShuffle => "EVENT_SHUFFLE",
            Self::EventSettleTag => "EVENT_SETTLE_TAG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_BEGIN" => Some(Self::EventBegin),
            "EVENT_BREAK" => Some(Self::EventBreak),
            "EVENT_FALL" => Some(Self::EventFall),
            "EVENT_REFRESH" => Some(Self::EventRefresh),
            "EVENT_BIRD_SKILL" => Some(Self::EventBirdSkill),
            "EVENT_ENV" => Some(Self::EventEnv),
            "EVENT_SHUFFLE" => Some(Self::EventShuffle),
            "EVENT_SETTLE_TAG" => Some(Self::EventSettleTag),
            _ => None,
        }
    }
}
/// MPGMFLODMHN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFriendType {
    None = 0,
    CmdGetFriendDevelopmentInfoScRsp = 2940,
    CmdSetAssistScRsp = 2976,
    CmdGetAssistListScRsp = 2958,
    CmdDeleteFriendCsReq = 2946,
    CmdSetFriendRemarkNameCsReq = 2953,
    CmdSetFriendMarkCsReq = 2922,
    CmdGetFriendRecommendListInfoCsReq = 2926,
    CmdTakeAssistRewardCsReq = 2965,
    CmdGetAssistHistoryScRsp = 2913,
    CmdGetFriendBattleRecordDetailScRsp = 2999,
    CmdTakeAssistRewardScRsp = 2908,
    CmdGetFriendChallengeDetailScRsp = 2964,
    CmdApplyFriendCsReq = 2952,
    CmdGetFriendChallengeLineupCsReq = 2992,
    CmdGetFriendAssistListScRsp = 2994,
    CmdGetFriendListInfoCsReq = 2936,
    CmdSetFriendMarkScRsp = 3000,
    CmdGetCurAssistScRsp = 2973,
    CmdGetFriendChallengeDetailCsReq = 2945,
    CmdGetFriendLoginInfoCsReq = 2979,
    CmdAddBlacklistScRsp = 2975,
    CmdSyncApplyFriendScNotify = 2924,
    CmdHandleFriendCsReq = 2993,
    CmdDeleteFriendScRsp = 2925,
    CmdGetPlayerDetailInfoCsReq = 2984,
    CmdSearchPlayerScRsp = 2948,
    CmdReportPlayerCsReq = 2959,
    CmdDeleteBlacklistCsReq = 2978,
    CmdHandleFriendScRsp = 2934,
    CmdNewAssistHistoryNotify = 2921,
    CmdGetFriendDevelopmentInfoCsReq = 2903,
    CmdSetAssistCsReq = 2910,
    CmdSyncAddBlacklistScNotify = 2919,
    CmdCurAssistChangedNotify = 2918,
    CmdSyncHandleFriendScNotify = 2943,
    CmdApplyFriendScRsp = 2974,
    CmdDeleteBlacklistScRsp = 2929,
    CmdSearchPlayerCsReq = 2950,
    CmdGetFriendRecommendListInfoScRsp = 2907,
    CmdGetAssistHistoryCsReq = 2917,
    CmdSetForbidOtherApplyFriendScRsp = 2955,
    CmdGetFriendChallengeLineupScRsp = 2960,
    CmdGetFriendBattleRecordDetailCsReq = 2972,
    CmdReportPlayerScRsp = 2912,
    CmdGetPlayerDetailInfoScRsp = 2927,
    CmdGetFriendAssistListCsReq = 2941,
    CmdGetPlatformPlayerInfoCsReq = 2937,
    CmdSyncDeleteFriendScNotify = 2996,
    CmdGetPlatformPlayerInfoScRsp = 2911,
    CmdGetAssistListCsReq = 2988,
    CmdGetFriendListInfoScRsp = 2995,
    CmdGetFriendApplyListInfoCsReq = 2967,
    CmdAddBlacklistCsReq = 2905,
    CmdSetFriendRemarkNameScRsp = 2990,
    CmdGetCurAssistCsReq = 2935,
    CmdGetFriendLoginInfoScRsp = 2981,
    CmdSetForbidOtherApplyFriendCsReq = 2939,
    CmdGetFriendApplyListInfoScRsp = 2928,
}
impl CmdFriendType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFriendTypeNone",
            Self::CmdGetFriendDevelopmentInfoScRsp => "CmdGetFriendDevelopmentInfoScRsp",
            Self::CmdSetAssistScRsp => "CmdSetAssistScRsp",
            Self::CmdGetAssistListScRsp => "CmdGetAssistListScRsp",
            Self::CmdDeleteFriendCsReq => "CmdDeleteFriendCsReq",
            Self::CmdSetFriendRemarkNameCsReq => "CmdSetFriendRemarkNameCsReq",
            Self::CmdSetFriendMarkCsReq => "CmdSetFriendMarkCsReq",
            Self::CmdGetFriendRecommendListInfoCsReq => {
                "CmdGetFriendRecommendListInfoCsReq"
            }
            Self::CmdTakeAssistRewardCsReq => "CmdTakeAssistRewardCsReq",
            Self::CmdGetAssistHistoryScRsp => "CmdGetAssistHistoryScRsp",
            Self::CmdGetFriendBattleRecordDetailScRsp => {
                "CmdGetFriendBattleRecordDetailScRsp"
            }
            Self::CmdTakeAssistRewardScRsp => "CmdTakeAssistRewardScRsp",
            Self::CmdGetFriendChallengeDetailScRsp => "CmdGetFriendChallengeDetailScRsp",
            Self::CmdApplyFriendCsReq => "CmdApplyFriendCsReq",
            Self::CmdGetFriendChallengeLineupCsReq => "CmdGetFriendChallengeLineupCsReq",
            Self::CmdGetFriendAssistListScRsp => "CmdGetFriendAssistListScRsp",
            Self::CmdGetFriendListInfoCsReq => "CmdGetFriendListInfoCsReq",
            Self::CmdSetFriendMarkScRsp => "CmdSetFriendMarkScRsp",
            Self::CmdGetCurAssistScRsp => "CmdGetCurAssistScRsp",
            Self::CmdGetFriendChallengeDetailCsReq => "CmdGetFriendChallengeDetailCsReq",
            Self::CmdGetFriendLoginInfoCsReq => "CmdGetFriendLoginInfoCsReq",
            Self::CmdAddBlacklistScRsp => "CmdAddBlacklistScRsp",
            Self::CmdSyncApplyFriendScNotify => "CmdSyncApplyFriendScNotify",
            Self::CmdHandleFriendCsReq => "CmdHandleFriendCsReq",
            Self::CmdDeleteFriendScRsp => "CmdDeleteFriendScRsp",
            Self::CmdGetPlayerDetailInfoCsReq => "CmdGetPlayerDetailInfoCsReq",
            Self::CmdSearchPlayerScRsp => "CmdSearchPlayerScRsp",
            Self::CmdReportPlayerCsReq => "CmdReportPlayerCsReq",
            Self::CmdDeleteBlacklistCsReq => "CmdDeleteBlacklistCsReq",
            Self::CmdHandleFriendScRsp => "CmdHandleFriendScRsp",
            Self::CmdNewAssistHistoryNotify => "CmdNewAssistHistoryNotify",
            Self::CmdGetFriendDevelopmentInfoCsReq => "CmdGetFriendDevelopmentInfoCsReq",
            Self::CmdSetAssistCsReq => "CmdSetAssistCsReq",
            Self::CmdSyncAddBlacklistScNotify => "CmdSyncAddBlacklistScNotify",
            Self::CmdCurAssistChangedNotify => "CmdCurAssistChangedNotify",
            Self::CmdSyncHandleFriendScNotify => "CmdSyncHandleFriendScNotify",
            Self::CmdApplyFriendScRsp => "CmdApplyFriendScRsp",
            Self::CmdDeleteBlacklistScRsp => "CmdDeleteBlacklistScRsp",
            Self::CmdSearchPlayerCsReq => "CmdSearchPlayerCsReq",
            Self::CmdGetFriendRecommendListInfoScRsp => {
                "CmdGetFriendRecommendListInfoScRsp"
            }
            Self::CmdGetAssistHistoryCsReq => "CmdGetAssistHistoryCsReq",
            Self::CmdSetForbidOtherApplyFriendScRsp => {
                "CmdSetForbidOtherApplyFriendScRsp"
            }
            Self::CmdGetFriendChallengeLineupScRsp => "CmdGetFriendChallengeLineupScRsp",
            Self::CmdGetFriendBattleRecordDetailCsReq => {
                "CmdGetFriendBattleRecordDetailCsReq"
            }
            Self::CmdReportPlayerScRsp => "CmdReportPlayerScRsp",
            Self::CmdGetPlayerDetailInfoScRsp => "CmdGetPlayerDetailInfoScRsp",
            Self::CmdGetFriendAssistListCsReq => "CmdGetFriendAssistListCsReq",
            Self::CmdGetPlatformPlayerInfoCsReq => "CmdGetPlatformPlayerInfoCsReq",
            Self::CmdSyncDeleteFriendScNotify => "CmdSyncDeleteFriendScNotify",
            Self::CmdGetPlatformPlayerInfoScRsp => "CmdGetPlatformPlayerInfoScRsp",
            Self::CmdGetAssistListCsReq => "CmdGetAssistListCsReq",
            Self::CmdGetFriendListInfoScRsp => "CmdGetFriendListInfoScRsp",
            Self::CmdGetFriendApplyListInfoCsReq => "CmdGetFriendApplyListInfoCsReq",
            Self::CmdAddBlacklistCsReq => "CmdAddBlacklistCsReq",
            Self::CmdSetFriendRemarkNameScRsp => "CmdSetFriendRemarkNameScRsp",
            Self::CmdGetCurAssistCsReq => "CmdGetCurAssistCsReq",
            Self::CmdGetFriendLoginInfoScRsp => "CmdGetFriendLoginInfoScRsp",
            Self::CmdSetForbidOtherApplyFriendCsReq => {
                "CmdSetForbidOtherApplyFriendCsReq"
            }
            Self::CmdGetFriendApplyListInfoScRsp => "CmdGetFriendApplyListInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFriendTypeNone" => Some(Self::None),
            "CmdGetFriendDevelopmentInfoScRsp" => {
                Some(Self::CmdGetFriendDevelopmentInfoScRsp)
            }
            "CmdSetAssistScRsp" => Some(Self::CmdSetAssistScRsp),
            "CmdGetAssistListScRsp" => Some(Self::CmdGetAssistListScRsp),
            "CmdDeleteFriendCsReq" => Some(Self::CmdDeleteFriendCsReq),
            "CmdSetFriendRemarkNameCsReq" => Some(Self::CmdSetFriendRemarkNameCsReq),
            "CmdSetFriendMarkCsReq" => Some(Self::CmdSetFriendMarkCsReq),
            "CmdGetFriendRecommendListInfoCsReq" => {
                Some(Self::CmdGetFriendRecommendListInfoCsReq)
            }
            "CmdTakeAssistRewardCsReq" => Some(Self::CmdTakeAssistRewardCsReq),
            "CmdGetAssistHistoryScRsp" => Some(Self::CmdGetAssistHistoryScRsp),
            "CmdGetFriendBattleRecordDetailScRsp" => {
                Some(Self::CmdGetFriendBattleRecordDetailScRsp)
            }
            "CmdTakeAssistRewardScRsp" => Some(Self::CmdTakeAssistRewardScRsp),
            "CmdGetFriendChallengeDetailScRsp" => {
                Some(Self::CmdGetFriendChallengeDetailScRsp)
            }
            "CmdApplyFriendCsReq" => Some(Self::CmdApplyFriendCsReq),
            "CmdGetFriendChallengeLineupCsReq" => {
                Some(Self::CmdGetFriendChallengeLineupCsReq)
            }
            "CmdGetFriendAssistListScRsp" => Some(Self::CmdGetFriendAssistListScRsp),
            "CmdGetFriendListInfoCsReq" => Some(Self::CmdGetFriendListInfoCsReq),
            "CmdSetFriendMarkScRsp" => Some(Self::CmdSetFriendMarkScRsp),
            "CmdGetCurAssistScRsp" => Some(Self::CmdGetCurAssistScRsp),
            "CmdGetFriendChallengeDetailCsReq" => {
                Some(Self::CmdGetFriendChallengeDetailCsReq)
            }
            "CmdGetFriendLoginInfoCsReq" => Some(Self::CmdGetFriendLoginInfoCsReq),
            "CmdAddBlacklistScRsp" => Some(Self::CmdAddBlacklistScRsp),
            "CmdSyncApplyFriendScNotify" => Some(Self::CmdSyncApplyFriendScNotify),
            "CmdHandleFriendCsReq" => Some(Self::CmdHandleFriendCsReq),
            "CmdDeleteFriendScRsp" => Some(Self::CmdDeleteFriendScRsp),
            "CmdGetPlayerDetailInfoCsReq" => Some(Self::CmdGetPlayerDetailInfoCsReq),
            "CmdSearchPlayerScRsp" => Some(Self::CmdSearchPlayerScRsp),
            "CmdReportPlayerCsReq" => Some(Self::CmdReportPlayerCsReq),
            "CmdDeleteBlacklistCsReq" => Some(Self::CmdDeleteBlacklistCsReq),
            "CmdHandleFriendScRsp" => Some(Self::CmdHandleFriendScRsp),
            "CmdNewAssistHistoryNotify" => Some(Self::CmdNewAssistHistoryNotify),
            "CmdGetFriendDevelopmentInfoCsReq" => {
                Some(Self::CmdGetFriendDevelopmentInfoCsReq)
            }
            "CmdSetAssistCsReq" => Some(Self::CmdSetAssistCsReq),
            "CmdSyncAddBlacklistScNotify" => Some(Self::CmdSyncAddBlacklistScNotify),
            "CmdCurAssistChangedNotify" => Some(Self::CmdCurAssistChangedNotify),
            "CmdSyncHandleFriendScNotify" => Some(Self::CmdSyncHandleFriendScNotify),
            "CmdApplyFriendScRsp" => Some(Self::CmdApplyFriendScRsp),
            "CmdDeleteBlacklistScRsp" => Some(Self::CmdDeleteBlacklistScRsp),
            "CmdSearchPlayerCsReq" => Some(Self::CmdSearchPlayerCsReq),
            "CmdGetFriendRecommendListInfoScRsp" => {
                Some(Self::CmdGetFriendRecommendListInfoScRsp)
            }
            "CmdGetAssistHistoryCsReq" => Some(Self::CmdGetAssistHistoryCsReq),
            "CmdSetForbidOtherApplyFriendScRsp" => {
                Some(Self::CmdSetForbidOtherApplyFriendScRsp)
            }
            "CmdGetFriendChallengeLineupScRsp" => {
                Some(Self::CmdGetFriendChallengeLineupScRsp)
            }
            "CmdGetFriendBattleRecordDetailCsReq" => {
                Some(Self::CmdGetFriendBattleRecordDetailCsReq)
            }
            "CmdReportPlayerScRsp" => Some(Self::CmdReportPlayerScRsp),
            "CmdGetPlayerDetailInfoScRsp" => Some(Self::CmdGetPlayerDetailInfoScRsp),
            "CmdGetFriendAssistListCsReq" => Some(Self::CmdGetFriendAssistListCsReq),
            "CmdGetPlatformPlayerInfoCsReq" => Some(Self::CmdGetPlatformPlayerInfoCsReq),
            "CmdSyncDeleteFriendScNotify" => Some(Self::CmdSyncDeleteFriendScNotify),
            "CmdGetPlatformPlayerInfoScRsp" => Some(Self::CmdGetPlatformPlayerInfoScRsp),
            "CmdGetAssistListCsReq" => Some(Self::CmdGetAssistListCsReq),
            "CmdGetFriendListInfoScRsp" => Some(Self::CmdGetFriendListInfoScRsp),
            "CmdGetFriendApplyListInfoCsReq" => {
                Some(Self::CmdGetFriendApplyListInfoCsReq)
            }
            "CmdAddBlacklistCsReq" => Some(Self::CmdAddBlacklistCsReq),
            "CmdSetFriendRemarkNameScRsp" => Some(Self::CmdSetFriendRemarkNameScRsp),
            "CmdGetCurAssistCsReq" => Some(Self::CmdGetCurAssistCsReq),
            "CmdGetFriendLoginInfoScRsp" => Some(Self::CmdGetFriendLoginInfoScRsp),
            "CmdSetForbidOtherApplyFriendCsReq" => {
                Some(Self::CmdSetForbidOtherApplyFriendCsReq)
            }
            "CmdGetFriendApplyListInfoScRsp" => {
                Some(Self::CmdGetFriendApplyListInfoScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendOnlineStatus {
    Offline = 0,
    Online = 1,
}
impl FriendOnlineStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Offline => "FRIEND_ONLINE_STATUS_OFFLINE",
            Self::Online => "FRIEND_ONLINE_STATUS_ONLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_ONLINE_STATUS_OFFLINE" => Some(Self::Offline),
            "FRIEND_ONLINE_STATUS_ONLINE" => Some(Self::Online),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendApplySource {
    None = 0,
    Search = 1,
    Recommend = 2,
    Assist = 3,
    RecommendAssist = 4,
    PsnFriend = 5,
    AssistReward = 6,
}
impl FriendApplySource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FRIEND_APPLY_SOURCE_NONE",
            Self::Search => "FRIEND_APPLY_SOURCE_SEARCH",
            Self::Recommend => "FRIEND_APPLY_SOURCE_RECOMMEND",
            Self::Assist => "FRIEND_APPLY_SOURCE_ASSIST",
            Self::RecommendAssist => "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST",
            Self::PsnFriend => "FRIEND_APPLY_SOURCE_PSN_FRIEND",
            Self::AssistReward => "FRIEND_APPLY_SOURCE_ASSIST_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_APPLY_SOURCE_NONE" => Some(Self::None),
            "FRIEND_APPLY_SOURCE_SEARCH" => Some(Self::Search),
            "FRIEND_APPLY_SOURCE_RECOMMEND" => Some(Self::Recommend),
            "FRIEND_APPLY_SOURCE_ASSIST" => Some(Self::Assist),
            "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST" => Some(Self::RecommendAssist),
            "FRIEND_APPLY_SOURCE_PSN_FRIEND" => Some(Self::PsnFriend),
            "FRIEND_APPLY_SOURCE_ASSIST_REWARD" => Some(Self::AssistReward),
            _ => None,
        }
    }
}
/// BKDHNCJJIPD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdGachaType {
    None = 0,
    CmdGetGachaCeilingCsReq = 1967,
    CmdExchangeGachaCeilingCsReq = 1952,
    CmdGetGachaInfoScRsp = 1995,
    CmdGetGachaCeilingScRsp = 1928,
    CmdDoGachaScRsp = 1927,
    CmdExchangeGachaCeilingScRsp = 1974,
    CmdDoGachaCsReq = 1984,
    CmdGetGachaInfoCsReq = 1936,
}
impl CmdGachaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdGachaTypeNone",
            Self::CmdGetGachaCeilingCsReq => "CmdGetGachaCeilingCsReq",
            Self::CmdExchangeGachaCeilingCsReq => "CmdExchangeGachaCeilingCsReq",
            Self::CmdGetGachaInfoScRsp => "CmdGetGachaInfoScRsp",
            Self::CmdGetGachaCeilingScRsp => "CmdGetGachaCeilingScRsp",
            Self::CmdDoGachaScRsp => "CmdDoGachaScRsp",
            Self::CmdExchangeGachaCeilingScRsp => "CmdExchangeGachaCeilingScRsp",
            Self::CmdDoGachaCsReq => "CmdDoGachaCsReq",
            Self::CmdGetGachaInfoCsReq => "CmdGetGachaInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdGachaTypeNone" => Some(Self::None),
            "CmdGetGachaCeilingCsReq" => Some(Self::CmdGetGachaCeilingCsReq),
            "CmdExchangeGachaCeilingCsReq" => Some(Self::CmdExchangeGachaCeilingCsReq),
            "CmdGetGachaInfoScRsp" => Some(Self::CmdGetGachaInfoScRsp),
            "CmdGetGachaCeilingScRsp" => Some(Self::CmdGetGachaCeilingScRsp),
            "CmdDoGachaScRsp" => Some(Self::CmdDoGachaScRsp),
            "CmdExchangeGachaCeilingScRsp" => Some(Self::CmdExchangeGachaCeilingScRsp),
            "CmdDoGachaCsReq" => Some(Self::CmdDoGachaCsReq),
            "CmdGetGachaInfoCsReq" => Some(Self::CmdGetGachaInfoCsReq),
            _ => None,
        }
    }
}
/// NMMILMIHMPK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdHeartdialType {
    None = 0,
    CmdFinishEmotionDialoguePerformanceScRsp = 6374,
    CmdSubmitEmotionItemScRsp = 6328,
    CmdHeartDialScriptChangeScNotify = 6324,
    CmdHeartDialTraceScriptScRsp = 6334,
    CmdGetHeartDialInfoScRsp = 6395,
    CmdChangeScriptEmotionScRsp = 6327,
    CmdGetHeartDialInfoCsReq = 6336,
    CmdHeartDialTraceScriptCsReq = 6393,
    CmdChangeScriptEmotionCsReq = 6384,
    CmdFinishEmotionDialoguePerformanceCsReq = 6352,
    CmdSubmitEmotionItemCsReq = 6367,
}
impl CmdHeartdialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdHeartdialTypeNone",
            Self::CmdFinishEmotionDialoguePerformanceScRsp => {
                "CmdFinishEmotionDialoguePerformanceScRsp"
            }
            Self::CmdSubmitEmotionItemScRsp => "CmdSubmitEmotionItemScRsp",
            Self::CmdHeartDialScriptChangeScNotify => "CmdHeartDialScriptChangeScNotify",
            Self::CmdHeartDialTraceScriptScRsp => "CmdHeartDialTraceScriptScRsp",
            Self::CmdGetHeartDialInfoScRsp => "CmdGetHeartDialInfoScRsp",
            Self::CmdChangeScriptEmotionScRsp => "CmdChangeScriptEmotionScRsp",
            Self::CmdGetHeartDialInfoCsReq => "CmdGetHeartDialInfoCsReq",
            Self::CmdHeartDialTraceScriptCsReq => "CmdHeartDialTraceScriptCsReq",
            Self::CmdChangeScriptEmotionCsReq => "CmdChangeScriptEmotionCsReq",
            Self::CmdFinishEmotionDialoguePerformanceCsReq => {
                "CmdFinishEmotionDialoguePerformanceCsReq"
            }
            Self::CmdSubmitEmotionItemCsReq => "CmdSubmitEmotionItemCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeartdialTypeNone" => Some(Self::None),
            "CmdFinishEmotionDialoguePerformanceScRsp" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceScRsp)
            }
            "CmdSubmitEmotionItemScRsp" => Some(Self::CmdSubmitEmotionItemScRsp),
            "CmdHeartDialScriptChangeScNotify" => {
                Some(Self::CmdHeartDialScriptChangeScNotify)
            }
            "CmdHeartDialTraceScriptScRsp" => Some(Self::CmdHeartDialTraceScriptScRsp),
            "CmdGetHeartDialInfoScRsp" => Some(Self::CmdGetHeartDialInfoScRsp),
            "CmdChangeScriptEmotionScRsp" => Some(Self::CmdChangeScriptEmotionScRsp),
            "CmdGetHeartDialInfoCsReq" => Some(Self::CmdGetHeartDialInfoCsReq),
            "CmdHeartDialTraceScriptCsReq" => Some(Self::CmdHeartDialTraceScriptCsReq),
            "CmdChangeScriptEmotionCsReq" => Some(Self::CmdChangeScriptEmotionCsReq),
            "CmdFinishEmotionDialoguePerformanceCsReq" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceCsReq)
            }
            "CmdSubmitEmotionItemCsReq" => Some(Self::CmdSubmitEmotionItemCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Licpimfidgf {
    HeartDialEmotionTypePeace = 0,
    HeartDialEmotionTypeAnger = 1,
    HeartDialEmotionTypeHappy = 2,
    HeartDialEmotionTypeSad = 3,
}
impl Licpimfidgf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialEmotionTypePeace => "HEART_DIAL_EMOTION_TYPE_PEACE",
            Self::HeartDialEmotionTypeAnger => "HEART_DIAL_EMOTION_TYPE_ANGER",
            Self::HeartDialEmotionTypeHappy => "HEART_DIAL_EMOTION_TYPE_HAPPY",
            Self::HeartDialEmotionTypeSad => "HEART_DIAL_EMOTION_TYPE_SAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_EMOTION_TYPE_PEACE" => Some(Self::HeartDialEmotionTypePeace),
            "HEART_DIAL_EMOTION_TYPE_ANGER" => Some(Self::HeartDialEmotionTypeAnger),
            "HEART_DIAL_EMOTION_TYPE_HAPPY" => Some(Self::HeartDialEmotionTypeHappy),
            "HEART_DIAL_EMOTION_TYPE_SAD" => Some(Self::HeartDialEmotionTypeSad),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ikhdnpgokfg {
    HeartDialStepTypeMissing = 0,
    HeartDialStepTypeFull = 1,
    HeartDialStepTypeLock = 2,
    HeartDialStepTypeUnlock = 3,
    HeartDialStepTypeNormal = 4,
    HeartDialStepTypeControl = 5,
}
impl Ikhdnpgokfg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialStepTypeMissing => "HEART_DIAL_STEP_TYPE_MISSING",
            Self::HeartDialStepTypeFull => "HEART_DIAL_STEP_TYPE_FULL",
            Self::HeartDialStepTypeLock => "HEART_DIAL_STEP_TYPE_LOCK",
            Self::HeartDialStepTypeUnlock => "HEART_DIAL_STEP_TYPE_UNLOCK",
            Self::HeartDialStepTypeNormal => "HEART_DIAL_STEP_TYPE_NORMAL",
            Self::HeartDialStepTypeControl => "HEART_DIAL_STEP_TYPE_CONTROL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_STEP_TYPE_MISSING" => Some(Self::HeartDialStepTypeMissing),
            "HEART_DIAL_STEP_TYPE_FULL" => Some(Self::HeartDialStepTypeFull),
            "HEART_DIAL_STEP_TYPE_LOCK" => Some(Self::HeartDialStepTypeLock),
            "HEART_DIAL_STEP_TYPE_UNLOCK" => Some(Self::HeartDialStepTypeUnlock),
            "HEART_DIAL_STEP_TYPE_NORMAL" => Some(Self::HeartDialStepTypeNormal),
            "HEART_DIAL_STEP_TYPE_CONTROL" => Some(Self::HeartDialStepTypeControl),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gnphjapojjm {
    HeartDialUnlockStatusLock = 0,
    HeartDialUnlockStatusUnlockSingle = 1,
    HeartDialUnlockStatusUnlockAll = 2,
}
impl Gnphjapojjm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialUnlockStatusLock => "HEART_DIAL_UNLOCK_STATUS_LOCK",
            Self::HeartDialUnlockStatusUnlockSingle => {
                "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE"
            }
            Self::HeartDialUnlockStatusUnlockAll => "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_UNLOCK_STATUS_LOCK" => Some(Self::HeartDialUnlockStatusLock),
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE" => {
                Some(Self::HeartDialUnlockStatusUnlockSingle)
            }
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL" => {
                Some(Self::HeartDialUnlockStatusUnlockAll)
            }
            _ => None,
        }
    }
}
/// MFEHGGCCOKE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdHeliobusType {
    None = 0,
    CmdHeliobusEnterBattleCsReq = 5807,
    CmdHeliobusInfoChangedScNotify = 5843,
    CmdHeliobusChallengeUpdateScNotify = 5812,
    CmdHeliobusActivityDataCsReq = 5836,
    CmdHeliobusSnsReadScRsp = 5827,
    CmdHeliobusActivityDataScRsp = 5895,
    CmdHeliobusSnsUpdateScNotify = 5834,
    CmdHeliobusSnsReadCsReq = 5884,
    CmdHeliobusSnsCommentCsReq = 5824,
    CmdHeliobusSelectSkillScRsp = 5875,
    CmdHeliobusSnsCommentScRsp = 5893,
    CmdHeliobusUpgradeLevelCsReq = 5846,
    CmdHeliobusUnlockSkillScNotify = 5896,
    CmdHeliobusStartRaidScRsp = 5859,
    CmdHeliobusSnsLikeScRsp = 5874,
    CmdHeliobusUpgradeLevelScRsp = 5825,
    CmdHeliobusSnsPostCsReq = 5867,
    CmdHeliobusStartRaidCsReq = 5890,
    CmdHeliobusSnsLikeCsReq = 5852,
    CmdHeliobusEnterBattleScRsp = 5853,
    CmdHeliobusSnsPostScRsp = 5828,
    CmdHeliobusLineupUpdateScNotify = 5878,
    CmdHeliobusSelectSkillCsReq = 5805,
}
impl CmdHeliobusType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdHeliobusTypeNone",
            Self::CmdHeliobusEnterBattleCsReq => "CmdHeliobusEnterBattleCsReq",
            Self::CmdHeliobusInfoChangedScNotify => "CmdHeliobusInfoChangedScNotify",
            Self::CmdHeliobusChallengeUpdateScNotify => {
                "CmdHeliobusChallengeUpdateScNotify"
            }
            Self::CmdHeliobusActivityDataCsReq => "CmdHeliobusActivityDataCsReq",
            Self::CmdHeliobusSnsReadScRsp => "CmdHeliobusSnsReadScRsp",
            Self::CmdHeliobusActivityDataScRsp => "CmdHeliobusActivityDataScRsp",
            Self::CmdHeliobusSnsUpdateScNotify => "CmdHeliobusSnsUpdateScNotify",
            Self::CmdHeliobusSnsReadCsReq => "CmdHeliobusSnsReadCsReq",
            Self::CmdHeliobusSnsCommentCsReq => "CmdHeliobusSnsCommentCsReq",
            Self::CmdHeliobusSelectSkillScRsp => "CmdHeliobusSelectSkillScRsp",
            Self::CmdHeliobusSnsCommentScRsp => "CmdHeliobusSnsCommentScRsp",
            Self::CmdHeliobusUpgradeLevelCsReq => "CmdHeliobusUpgradeLevelCsReq",
            Self::CmdHeliobusUnlockSkillScNotify => "CmdHeliobusUnlockSkillScNotify",
            Self::CmdHeliobusStartRaidScRsp => "CmdHeliobusStartRaidScRsp",
            Self::CmdHeliobusSnsLikeScRsp => "CmdHeliobusSnsLikeScRsp",
            Self::CmdHeliobusUpgradeLevelScRsp => "CmdHeliobusUpgradeLevelScRsp",
            Self::CmdHeliobusSnsPostCsReq => "CmdHeliobusSnsPostCsReq",
            Self::CmdHeliobusStartRaidCsReq => "CmdHeliobusStartRaidCsReq",
            Self::CmdHeliobusSnsLikeCsReq => "CmdHeliobusSnsLikeCsReq",
            Self::CmdHeliobusEnterBattleScRsp => "CmdHeliobusEnterBattleScRsp",
            Self::CmdHeliobusSnsPostScRsp => "CmdHeliobusSnsPostScRsp",
            Self::CmdHeliobusLineupUpdateScNotify => "CmdHeliobusLineupUpdateScNotify",
            Self::CmdHeliobusSelectSkillCsReq => "CmdHeliobusSelectSkillCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeliobusTypeNone" => Some(Self::None),
            "CmdHeliobusEnterBattleCsReq" => Some(Self::CmdHeliobusEnterBattleCsReq),
            "CmdHeliobusInfoChangedScNotify" => {
                Some(Self::CmdHeliobusInfoChangedScNotify)
            }
            "CmdHeliobusChallengeUpdateScNotify" => {
                Some(Self::CmdHeliobusChallengeUpdateScNotify)
            }
            "CmdHeliobusActivityDataCsReq" => Some(Self::CmdHeliobusActivityDataCsReq),
            "CmdHeliobusSnsReadScRsp" => Some(Self::CmdHeliobusSnsReadScRsp),
            "CmdHeliobusActivityDataScRsp" => Some(Self::CmdHeliobusActivityDataScRsp),
            "CmdHeliobusSnsUpdateScNotify" => Some(Self::CmdHeliobusSnsUpdateScNotify),
            "CmdHeliobusSnsReadCsReq" => Some(Self::CmdHeliobusSnsReadCsReq),
            "CmdHeliobusSnsCommentCsReq" => Some(Self::CmdHeliobusSnsCommentCsReq),
            "CmdHeliobusSelectSkillScRsp" => Some(Self::CmdHeliobusSelectSkillScRsp),
            "CmdHeliobusSnsCommentScRsp" => Some(Self::CmdHeliobusSnsCommentScRsp),
            "CmdHeliobusUpgradeLevelCsReq" => Some(Self::CmdHeliobusUpgradeLevelCsReq),
            "CmdHeliobusUnlockSkillScNotify" => {
                Some(Self::CmdHeliobusUnlockSkillScNotify)
            }
            "CmdHeliobusStartRaidScRsp" => Some(Self::CmdHeliobusStartRaidScRsp),
            "CmdHeliobusSnsLikeScRsp" => Some(Self::CmdHeliobusSnsLikeScRsp),
            "CmdHeliobusUpgradeLevelScRsp" => Some(Self::CmdHeliobusUpgradeLevelScRsp),
            "CmdHeliobusSnsPostCsReq" => Some(Self::CmdHeliobusSnsPostCsReq),
            "CmdHeliobusStartRaidCsReq" => Some(Self::CmdHeliobusStartRaidCsReq),
            "CmdHeliobusSnsLikeCsReq" => Some(Self::CmdHeliobusSnsLikeCsReq),
            "CmdHeliobusEnterBattleScRsp" => Some(Self::CmdHeliobusEnterBattleScRsp),
            "CmdHeliobusSnsPostScRsp" => Some(Self::CmdHeliobusSnsPostScRsp),
            "CmdHeliobusLineupUpdateScNotify" => {
                Some(Self::CmdHeliobusLineupUpdateScNotify)
            }
            "CmdHeliobusSelectSkillCsReq" => Some(Self::CmdHeliobusSelectSkillCsReq),
            _ => None,
        }
    }
}
/// OEAAMJLGCAL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdItemType {
    None = 0,
    CmdAddEquipmentScNotify = 529,
    CmdSetTurnFoodSwitchCsReq = 508,
    CmdGetMarkItemListCsReq = 535,
    CmdDeleteRelicFilterPlanScRsp = 572,
    CmdPromoteEquipmentCsReq = 584,
    CmdRelicReforgeConfirmCsReq = 533,
    CmdRelicReforgeCsReq = 561,
    CmdMarkItemCsReq = 517,
    CmdComposeLimitNumUpdateNotify = 558,
    CmdGetRecyleTimeCsReq = 550,
    CmdLockRelicScRsp = 519,
    CmdLockRelicCsReq = 575,
    CmdGetBagCsReq = 536,
    CmdDestroyItemScRsp = 576,
    CmdGetBagScRsp = 595,
    CmdLockEquipmentCsReq = 567,
    CmdSetTurnFoodSwitchScRsp = 518,
    CmdModifyRelicFilterPlanScRsp = 545,
    CmdDeleteRelicFilterPlanCsReq = 564,
    CmdComposeLimitNumCompleteNotify = 588,
    CmdGetRecyleTimeScRsp = 548,
    CmdGetRelicFilterPlanScRsp = 541,
    CmdGetRelicFilterPlanCsReq = 600,
    CmdMarkRelicFilterPlanScRsp = 503,
    CmdExpUpEquipmentCsReq = 534,
    CmdDestroyItemCsReq = 510,
    CmdDiscardRelicScRsp = 579,
    CmdComposeItemScRsp = 525,
    CmdExpUpRelicScRsp = 505,
    CmdGetMarkItemListScRsp = 573,
    CmdExpUpEquipmentScRsp = 543,
    CmdSellItemScRsp = 507,
    CmdRelicReforgeConfirmScRsp = 597,
    CmdExchangeHcoinCsReq = 590,
    CmdAddRelicFilterPlanScRsp = 592,
    CmdMarkRelicFilterPlanCsReq = 599,
    CmdComposeItemCsReq = 546,
    CmdRelicReforgeScRsp = 530,
    CmdUseItemCsReq = 552,
    CmdCancelMarkItemNotify = 521,
    CmdSyncTurnFoodNotify = 565,
    CmdRankUpEquipmentScRsp = 593,
    CmdComposeSelectedRelicScRsp = 578,
    CmdModifyRelicFilterPlanCsReq = 560,
    CmdSellItemCsReq = 526,
    CmdRelicFilterPlanClearNameScNotify = 540,
    CmdComposeSelectedRelicCsReq = 512,
    CmdRechargeSuccNotify = 553,
    CmdDiscardRelicCsReq = 511,
    CmdLockEquipmentScRsp = 528,
    CmdRankUpEquipmentCsReq = 524,
    CmdMarkItemScRsp = 513,
    CmdExpUpRelicCsReq = 596,
    CmdUseItemScRsp = 574,
    CmdAddRelicFilterPlanCsReq = 594,
    CmdGeneralVirtualItemDataNotify = 537,
    CmdPromoteEquipmentScRsp = 527,
    CmdExchangeHcoinScRsp = 559,
}
impl CmdItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdItemTypeNone",
            Self::CmdAddEquipmentScNotify => "CmdAddEquipmentScNotify",
            Self::CmdSetTurnFoodSwitchCsReq => "CmdSetTurnFoodSwitchCsReq",
            Self::CmdGetMarkItemListCsReq => "CmdGetMarkItemListCsReq",
            Self::CmdDeleteRelicFilterPlanScRsp => "CmdDeleteRelicFilterPlanScRsp",
            Self::CmdPromoteEquipmentCsReq => "CmdPromoteEquipmentCsReq",
            Self::CmdRelicReforgeConfirmCsReq => "CmdRelicReforgeConfirmCsReq",
            Self::CmdRelicReforgeCsReq => "CmdRelicReforgeCsReq",
            Self::CmdMarkItemCsReq => "CmdMarkItemCsReq",
            Self::CmdComposeLimitNumUpdateNotify => "CmdComposeLimitNumUpdateNotify",
            Self::CmdGetRecyleTimeCsReq => "CmdGetRecyleTimeCsReq",
            Self::CmdLockRelicScRsp => "CmdLockRelicScRsp",
            Self::CmdLockRelicCsReq => "CmdLockRelicCsReq",
            Self::CmdGetBagCsReq => "CmdGetBagCsReq",
            Self::CmdDestroyItemScRsp => "CmdDestroyItemScRsp",
            Self::CmdGetBagScRsp => "CmdGetBagScRsp",
            Self::CmdLockEquipmentCsReq => "CmdLockEquipmentCsReq",
            Self::CmdSetTurnFoodSwitchScRsp => "CmdSetTurnFoodSwitchScRsp",
            Self::CmdModifyRelicFilterPlanScRsp => "CmdModifyRelicFilterPlanScRsp",
            Self::CmdDeleteRelicFilterPlanCsReq => "CmdDeleteRelicFilterPlanCsReq",
            Self::CmdComposeLimitNumCompleteNotify => "CmdComposeLimitNumCompleteNotify",
            Self::CmdGetRecyleTimeScRsp => "CmdGetRecyleTimeScRsp",
            Self::CmdGetRelicFilterPlanScRsp => "CmdGetRelicFilterPlanScRsp",
            Self::CmdGetRelicFilterPlanCsReq => "CmdGetRelicFilterPlanCsReq",
            Self::CmdMarkRelicFilterPlanScRsp => "CmdMarkRelicFilterPlanScRsp",
            Self::CmdExpUpEquipmentCsReq => "CmdExpUpEquipmentCsReq",
            Self::CmdDestroyItemCsReq => "CmdDestroyItemCsReq",
            Self::CmdDiscardRelicScRsp => "CmdDiscardRelicScRsp",
            Self::CmdComposeItemScRsp => "CmdComposeItemScRsp",
            Self::CmdExpUpRelicScRsp => "CmdExpUpRelicScRsp",
            Self::CmdGetMarkItemListScRsp => "CmdGetMarkItemListScRsp",
            Self::CmdExpUpEquipmentScRsp => "CmdExpUpEquipmentScRsp",
            Self::CmdSellItemScRsp => "CmdSellItemScRsp",
            Self::CmdRelicReforgeConfirmScRsp => "CmdRelicReforgeConfirmScRsp",
            Self::CmdExchangeHcoinCsReq => "CmdExchangeHcoinCsReq",
            Self::CmdAddRelicFilterPlanScRsp => "CmdAddRelicFilterPlanScRsp",
            Self::CmdMarkRelicFilterPlanCsReq => "CmdMarkRelicFilterPlanCsReq",
            Self::CmdComposeItemCsReq => "CmdComposeItemCsReq",
            Self::CmdRelicReforgeScRsp => "CmdRelicReforgeScRsp",
            Self::CmdUseItemCsReq => "CmdUseItemCsReq",
            Self::CmdCancelMarkItemNotify => "CmdCancelMarkItemNotify",
            Self::CmdSyncTurnFoodNotify => "CmdSyncTurnFoodNotify",
            Self::CmdRankUpEquipmentScRsp => "CmdRankUpEquipmentScRsp",
            Self::CmdComposeSelectedRelicScRsp => "CmdComposeSelectedRelicScRsp",
            Self::CmdModifyRelicFilterPlanCsReq => "CmdModifyRelicFilterPlanCsReq",
            Self::CmdSellItemCsReq => "CmdSellItemCsReq",
            Self::CmdRelicFilterPlanClearNameScNotify => {
                "CmdRelicFilterPlanClearNameScNotify"
            }
            Self::CmdComposeSelectedRelicCsReq => "CmdComposeSelectedRelicCsReq",
            Self::CmdRechargeSuccNotify => "CmdRechargeSuccNotify",
            Self::CmdDiscardRelicCsReq => "CmdDiscardRelicCsReq",
            Self::CmdLockEquipmentScRsp => "CmdLockEquipmentScRsp",
            Self::CmdRankUpEquipmentCsReq => "CmdRankUpEquipmentCsReq",
            Self::CmdMarkItemScRsp => "CmdMarkItemScRsp",
            Self::CmdExpUpRelicCsReq => "CmdExpUpRelicCsReq",
            Self::CmdUseItemScRsp => "CmdUseItemScRsp",
            Self::CmdAddRelicFilterPlanCsReq => "CmdAddRelicFilterPlanCsReq",
            Self::CmdGeneralVirtualItemDataNotify => "CmdGeneralVirtualItemDataNotify",
            Self::CmdPromoteEquipmentScRsp => "CmdPromoteEquipmentScRsp",
            Self::CmdExchangeHcoinScRsp => "CmdExchangeHcoinScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdItemTypeNone" => Some(Self::None),
            "CmdAddEquipmentScNotify" => Some(Self::CmdAddEquipmentScNotify),
            "CmdSetTurnFoodSwitchCsReq" => Some(Self::CmdSetTurnFoodSwitchCsReq),
            "CmdGetMarkItemListCsReq" => Some(Self::CmdGetMarkItemListCsReq),
            "CmdDeleteRelicFilterPlanScRsp" => Some(Self::CmdDeleteRelicFilterPlanScRsp),
            "CmdPromoteEquipmentCsReq" => Some(Self::CmdPromoteEquipmentCsReq),
            "CmdRelicReforgeConfirmCsReq" => Some(Self::CmdRelicReforgeConfirmCsReq),
            "CmdRelicReforgeCsReq" => Some(Self::CmdRelicReforgeCsReq),
            "CmdMarkItemCsReq" => Some(Self::CmdMarkItemCsReq),
            "CmdComposeLimitNumUpdateNotify" => {
                Some(Self::CmdComposeLimitNumUpdateNotify)
            }
            "CmdGetRecyleTimeCsReq" => Some(Self::CmdGetRecyleTimeCsReq),
            "CmdLockRelicScRsp" => Some(Self::CmdLockRelicScRsp),
            "CmdLockRelicCsReq" => Some(Self::CmdLockRelicCsReq),
            "CmdGetBagCsReq" => Some(Self::CmdGetBagCsReq),
            "CmdDestroyItemScRsp" => Some(Self::CmdDestroyItemScRsp),
            "CmdGetBagScRsp" => Some(Self::CmdGetBagScRsp),
            "CmdLockEquipmentCsReq" => Some(Self::CmdLockEquipmentCsReq),
            "CmdSetTurnFoodSwitchScRsp" => Some(Self::CmdSetTurnFoodSwitchScRsp),
            "CmdModifyRelicFilterPlanScRsp" => Some(Self::CmdModifyRelicFilterPlanScRsp),
            "CmdDeleteRelicFilterPlanCsReq" => Some(Self::CmdDeleteRelicFilterPlanCsReq),
            "CmdComposeLimitNumCompleteNotify" => {
                Some(Self::CmdComposeLimitNumCompleteNotify)
            }
            "CmdGetRecyleTimeScRsp" => Some(Self::CmdGetRecyleTimeScRsp),
            "CmdGetRelicFilterPlanScRsp" => Some(Self::CmdGetRelicFilterPlanScRsp),
            "CmdGetRelicFilterPlanCsReq" => Some(Self::CmdGetRelicFilterPlanCsReq),
            "CmdMarkRelicFilterPlanScRsp" => Some(Self::CmdMarkRelicFilterPlanScRsp),
            "CmdExpUpEquipmentCsReq" => Some(Self::CmdExpUpEquipmentCsReq),
            "CmdDestroyItemCsReq" => Some(Self::CmdDestroyItemCsReq),
            "CmdDiscardRelicScRsp" => Some(Self::CmdDiscardRelicScRsp),
            "CmdComposeItemScRsp" => Some(Self::CmdComposeItemScRsp),
            "CmdExpUpRelicScRsp" => Some(Self::CmdExpUpRelicScRsp),
            "CmdGetMarkItemListScRsp" => Some(Self::CmdGetMarkItemListScRsp),
            "CmdExpUpEquipmentScRsp" => Some(Self::CmdExpUpEquipmentScRsp),
            "CmdSellItemScRsp" => Some(Self::CmdSellItemScRsp),
            "CmdRelicReforgeConfirmScRsp" => Some(Self::CmdRelicReforgeConfirmScRsp),
            "CmdExchangeHcoinCsReq" => Some(Self::CmdExchangeHcoinCsReq),
            "CmdAddRelicFilterPlanScRsp" => Some(Self::CmdAddRelicFilterPlanScRsp),
            "CmdMarkRelicFilterPlanCsReq" => Some(Self::CmdMarkRelicFilterPlanCsReq),
            "CmdComposeItemCsReq" => Some(Self::CmdComposeItemCsReq),
            "CmdRelicReforgeScRsp" => Some(Self::CmdRelicReforgeScRsp),
            "CmdUseItemCsReq" => Some(Self::CmdUseItemCsReq),
            "CmdCancelMarkItemNotify" => Some(Self::CmdCancelMarkItemNotify),
            "CmdSyncTurnFoodNotify" => Some(Self::CmdSyncTurnFoodNotify),
            "CmdRankUpEquipmentScRsp" => Some(Self::CmdRankUpEquipmentScRsp),
            "CmdComposeSelectedRelicScRsp" => Some(Self::CmdComposeSelectedRelicScRsp),
            "CmdModifyRelicFilterPlanCsReq" => Some(Self::CmdModifyRelicFilterPlanCsReq),
            "CmdSellItemCsReq" => Some(Self::CmdSellItemCsReq),
            "CmdRelicFilterPlanClearNameScNotify" => {
                Some(Self::CmdRelicFilterPlanClearNameScNotify)
            }
            "CmdComposeSelectedRelicCsReq" => Some(Self::CmdComposeSelectedRelicCsReq),
            "CmdRechargeSuccNotify" => Some(Self::CmdRechargeSuccNotify),
            "CmdDiscardRelicCsReq" => Some(Self::CmdDiscardRelicCsReq),
            "CmdLockEquipmentScRsp" => Some(Self::CmdLockEquipmentScRsp),
            "CmdRankUpEquipmentCsReq" => Some(Self::CmdRankUpEquipmentCsReq),
            "CmdMarkItemScRsp" => Some(Self::CmdMarkItemScRsp),
            "CmdExpUpRelicCsReq" => Some(Self::CmdExpUpRelicCsReq),
            "CmdUseItemScRsp" => Some(Self::CmdUseItemScRsp),
            "CmdAddRelicFilterPlanCsReq" => Some(Self::CmdAddRelicFilterPlanCsReq),
            "CmdGeneralVirtualItemDataNotify" => {
                Some(Self::CmdGeneralVirtualItemDataNotify)
            }
            "CmdPromoteEquipmentScRsp" => Some(Self::CmdPromoteEquipmentScRsp),
            "CmdExchangeHcoinScRsp" => Some(Self::CmdExchangeHcoinScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TurnFoodSwitch {
    None = 0,
    Attack = 1,
    Define = 2,
}
impl TurnFoodSwitch {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "TURN_FOOD_SWITCH_NONE",
            Self::Attack => "TURN_FOOD_SWITCH_ATTACK",
            Self::Define => "TURN_FOOD_SWITCH_DEFINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TURN_FOOD_SWITCH_NONE" => Some(Self::None),
            "TURN_FOOD_SWITCH_ATTACK" => Some(Self::Attack),
            "TURN_FOOD_SWITCH_DEFINE" => Some(Self::Define),
            _ => None,
        }
    }
}
/// FEPNOPLNIBI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdJukeboxType {
    None = 0,
    CmdUnlockBackGroundMusicCsReq = 3167,
    CmdGetJukeboxDataCsReq = 3136,
    CmdTrialBackGroundMusicCsReq = 3152,
    CmdTrialBackGroundMusicScRsp = 3174,
    CmdGetJukeboxDataScRsp = 3195,
    CmdPlayBackGroundMusicCsReq = 3184,
    CmdPlayBackGroundMusicScRsp = 3127,
    CmdUnlockBackGroundMusicScRsp = 3128,
}
impl CmdJukeboxType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdJukeboxTypeNone",
            Self::CmdUnlockBackGroundMusicCsReq => "CmdUnlockBackGroundMusicCsReq",
            Self::CmdGetJukeboxDataCsReq => "CmdGetJukeboxDataCsReq",
            Self::CmdTrialBackGroundMusicCsReq => "CmdTrialBackGroundMusicCsReq",
            Self::CmdTrialBackGroundMusicScRsp => "CmdTrialBackGroundMusicScRsp",
            Self::CmdGetJukeboxDataScRsp => "CmdGetJukeboxDataScRsp",
            Self::CmdPlayBackGroundMusicCsReq => "CmdPlayBackGroundMusicCsReq",
            Self::CmdPlayBackGroundMusicScRsp => "CmdPlayBackGroundMusicScRsp",
            Self::CmdUnlockBackGroundMusicScRsp => "CmdUnlockBackGroundMusicScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdJukeboxTypeNone" => Some(Self::None),
            "CmdUnlockBackGroundMusicCsReq" => Some(Self::CmdUnlockBackGroundMusicCsReq),
            "CmdGetJukeboxDataCsReq" => Some(Self::CmdGetJukeboxDataCsReq),
            "CmdTrialBackGroundMusicCsReq" => Some(Self::CmdTrialBackGroundMusicCsReq),
            "CmdTrialBackGroundMusicScRsp" => Some(Self::CmdTrialBackGroundMusicScRsp),
            "CmdGetJukeboxDataScRsp" => Some(Self::CmdGetJukeboxDataScRsp),
            "CmdPlayBackGroundMusicCsReq" => Some(Self::CmdPlayBackGroundMusicCsReq),
            "CmdPlayBackGroundMusicScRsp" => Some(Self::CmdPlayBackGroundMusicScRsp),
            "CmdUnlockBackGroundMusicScRsp" => Some(Self::CmdUnlockBackGroundMusicScRsp),
            _ => None,
        }
    }
}
/// OBEHAGOMHJI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLineupType {
    None = 0,
    CmdQuitLineupCsReq = 752,
    CmdGetLineupAvatarDataScRsp = 746,
    CmdSwapLineupScRsp = 793,
    CmdSwitchLineupIndexScRsp = 775,
    CmdGetLineupAvatarDataCsReq = 743,
    CmdJoinLineupScRsp = 728,
    CmdSetLineupNameScRsp = 726,
    CmdGetCurLineupDataCsReq = 784,
    CmdChangeLineupLeaderCsReq = 725,
    CmdChangeLineupLeaderScRsp = 796,
    CmdSwitchLineupIndexCsReq = 705,
    CmdQuitLineupScRsp = 774,
    CmdGetStageLineupCsReq = 736,
    CmdReplaceLineupScRsp = 712,
    CmdGetStageLineupScRsp = 795,
    CmdSetLineupNameCsReq = 719,
    CmdJoinLineupCsReq = 767,
    CmdReplaceLineupCsReq = 759,
    CmdSwapLineupCsReq = 724,
    CmdExtraLineupDestroyNotify = 778,
    CmdVirtualLineupDestroyNotify = 790,
    CmdGetAllLineupDataCsReq = 707,
    CmdSyncLineupNotify = 734,
    CmdGetAllLineupDataScRsp = 753,
    CmdGetCurLineupDataScRsp = 727,
    CmdVirtualLineupTrialAvatarChangeScNotify = 729,
}
impl CmdLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdLineupTypeNone",
            Self::CmdQuitLineupCsReq => "CmdQuitLineupCsReq",
            Self::CmdGetLineupAvatarDataScRsp => "CmdGetLineupAvatarDataScRsp",
            Self::CmdSwapLineupScRsp => "CmdSwapLineupScRsp",
            Self::CmdSwitchLineupIndexScRsp => "CmdSwitchLineupIndexScRsp",
            Self::CmdGetLineupAvatarDataCsReq => "CmdGetLineupAvatarDataCsReq",
            Self::CmdJoinLineupScRsp => "CmdJoinLineupScRsp",
            Self::CmdSetLineupNameScRsp => "CmdSetLineupNameScRsp",
            Self::CmdGetCurLineupDataCsReq => "CmdGetCurLineupDataCsReq",
            Self::CmdChangeLineupLeaderCsReq => "CmdChangeLineupLeaderCsReq",
            Self::CmdChangeLineupLeaderScRsp => "CmdChangeLineupLeaderScRsp",
            Self::CmdSwitchLineupIndexCsReq => "CmdSwitchLineupIndexCsReq",
            Self::CmdQuitLineupScRsp => "CmdQuitLineupScRsp",
            Self::CmdGetStageLineupCsReq => "CmdGetStageLineupCsReq",
            Self::CmdReplaceLineupScRsp => "CmdReplaceLineupScRsp",
            Self::CmdGetStageLineupScRsp => "CmdGetStageLineupScRsp",
            Self::CmdSetLineupNameCsReq => "CmdSetLineupNameCsReq",
            Self::CmdJoinLineupCsReq => "CmdJoinLineupCsReq",
            Self::CmdReplaceLineupCsReq => "CmdReplaceLineupCsReq",
            Self::CmdSwapLineupCsReq => "CmdSwapLineupCsReq",
            Self::CmdExtraLineupDestroyNotify => "CmdExtraLineupDestroyNotify",
            Self::CmdVirtualLineupDestroyNotify => "CmdVirtualLineupDestroyNotify",
            Self::CmdGetAllLineupDataCsReq => "CmdGetAllLineupDataCsReq",
            Self::CmdSyncLineupNotify => "CmdSyncLineupNotify",
            Self::CmdGetAllLineupDataScRsp => "CmdGetAllLineupDataScRsp",
            Self::CmdGetCurLineupDataScRsp => "CmdGetCurLineupDataScRsp",
            Self::CmdVirtualLineupTrialAvatarChangeScNotify => {
                "CmdVirtualLineupTrialAvatarChangeScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLineupTypeNone" => Some(Self::None),
            "CmdQuitLineupCsReq" => Some(Self::CmdQuitLineupCsReq),
            "CmdGetLineupAvatarDataScRsp" => Some(Self::CmdGetLineupAvatarDataScRsp),
            "CmdSwapLineupScRsp" => Some(Self::CmdSwapLineupScRsp),
            "CmdSwitchLineupIndexScRsp" => Some(Self::CmdSwitchLineupIndexScRsp),
            "CmdGetLineupAvatarDataCsReq" => Some(Self::CmdGetLineupAvatarDataCsReq),
            "CmdJoinLineupScRsp" => Some(Self::CmdJoinLineupScRsp),
            "CmdSetLineupNameScRsp" => Some(Self::CmdSetLineupNameScRsp),
            "CmdGetCurLineupDataCsReq" => Some(Self::CmdGetCurLineupDataCsReq),
            "CmdChangeLineupLeaderCsReq" => Some(Self::CmdChangeLineupLeaderCsReq),
            "CmdChangeLineupLeaderScRsp" => Some(Self::CmdChangeLineupLeaderScRsp),
            "CmdSwitchLineupIndexCsReq" => Some(Self::CmdSwitchLineupIndexCsReq),
            "CmdQuitLineupScRsp" => Some(Self::CmdQuitLineupScRsp),
            "CmdGetStageLineupCsReq" => Some(Self::CmdGetStageLineupCsReq),
            "CmdReplaceLineupScRsp" => Some(Self::CmdReplaceLineupScRsp),
            "CmdGetStageLineupScRsp" => Some(Self::CmdGetStageLineupScRsp),
            "CmdSetLineupNameCsReq" => Some(Self::CmdSetLineupNameCsReq),
            "CmdJoinLineupCsReq" => Some(Self::CmdJoinLineupCsReq),
            "CmdReplaceLineupCsReq" => Some(Self::CmdReplaceLineupCsReq),
            "CmdSwapLineupCsReq" => Some(Self::CmdSwapLineupCsReq),
            "CmdExtraLineupDestroyNotify" => Some(Self::CmdExtraLineupDestroyNotify),
            "CmdVirtualLineupDestroyNotify" => Some(Self::CmdVirtualLineupDestroyNotify),
            "CmdGetAllLineupDataCsReq" => Some(Self::CmdGetAllLineupDataCsReq),
            "CmdSyncLineupNotify" => Some(Self::CmdSyncLineupNotify),
            "CmdGetAllLineupDataScRsp" => Some(Self::CmdGetAllLineupDataScRsp),
            "CmdGetCurLineupDataScRsp" => Some(Self::CmdGetCurLineupDataScRsp),
            "CmdVirtualLineupTrialAvatarChangeScNotify" => {
                Some(Self::CmdVirtualLineupTrialAvatarChangeScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mjhbolpljmn {
    LineupTypeNone = 0,
    LineupTypePreset = 1,
    LineupTypeVirtual = 2,
    LineupTypeExtra = 3,
    LineupTypeStoryLine = 4,
}
impl Mjhbolpljmn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LineupTypeNone => "LINEUP_TYPE_NONE",
            Self::LineupTypePreset => "LINEUP_TYPE_PRESET",
            Self::LineupTypeVirtual => "LINEUP_TYPE_VIRTUAL",
            Self::LineupTypeExtra => "LINEUP_TYPE_EXTRA",
            Self::LineupTypeStoryLine => "LINEUP_TYPE_STORY_LINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_TYPE_NONE" => Some(Self::LineupTypeNone),
            "LINEUP_TYPE_PRESET" => Some(Self::LineupTypePreset),
            "LINEUP_TYPE_VIRTUAL" => Some(Self::LineupTypeVirtual),
            "LINEUP_TYPE_EXTRA" => Some(Self::LineupTypeExtra),
            "LINEUP_TYPE_STORY_LINE" => Some(Self::LineupTypeStoryLine),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExtraLineupType {
    LineupNone = 0,
    LineupChallenge = 1,
    LineupRogue = 2,
    LineupChallenge2 = 3,
    LineupChallenge3 = 4,
    LineupRogueChallenge = 5,
    LineupStageTrial = 6,
    LineupRogueTrial = 7,
    LineupActivity = 8,
    LineupBoxingClub = 9,
    LineupTreasureDungeon = 11,
    LineupChessRogue = 12,
    LineupHeliobus = 13,
    LineupTournRogue = 14,
    LineupRelicRogue = 15,
    LineupArcadeRogue = 16,
    LineupMagicRogue = 17,
}
impl ExtraLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LineupNone => "LINEUP_NONE",
            Self::LineupChallenge => "LINEUP_CHALLENGE",
            Self::LineupRogue => "LINEUP_ROGUE",
            Self::LineupChallenge2 => "LINEUP_CHALLENGE_2",
            Self::LineupChallenge3 => "LINEUP_CHALLENGE_3",
            Self::LineupRogueChallenge => "LINEUP_ROGUE_CHALLENGE",
            Self::LineupStageTrial => "LINEUP_STAGE_TRIAL",
            Self::LineupRogueTrial => "LINEUP_ROGUE_TRIAL",
            Self::LineupActivity => "LINEUP_ACTIVITY",
            Self::LineupBoxingClub => "LINEUP_BOXING_CLUB",
            Self::LineupTreasureDungeon => "LINEUP_TREASURE_DUNGEON",
            Self::LineupChessRogue => "LINEUP_CHESS_ROGUE",
            Self::LineupHeliobus => "LINEUP_HELIOBUS",
            Self::LineupTournRogue => "LINEUP_TOURN_ROGUE",
            Self::LineupRelicRogue => "LINEUP_RELIC_ROGUE",
            Self::LineupArcadeRogue => "LINEUP_ARCADE_ROGUE",
            Self::LineupMagicRogue => "LINEUP_MAGIC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_NONE" => Some(Self::LineupNone),
            "LINEUP_CHALLENGE" => Some(Self::LineupChallenge),
            "LINEUP_ROGUE" => Some(Self::LineupRogue),
            "LINEUP_CHALLENGE_2" => Some(Self::LineupChallenge2),
            "LINEUP_CHALLENGE_3" => Some(Self::LineupChallenge3),
            "LINEUP_ROGUE_CHALLENGE" => Some(Self::LineupRogueChallenge),
            "LINEUP_STAGE_TRIAL" => Some(Self::LineupStageTrial),
            "LINEUP_ROGUE_TRIAL" => Some(Self::LineupRogueTrial),
            "LINEUP_ACTIVITY" => Some(Self::LineupActivity),
            "LINEUP_BOXING_CLUB" => Some(Self::LineupBoxingClub),
            "LINEUP_TREASURE_DUNGEON" => Some(Self::LineupTreasureDungeon),
            "LINEUP_CHESS_ROGUE" => Some(Self::LineupChessRogue),
            "LINEUP_HELIOBUS" => Some(Self::LineupHeliobus),
            "LINEUP_TOURN_ROGUE" => Some(Self::LineupTournRogue),
            "LINEUP_RELIC_ROGUE" => Some(Self::LineupRelicRogue),
            "LINEUP_ARCADE_ROGUE" => Some(Self::LineupArcadeRogue),
            "LINEUP_MAGIC_ROGUE" => Some(Self::LineupMagicRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncLineupReason {
    SyncReasonNone = 0,
    SyncReasonMpAdd = 1,
    SyncReasonMpAddPropHit = 2,
    SyncReasonHpAdd = 3,
    SyncReasonHpAddPropHit = 4,
}
impl SyncLineupReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SyncReasonNone => "SYNC_REASON_NONE",
            Self::SyncReasonMpAdd => "SYNC_REASON_MP_ADD",
            Self::SyncReasonMpAddPropHit => "SYNC_REASON_MP_ADD_PROP_HIT",
            Self::SyncReasonHpAdd => "SYNC_REASON_HP_ADD",
            Self::SyncReasonHpAddPropHit => "SYNC_REASON_HP_ADD_PROP_HIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYNC_REASON_NONE" => Some(Self::SyncReasonNone),
            "SYNC_REASON_MP_ADD" => Some(Self::SyncReasonMpAdd),
            "SYNC_REASON_MP_ADD_PROP_HIT" => Some(Self::SyncReasonMpAddPropHit),
            "SYNC_REASON_HP_ADD" => Some(Self::SyncReasonHpAdd),
            "SYNC_REASON_HP_ADD_PROP_HIT" => Some(Self::SyncReasonHpAddPropHit),
            _ => None,
        }
    }
}
/// ELFNPNMOPJH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLobbyType {
    None = 0,
    CmdLobbyBeginCsReq = 7365,
    CmdLobbyInviteScRsp = 7360,
    CmdLobbySyncInfoScNotify = 7395,
    CmdLobbyInviteCsReq = 7378,
    CmdLobbyKickOutScRsp = 7396,
    CmdLobbyQuitCsReq = 7398,
    CmdLobbyQuitScRsp = 7363,
    CmdLobbyCreateScRsp = 7400,
    CmdLobbyKickOutCsReq = 7397,
    CmdLobbyModifyPlayerInfoScRsp = 7393,
    CmdLobbyGetInfoCsReq = 7354,
    CmdLobbyGetInfoScRsp = 7390,
    CmdLobbyModifyPlayerInfoCsReq = 7359,
    CmdLobbyBeginScRsp = 7399,
    CmdLobbyInviteScNotify = 7367,
    CmdLobbyJoinCsReq = 7380,
    CmdLobbyJoinScRsp = 7373,
    CmdLobbyCreateCsReq = 7362,
}
impl CmdLobbyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdLobbyTypeNone",
            Self::CmdLobbyBeginCsReq => "CmdLobbyBeginCsReq",
            Self::CmdLobbyInviteScRsp => "CmdLobbyInviteScRsp",
            Self::CmdLobbySyncInfoScNotify => "CmdLobbySyncInfoScNotify",
            Self::CmdLobbyInviteCsReq => "CmdLobbyInviteCsReq",
            Self::CmdLobbyKickOutScRsp => "CmdLobbyKickOutScRsp",
            Self::CmdLobbyQuitCsReq => "CmdLobbyQuitCsReq",
            Self::CmdLobbyQuitScRsp => "CmdLobbyQuitScRsp",
            Self::CmdLobbyCreateScRsp => "CmdLobbyCreateScRsp",
            Self::CmdLobbyKickOutCsReq => "CmdLobbyKickOutCsReq",
            Self::CmdLobbyModifyPlayerInfoScRsp => "CmdLobbyModifyPlayerInfoScRsp",
            Self::CmdLobbyGetInfoCsReq => "CmdLobbyGetInfoCsReq",
            Self::CmdLobbyGetInfoScRsp => "CmdLobbyGetInfoScRsp",
            Self::CmdLobbyModifyPlayerInfoCsReq => "CmdLobbyModifyPlayerInfoCsReq",
            Self::CmdLobbyBeginScRsp => "CmdLobbyBeginScRsp",
            Self::CmdLobbyInviteScNotify => "CmdLobbyInviteScNotify",
            Self::CmdLobbyJoinCsReq => "CmdLobbyJoinCsReq",
            Self::CmdLobbyJoinScRsp => "CmdLobbyJoinScRsp",
            Self::CmdLobbyCreateCsReq => "CmdLobbyCreateCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLobbyTypeNone" => Some(Self::None),
            "CmdLobbyBeginCsReq" => Some(Self::CmdLobbyBeginCsReq),
            "CmdLobbyInviteScRsp" => Some(Self::CmdLobbyInviteScRsp),
            "CmdLobbySyncInfoScNotify" => Some(Self::CmdLobbySyncInfoScNotify),
            "CmdLobbyInviteCsReq" => Some(Self::CmdLobbyInviteCsReq),
            "CmdLobbyKickOutScRsp" => Some(Self::CmdLobbyKickOutScRsp),
            "CmdLobbyQuitCsReq" => Some(Self::CmdLobbyQuitCsReq),
            "CmdLobbyQuitScRsp" => Some(Self::CmdLobbyQuitScRsp),
            "CmdLobbyCreateScRsp" => Some(Self::CmdLobbyCreateScRsp),
            "CmdLobbyKickOutCsReq" => Some(Self::CmdLobbyKickOutCsReq),
            "CmdLobbyModifyPlayerInfoScRsp" => Some(Self::CmdLobbyModifyPlayerInfoScRsp),
            "CmdLobbyGetInfoCsReq" => Some(Self::CmdLobbyGetInfoCsReq),
            "CmdLobbyGetInfoScRsp" => Some(Self::CmdLobbyGetInfoScRsp),
            "CmdLobbyModifyPlayerInfoCsReq" => Some(Self::CmdLobbyModifyPlayerInfoCsReq),
            "CmdLobbyBeginScRsp" => Some(Self::CmdLobbyBeginScRsp),
            "CmdLobbyInviteScNotify" => Some(Self::CmdLobbyInviteScNotify),
            "CmdLobbyJoinCsReq" => Some(Self::CmdLobbyJoinCsReq),
            "CmdLobbyJoinScRsp" => Some(Self::CmdLobbyJoinScRsp),
            "CmdLobbyCreateCsReq" => Some(Self::CmdLobbyCreateCsReq),
            _ => None,
        }
    }
}
/// BCGPIONAADA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMailType {
    None = 0,
    CmdGetMailScRsp = 895,
    CmdTakeMailAttachmentCsReq = 852,
    CmdDelMailScRsp = 828,
    CmdTakeMailAttachmentScRsp = 874,
    CmdMarkReadMailScRsp = 827,
    CmdNewMailScNotify = 824,
    CmdGetMailCsReq = 836,
    CmdDelMailCsReq = 867,
    CmdMarkReadMailCsReq = 884,
}
impl CmdMailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMailTypeNone",
            Self::CmdGetMailScRsp => "CmdGetMailScRsp",
            Self::CmdTakeMailAttachmentCsReq => "CmdTakeMailAttachmentCsReq",
            Self::CmdDelMailScRsp => "CmdDelMailScRsp",
            Self::CmdTakeMailAttachmentScRsp => "CmdTakeMailAttachmentScRsp",
            Self::CmdMarkReadMailScRsp => "CmdMarkReadMailScRsp",
            Self::CmdNewMailScNotify => "CmdNewMailScNotify",
            Self::CmdGetMailCsReq => "CmdGetMailCsReq",
            Self::CmdDelMailCsReq => "CmdDelMailCsReq",
            Self::CmdMarkReadMailCsReq => "CmdMarkReadMailCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMailTypeNone" => Some(Self::None),
            "CmdGetMailScRsp" => Some(Self::CmdGetMailScRsp),
            "CmdTakeMailAttachmentCsReq" => Some(Self::CmdTakeMailAttachmentCsReq),
            "CmdDelMailScRsp" => Some(Self::CmdDelMailScRsp),
            "CmdTakeMailAttachmentScRsp" => Some(Self::CmdTakeMailAttachmentScRsp),
            "CmdMarkReadMailScRsp" => Some(Self::CmdMarkReadMailScRsp),
            "CmdNewMailScNotify" => Some(Self::CmdNewMailScNotify),
            "CmdGetMailCsReq" => Some(Self::CmdGetMailCsReq),
            "CmdDelMailCsReq" => Some(Self::CmdDelMailCsReq),
            "CmdMarkReadMailCsReq" => Some(Self::CmdMarkReadMailCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MailType {
    Normal = 0,
    Star = 1,
}
impl MailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Normal => "MAIL_TYPE_NORMAL",
            Self::Star => "MAIL_TYPE_STAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIL_TYPE_NORMAL" => Some(Self::Normal),
            "MAIL_TYPE_STAR" => Some(Self::Star),
            _ => None,
        }
    }
}
/// CAMEMAHIOCC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMapRotationType {
    None = 0,
    CmdInteractChargerCsReq = 6884,
    CmdResetMapRotationRegionScRsp = 6825,
    CmdLeaveMapRotationRegionScRsp = 6893,
    CmdRotateMapScRsp = 6874,
    CmdUpdateEnergyScNotify = 6805,
    CmdDeployRotaterScRsp = 6828,
    CmdEnterMapRotationRegionCsReq = 6836,
    CmdRemoveRotaterScRsp = 6826,
    CmdGetMapRotationDataCsReq = 6834,
    CmdUpdateRotaterScNotify = 6807,
    CmdResetMapRotationRegionCsReq = 6846,
    CmdLeaveMapRotationRegionScNotify = 6896,
    CmdEnterMapRotationRegionScRsp = 6895,
    CmdUpdateMapRotationDataScNotify = 6875,
    CmdRemoveRotaterCsReq = 6819,
    CmdDeployRotaterCsReq = 6867,
    CmdRotateMapCsReq = 6852,
    CmdGetMapRotationDataScRsp = 6843,
    CmdLeaveMapRotationRegionCsReq = 6824,
    CmdInteractChargerScRsp = 6827,
}
impl CmdMapRotationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMapRotationTypeNone",
            Self::CmdInteractChargerCsReq => "CmdInteractChargerCsReq",
            Self::CmdResetMapRotationRegionScRsp => "CmdResetMapRotationRegionScRsp",
            Self::CmdLeaveMapRotationRegionScRsp => "CmdLeaveMapRotationRegionScRsp",
            Self::CmdRotateMapScRsp => "CmdRotateMapScRsp",
            Self::CmdUpdateEnergyScNotify => "CmdUpdateEnergyScNotify",
            Self::CmdDeployRotaterScRsp => "CmdDeployRotaterScRsp",
            Self::CmdEnterMapRotationRegionCsReq => "CmdEnterMapRotationRegionCsReq",
            Self::CmdRemoveRotaterScRsp => "CmdRemoveRotaterScRsp",
            Self::CmdGetMapRotationDataCsReq => "CmdGetMapRotationDataCsReq",
            Self::CmdUpdateRotaterScNotify => "CmdUpdateRotaterScNotify",
            Self::CmdResetMapRotationRegionCsReq => "CmdResetMapRotationRegionCsReq",
            Self::CmdLeaveMapRotationRegionScNotify => {
                "CmdLeaveMapRotationRegionScNotify"
            }
            Self::CmdEnterMapRotationRegionScRsp => "CmdEnterMapRotationRegionScRsp",
            Self::CmdUpdateMapRotationDataScNotify => "CmdUpdateMapRotationDataScNotify",
            Self::CmdRemoveRotaterCsReq => "CmdRemoveRotaterCsReq",
            Self::CmdDeployRotaterCsReq => "CmdDeployRotaterCsReq",
            Self::CmdRotateMapCsReq => "CmdRotateMapCsReq",
            Self::CmdGetMapRotationDataScRsp => "CmdGetMapRotationDataScRsp",
            Self::CmdLeaveMapRotationRegionCsReq => "CmdLeaveMapRotationRegionCsReq",
            Self::CmdInteractChargerScRsp => "CmdInteractChargerScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMapRotationTypeNone" => Some(Self::None),
            "CmdInteractChargerCsReq" => Some(Self::CmdInteractChargerCsReq),
            "CmdResetMapRotationRegionScRsp" => {
                Some(Self::CmdResetMapRotationRegionScRsp)
            }
            "CmdLeaveMapRotationRegionScRsp" => {
                Some(Self::CmdLeaveMapRotationRegionScRsp)
            }
            "CmdRotateMapScRsp" => Some(Self::CmdRotateMapScRsp),
            "CmdUpdateEnergyScNotify" => Some(Self::CmdUpdateEnergyScNotify),
            "CmdDeployRotaterScRsp" => Some(Self::CmdDeployRotaterScRsp),
            "CmdEnterMapRotationRegionCsReq" => {
                Some(Self::CmdEnterMapRotationRegionCsReq)
            }
            "CmdRemoveRotaterScRsp" => Some(Self::CmdRemoveRotaterScRsp),
            "CmdGetMapRotationDataCsReq" => Some(Self::CmdGetMapRotationDataCsReq),
            "CmdUpdateRotaterScNotify" => Some(Self::CmdUpdateRotaterScNotify),
            "CmdResetMapRotationRegionCsReq" => {
                Some(Self::CmdResetMapRotationRegionCsReq)
            }
            "CmdLeaveMapRotationRegionScNotify" => {
                Some(Self::CmdLeaveMapRotationRegionScNotify)
            }
            "CmdEnterMapRotationRegionScRsp" => {
                Some(Self::CmdEnterMapRotationRegionScRsp)
            }
            "CmdUpdateMapRotationDataScNotify" => {
                Some(Self::CmdUpdateMapRotationDataScNotify)
            }
            "CmdRemoveRotaterCsReq" => Some(Self::CmdRemoveRotaterCsReq),
            "CmdDeployRotaterCsReq" => Some(Self::CmdDeployRotaterCsReq),
            "CmdRotateMapCsReq" => Some(Self::CmdRotateMapCsReq),
            "CmdGetMapRotationDataScRsp" => Some(Self::CmdGetMapRotationDataScRsp),
            "CmdLeaveMapRotationRegionCsReq" => {
                Some(Self::CmdLeaveMapRotationRegionCsReq)
            }
            "CmdInteractChargerScRsp" => Some(Self::CmdInteractChargerScRsp),
            _ => None,
        }
    }
}
/// FDNKMPBGCKI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMarkChestType {
    None = 0,
    CmdUpdateMarkChestCsReq = 8187,
    CmdMarkChestChangedScNotify = 8197,
    CmdGetMarkChestCsReq = 8200,
    CmdUpdateMarkChestScRsp = 8183,
    CmdGetMarkChestScRsp = 8195,
}
impl CmdMarkChestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMarkChestTypeNone",
            Self::CmdUpdateMarkChestCsReq => "CmdUpdateMarkChestCsReq",
            Self::CmdMarkChestChangedScNotify => "CmdMarkChestChangedScNotify",
            Self::CmdGetMarkChestCsReq => "CmdGetMarkChestCsReq",
            Self::CmdUpdateMarkChestScRsp => "CmdUpdateMarkChestScRsp",
            Self::CmdGetMarkChestScRsp => "CmdGetMarkChestScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMarkChestTypeNone" => Some(Self::None),
            "CmdUpdateMarkChestCsReq" => Some(Self::CmdUpdateMarkChestCsReq),
            "CmdMarkChestChangedScNotify" => Some(Self::CmdMarkChestChangedScNotify),
            "CmdGetMarkChestCsReq" => Some(Self::CmdGetMarkChestCsReq),
            "CmdUpdateMarkChestScRsp" => Some(Self::CmdUpdateMarkChestScRsp),
            "CmdGetMarkChestScRsp" => Some(Self::CmdGetMarkChestScRsp),
            _ => None,
        }
    }
}
/// KPAJOLAAIGM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMatchType {
    None = 0,
    CmdCancelMatchCsReq = 7330,
    CmdGetCrossInfoCsReq = 7349,
    CmdGetCrossInfoScRsp = 7309,
    CmdStartMatchCsReq = 7312,
    CmdMatchResultScNotify = 7315,
    CmdStartMatchScRsp = 7350,
    CmdCancelMatchScRsp = 7323,
}
impl CmdMatchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMatchTypeNone",
            Self::CmdCancelMatchCsReq => "CmdCancelMatchCsReq",
            Self::CmdGetCrossInfoCsReq => "CmdGetCrossInfoCsReq",
            Self::CmdGetCrossInfoScRsp => "CmdGetCrossInfoScRsp",
            Self::CmdStartMatchCsReq => "CmdStartMatchCsReq",
            Self::CmdMatchResultScNotify => "CmdMatchResultScNotify",
            Self::CmdStartMatchScRsp => "CmdStartMatchScRsp",
            Self::CmdCancelMatchScRsp => "CmdCancelMatchScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchTypeNone" => Some(Self::None),
            "CmdCancelMatchCsReq" => Some(Self::CmdCancelMatchCsReq),
            "CmdGetCrossInfoCsReq" => Some(Self::CmdGetCrossInfoCsReq),
            "CmdGetCrossInfoScRsp" => Some(Self::CmdGetCrossInfoScRsp),
            "CmdStartMatchCsReq" => Some(Self::CmdStartMatchCsReq),
            "CmdMatchResultScNotify" => Some(Self::CmdMatchResultScNotify),
            "CmdStartMatchScRsp" => Some(Self::CmdStartMatchScRsp),
            "CmdCancelMatchScRsp" => Some(Self::CmdCancelMatchScRsp),
            _ => None,
        }
    }
}
/// BEHMPIBGGIJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMatchThreeModuleType {
    None = 0,
    CmdMatchThreeSetBirdPosScRsp = 7409,
    CmdMatchThreeLevelEndScRsp = 7423,
    CmdMatchThreeGetDataScRsp = 7450,
    CmdMatchThreeSyncDataScNotify = 7415,
    CmdMatchThreeSetBirdPosCsReq = 7449,
    CmdMatchThreeLevelEndCsReq = 7430,
    CmdMatchThreeGetDataCsReq = 7412,
}
impl CmdMatchThreeModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMatchThreeModuleTypeNone",
            Self::CmdMatchThreeSetBirdPosScRsp => "CmdMatchThreeSetBirdPosScRsp",
            Self::CmdMatchThreeLevelEndScRsp => "CmdMatchThreeLevelEndScRsp",
            Self::CmdMatchThreeGetDataScRsp => "CmdMatchThreeGetDataScRsp",
            Self::CmdMatchThreeSyncDataScNotify => "CmdMatchThreeSyncDataScNotify",
            Self::CmdMatchThreeSetBirdPosCsReq => "CmdMatchThreeSetBirdPosCsReq",
            Self::CmdMatchThreeLevelEndCsReq => "CmdMatchThreeLevelEndCsReq",
            Self::CmdMatchThreeGetDataCsReq => "CmdMatchThreeGetDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchThreeModuleTypeNone" => Some(Self::None),
            "CmdMatchThreeSetBirdPosScRsp" => Some(Self::CmdMatchThreeSetBirdPosScRsp),
            "CmdMatchThreeLevelEndScRsp" => Some(Self::CmdMatchThreeLevelEndScRsp),
            "CmdMatchThreeGetDataScRsp" => Some(Self::CmdMatchThreeGetDataScRsp),
            "CmdMatchThreeSyncDataScNotify" => Some(Self::CmdMatchThreeSyncDataScNotify),
            "CmdMatchThreeSetBirdPosCsReq" => Some(Self::CmdMatchThreeSetBirdPosCsReq),
            "CmdMatchThreeLevelEndCsReq" => Some(Self::CmdMatchThreeLevelEndCsReq),
            "CmdMatchThreeGetDataCsReq" => Some(Self::CmdMatchThreeGetDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bcgijjbifei {
    MatchThreeStatisticsNone = 0,
    MatchThreeStatisticsFirst = 1,
    MatchThreeStatisticsSecond = 2,
    MatchThreeStatisticsThird = 3,
    MatchThreeStatisticsFruit = 4,
    MatchThreeStatisticsSkill = 5,
    MatchThreeStatisticsDefeat = 6,
    MatchThreeStatisticsBomb = 7,
    MatchThreeStatisticsDamage = 8,
    MatchThreeStatisticsEnergy = 9,
    MatchThreeStatisticsSwapBomb = 10,
}
impl Bcgijjbifei {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchThreeStatisticsNone => "MatchThreeStatistics_None",
            Self::MatchThreeStatisticsFirst => "MatchThreeStatistics_First",
            Self::MatchThreeStatisticsSecond => "MatchThreeStatistics_Second",
            Self::MatchThreeStatisticsThird => "MatchThreeStatistics_Third",
            Self::MatchThreeStatisticsFruit => "MatchThreeStatistics_Fruit",
            Self::MatchThreeStatisticsSkill => "MatchThreeStatistics_Skill",
            Self::MatchThreeStatisticsDefeat => "MatchThreeStatistics_Defeat",
            Self::MatchThreeStatisticsBomb => "MatchThreeStatistics_Bomb",
            Self::MatchThreeStatisticsDamage => "MatchThreeStatistics_Damage",
            Self::MatchThreeStatisticsEnergy => "MatchThreeStatistics_Energy",
            Self::MatchThreeStatisticsSwapBomb => "MatchThreeStatistics_SwapBomb",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchThreeStatistics_None" => Some(Self::MatchThreeStatisticsNone),
            "MatchThreeStatistics_First" => Some(Self::MatchThreeStatisticsFirst),
            "MatchThreeStatistics_Second" => Some(Self::MatchThreeStatisticsSecond),
            "MatchThreeStatistics_Third" => Some(Self::MatchThreeStatisticsThird),
            "MatchThreeStatistics_Fruit" => Some(Self::MatchThreeStatisticsFruit),
            "MatchThreeStatistics_Skill" => Some(Self::MatchThreeStatisticsSkill),
            "MatchThreeStatistics_Defeat" => Some(Self::MatchThreeStatisticsDefeat),
            "MatchThreeStatistics_Bomb" => Some(Self::MatchThreeStatisticsBomb),
            "MatchThreeStatistics_Damage" => Some(Self::MatchThreeStatisticsDamage),
            "MatchThreeStatistics_Energy" => Some(Self::MatchThreeStatisticsEnergy),
            "MatchThreeStatistics_SwapBomb" => Some(Self::MatchThreeStatisticsSwapBomb),
            _ => None,
        }
    }
}
/// KEJHBDJFLLH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMessageType {
    None = 0,
    CmdGetNpcStatusCsReq = 2784,
    CmdFinishItemIdScRsp = 2728,
    CmdGetNpcMessageGroupScRsp = 2795,
    CmdGetMissionMessageInfoCsReq = 2734,
    CmdFinishSectionIdScRsp = 2774,
    CmdFinishItemIdCsReq = 2767,
    CmdGetNpcStatusScRsp = 2727,
    CmdFinishPerformSectionIdCsReq = 2724,
    CmdGetNpcMessageGroupCsReq = 2736,
    CmdFinishPerformSectionIdScRsp = 2793,
    CmdFinishSectionIdCsReq = 2752,
    CmdGetMissionMessageInfoScRsp = 2743,
}
impl CmdMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMessageTypeNone",
            Self::CmdGetNpcStatusCsReq => "CmdGetNpcStatusCsReq",
            Self::CmdFinishItemIdScRsp => "CmdFinishItemIdScRsp",
            Self::CmdGetNpcMessageGroupScRsp => "CmdGetNpcMessageGroupScRsp",
            Self::CmdGetMissionMessageInfoCsReq => "CmdGetMissionMessageInfoCsReq",
            Self::CmdFinishSectionIdScRsp => "CmdFinishSectionIdScRsp",
            Self::CmdFinishItemIdCsReq => "CmdFinishItemIdCsReq",
            Self::CmdGetNpcStatusScRsp => "CmdGetNpcStatusScRsp",
            Self::CmdFinishPerformSectionIdCsReq => "CmdFinishPerformSectionIdCsReq",
            Self::CmdGetNpcMessageGroupCsReq => "CmdGetNpcMessageGroupCsReq",
            Self::CmdFinishPerformSectionIdScRsp => "CmdFinishPerformSectionIdScRsp",
            Self::CmdFinishSectionIdCsReq => "CmdFinishSectionIdCsReq",
            Self::CmdGetMissionMessageInfoScRsp => "CmdGetMissionMessageInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMessageTypeNone" => Some(Self::None),
            "CmdGetNpcStatusCsReq" => Some(Self::CmdGetNpcStatusCsReq),
            "CmdFinishItemIdScRsp" => Some(Self::CmdFinishItemIdScRsp),
            "CmdGetNpcMessageGroupScRsp" => Some(Self::CmdGetNpcMessageGroupScRsp),
            "CmdGetMissionMessageInfoCsReq" => Some(Self::CmdGetMissionMessageInfoCsReq),
            "CmdFinishSectionIdScRsp" => Some(Self::CmdFinishSectionIdScRsp),
            "CmdFinishItemIdCsReq" => Some(Self::CmdFinishItemIdCsReq),
            "CmdGetNpcStatusScRsp" => Some(Self::CmdGetNpcStatusScRsp),
            "CmdFinishPerformSectionIdCsReq" => {
                Some(Self::CmdFinishPerformSectionIdCsReq)
            }
            "CmdGetNpcMessageGroupCsReq" => Some(Self::CmdGetNpcMessageGroupCsReq),
            "CmdFinishPerformSectionIdScRsp" => {
                Some(Self::CmdFinishPerformSectionIdScRsp)
            }
            "CmdFinishSectionIdCsReq" => Some(Self::CmdFinishSectionIdCsReq),
            "CmdGetMissionMessageInfoScRsp" => Some(Self::CmdGetMissionMessageInfoScRsp),
            _ => None,
        }
    }
}
/// BLIHALAFNMI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMiscModuleType {
    None = 0,
    CmdTriggerVoiceCsReq = 4146,
    CmdCancelCacheNotifyCsReq = 4124,
    CmdSecurityReportCsReq = 4134,
    CmdDifficultyAdjustmentGetDataCsReq = 4188,
    CmdMazeKillDirectCsReq = 4135,
    CmdSubmitOrigamiItemCsReq = 4196,
    CmdMazeKillDirectScRsp = 4173,
    CmdUpdateGunPlayDataScRsp = 4148,
    CmdGetGunPlayDataCsReq = 4178,
    CmdShareScRsp = 4195,
    CmdDifficultyAdjustmentUpdateDataScRsp = 4176,
    CmdGetMovieRacingDataScRsp = 4190,
    CmdGetMovieRacingDataCsReq = 4153,
    CmdSecurityReportScRsp = 4143,
    CmdGetGunPlayDataScRsp = 4129,
    CmdGetShareDataCsReq = 4184,
    CmdTakePictureCsReq = 4167,
    CmdTriggerVoiceScRsp = 4125,
    CmdUpdateMovieRacingDataScRsp = 4112,
    CmdSubmitOrigamiItemScRsp = 4105,
    CmdShareCsReq = 4136,
    CmdTakePictureScRsp = 4128,
    CmdUpdateMovieRacingDataCsReq = 4159,
    CmdGetShareDataScRsp = 4127,
    CmdDifficultyAdjustmentUpdateDataCsReq = 4110,
    CmdDifficultyAdjustmentGetDataScRsp = 4158,
    CmdUpdateGunPlayDataCsReq = 4150,
    CmdCancelCacheNotifyScRsp = 4193,
}
impl CmdMiscModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMiscModuleTypeNone",
            Self::CmdTriggerVoiceCsReq => "CmdTriggerVoiceCsReq",
            Self::CmdCancelCacheNotifyCsReq => "CmdCancelCacheNotifyCsReq",
            Self::CmdSecurityReportCsReq => "CmdSecurityReportCsReq",
            Self::CmdDifficultyAdjustmentGetDataCsReq => {
                "CmdDifficultyAdjustmentGetDataCsReq"
            }
            Self::CmdMazeKillDirectCsReq => "CmdMazeKillDirectCsReq",
            Self::CmdSubmitOrigamiItemCsReq => "CmdSubmitOrigamiItemCsReq",
            Self::CmdMazeKillDirectScRsp => "CmdMazeKillDirectScRsp",
            Self::CmdUpdateGunPlayDataScRsp => "CmdUpdateGunPlayDataScRsp",
            Self::CmdGetGunPlayDataCsReq => "CmdGetGunPlayDataCsReq",
            Self::CmdShareScRsp => "CmdShareScRsp",
            Self::CmdDifficultyAdjustmentUpdateDataScRsp => {
                "CmdDifficultyAdjustmentUpdateDataScRsp"
            }
            Self::CmdGetMovieRacingDataScRsp => "CmdGetMovieRacingDataScRsp",
            Self::CmdGetMovieRacingDataCsReq => "CmdGetMovieRacingDataCsReq",
            Self::CmdSecurityReportScRsp => "CmdSecurityReportScRsp",
            Self::CmdGetGunPlayDataScRsp => "CmdGetGunPlayDataScRsp",
            Self::CmdGetShareDataCsReq => "CmdGetShareDataCsReq",
            Self::CmdTakePictureCsReq => "CmdTakePictureCsReq",
            Self::CmdTriggerVoiceScRsp => "CmdTriggerVoiceScRsp",
            Self::CmdUpdateMovieRacingDataScRsp => "CmdUpdateMovieRacingDataScRsp",
            Self::CmdSubmitOrigamiItemScRsp => "CmdSubmitOrigamiItemScRsp",
            Self::CmdShareCsReq => "CmdShareCsReq",
            Self::CmdTakePictureScRsp => "CmdTakePictureScRsp",
            Self::CmdUpdateMovieRacingDataCsReq => "CmdUpdateMovieRacingDataCsReq",
            Self::CmdGetShareDataScRsp => "CmdGetShareDataScRsp",
            Self::CmdDifficultyAdjustmentUpdateDataCsReq => {
                "CmdDifficultyAdjustmentUpdateDataCsReq"
            }
            Self::CmdDifficultyAdjustmentGetDataScRsp => {
                "CmdDifficultyAdjustmentGetDataScRsp"
            }
            Self::CmdUpdateGunPlayDataCsReq => "CmdUpdateGunPlayDataCsReq",
            Self::CmdCancelCacheNotifyScRsp => "CmdCancelCacheNotifyScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMiscModuleTypeNone" => Some(Self::None),
            "CmdTriggerVoiceCsReq" => Some(Self::CmdTriggerVoiceCsReq),
            "CmdCancelCacheNotifyCsReq" => Some(Self::CmdCancelCacheNotifyCsReq),
            "CmdSecurityReportCsReq" => Some(Self::CmdSecurityReportCsReq),
            "CmdDifficultyAdjustmentGetDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentGetDataCsReq)
            }
            "CmdMazeKillDirectCsReq" => Some(Self::CmdMazeKillDirectCsReq),
            "CmdSubmitOrigamiItemCsReq" => Some(Self::CmdSubmitOrigamiItemCsReq),
            "CmdMazeKillDirectScRsp" => Some(Self::CmdMazeKillDirectScRsp),
            "CmdUpdateGunPlayDataScRsp" => Some(Self::CmdUpdateGunPlayDataScRsp),
            "CmdGetGunPlayDataCsReq" => Some(Self::CmdGetGunPlayDataCsReq),
            "CmdShareScRsp" => Some(Self::CmdShareScRsp),
            "CmdDifficultyAdjustmentUpdateDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataScRsp)
            }
            "CmdGetMovieRacingDataScRsp" => Some(Self::CmdGetMovieRacingDataScRsp),
            "CmdGetMovieRacingDataCsReq" => Some(Self::CmdGetMovieRacingDataCsReq),
            "CmdSecurityReportScRsp" => Some(Self::CmdSecurityReportScRsp),
            "CmdGetGunPlayDataScRsp" => Some(Self::CmdGetGunPlayDataScRsp),
            "CmdGetShareDataCsReq" => Some(Self::CmdGetShareDataCsReq),
            "CmdTakePictureCsReq" => Some(Self::CmdTakePictureCsReq),
            "CmdTriggerVoiceScRsp" => Some(Self::CmdTriggerVoiceScRsp),
            "CmdUpdateMovieRacingDataScRsp" => Some(Self::CmdUpdateMovieRacingDataScRsp),
            "CmdSubmitOrigamiItemScRsp" => Some(Self::CmdSubmitOrigamiItemScRsp),
            "CmdShareCsReq" => Some(Self::CmdShareCsReq),
            "CmdTakePictureScRsp" => Some(Self::CmdTakePictureScRsp),
            "CmdUpdateMovieRacingDataCsReq" => Some(Self::CmdUpdateMovieRacingDataCsReq),
            "CmdGetShareDataScRsp" => Some(Self::CmdGetShareDataScRsp),
            "CmdDifficultyAdjustmentUpdateDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataCsReq)
            }
            "CmdDifficultyAdjustmentGetDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentGetDataScRsp)
            }
            "CmdUpdateGunPlayDataCsReq" => Some(Self::CmdUpdateGunPlayDataCsReq),
            "CmdCancelCacheNotifyScRsp" => Some(Self::CmdCancelCacheNotifyScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ihhmhldlfhn {
    CacheNotifyTypeNone = 0,
    CacheNotifyTypeRecycle = 1,
    CacheNotifyTypeRecharge = 2,
}
impl Ihhmhldlfhn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CacheNotifyTypeNone => "CACHE_NOTIFY_TYPE_NONE",
            Self::CacheNotifyTypeRecycle => "CACHE_NOTIFY_TYPE_RECYCLE",
            Self::CacheNotifyTypeRecharge => "CACHE_NOTIFY_TYPE_RECHARGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CACHE_NOTIFY_TYPE_NONE" => Some(Self::CacheNotifyTypeNone),
            "CACHE_NOTIFY_TYPE_RECYCLE" => Some(Self::CacheNotifyTypeRecycle),
            "CACHE_NOTIFY_TYPE_RECHARGE" => Some(Self::CacheNotifyTypeRecharge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nmlcfenpmnb {
    MovieRacingOverTake = 0,
    MovieRacingOverTakeEndless = 1,
    MovieRacingShooting = 2,
    MovieRacingShootingEndless = 3,
}
impl Nmlcfenpmnb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MovieRacingOverTake => "MOVIE_RACING_OVER_TAKE",
            Self::MovieRacingOverTakeEndless => "MOVIE_RACING_OVER_TAKE_ENDLESS",
            Self::MovieRacingShooting => "MOVIE_RACING_SHOOTING",
            Self::MovieRacingShootingEndless => "MOVIE_RACING_SHOOTING_ENDLESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MOVIE_RACING_OVER_TAKE" => Some(Self::MovieRacingOverTake),
            "MOVIE_RACING_OVER_TAKE_ENDLESS" => Some(Self::MovieRacingOverTakeEndless),
            "MOVIE_RACING_SHOOTING" => Some(Self::MovieRacingShooting),
            "MOVIE_RACING_SHOOTING_ENDLESS" => Some(Self::MovieRacingShootingEndless),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ahccebcohjj {
    DifficultyAjustmentTypeDefault = 0,
    DifficultyAjustmentTypeEasy = 1,
}
impl Ahccebcohjj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DifficultyAjustmentTypeDefault => "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT",
            Self::DifficultyAjustmentTypeEasy => "DIFFICULTY_AJUSTMENT_TYPE_EASY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT" => {
                Some(Self::DifficultyAjustmentTypeDefault)
            }
            "DIFFICULTY_AJUSTMENT_TYPE_EASY" => Some(Self::DifficultyAjustmentTypeEasy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pikbnahddfl {
    DifficultyAjustmentSourceNone = 0,
    DifficultyAjustmentSourceRaid = 1,
    DifficultyAjustmentSourceEvent = 2,
}
impl Pikbnahddfl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DifficultyAjustmentSourceNone => "DIFFICULTY_AJUSTMENT_SOURCE_NONE",
            Self::DifficultyAjustmentSourceRaid => "DIFFICULTY_AJUSTMENT_SOURCE_RAID",
            Self::DifficultyAjustmentSourceEvent => "DIFFICULTY_AJUSTMENT_SOURCE_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_SOURCE_NONE" => {
                Some(Self::DifficultyAjustmentSourceNone)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_RAID" => {
                Some(Self::DifficultyAjustmentSourceRaid)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_EVENT" => {
                Some(Self::DifficultyAjustmentSourceEvent)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Naolnicfdln {
    MazeKillSourceNone = 0,
    MazeKillSourceSwitchHand = 1,
    MazeKillSourceTimeLine = 2,
}
impl Naolnicfdln {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MazeKillSourceNone => "MAZE_KILL_SOURCE_NONE",
            Self::MazeKillSourceSwitchHand => "MAZE_KILL_SOURCE_SWITCH_HAND",
            Self::MazeKillSourceTimeLine => "MAZE_KILL_SOURCE_TIME_LINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAZE_KILL_SOURCE_NONE" => Some(Self::MazeKillSourceNone),
            "MAZE_KILL_SOURCE_SWITCH_HAND" => Some(Self::MazeKillSourceSwitchHand),
            "MAZE_KILL_SOURCE_TIME_LINE" => Some(Self::MazeKillSourceTimeLine),
            _ => None,
        }
    }
}
/// BCAMKDGIOBH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMissionType {
    None = 0,
    CmdTeleportToMissionResetPointScRsp = 1248,
    CmdStartFinishMainMissionScNotify = 1258,
    CmdAcceptMainMissionCsReq = 1210,
    CmdAcceptMissionEventCsReq = 1219,
    CmdInterruptMissionEventScRsp = 1259,
    CmdFinishedMissionScNotify = 1208,
    CmdUpdateTrackMainMissionIdScRsp = 1265,
    CmdInterruptMissionEventCsReq = 1290,
    CmdSyncTaskCsReq = 1228,
    CmdSetMissionEventProgressScRsp = 1278,
    CmdSubMissionRewardScNotify = 1229,
    CmdGetMissionStatusCsReq = 1207,
    CmdSyncTaskScRsp = 1252,
    CmdGetMainMissionCustomValueScRsp = 1273,
    CmdFinishTalkMissionScRsp = 1227,
    CmdUpdateTrackMainMissionIdCsReq = 1221,
    CmdMissionRewardScNotify = 1267,
    CmdGetMainMissionCustomValueCsReq = 1235,
    CmdGetMissionDataScRsp = 1295,
    CmdFinishTalkMissionCsReq = 1284,
    CmdStartFinishSubMissionScNotify = 1288,
    CmdGetMissionEventDataCsReq = 1296,
    CmdMissionAcceptScNotify = 1217,
    CmdMissionGroupWarnScNotify = 1243,
    CmdMissionEventRewardScNotify = 1275,
    CmdAcceptMissionEventScRsp = 1226,
    CmdGetMissionStatusScRsp = 1253,
    CmdSetMissionEventProgressCsReq = 1212,
    CmdTeleportToMissionResetPointCsReq = 1250,
    CmdGetMissionDataCsReq = 1236,
    CmdGetMissionEventDataScRsp = 1205,
    CmdFinishCosumeItemMissionScRsp = 1225,
    CmdFinishCosumeItemMissionCsReq = 1246,
    CmdAcceptMainMissionScRsp = 1276,
}
impl CmdMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMissionTypeNone",
            Self::CmdTeleportToMissionResetPointScRsp => {
                "CmdTeleportToMissionResetPointScRsp"
            }
            Self::CmdStartFinishMainMissionScNotify => {
                "CmdStartFinishMainMissionScNotify"
            }
            Self::CmdAcceptMainMissionCsReq => "CmdAcceptMainMissionCsReq",
            Self::CmdAcceptMissionEventCsReq => "CmdAcceptMissionEventCsReq",
            Self::CmdInterruptMissionEventScRsp => "CmdInterruptMissionEventScRsp",
            Self::CmdFinishedMissionScNotify => "CmdFinishedMissionScNotify",
            Self::CmdUpdateTrackMainMissionIdScRsp => "CmdUpdateTrackMainMissionIdScRsp",
            Self::CmdInterruptMissionEventCsReq => "CmdInterruptMissionEventCsReq",
            Self::CmdSyncTaskCsReq => "CmdSyncTaskCsReq",
            Self::CmdSetMissionEventProgressScRsp => "CmdSetMissionEventProgressScRsp",
            Self::CmdSubMissionRewardScNotify => "CmdSubMissionRewardScNotify",
            Self::CmdGetMissionStatusCsReq => "CmdGetMissionStatusCsReq",
            Self::CmdSyncTaskScRsp => "CmdSyncTaskScRsp",
            Self::CmdGetMainMissionCustomValueScRsp => {
                "CmdGetMainMissionCustomValueScRsp"
            }
            Self::CmdFinishTalkMissionScRsp => "CmdFinishTalkMissionScRsp",
            Self::CmdUpdateTrackMainMissionIdCsReq => "CmdUpdateTrackMainMissionIdCsReq",
            Self::CmdMissionRewardScNotify => "CmdMissionRewardScNotify",
            Self::CmdGetMainMissionCustomValueCsReq => {
                "CmdGetMainMissionCustomValueCsReq"
            }
            Self::CmdGetMissionDataScRsp => "CmdGetMissionDataScRsp",
            Self::CmdFinishTalkMissionCsReq => "CmdFinishTalkMissionCsReq",
            Self::CmdStartFinishSubMissionScNotify => "CmdStartFinishSubMissionScNotify",
            Self::CmdGetMissionEventDataCsReq => "CmdGetMissionEventDataCsReq",
            Self::CmdMissionAcceptScNotify => "CmdMissionAcceptScNotify",
            Self::CmdMissionGroupWarnScNotify => "CmdMissionGroupWarnScNotify",
            Self::CmdMissionEventRewardScNotify => "CmdMissionEventRewardScNotify",
            Self::CmdAcceptMissionEventScRsp => "CmdAcceptMissionEventScRsp",
            Self::CmdGetMissionStatusScRsp => "CmdGetMissionStatusScRsp",
            Self::CmdSetMissionEventProgressCsReq => "CmdSetMissionEventProgressCsReq",
            Self::CmdTeleportToMissionResetPointCsReq => {
                "CmdTeleportToMissionResetPointCsReq"
            }
            Self::CmdGetMissionDataCsReq => "CmdGetMissionDataCsReq",
            Self::CmdGetMissionEventDataScRsp => "CmdGetMissionEventDataScRsp",
            Self::CmdFinishCosumeItemMissionScRsp => "CmdFinishCosumeItemMissionScRsp",
            Self::CmdFinishCosumeItemMissionCsReq => "CmdFinishCosumeItemMissionCsReq",
            Self::CmdAcceptMainMissionScRsp => "CmdAcceptMainMissionScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMissionTypeNone" => Some(Self::None),
            "CmdTeleportToMissionResetPointScRsp" => {
                Some(Self::CmdTeleportToMissionResetPointScRsp)
            }
            "CmdStartFinishMainMissionScNotify" => {
                Some(Self::CmdStartFinishMainMissionScNotify)
            }
            "CmdAcceptMainMissionCsReq" => Some(Self::CmdAcceptMainMissionCsReq),
            "CmdAcceptMissionEventCsReq" => Some(Self::CmdAcceptMissionEventCsReq),
            "CmdInterruptMissionEventScRsp" => Some(Self::CmdInterruptMissionEventScRsp),
            "CmdFinishedMissionScNotify" => Some(Self::CmdFinishedMissionScNotify),
            "CmdUpdateTrackMainMissionIdScRsp" => {
                Some(Self::CmdUpdateTrackMainMissionIdScRsp)
            }
            "CmdInterruptMissionEventCsReq" => Some(Self::CmdInterruptMissionEventCsReq),
            "CmdSyncTaskCsReq" => Some(Self::CmdSyncTaskCsReq),
            "CmdSetMissionEventProgressScRsp" => {
                Some(Self::CmdSetMissionEventProgressScRsp)
            }
            "CmdSubMissionRewardScNotify" => Some(Self::CmdSubMissionRewardScNotify),
            "CmdGetMissionStatusCsReq" => Some(Self::CmdGetMissionStatusCsReq),
            "CmdSyncTaskScRsp" => Some(Self::CmdSyncTaskScRsp),
            "CmdGetMainMissionCustomValueScRsp" => {
                Some(Self::CmdGetMainMissionCustomValueScRsp)
            }
            "CmdFinishTalkMissionScRsp" => Some(Self::CmdFinishTalkMissionScRsp),
            "CmdUpdateTrackMainMissionIdCsReq" => {
                Some(Self::CmdUpdateTrackMainMissionIdCsReq)
            }
            "CmdMissionRewardScNotify" => Some(Self::CmdMissionRewardScNotify),
            "CmdGetMainMissionCustomValueCsReq" => {
                Some(Self::CmdGetMainMissionCustomValueCsReq)
            }
            "CmdGetMissionDataScRsp" => Some(Self::CmdGetMissionDataScRsp),
            "CmdFinishTalkMissionCsReq" => Some(Self::CmdFinishTalkMissionCsReq),
            "CmdStartFinishSubMissionScNotify" => {
                Some(Self::CmdStartFinishSubMissionScNotify)
            }
            "CmdGetMissionEventDataCsReq" => Some(Self::CmdGetMissionEventDataCsReq),
            "CmdMissionAcceptScNotify" => Some(Self::CmdMissionAcceptScNotify),
            "CmdMissionGroupWarnScNotify" => Some(Self::CmdMissionGroupWarnScNotify),
            "CmdMissionEventRewardScNotify" => Some(Self::CmdMissionEventRewardScNotify),
            "CmdAcceptMissionEventScRsp" => Some(Self::CmdAcceptMissionEventScRsp),
            "CmdGetMissionStatusScRsp" => Some(Self::CmdGetMissionStatusScRsp),
            "CmdSetMissionEventProgressCsReq" => {
                Some(Self::CmdSetMissionEventProgressCsReq)
            }
            "CmdTeleportToMissionResetPointCsReq" => {
                Some(Self::CmdTeleportToMissionResetPointCsReq)
            }
            "CmdGetMissionDataCsReq" => Some(Self::CmdGetMissionDataCsReq),
            "CmdGetMissionEventDataScRsp" => Some(Self::CmdGetMissionEventDataScRsp),
            "CmdFinishCosumeItemMissionScRsp" => {
                Some(Self::CmdFinishCosumeItemMissionScRsp)
            }
            "CmdFinishCosumeItemMissionCsReq" => {
                Some(Self::CmdFinishCosumeItemMissionCsReq)
            }
            "CmdAcceptMainMissionScRsp" => Some(Self::CmdAcceptMainMissionScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MissionSyncRecord {
    None = 0,
    MainMissionAccept = 1,
    MainMissionStart = 2,
    MainMissionFinish = 3,
    MainMissionDelete = 4,
    MissionAccept = 11,
    MissionStart = 12,
    MissionFinish = 13,
    MissionDelete = 14,
    MissionProgress = 15,
}
impl MissionSyncRecord {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MISSION_SYNC_RECORD_NONE",
            Self::MainMissionAccept => "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT",
            Self::MainMissionStart => "MISSION_SYNC_RECORD_MAIN_MISSION_START",
            Self::MainMissionFinish => "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH",
            Self::MainMissionDelete => "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE",
            Self::MissionAccept => "MISSION_SYNC_RECORD_MISSION_ACCEPT",
            Self::MissionStart => "MISSION_SYNC_RECORD_MISSION_START",
            Self::MissionFinish => "MISSION_SYNC_RECORD_MISSION_FINISH",
            Self::MissionDelete => "MISSION_SYNC_RECORD_MISSION_DELETE",
            Self::MissionProgress => "MISSION_SYNC_RECORD_MISSION_PROGRESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_SYNC_RECORD_NONE" => Some(Self::None),
            "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT" => Some(Self::MainMissionAccept),
            "MISSION_SYNC_RECORD_MAIN_MISSION_START" => Some(Self::MainMissionStart),
            "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH" => Some(Self::MainMissionFinish),
            "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE" => Some(Self::MainMissionDelete),
            "MISSION_SYNC_RECORD_MISSION_ACCEPT" => Some(Self::MissionAccept),
            "MISSION_SYNC_RECORD_MISSION_START" => Some(Self::MissionStart),
            "MISSION_SYNC_RECORD_MISSION_FINISH" => Some(Self::MissionFinish),
            "MISSION_SYNC_RECORD_MISSION_DELETE" => Some(Self::MissionDelete),
            "MISSION_SYNC_RECORD_MISSION_PROGRESS" => Some(Self::MissionProgress),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mpcejbfckfo {
    MainMissionSyncNone = 0,
    MainMissionSyncMcv = 1,
}
impl Mpcejbfckfo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MainMissionSyncNone => "MAIN_MISSION_SYNC_NONE",
            Self::MainMissionSyncMcv => "MAIN_MISSION_SYNC_MCV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIN_MISSION_SYNC_NONE" => Some(Self::MainMissionSyncNone),
            "MAIN_MISSION_SYNC_MCV" => Some(Self::MainMissionSyncMcv),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrackMainMissionUpdateReasonId {
    TrackMainMissionUpdateNone = 0,
    TrackMainMissionUpdateAuto = 1,
    TrackMainMissionUpdateManual = 2,
    TrackMainMissionUpdateLoginReport = 3,
}
impl TrackMainMissionUpdateReasonId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrackMainMissionUpdateNone => "TRACK_MAIN_MISSION_UPDATE_NONE",
            Self::TrackMainMissionUpdateAuto => "TRACK_MAIN_MISSION_UPDATE_AUTO",
            Self::TrackMainMissionUpdateManual => "TRACK_MAIN_MISSION_UPDATE_MANUAL",
            Self::TrackMainMissionUpdateLoginReport => {
                "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRACK_MAIN_MISSION_UPDATE_NONE" => Some(Self::TrackMainMissionUpdateNone),
            "TRACK_MAIN_MISSION_UPDATE_AUTO" => Some(Self::TrackMainMissionUpdateAuto),
            "TRACK_MAIN_MISSION_UPDATE_MANUAL" => {
                Some(Self::TrackMainMissionUpdateManual)
            }
            "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT" => {
                Some(Self::TrackMainMissionUpdateLoginReport)
            }
            _ => None,
        }
    }
}
/// PBKGAINOAJG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMonopolyType {
    None = 0,
    CmdMonopolyGuessChooseScRsp = 7037,
    CmdMonopolyActionResultScNotify = 7084,
    CmdDailyFirstEnterMonopolyActivityScRsp = 7025,
    CmdGetMonopolyInfoScRsp = 7095,
    CmdMonopolyEventLoadUpdateScNotify = 7001,
    CmdGetMonopolyInfoCsReq = 7036,
    CmdMonopolyBuyGoodsScRsp = 7090,
    CmdGetMbtiReportCsReq = 7099,
    CmdMonopolySttUpdateScNotify = 7032,
    CmdMonopolyGetDailyInitItemCsReq = 7063,
    CmdMonopolyGetRegionProgressCsReq = 7044,
    CmdMonopolyRollDiceCsReq = 7028,
    CmdMonopolyGiveUpCurContentScRsp = 7029,
    CmdMonopolyAcceptQuizCsReq = 7021,
    CmdGetMonopolyFriendRankingListScRsp = 7060,
    CmdMonopolyQuizDurationChangeScNotify = 7039,
    CmdMonopolyConfirmRandomScRsp = 7007,
    CmdMonopolyMoveScRsp = 7024,
    CmdMonopolyCheatDiceCsReq = 7050,
    CmdMonopolyEventSelectFriendCsReq = 7040,
    CmdMonopolyClickMbtiReportCsReq = 7085,
    CmdMonopolyUpgradeAssetScRsp = 7012,
    CmdMonopolyBuyGoodsCsReq = 7053,
    CmdMonopolyConfirmRandomCsReq = 7026,
    CmdMonopolyGetRaffleTicketCsReq = 7016,
    CmdMonopolyConditionUpdateScNotify = 7015,
    CmdMonopolyGiveUpCurContentCsReq = 7078,
    CmdDailyFirstEnterMonopolyActivityCsReq = 7046,
    CmdGetSocialEventServerCacheCsReq = 7033,
    CmdDeleteSocialEventServerCacheScRsp = 7068,
    CmdDeleteSocialEventServerCacheCsReq = 7083,
    CmdMonopolyContentUpdateScNotify = 7088,
    CmdGetMonopolyDailyReportCsReq = 7038,
    CmdGetMonopolyMbtiReportRewardCsReq = 7082,
    CmdMonopolyTakePhaseRewardScRsp = 7020,
    CmdMonopolyUpgradeAssetCsReq = 7059,
    CmdMonopolyGetRafflePoolInfoScRsp = 7056,
    CmdMonopolyGetDailyInitItemScRsp = 7089,
    CmdGetSocialEventServerCacheScRsp = 7097,
    CmdMonopolyGuessChooseCsReq = 7018,
    CmdMonopolyGameRaiseRatioCsReq = 7058,
    CmdMonopolyDailySettleScNotify = 7094,
    CmdMonopolyScrachRaffleTicketCsReq = 7098,
    CmdMonopolySelectOptionCsReq = 7093,
    CmdMonopolyGameGachaCsReq = 7035,
    CmdMonopolyReRollRandomScRsp = 7019,
    CmdMonopolyTakePhaseRewardCsReq = 7009,
    CmdMonopolyCellUpdateNotify = 7027,
    CmdMonopolyGameBingoFlipCardCsReq = 7017,
    CmdMonopolyGuessBuyInformationScRsp = 7079,
    CmdMonopolyRollRandomCsReq = 7096,
    CmdMonopolyLikeCsReq = 7045,
    CmdMonopolyMoveCsReq = 7074,
    CmdMonopolyGameSettleScNotify = 7076,
    CmdMonopolyRollDiceScRsp = 7052,
    CmdMonopolyAcceptQuizScRsp = 7065,
    CmdMonopolyGuessDrawScNotify = 7081,
    CmdMonopolyLikeScRsp = 7064,
    CmdMonopolyTakeRaffleTicketRewardCsReq = 7049,
    CmdMonopolyScrachRaffleTicketScRsp = 7091,
    CmdMonopolyTakeRaffleTicketRewardScRsp = 7070,
    CmdMonopolyReRollRandomCsReq = 7075,
    CmdMonopolyClickMbtiReportScRsp = 7062,
    CmdMonopolyClickCellCsReq = 7086,
    CmdMonopolyGameBingoFlipCardScRsp = 7013,
    CmdMonopolyCheatDiceScRsp = 7048,
    CmdMonopolyLikeScNotify = 7072,
    CmdGetMonopolyFriendRankingListCsReq = 7092,
    CmdMonopolyEventSelectFriendScRsp = 7061,
    CmdMonopolyGetRegionProgressScRsp = 7023,
    CmdMonopolyGameGachaScRsp = 7073,
    CmdGetMonopolyDailyReportScRsp = 7087,
    CmdMonopolyGetRafflePoolInfoCsReq = 7069,
    CmdMonopolyGetRaffleTicketScRsp = 7047,
    CmdMonopolySelectOptionScRsp = 7034,
    CmdGetMonopolyMbtiReportRewardScRsp = 7080,
    CmdMonopolyRollRandomScRsp = 7005,
    CmdMonopolyGuessBuyInformationCsReq = 7011,
    CmdMonopolySocialEventEffectScNotify = 7030,
    CmdMonopolyClickCellScRsp = 7066,
    CmdMonopolyGameCreateScNotify = 7008,
    CmdGetMbtiReportScRsp = 7003,
    CmdMonopolyGameRaiseRatioScRsp = 7010,
}
impl CmdMonopolyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMonopolyTypeNone",
            Self::CmdMonopolyGuessChooseScRsp => "CmdMonopolyGuessChooseScRsp",
            Self::CmdMonopolyActionResultScNotify => "CmdMonopolyActionResultScNotify",
            Self::CmdDailyFirstEnterMonopolyActivityScRsp => {
                "CmdDailyFirstEnterMonopolyActivityScRsp"
            }
            Self::CmdGetMonopolyInfoScRsp => "CmdGetMonopolyInfoScRsp",
            Self::CmdMonopolyEventLoadUpdateScNotify => {
                "CmdMonopolyEventLoadUpdateScNotify"
            }
            Self::CmdGetMonopolyInfoCsReq => "CmdGetMonopolyInfoCsReq",
            Self::CmdMonopolyBuyGoodsScRsp => "CmdMonopolyBuyGoodsScRsp",
            Self::CmdGetMbtiReportCsReq => "CmdGetMbtiReportCsReq",
            Self::CmdMonopolySttUpdateScNotify => "CmdMonopolySttUpdateScNotify",
            Self::CmdMonopolyGetDailyInitItemCsReq => "CmdMonopolyGetDailyInitItemCsReq",
            Self::CmdMonopolyGetRegionProgressCsReq => {
                "CmdMonopolyGetRegionProgressCsReq"
            }
            Self::CmdMonopolyRollDiceCsReq => "CmdMonopolyRollDiceCsReq",
            Self::CmdMonopolyGiveUpCurContentScRsp => "CmdMonopolyGiveUpCurContentScRsp",
            Self::CmdMonopolyAcceptQuizCsReq => "CmdMonopolyAcceptQuizCsReq",
            Self::CmdGetMonopolyFriendRankingListScRsp => {
                "CmdGetMonopolyFriendRankingListScRsp"
            }
            Self::CmdMonopolyQuizDurationChangeScNotify => {
                "CmdMonopolyQuizDurationChangeScNotify"
            }
            Self::CmdMonopolyConfirmRandomScRsp => "CmdMonopolyConfirmRandomScRsp",
            Self::CmdMonopolyMoveScRsp => "CmdMonopolyMoveScRsp",
            Self::CmdMonopolyCheatDiceCsReq => "CmdMonopolyCheatDiceCsReq",
            Self::CmdMonopolyEventSelectFriendCsReq => {
                "CmdMonopolyEventSelectFriendCsReq"
            }
            Self::CmdMonopolyClickMbtiReportCsReq => "CmdMonopolyClickMbtiReportCsReq",
            Self::CmdMonopolyUpgradeAssetScRsp => "CmdMonopolyUpgradeAssetScRsp",
            Self::CmdMonopolyBuyGoodsCsReq => "CmdMonopolyBuyGoodsCsReq",
            Self::CmdMonopolyConfirmRandomCsReq => "CmdMonopolyConfirmRandomCsReq",
            Self::CmdMonopolyGetRaffleTicketCsReq => "CmdMonopolyGetRaffleTicketCsReq",
            Self::CmdMonopolyConditionUpdateScNotify => {
                "CmdMonopolyConditionUpdateScNotify"
            }
            Self::CmdMonopolyGiveUpCurContentCsReq => "CmdMonopolyGiveUpCurContentCsReq",
            Self::CmdDailyFirstEnterMonopolyActivityCsReq => {
                "CmdDailyFirstEnterMonopolyActivityCsReq"
            }
            Self::CmdGetSocialEventServerCacheCsReq => {
                "CmdGetSocialEventServerCacheCsReq"
            }
            Self::CmdDeleteSocialEventServerCacheScRsp => {
                "CmdDeleteSocialEventServerCacheScRsp"
            }
            Self::CmdDeleteSocialEventServerCacheCsReq => {
                "CmdDeleteSocialEventServerCacheCsReq"
            }
            Self::CmdMonopolyContentUpdateScNotify => "CmdMonopolyContentUpdateScNotify",
            Self::CmdGetMonopolyDailyReportCsReq => "CmdGetMonopolyDailyReportCsReq",
            Self::CmdGetMonopolyMbtiReportRewardCsReq => {
                "CmdGetMonopolyMbtiReportRewardCsReq"
            }
            Self::CmdMonopolyTakePhaseRewardScRsp => "CmdMonopolyTakePhaseRewardScRsp",
            Self::CmdMonopolyUpgradeAssetCsReq => "CmdMonopolyUpgradeAssetCsReq",
            Self::CmdMonopolyGetRafflePoolInfoScRsp => {
                "CmdMonopolyGetRafflePoolInfoScRsp"
            }
            Self::CmdMonopolyGetDailyInitItemScRsp => "CmdMonopolyGetDailyInitItemScRsp",
            Self::CmdGetSocialEventServerCacheScRsp => {
                "CmdGetSocialEventServerCacheScRsp"
            }
            Self::CmdMonopolyGuessChooseCsReq => "CmdMonopolyGuessChooseCsReq",
            Self::CmdMonopolyGameRaiseRatioCsReq => "CmdMonopolyGameRaiseRatioCsReq",
            Self::CmdMonopolyDailySettleScNotify => "CmdMonopolyDailySettleScNotify",
            Self::CmdMonopolyScrachRaffleTicketCsReq => {
                "CmdMonopolyScrachRaffleTicketCsReq"
            }
            Self::CmdMonopolySelectOptionCsReq => "CmdMonopolySelectOptionCsReq",
            Self::CmdMonopolyGameGachaCsReq => "CmdMonopolyGameGachaCsReq",
            Self::CmdMonopolyReRollRandomScRsp => "CmdMonopolyReRollRandomScRsp",
            Self::CmdMonopolyTakePhaseRewardCsReq => "CmdMonopolyTakePhaseRewardCsReq",
            Self::CmdMonopolyCellUpdateNotify => "CmdMonopolyCellUpdateNotify",
            Self::CmdMonopolyGameBingoFlipCardCsReq => {
                "CmdMonopolyGameBingoFlipCardCsReq"
            }
            Self::CmdMonopolyGuessBuyInformationScRsp => {
                "CmdMonopolyGuessBuyInformationScRsp"
            }
            Self::CmdMonopolyRollRandomCsReq => "CmdMonopolyRollRandomCsReq",
            Self::CmdMonopolyLikeCsReq => "CmdMonopolyLikeCsReq",
            Self::CmdMonopolyMoveCsReq => "CmdMonopolyMoveCsReq",
            Self::CmdMonopolyGameSettleScNotify => "CmdMonopolyGameSettleScNotify",
            Self::CmdMonopolyRollDiceScRsp => "CmdMonopolyRollDiceScRsp",
            Self::CmdMonopolyAcceptQuizScRsp => "CmdMonopolyAcceptQuizScRsp",
            Self::CmdMonopolyGuessDrawScNotify => "CmdMonopolyGuessDrawScNotify",
            Self::CmdMonopolyLikeScRsp => "CmdMonopolyLikeScRsp",
            Self::CmdMonopolyTakeRaffleTicketRewardCsReq => {
                "CmdMonopolyTakeRaffleTicketRewardCsReq"
            }
            Self::CmdMonopolyScrachRaffleTicketScRsp => {
                "CmdMonopolyScrachRaffleTicketScRsp"
            }
            Self::CmdMonopolyTakeRaffleTicketRewardScRsp => {
                "CmdMonopolyTakeRaffleTicketRewardScRsp"
            }
            Self::CmdMonopolyReRollRandomCsReq => "CmdMonopolyReRollRandomCsReq",
            Self::CmdMonopolyClickMbtiReportScRsp => "CmdMonopolyClickMbtiReportScRsp",
            Self::CmdMonopolyClickCellCsReq => "CmdMonopolyClickCellCsReq",
            Self::CmdMonopolyGameBingoFlipCardScRsp => {
                "CmdMonopolyGameBingoFlipCardScRsp"
            }
            Self::CmdMonopolyCheatDiceScRsp => "CmdMonopolyCheatDiceScRsp",
            Self::CmdMonopolyLikeScNotify => "CmdMonopolyLikeScNotify",
            Self::CmdGetMonopolyFriendRankingListCsReq => {
                "CmdGetMonopolyFriendRankingListCsReq"
            }
            Self::CmdMonopolyEventSelectFriendScRsp => {
                "CmdMonopolyEventSelectFriendScRsp"
            }
            Self::CmdMonopolyGetRegionProgressScRsp => {
                "CmdMonopolyGetRegionProgressScRsp"
            }
            Self::CmdMonopolyGameGachaScRsp => "CmdMonopolyGameGachaScRsp",
            Self::CmdGetMonopolyDailyReportScRsp => "CmdGetMonopolyDailyReportScRsp",
            Self::CmdMonopolyGetRafflePoolInfoCsReq => {
                "CmdMonopolyGetRafflePoolInfoCsReq"
            }
            Self::CmdMonopolyGetRaffleTicketScRsp => "CmdMonopolyGetRaffleTicketScRsp",
            Self::CmdMonopolySelectOptionScRsp => "CmdMonopolySelectOptionScRsp",
            Self::CmdGetMonopolyMbtiReportRewardScRsp => {
                "CmdGetMonopolyMbtiReportRewardScRsp"
            }
            Self::CmdMonopolyRollRandomScRsp => "CmdMonopolyRollRandomScRsp",
            Self::CmdMonopolyGuessBuyInformationCsReq => {
                "CmdMonopolyGuessBuyInformationCsReq"
            }
            Self::CmdMonopolySocialEventEffectScNotify => {
                "CmdMonopolySocialEventEffectScNotify"
            }
            Self::CmdMonopolyClickCellScRsp => "CmdMonopolyClickCellScRsp",
            Self::CmdMonopolyGameCreateScNotify => "CmdMonopolyGameCreateScNotify",
            Self::CmdGetMbtiReportScRsp => "CmdGetMbtiReportScRsp",
            Self::CmdMonopolyGameRaiseRatioScRsp => "CmdMonopolyGameRaiseRatioScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMonopolyTypeNone" => Some(Self::None),
            "CmdMonopolyGuessChooseScRsp" => Some(Self::CmdMonopolyGuessChooseScRsp),
            "CmdMonopolyActionResultScNotify" => {
                Some(Self::CmdMonopolyActionResultScNotify)
            }
            "CmdDailyFirstEnterMonopolyActivityScRsp" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityScRsp)
            }
            "CmdGetMonopolyInfoScRsp" => Some(Self::CmdGetMonopolyInfoScRsp),
            "CmdMonopolyEventLoadUpdateScNotify" => {
                Some(Self::CmdMonopolyEventLoadUpdateScNotify)
            }
            "CmdGetMonopolyInfoCsReq" => Some(Self::CmdGetMonopolyInfoCsReq),
            "CmdMonopolyBuyGoodsScRsp" => Some(Self::CmdMonopolyBuyGoodsScRsp),
            "CmdGetMbtiReportCsReq" => Some(Self::CmdGetMbtiReportCsReq),
            "CmdMonopolySttUpdateScNotify" => Some(Self::CmdMonopolySttUpdateScNotify),
            "CmdMonopolyGetDailyInitItemCsReq" => {
                Some(Self::CmdMonopolyGetDailyInitItemCsReq)
            }
            "CmdMonopolyGetRegionProgressCsReq" => {
                Some(Self::CmdMonopolyGetRegionProgressCsReq)
            }
            "CmdMonopolyRollDiceCsReq" => Some(Self::CmdMonopolyRollDiceCsReq),
            "CmdMonopolyGiveUpCurContentScRsp" => {
                Some(Self::CmdMonopolyGiveUpCurContentScRsp)
            }
            "CmdMonopolyAcceptQuizCsReq" => Some(Self::CmdMonopolyAcceptQuizCsReq),
            "CmdGetMonopolyFriendRankingListScRsp" => {
                Some(Self::CmdGetMonopolyFriendRankingListScRsp)
            }
            "CmdMonopolyQuizDurationChangeScNotify" => {
                Some(Self::CmdMonopolyQuizDurationChangeScNotify)
            }
            "CmdMonopolyConfirmRandomScRsp" => Some(Self::CmdMonopolyConfirmRandomScRsp),
            "CmdMonopolyMoveScRsp" => Some(Self::CmdMonopolyMoveScRsp),
            "CmdMonopolyCheatDiceCsReq" => Some(Self::CmdMonopolyCheatDiceCsReq),
            "CmdMonopolyEventSelectFriendCsReq" => {
                Some(Self::CmdMonopolyEventSelectFriendCsReq)
            }
            "CmdMonopolyClickMbtiReportCsReq" => {
                Some(Self::CmdMonopolyClickMbtiReportCsReq)
            }
            "CmdMonopolyUpgradeAssetScRsp" => Some(Self::CmdMonopolyUpgradeAssetScRsp),
            "CmdMonopolyBuyGoodsCsReq" => Some(Self::CmdMonopolyBuyGoodsCsReq),
            "CmdMonopolyConfirmRandomCsReq" => Some(Self::CmdMonopolyConfirmRandomCsReq),
            "CmdMonopolyGetRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyGetRaffleTicketCsReq)
            }
            "CmdMonopolyConditionUpdateScNotify" => {
                Some(Self::CmdMonopolyConditionUpdateScNotify)
            }
            "CmdMonopolyGiveUpCurContentCsReq" => {
                Some(Self::CmdMonopolyGiveUpCurContentCsReq)
            }
            "CmdDailyFirstEnterMonopolyActivityCsReq" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityCsReq)
            }
            "CmdGetSocialEventServerCacheCsReq" => {
                Some(Self::CmdGetSocialEventServerCacheCsReq)
            }
            "CmdDeleteSocialEventServerCacheScRsp" => {
                Some(Self::CmdDeleteSocialEventServerCacheScRsp)
            }
            "CmdDeleteSocialEventServerCacheCsReq" => {
                Some(Self::CmdDeleteSocialEventServerCacheCsReq)
            }
            "CmdMonopolyContentUpdateScNotify" => {
                Some(Self::CmdMonopolyContentUpdateScNotify)
            }
            "CmdGetMonopolyDailyReportCsReq" => {
                Some(Self::CmdGetMonopolyDailyReportCsReq)
            }
            "CmdGetMonopolyMbtiReportRewardCsReq" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardCsReq)
            }
            "CmdMonopolyTakePhaseRewardScRsp" => {
                Some(Self::CmdMonopolyTakePhaseRewardScRsp)
            }
            "CmdMonopolyUpgradeAssetCsReq" => Some(Self::CmdMonopolyUpgradeAssetCsReq),
            "CmdMonopolyGetRafflePoolInfoScRsp" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoScRsp)
            }
            "CmdMonopolyGetDailyInitItemScRsp" => {
                Some(Self::CmdMonopolyGetDailyInitItemScRsp)
            }
            "CmdGetSocialEventServerCacheScRsp" => {
                Some(Self::CmdGetSocialEventServerCacheScRsp)
            }
            "CmdMonopolyGuessChooseCsReq" => Some(Self::CmdMonopolyGuessChooseCsReq),
            "CmdMonopolyGameRaiseRatioCsReq" => {
                Some(Self::CmdMonopolyGameRaiseRatioCsReq)
            }
            "CmdMonopolyDailySettleScNotify" => {
                Some(Self::CmdMonopolyDailySettleScNotify)
            }
            "CmdMonopolyScrachRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyScrachRaffleTicketCsReq)
            }
            "CmdMonopolySelectOptionCsReq" => Some(Self::CmdMonopolySelectOptionCsReq),
            "CmdMonopolyGameGachaCsReq" => Some(Self::CmdMonopolyGameGachaCsReq),
            "CmdMonopolyReRollRandomScRsp" => Some(Self::CmdMonopolyReRollRandomScRsp),
            "CmdMonopolyTakePhaseRewardCsReq" => {
                Some(Self::CmdMonopolyTakePhaseRewardCsReq)
            }
            "CmdMonopolyCellUpdateNotify" => Some(Self::CmdMonopolyCellUpdateNotify),
            "CmdMonopolyGameBingoFlipCardCsReq" => {
                Some(Self::CmdMonopolyGameBingoFlipCardCsReq)
            }
            "CmdMonopolyGuessBuyInformationScRsp" => {
                Some(Self::CmdMonopolyGuessBuyInformationScRsp)
            }
            "CmdMonopolyRollRandomCsReq" => Some(Self::CmdMonopolyRollRandomCsReq),
            "CmdMonopolyLikeCsReq" => Some(Self::CmdMonopolyLikeCsReq),
            "CmdMonopolyMoveCsReq" => Some(Self::CmdMonopolyMoveCsReq),
            "CmdMonopolyGameSettleScNotify" => Some(Self::CmdMonopolyGameSettleScNotify),
            "CmdMonopolyRollDiceScRsp" => Some(Self::CmdMonopolyRollDiceScRsp),
            "CmdMonopolyAcceptQuizScRsp" => Some(Self::CmdMonopolyAcceptQuizScRsp),
            "CmdMonopolyGuessDrawScNotify" => Some(Self::CmdMonopolyGuessDrawScNotify),
            "CmdMonopolyLikeScRsp" => Some(Self::CmdMonopolyLikeScRsp),
            "CmdMonopolyTakeRaffleTicketRewardCsReq" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardCsReq)
            }
            "CmdMonopolyScrachRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyScrachRaffleTicketScRsp)
            }
            "CmdMonopolyTakeRaffleTicketRewardScRsp" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardScRsp)
            }
            "CmdMonopolyReRollRandomCsReq" => Some(Self::CmdMonopolyReRollRandomCsReq),
            "CmdMonopolyClickMbtiReportScRsp" => {
                Some(Self::CmdMonopolyClickMbtiReportScRsp)
            }
            "CmdMonopolyClickCellCsReq" => Some(Self::CmdMonopolyClickCellCsReq),
            "CmdMonopolyGameBingoFlipCardScRsp" => {
                Some(Self::CmdMonopolyGameBingoFlipCardScRsp)
            }
            "CmdMonopolyCheatDiceScRsp" => Some(Self::CmdMonopolyCheatDiceScRsp),
            "CmdMonopolyLikeScNotify" => Some(Self::CmdMonopolyLikeScNotify),
            "CmdGetMonopolyFriendRankingListCsReq" => {
                Some(Self::CmdGetMonopolyFriendRankingListCsReq)
            }
            "CmdMonopolyEventSelectFriendScRsp" => {
                Some(Self::CmdMonopolyEventSelectFriendScRsp)
            }
            "CmdMonopolyGetRegionProgressScRsp" => {
                Some(Self::CmdMonopolyGetRegionProgressScRsp)
            }
            "CmdMonopolyGameGachaScRsp" => Some(Self::CmdMonopolyGameGachaScRsp),
            "CmdGetMonopolyDailyReportScRsp" => {
                Some(Self::CmdGetMonopolyDailyReportScRsp)
            }
            "CmdMonopolyGetRafflePoolInfoCsReq" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoCsReq)
            }
            "CmdMonopolyGetRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyGetRaffleTicketScRsp)
            }
            "CmdMonopolySelectOptionScRsp" => Some(Self::CmdMonopolySelectOptionScRsp),
            "CmdGetMonopolyMbtiReportRewardScRsp" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardScRsp)
            }
            "CmdMonopolyRollRandomScRsp" => Some(Self::CmdMonopolyRollRandomScRsp),
            "CmdMonopolyGuessBuyInformationCsReq" => {
                Some(Self::CmdMonopolyGuessBuyInformationCsReq)
            }
            "CmdMonopolySocialEventEffectScNotify" => {
                Some(Self::CmdMonopolySocialEventEffectScNotify)
            }
            "CmdMonopolyClickCellScRsp" => Some(Self::CmdMonopolyClickCellScRsp),
            "CmdMonopolyGameCreateScNotify" => Some(Self::CmdMonopolyGameCreateScNotify),
            "CmdGetMbtiReportScRsp" => Some(Self::CmdGetMbtiReportScRsp),
            "CmdMonopolyGameRaiseRatioScRsp" => {
                Some(Self::CmdMonopolyGameRaiseRatioScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Neikgnkfggi {
    MonopolySocialEventStatusNone = 0,
    MonopolySocialEventStatusWaitingSelectFriend = 1,
}
impl Neikgnkfggi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolySocialEventStatusNone => "MONOPOLY_SOCIAL_EVENT_STATUS_NONE",
            Self::MonopolySocialEventStatusWaitingSelectFriend => {
                "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_SOCIAL_EVENT_STATUS_NONE" => {
                Some(Self::MonopolySocialEventStatusNone)
            }
            "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND" => {
                Some(Self::MonopolySocialEventStatusWaitingSelectFriend)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dapbkiamoae {
    MonopolyCellStateIdle = 0,
    MonopolyCellStateBarrier = 1,
    MonopolyCellStateGround = 2,
    MonopolyCellStateFinish = 3,
}
impl Dapbkiamoae {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolyCellStateIdle => "MONOPOLY_CELL_STATE_IDLE",
            Self::MonopolyCellStateBarrier => "MONOPOLY_CELL_STATE_BARRIER",
            Self::MonopolyCellStateGround => "MONOPOLY_CELL_STATE_GROUND",
            Self::MonopolyCellStateFinish => "MONOPOLY_CELL_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_CELL_STATE_IDLE" => Some(Self::MonopolyCellStateIdle),
            "MONOPOLY_CELL_STATE_BARRIER" => Some(Self::MonopolyCellStateBarrier),
            "MONOPOLY_CELL_STATE_GROUND" => Some(Self::MonopolyCellStateGround),
            "MONOPOLY_CELL_STATE_FINISH" => Some(Self::MonopolyCellStateFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lmehacajfac {
    MonopolyActionResultSourceTypeNone = 0,
    MonopolyActionResultSourceTypeEffect = 1,
    MonopolyActionResultSourceTypeAssetBonus = 2,
    MonopolyActionResultSourceTypeAssetTax = 3,
    MonopolyActionResultSourceTypeAssetUpgrade = 4,
    MonopolyActionResultSourceTypeGameSettle = 5,
    MonopolyActionResultSourceTypeBuyGoods = 6,
    MonopolyActionResultSourceTypeClick = 7,
    MonopolyActionResultSourceTypeSocialEvent = 8,
    MonopolyActionResultSourceTypeLike = 9,
    MonopolyActionResultSourceTypeQuizGameSettle = 10,
}
impl Lmehacajfac {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolyActionResultSourceTypeNone => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Self::MonopolyActionResultSourceTypeEffect => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT"
            }
            Self::MonopolyActionResultSourceTypeAssetBonus => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS"
            }
            Self::MonopolyActionResultSourceTypeAssetTax => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX"
            }
            Self::MonopolyActionResultSourceTypeAssetUpgrade => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE"
            }
            Self::MonopolyActionResultSourceTypeGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE"
            }
            Self::MonopolyActionResultSourceTypeBuyGoods => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS"
            }
            Self::MonopolyActionResultSourceTypeClick => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK"
            }
            Self::MonopolyActionResultSourceTypeSocialEvent => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT"
            }
            Self::MonopolyActionResultSourceTypeLike => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE"
            }
            Self::MonopolyActionResultSourceTypeQuizGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::MonopolyActionResultSourceTypeNone)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT" => {
                Some(Self::MonopolyActionResultSourceTypeEffect)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS" => {
                Some(Self::MonopolyActionResultSourceTypeAssetBonus)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX" => {
                Some(Self::MonopolyActionResultSourceTypeAssetTax)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE" => {
                Some(Self::MonopolyActionResultSourceTypeAssetUpgrade)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeGameSettle)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS" => {
                Some(Self::MonopolyActionResultSourceTypeBuyGoods)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK" => {
                Some(Self::MonopolyActionResultSourceTypeClick)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT" => {
                Some(Self::MonopolyActionResultSourceTypeSocialEvent)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE" => {
                Some(Self::MonopolyActionResultSourceTypeLike)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeQuizGameSettle)
            }
            _ => None,
        }
    }
}
/// MNIPCAPEIKH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMultiplayerType {
    None = 0,
    CmdMultiplayerMatch3FinishScNotify = 1024,
    CmdMultiplayerFightGameStateCsReq = 1036,
    CmdMultiplayerFightGameStateScRsp = 1095,
    CmdMultiplayerGetFightGateCsReq = 1084,
    CmdMultiplayerFightGameStartScNotify = 1052,
    CmdMultiplayerFightGameFinishScNotify = 1074,
    CmdMultiplayerGetFightGateScRsp = 1027,
    CmdMultiplayerFightGiveUpCsReq = 1067,
    CmdMultiplayerFightGiveUpScRsp = 1028,
}
impl CmdMultiplayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMultiplayerTypeNone",
            Self::CmdMultiplayerMatch3FinishScNotify => {
                "CmdMultiplayerMatch3FinishScNotify"
            }
            Self::CmdMultiplayerFightGameStateCsReq => {
                "CmdMultiplayerFightGameStateCsReq"
            }
            Self::CmdMultiplayerFightGameStateScRsp => {
                "CmdMultiplayerFightGameStateScRsp"
            }
            Self::CmdMultiplayerGetFightGateCsReq => "CmdMultiplayerGetFightGateCsReq",
            Self::CmdMultiplayerFightGameStartScNotify => {
                "CmdMultiplayerFightGameStartScNotify"
            }
            Self::CmdMultiplayerFightGameFinishScNotify => {
                "CmdMultiplayerFightGameFinishScNotify"
            }
            Self::CmdMultiplayerGetFightGateScRsp => "CmdMultiplayerGetFightGateScRsp",
            Self::CmdMultiplayerFightGiveUpCsReq => "CmdMultiplayerFightGiveUpCsReq",
            Self::CmdMultiplayerFightGiveUpScRsp => "CmdMultiplayerFightGiveUpScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultiplayerTypeNone" => Some(Self::None),
            "CmdMultiplayerMatch3FinishScNotify" => {
                Some(Self::CmdMultiplayerMatch3FinishScNotify)
            }
            "CmdMultiplayerFightGameStateCsReq" => {
                Some(Self::CmdMultiplayerFightGameStateCsReq)
            }
            "CmdMultiplayerFightGameStateScRsp" => {
                Some(Self::CmdMultiplayerFightGameStateScRsp)
            }
            "CmdMultiplayerGetFightGateCsReq" => {
                Some(Self::CmdMultiplayerGetFightGateCsReq)
            }
            "CmdMultiplayerFightGameStartScNotify" => {
                Some(Self::CmdMultiplayerFightGameStartScNotify)
            }
            "CmdMultiplayerFightGameFinishScNotify" => {
                Some(Self::CmdMultiplayerFightGameFinishScNotify)
            }
            "CmdMultiplayerGetFightGateScRsp" => {
                Some(Self::CmdMultiplayerGetFightGateScRsp)
            }
            "CmdMultiplayerFightGiveUpCsReq" => {
                Some(Self::CmdMultiplayerFightGiveUpCsReq)
            }
            "CmdMultiplayerFightGiveUpScRsp" => {
                Some(Self::CmdMultiplayerFightGiveUpScRsp)
            }
            _ => None,
        }
    }
}
/// BOOANOKFGBA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMultipleDropType {
    None = 0,
    CmdGetMultipleDropInfoCsReq = 4636,
    CmdGetPlayerReturnMultiDropInfoScRsp = 4667,
    CmdMultipleDropInfoNotify = 4628,
    CmdGetPlayerReturnMultiDropInfoCsReq = 4627,
    CmdMultipleDropInfoScNotify = 4684,
    CmdGetMultipleDropInfoScRsp = 4695,
}
impl CmdMultipleDropType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMultipleDropTypeNone",
            Self::CmdGetMultipleDropInfoCsReq => "CmdGetMultipleDropInfoCsReq",
            Self::CmdGetPlayerReturnMultiDropInfoScRsp => {
                "CmdGetPlayerReturnMultiDropInfoScRsp"
            }
            Self::CmdMultipleDropInfoNotify => "CmdMultipleDropInfoNotify",
            Self::CmdGetPlayerReturnMultiDropInfoCsReq => {
                "CmdGetPlayerReturnMultiDropInfoCsReq"
            }
            Self::CmdMultipleDropInfoScNotify => "CmdMultipleDropInfoScNotify",
            Self::CmdGetMultipleDropInfoScRsp => "CmdGetMultipleDropInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultipleDropTypeNone" => Some(Self::None),
            "CmdGetMultipleDropInfoCsReq" => Some(Self::CmdGetMultipleDropInfoCsReq),
            "CmdGetPlayerReturnMultiDropInfoScRsp" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoScRsp)
            }
            "CmdMultipleDropInfoNotify" => Some(Self::CmdMultipleDropInfoNotify),
            "CmdGetPlayerReturnMultiDropInfoCsReq" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoCsReq)
            }
            "CmdMultipleDropInfoScNotify" => Some(Self::CmdMultipleDropInfoScNotify),
            "CmdGetMultipleDropInfoScRsp" => Some(Self::CmdGetMultipleDropInfoScRsp),
            _ => None,
        }
    }
}
/// DKNNHKOJHKD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMuseumType {
    None = 0,
    CmdSetStuffToAreaCsReq = 4367,
    CmdRemoveStuffFromAreaCsReq = 4352,
    CmdFinishCurTurnCsReq = 4334,
    CmdBuyNpcStuffScRsp = 4327,
    CmdMuseumRandomEventQueryScRsp = 4353,
    CmdMuseumRandomEventSelectScRsp = 4359,
    CmdMuseumTakeCollectRewardScRsp = 4388,
    CmdMuseumTargetStartNotify = 4378,
    CmdGetMuseumInfoCsReq = 4336,
    CmdUpgradeAreaStatScRsp = 4305,
    CmdMuseumInfoChangedScNotify = 4375,
    CmdGetMuseumInfoScRsp = 4395,
    CmdRemoveStuffFromAreaScRsp = 4374,
    CmdMuseumFundsChangedScNotify = 4319,
    CmdUpgradeAreaCsReq = 4346,
    CmdMuseumDispatchFinishedScNotify = 4312,
    CmdGetStuffScNotify = 4324,
    CmdMuseumRandomEventStartScNotify = 4326,
    CmdMuseumRandomEventQueryCsReq = 4307,
    CmdGetExhibitScNotify = 4393,
    CmdFinishCurTurnScRsp = 4343,
    CmdMuseumRandomEventSelectCsReq = 4390,
    CmdBuyNpcStuffCsReq = 4384,
    CmdUpgradeAreaScRsp = 4325,
    CmdUpgradeAreaStatCsReq = 4396,
    CmdMuseumTargetMissionFinishNotify = 4329,
    CmdMuseumTargetRewardNotify = 4350,
    CmdMuseumTakeCollectRewardCsReq = 4348,
    CmdSetStuffToAreaScRsp = 4328,
}
impl CmdMuseumType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMuseumTypeNone",
            Self::CmdSetStuffToAreaCsReq => "CmdSetStuffToAreaCsReq",
            Self::CmdRemoveStuffFromAreaCsReq => "CmdRemoveStuffFromAreaCsReq",
            Self::CmdFinishCurTurnCsReq => "CmdFinishCurTurnCsReq",
            Self::CmdBuyNpcStuffScRsp => "CmdBuyNpcStuffScRsp",
            Self::CmdMuseumRandomEventQueryScRsp => "CmdMuseumRandomEventQueryScRsp",
            Self::CmdMuseumRandomEventSelectScRsp => "CmdMuseumRandomEventSelectScRsp",
            Self::CmdMuseumTakeCollectRewardScRsp => "CmdMuseumTakeCollectRewardScRsp",
            Self::CmdMuseumTargetStartNotify => "CmdMuseumTargetStartNotify",
            Self::CmdGetMuseumInfoCsReq => "CmdGetMuseumInfoCsReq",
            Self::CmdUpgradeAreaStatScRsp => "CmdUpgradeAreaStatScRsp",
            Self::CmdMuseumInfoChangedScNotify => "CmdMuseumInfoChangedScNotify",
            Self::CmdGetMuseumInfoScRsp => "CmdGetMuseumInfoScRsp",
            Self::CmdRemoveStuffFromAreaScRsp => "CmdRemoveStuffFromAreaScRsp",
            Self::CmdMuseumFundsChangedScNotify => "CmdMuseumFundsChangedScNotify",
            Self::CmdUpgradeAreaCsReq => "CmdUpgradeAreaCsReq",
            Self::CmdMuseumDispatchFinishedScNotify => {
                "CmdMuseumDispatchFinishedScNotify"
            }
            Self::CmdGetStuffScNotify => "CmdGetStuffScNotify",
            Self::CmdMuseumRandomEventStartScNotify => {
                "CmdMuseumRandomEventStartScNotify"
            }
            Self::CmdMuseumRandomEventQueryCsReq => "CmdMuseumRandomEventQueryCsReq",
            Self::CmdGetExhibitScNotify => "CmdGetExhibitScNotify",
            Self::CmdFinishCurTurnScRsp => "CmdFinishCurTurnScRsp",
            Self::CmdMuseumRandomEventSelectCsReq => "CmdMuseumRandomEventSelectCsReq",
            Self::CmdBuyNpcStuffCsReq => "CmdBuyNpcStuffCsReq",
            Self::CmdUpgradeAreaScRsp => "CmdUpgradeAreaScRsp",
            Self::CmdUpgradeAreaStatCsReq => "CmdUpgradeAreaStatCsReq",
            Self::CmdMuseumTargetMissionFinishNotify => {
                "CmdMuseumTargetMissionFinishNotify"
            }
            Self::CmdMuseumTargetRewardNotify => "CmdMuseumTargetRewardNotify",
            Self::CmdMuseumTakeCollectRewardCsReq => "CmdMuseumTakeCollectRewardCsReq",
            Self::CmdSetStuffToAreaScRsp => "CmdSetStuffToAreaScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMuseumTypeNone" => Some(Self::None),
            "CmdSetStuffToAreaCsReq" => Some(Self::CmdSetStuffToAreaCsReq),
            "CmdRemoveStuffFromAreaCsReq" => Some(Self::CmdRemoveStuffFromAreaCsReq),
            "CmdFinishCurTurnCsReq" => Some(Self::CmdFinishCurTurnCsReq),
            "CmdBuyNpcStuffScRsp" => Some(Self::CmdBuyNpcStuffScRsp),
            "CmdMuseumRandomEventQueryScRsp" => {
                Some(Self::CmdMuseumRandomEventQueryScRsp)
            }
            "CmdMuseumRandomEventSelectScRsp" => {
                Some(Self::CmdMuseumRandomEventSelectScRsp)
            }
            "CmdMuseumTakeCollectRewardScRsp" => {
                Some(Self::CmdMuseumTakeCollectRewardScRsp)
            }
            "CmdMuseumTargetStartNotify" => Some(Self::CmdMuseumTargetStartNotify),
            "CmdGetMuseumInfoCsReq" => Some(Self::CmdGetMuseumInfoCsReq),
            "CmdUpgradeAreaStatScRsp" => Some(Self::CmdUpgradeAreaStatScRsp),
            "CmdMuseumInfoChangedScNotify" => Some(Self::CmdMuseumInfoChangedScNotify),
            "CmdGetMuseumInfoScRsp" => Some(Self::CmdGetMuseumInfoScRsp),
            "CmdRemoveStuffFromAreaScRsp" => Some(Self::CmdRemoveStuffFromAreaScRsp),
            "CmdMuseumFundsChangedScNotify" => Some(Self::CmdMuseumFundsChangedScNotify),
            "CmdUpgradeAreaCsReq" => Some(Self::CmdUpgradeAreaCsReq),
            "CmdMuseumDispatchFinishedScNotify" => {
                Some(Self::CmdMuseumDispatchFinishedScNotify)
            }
            "CmdGetStuffScNotify" => Some(Self::CmdGetStuffScNotify),
            "CmdMuseumRandomEventStartScNotify" => {
                Some(Self::CmdMuseumRandomEventStartScNotify)
            }
            "CmdMuseumRandomEventQueryCsReq" => {
                Some(Self::CmdMuseumRandomEventQueryCsReq)
            }
            "CmdGetExhibitScNotify" => Some(Self::CmdGetExhibitScNotify),
            "CmdFinishCurTurnScRsp" => Some(Self::CmdFinishCurTurnScRsp),
            "CmdMuseumRandomEventSelectCsReq" => {
                Some(Self::CmdMuseumRandomEventSelectCsReq)
            }
            "CmdBuyNpcStuffCsReq" => Some(Self::CmdBuyNpcStuffCsReq),
            "CmdUpgradeAreaScRsp" => Some(Self::CmdUpgradeAreaScRsp),
            "CmdUpgradeAreaStatCsReq" => Some(Self::CmdUpgradeAreaStatCsReq),
            "CmdMuseumTargetMissionFinishNotify" => {
                Some(Self::CmdMuseumTargetMissionFinishNotify)
            }
            "CmdMuseumTargetRewardNotify" => Some(Self::CmdMuseumTargetRewardNotify),
            "CmdMuseumTakeCollectRewardCsReq" => {
                Some(Self::CmdMuseumTakeCollectRewardCsReq)
            }
            "CmdSetStuffToAreaScRsp" => Some(Self::CmdSetStuffToAreaScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Egjlnpaoffn {
    MuseumRandomEventStateNone = 0,
    MuseumRandomEventStateStart = 1,
    MuseumRandomEventStateProcessing = 2,
    MuseumRandomEventStateFinish = 3,
}
impl Egjlnpaoffn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MuseumRandomEventStateNone => "MUSEUM_RANDOM_EVENT_STATE_NONE",
            Self::MuseumRandomEventStateStart => "MUSEUM_RANDOM_EVENT_STATE_START",
            Self::MuseumRandomEventStateProcessing => {
                "MUSEUM_RANDOM_EVENT_STATE_PROCESSING"
            }
            Self::MuseumRandomEventStateFinish => "MUSEUM_RANDOM_EVENT_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MUSEUM_RANDOM_EVENT_STATE_NONE" => Some(Self::MuseumRandomEventStateNone),
            "MUSEUM_RANDOM_EVENT_STATE_START" => Some(Self::MuseumRandomEventStateStart),
            "MUSEUM_RANDOM_EVENT_STATE_PROCESSING" => {
                Some(Self::MuseumRandomEventStateProcessing)
            }
            "MUSEUM_RANDOM_EVENT_STATE_FINISH" => {
                Some(Self::MuseumRandomEventStateFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Medpdealgmj {
    WorkPosNone = 0,
    WorkPos1 = 1,
    WorkPos2 = 2,
    WorkPos3 = 3,
}
impl Medpdealgmj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WorkPosNone => "WORK_POS_NONE",
            Self::WorkPos1 => "WORK_POS_1",
            Self::WorkPos2 => "WORK_POS_2",
            Self::WorkPos3 => "WORK_POS_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORK_POS_NONE" => Some(Self::WorkPosNone),
            "WORK_POS_1" => Some(Self::WorkPos1),
            "WORK_POS_2" => Some(Self::WorkPos2),
            "WORK_POS_3" => Some(Self::WorkPos3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nocjbehejbn {
    StatTypeNone = 0,
    StatTypeArt = 1,
    StatTypeCulture = 2,
    StatTypePopular = 3,
}
impl Nocjbehejbn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatTypeNone => "STAT_TYPE_NONE",
            Self::StatTypeArt => "STAT_TYPE_ART",
            Self::StatTypeCulture => "STAT_TYPE_CULTURE",
            Self::StatTypePopular => "STAT_TYPE_POPULAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAT_TYPE_NONE" => Some(Self::StatTypeNone),
            "STAT_TYPE_ART" => Some(Self::StatTypeArt),
            "STAT_TYPE_CULTURE" => Some(Self::StatTypeCulture),
            "STAT_TYPE_POPULAR" => Some(Self::StatTypePopular),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bmnapjnpmbc {
    Unknow = 0,
    MissionReward = 1,
    EventBuyStuff = 2,
    MarketBuyStuff = 3,
    QuestReward = 4,
    Initial = 5,
    PhaseFinishReward = 6,
}
impl Bmnapjnpmbc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknow => "UNKNOW",
            Self::MissionReward => "MISSION_REWARD",
            Self::EventBuyStuff => "EVENT_BUY_STUFF",
            Self::MarketBuyStuff => "MARKET_BUY_STUFF",
            Self::QuestReward => "QUEST_REWARD",
            Self::Initial => "INITIAL",
            Self::PhaseFinishReward => "PHASE_FINISH_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOW" => Some(Self::Unknow),
            "MISSION_REWARD" => Some(Self::MissionReward),
            "EVENT_BUY_STUFF" => Some(Self::EventBuyStuff),
            "MARKET_BUY_STUFF" => Some(Self::MarketBuyStuff),
            "QUEST_REWARD" => Some(Self::QuestReward),
            "INITIAL" => Some(Self::Initial),
            "PHASE_FINISH_REWARD" => Some(Self::PhaseFinishReward),
            _ => None,
        }
    }
}
/// LOEHIBBBIPG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMusicRhythmType {
    None = 0,
    CmdMusicRhythmStartLevelScRsp = 7593,
    CmdMusicRhythmFinishLevelCsReq = 7591,
    CmdMusicRhythmStartLevelCsReq = 7576,
    CmdMusicRhythmDataCsReq = 7573,
    CmdMusicRhythmFinishLevelScRsp = 7600,
    CmdMusicRhythmDataScRsp = 7585,
    CmdMusicRhythmUnlockSongNotify = 7597,
    CmdMusicRhythmSaveSongConfigDataCsReq = 7596,
    CmdMusicRhythmMaxDifficultyLevelsUnlockNotify = 7580,
    CmdMusicRhythmUnlockTrackScNotify = 7577,
    CmdMusicRhythmSaveSongConfigDataScRsp = 7592,
    CmdMusicRhythmUnlockSongSfxScNotify = 7599,
}
impl CmdMusicRhythmType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMusicRhythmTypeNone",
            Self::CmdMusicRhythmStartLevelScRsp => "CmdMusicRhythmStartLevelScRsp",
            Self::CmdMusicRhythmFinishLevelCsReq => "CmdMusicRhythmFinishLevelCsReq",
            Self::CmdMusicRhythmStartLevelCsReq => "CmdMusicRhythmStartLevelCsReq",
            Self::CmdMusicRhythmDataCsReq => "CmdMusicRhythmDataCsReq",
            Self::CmdMusicRhythmFinishLevelScRsp => "CmdMusicRhythmFinishLevelScRsp",
            Self::CmdMusicRhythmDataScRsp => "CmdMusicRhythmDataScRsp",
            Self::CmdMusicRhythmUnlockSongNotify => "CmdMusicRhythmUnlockSongNotify",
            Self::CmdMusicRhythmSaveSongConfigDataCsReq => {
                "CmdMusicRhythmSaveSongConfigDataCsReq"
            }
            Self::CmdMusicRhythmMaxDifficultyLevelsUnlockNotify => {
                "CmdMusicRhythmMaxDifficultyLevelsUnlockNotify"
            }
            Self::CmdMusicRhythmUnlockTrackScNotify => {
                "CmdMusicRhythmUnlockTrackScNotify"
            }
            Self::CmdMusicRhythmSaveSongConfigDataScRsp => {
                "CmdMusicRhythmSaveSongConfigDataScRsp"
            }
            Self::CmdMusicRhythmUnlockSongSfxScNotify => {
                "CmdMusicRhythmUnlockSongSfxScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMusicRhythmTypeNone" => Some(Self::None),
            "CmdMusicRhythmStartLevelScRsp" => Some(Self::CmdMusicRhythmStartLevelScRsp),
            "CmdMusicRhythmFinishLevelCsReq" => {
                Some(Self::CmdMusicRhythmFinishLevelCsReq)
            }
            "CmdMusicRhythmStartLevelCsReq" => Some(Self::CmdMusicRhythmStartLevelCsReq),
            "CmdMusicRhythmDataCsReq" => Some(Self::CmdMusicRhythmDataCsReq),
            "CmdMusicRhythmFinishLevelScRsp" => {
                Some(Self::CmdMusicRhythmFinishLevelScRsp)
            }
            "CmdMusicRhythmDataScRsp" => Some(Self::CmdMusicRhythmDataScRsp),
            "CmdMusicRhythmUnlockSongNotify" => {
                Some(Self::CmdMusicRhythmUnlockSongNotify)
            }
            "CmdMusicRhythmSaveSongConfigDataCsReq" => {
                Some(Self::CmdMusicRhythmSaveSongConfigDataCsReq)
            }
            "CmdMusicRhythmMaxDifficultyLevelsUnlockNotify" => {
                Some(Self::CmdMusicRhythmMaxDifficultyLevelsUnlockNotify)
            }
            "CmdMusicRhythmUnlockTrackScNotify" => {
                Some(Self::CmdMusicRhythmUnlockTrackScNotify)
            }
            "CmdMusicRhythmSaveSongConfigDataScRsp" => {
                Some(Self::CmdMusicRhythmSaveSongConfigDataScRsp)
            }
            "CmdMusicRhythmUnlockSongSfxScNotify" => {
                Some(Self::CmdMusicRhythmUnlockSongSfxScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eheaaocpinf {
    StatusClose = 0,
    StatusOpen = 1,
}
impl Eheaaocpinf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusClose => "STATUS_CLOSE",
            Self::StatusOpen => "STATUS_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_CLOSE" => Some(Self::StatusClose),
            "STATUS_OPEN" => Some(Self::StatusOpen),
            _ => None,
        }
    }
}
/// EHEGOBILIEP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdOfferingType {
    None = 0,
    CmdSubmitOfferingItemScRsp = 6923,
    CmdTakeOfferingRewardScRsp = 6926,
    CmdTakeOfferingRewardCsReq = 6937,
    CmdGetOfferingInfoCsReq = 6940,
    CmdGetOfferingInfoScRsp = 6935,
    CmdSubmitOfferingItemCsReq = 6927,
    CmdOfferingInfoScNotify = 6925,
}
impl CmdOfferingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdOfferingTypeNone",
            Self::CmdSubmitOfferingItemScRsp => "CmdSubmitOfferingItemScRsp",
            Self::CmdTakeOfferingRewardScRsp => "CmdTakeOfferingRewardScRsp",
            Self::CmdTakeOfferingRewardCsReq => "CmdTakeOfferingRewardCsReq",
            Self::CmdGetOfferingInfoCsReq => "CmdGetOfferingInfoCsReq",
            Self::CmdGetOfferingInfoScRsp => "CmdGetOfferingInfoScRsp",
            Self::CmdSubmitOfferingItemCsReq => "CmdSubmitOfferingItemCsReq",
            Self::CmdOfferingInfoScNotify => "CmdOfferingInfoScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdOfferingTypeNone" => Some(Self::None),
            "CmdSubmitOfferingItemScRsp" => Some(Self::CmdSubmitOfferingItemScRsp),
            "CmdTakeOfferingRewardScRsp" => Some(Self::CmdTakeOfferingRewardScRsp),
            "CmdTakeOfferingRewardCsReq" => Some(Self::CmdTakeOfferingRewardCsReq),
            "CmdGetOfferingInfoCsReq" => Some(Self::CmdGetOfferingInfoCsReq),
            "CmdGetOfferingInfoScRsp" => Some(Self::CmdGetOfferingInfoScRsp),
            "CmdSubmitOfferingItemCsReq" => Some(Self::CmdSubmitOfferingItemCsReq),
            "CmdOfferingInfoScNotify" => Some(Self::CmdOfferingInfoScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dplcpcfaimn {
    OfferingStateNone = 0,
    OfferingStateLock = 1,
    OfferingStateOpen = 2,
}
impl Dplcpcfaimn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::OfferingStateNone => "OFFERING_STATE_NONE",
            Self::OfferingStateLock => "OFFERING_STATE_LOCK",
            Self::OfferingStateOpen => "OFFERING_STATE_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFERING_STATE_NONE" => Some(Self::OfferingStateNone),
            "OFFERING_STATE_LOCK" => Some(Self::OfferingStateLock),
            "OFFERING_STATE_OPEN" => Some(Self::OfferingStateOpen),
            _ => None,
        }
    }
}
/// CFGDEHCCNGD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPamMissionType {
    None = 0,
    CmdSyncAcceptedPamMissionNotify = 4084,
    CmdAcceptedPamMissionExpireCsReq = 4036,
    CmdAcceptedPamMissionExpireScRsp = 4095,
}
impl CmdPamMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPamMissionTypeNone",
            Self::CmdSyncAcceptedPamMissionNotify => "CmdSyncAcceptedPamMissionNotify",
            Self::CmdAcceptedPamMissionExpireCsReq => "CmdAcceptedPamMissionExpireCsReq",
            Self::CmdAcceptedPamMissionExpireScRsp => "CmdAcceptedPamMissionExpireScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamMissionTypeNone" => Some(Self::None),
            "CmdSyncAcceptedPamMissionNotify" => {
                Some(Self::CmdSyncAcceptedPamMissionNotify)
            }
            "CmdAcceptedPamMissionExpireCsReq" => {
                Some(Self::CmdAcceptedPamMissionExpireCsReq)
            }
            "CmdAcceptedPamMissionExpireScRsp" => {
                Some(Self::CmdAcceptedPamMissionExpireScRsp)
            }
            _ => None,
        }
    }
}
/// GHGBIADGJPC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPamSkinType {
    None = 0,
    CmdGetPamSkinDataScRsp = 8135,
    CmdSelectPamSkinScRsp = 8123,
    CmdSelectPamSkinCsReq = 8127,
    CmdUnlockPamSkinScNotify = 8137,
    CmdGetPamSkinDataCsReq = 8140,
}
impl CmdPamSkinType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPamSkinTypeNone",
            Self::CmdGetPamSkinDataScRsp => "CmdGetPamSkinDataScRsp",
            Self::CmdSelectPamSkinScRsp => "CmdSelectPamSkinScRsp",
            Self::CmdSelectPamSkinCsReq => "CmdSelectPamSkinCsReq",
            Self::CmdUnlockPamSkinScNotify => "CmdUnlockPamSkinScNotify",
            Self::CmdGetPamSkinDataCsReq => "CmdGetPamSkinDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamSkinTypeNone" => Some(Self::None),
            "CmdGetPamSkinDataScRsp" => Some(Self::CmdGetPamSkinDataScRsp),
            "CmdSelectPamSkinScRsp" => Some(Self::CmdSelectPamSkinScRsp),
            "CmdSelectPamSkinCsReq" => Some(Self::CmdSelectPamSkinCsReq),
            "CmdUnlockPamSkinScNotify" => Some(Self::CmdUnlockPamSkinScNotify),
            "CmdGetPamSkinDataCsReq" => Some(Self::CmdGetPamSkinDataCsReq),
            _ => None,
        }
    }
}
/// FMAKEIGFLAK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPetType {
    None = 0,
    CmdSummonPetCsReq = 7616,
    CmdRecallPetScRsp = 7607,
    CmdGetPetDataCsReq = 7624,
    CmdCurPetChangedScNotify = 7606,
    CmdRecallPetCsReq = 7610,
    CmdSummonPetScRsp = 7603,
    CmdGetPetDataScRsp = 7623,
}
impl CmdPetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPetTypeNone",
            Self::CmdSummonPetCsReq => "CmdSummonPetCsReq",
            Self::CmdRecallPetScRsp => "CmdRecallPetScRsp",
            Self::CmdGetPetDataCsReq => "CmdGetPetDataCsReq",
            Self::CmdCurPetChangedScNotify => "CmdCurPetChangedScNotify",
            Self::CmdRecallPetCsReq => "CmdRecallPetCsReq",
            Self::CmdSummonPetScRsp => "CmdSummonPetScRsp",
            Self::CmdGetPetDataScRsp => "CmdGetPetDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPetTypeNone" => Some(Self::None),
            "CmdSummonPetCsReq" => Some(Self::CmdSummonPetCsReq),
            "CmdRecallPetScRsp" => Some(Self::CmdRecallPetScRsp),
            "CmdGetPetDataCsReq" => Some(Self::CmdGetPetDataCsReq),
            "CmdCurPetChangedScNotify" => Some(Self::CmdCurPetChangedScNotify),
            "CmdRecallPetCsReq" => Some(Self::CmdRecallPetCsReq),
            "CmdSummonPetScRsp" => Some(Self::CmdSummonPetScRsp),
            "CmdGetPetDataScRsp" => Some(Self::CmdGetPetDataScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mhdablgihlk {
    PetOperationTypeNone = 0,
    PetOperationTypeSummon = 1,
    PetOperationTypeRecall = 2,
}
impl Mhdablgihlk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PetOperationTypeNone => "PET_OPERATION_TYPE_NONE",
            Self::PetOperationTypeSummon => "PET_OPERATION_TYPE_SUMMON",
            Self::PetOperationTypeRecall => "PET_OPERATION_TYPE_RECALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PET_OPERATION_TYPE_NONE" => Some(Self::PetOperationTypeNone),
            "PET_OPERATION_TYPE_SUMMON" => Some(Self::PetOperationTypeSummon),
            "PET_OPERATION_TYPE_RECALL" => Some(Self::PetOperationTypeRecall),
            _ => None,
        }
    }
}
/// PIOKOKKIGFL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPhoneType {
    None = 0,
    CmdSelectPhoneThemeScRsp = 5152,
    CmdUnlockPhoneThemeScNotify = 5174,
    CmdSelectPhoneThemeCsReq = 5128,
    CmdSelectChatBubbleScRsp = 5127,
    CmdUnlockChatBubbleScNotify = 5167,
    CmdGetPhoneDataCsReq = 5136,
    CmdSelectChatBubbleCsReq = 5184,
    CmdGetPhoneDataScRsp = 5195,
}
impl CmdPhoneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPhoneTypeNone",
            Self::CmdSelectPhoneThemeScRsp => "CmdSelectPhoneThemeScRsp",
            Self::CmdUnlockPhoneThemeScNotify => "CmdUnlockPhoneThemeScNotify",
            Self::CmdSelectPhoneThemeCsReq => "CmdSelectPhoneThemeCsReq",
            Self::CmdSelectChatBubbleScRsp => "CmdSelectChatBubbleScRsp",
            Self::CmdUnlockChatBubbleScNotify => "CmdUnlockChatBubbleScNotify",
            Self::CmdGetPhoneDataCsReq => "CmdGetPhoneDataCsReq",
            Self::CmdSelectChatBubbleCsReq => "CmdSelectChatBubbleCsReq",
            Self::CmdGetPhoneDataScRsp => "CmdGetPhoneDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPhoneTypeNone" => Some(Self::None),
            "CmdSelectPhoneThemeScRsp" => Some(Self::CmdSelectPhoneThemeScRsp),
            "CmdUnlockPhoneThemeScNotify" => Some(Self::CmdUnlockPhoneThemeScNotify),
            "CmdSelectPhoneThemeCsReq" => Some(Self::CmdSelectPhoneThemeCsReq),
            "CmdSelectChatBubbleScRsp" => Some(Self::CmdSelectChatBubbleScRsp),
            "CmdUnlockChatBubbleScNotify" => Some(Self::CmdUnlockChatBubbleScNotify),
            "CmdGetPhoneDataCsReq" => Some(Self::CmdGetPhoneDataCsReq),
            "CmdSelectChatBubbleCsReq" => Some(Self::CmdSelectChatBubbleCsReq),
            "CmdGetPhoneDataScRsp" => Some(Self::CmdGetPhoneDataScRsp),
            _ => None,
        }
    }
}
/// FJKKIPFDIBB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerType {
    None = 0,
    CmdPlayerLogoutCsReq = 84,
    CmdSetAvatarPathCsReq = 87,
    CmdGetBasicInfoScRsp = 100,
    CmdUpdatePsnSettingsInfoCsReq = 32,
    CmdSetMultipleAvatarPathsCsReq = 62,
    CmdSetLanguageScRsp = 88,
    CmdServerAnnounceNotify = 58,
    CmdPlayerGetTokenScRsp = 28,
    CmdSetMultipleAvatarPathsScRsp = 2,
    CmdReserveStaminaExchangeCsReq = 91,
    CmdGetVideoVersionKeyScRsp = 47,
    CmdMonthCardRewardNotify = 64,
    CmdPlayerHeartBeatScRsp = 3,
    CmdClientObjDownloadDataScNotify = 9,
    CmdGetSecretKeyInfoScRsp = 83,
    CmdExchangeStaminaScRsp = 96,
    CmdUpdatePlayerSettingCsReq = 69,
    CmdQueryProductInfoCsReq = 79,
    CmdAntiAddictScNotify = 26,
    CmdGmTalkScNotify = 74,
    CmdAceAntiCheaterScRsp = 45,
    CmdFeatureSwitchClosedScNotify = 61,
    CmdUpdatePlayerSettingScRsp = 56,
    CmdGetVideoVersionKeyCsReq = 16,
    CmdSetLanguageCsReq = 48,
    CmdGetLevelRewardTakenListScRsp = 59,
    CmdSetGenderScRsp = 8,
    CmdPlayerGetTokenCsReq = 67,
    CmdUnlockAvatarPathScRsp = 85,
    CmdGetSecretKeyInfoCsReq = 97,
    CmdSetNicknameCsReq = 7,
    CmdGetLevelRewardCsReq = 12,
    CmdUpdateFeatureSwitchScNotify = 55,
    CmdClientDownloadDataScNotify = 39,
    CmdGetMultiPathAvatarInfoCsReq = 66,
    CmdClientObjUploadScRsp = 1,
    CmdGetAuthkeyCsReq = 5,
    CmdExchangeStaminaCsReq = 25,
    CmdPlayerLoginCsReq = 36,
    CmdGetAuthkeyScRsp = 75,
    CmdClientObjUploadCsReq = 20,
    CmdGetGameStateServiceConfigCsReq = 6,
    CmdReserveStaminaExchangeScRsp = 44,
    CmdGmTalkCsReq = 93,
    CmdGetLevelRewardTakenListCsReq = 90,
    CmdRegionStopScNotify = 19,
    CmdSetPlayerInfoCsReq = 18,
    CmdRetcodeNotify = 72,
    CmdSetRedPointStatusScNotify = 49,
    CmdPlayerLogoutScRsp = 27,
    CmdSetNicknameScRsp = 53,
    CmdSetAvatarPathScRsp = 86,
    CmdSetPlayerInfoScRsp = 37,
    CmdPlayerLoginScRsp = 95,
    CmdGateServerScNotify = 40,
    CmdGetGameStateServiceConfigScRsp = 71,
    CmdAvatarPathChangedNotify = 89,
    CmdGetLevelRewardScRsp = 78,
    CmdAceAntiCheaterCsReq = 60,
    CmdQueryProductInfoScRsp = 81,
    CmdPlayerKickOutScNotify = 24,
    CmdSetGameplayBirthdayCsReq = 94,
    CmdUnlockAvatarPathCsReq = 15,
    CmdPlayerLoginFinishCsReq = 68,
    CmdGetBasicInfoCsReq = 22,
    CmdUpdatePsnSettingsInfoScRsp = 82,
    CmdGmTalkScRsp = 34,
    CmdPlayerHeartBeatCsReq = 99,
    CmdStaminaInfoScNotify = 23,
    CmdDailyRefreshNotify = 41,
    CmdPlayerLoginFinishScRsp = 57,
    CmdGetMultiPathAvatarInfoScRsp = 63,
    CmdSetGenderCsReq = 65,
    CmdSetGameplayBirthdayScRsp = 92,
}
impl CmdPlayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerTypeNone",
            Self::CmdPlayerLogoutCsReq => "CmdPlayerLogoutCsReq",
            Self::CmdSetAvatarPathCsReq => "CmdSetAvatarPathCsReq",
            Self::CmdGetBasicInfoScRsp => "CmdGetBasicInfoScRsp",
            Self::CmdUpdatePsnSettingsInfoCsReq => "CmdUpdatePsnSettingsInfoCsReq",
            Self::CmdSetMultipleAvatarPathsCsReq => "CmdSetMultipleAvatarPathsCsReq",
            Self::CmdSetLanguageScRsp => "CmdSetLanguageScRsp",
            Self::CmdServerAnnounceNotify => "CmdServerAnnounceNotify",
            Self::CmdPlayerGetTokenScRsp => "CmdPlayerGetTokenScRsp",
            Self::CmdSetMultipleAvatarPathsScRsp => "CmdSetMultipleAvatarPathsScRsp",
            Self::CmdReserveStaminaExchangeCsReq => "CmdReserveStaminaExchangeCsReq",
            Self::CmdGetVideoVersionKeyScRsp => "CmdGetVideoVersionKeyScRsp",
            Self::CmdMonthCardRewardNotify => "CmdMonthCardRewardNotify",
            Self::CmdPlayerHeartBeatScRsp => "CmdPlayerHeartBeatScRsp",
            Self::CmdClientObjDownloadDataScNotify => "CmdClientObjDownloadDataScNotify",
            Self::CmdGetSecretKeyInfoScRsp => "CmdGetSecretKeyInfoScRsp",
            Self::CmdExchangeStaminaScRsp => "CmdExchangeStaminaScRsp",
            Self::CmdUpdatePlayerSettingCsReq => "CmdUpdatePlayerSettingCsReq",
            Self::CmdQueryProductInfoCsReq => "CmdQueryProductInfoCsReq",
            Self::CmdAntiAddictScNotify => "CmdAntiAddictScNotify",
            Self::CmdGmTalkScNotify => "CmdGmTalkScNotify",
            Self::CmdAceAntiCheaterScRsp => "CmdAceAntiCheaterScRsp",
            Self::CmdFeatureSwitchClosedScNotify => "CmdFeatureSwitchClosedScNotify",
            Self::CmdUpdatePlayerSettingScRsp => "CmdUpdatePlayerSettingScRsp",
            Self::CmdGetVideoVersionKeyCsReq => "CmdGetVideoVersionKeyCsReq",
            Self::CmdSetLanguageCsReq => "CmdSetLanguageCsReq",
            Self::CmdGetLevelRewardTakenListScRsp => "CmdGetLevelRewardTakenListScRsp",
            Self::CmdSetGenderScRsp => "CmdSetGenderScRsp",
            Self::CmdPlayerGetTokenCsReq => "CmdPlayerGetTokenCsReq",
            Self::CmdUnlockAvatarPathScRsp => "CmdUnlockAvatarPathScRsp",
            Self::CmdGetSecretKeyInfoCsReq => "CmdGetSecretKeyInfoCsReq",
            Self::CmdSetNicknameCsReq => "CmdSetNicknameCsReq",
            Self::CmdGetLevelRewardCsReq => "CmdGetLevelRewardCsReq",
            Self::CmdUpdateFeatureSwitchScNotify => "CmdUpdateFeatureSwitchScNotify",
            Self::CmdClientDownloadDataScNotify => "CmdClientDownloadDataScNotify",
            Self::CmdGetMultiPathAvatarInfoCsReq => "CmdGetMultiPathAvatarInfoCsReq",
            Self::CmdClientObjUploadScRsp => "CmdClientObjUploadScRsp",
            Self::CmdGetAuthkeyCsReq => "CmdGetAuthkeyCsReq",
            Self::CmdExchangeStaminaCsReq => "CmdExchangeStaminaCsReq",
            Self::CmdPlayerLoginCsReq => "CmdPlayerLoginCsReq",
            Self::CmdGetAuthkeyScRsp => "CmdGetAuthkeyScRsp",
            Self::CmdClientObjUploadCsReq => "CmdClientObjUploadCsReq",
            Self::CmdGetGameStateServiceConfigCsReq => {
                "CmdGetGameStateServiceConfigCsReq"
            }
            Self::CmdReserveStaminaExchangeScRsp => "CmdReserveStaminaExchangeScRsp",
            Self::CmdGmTalkCsReq => "CmdGmTalkCsReq",
            Self::CmdGetLevelRewardTakenListCsReq => "CmdGetLevelRewardTakenListCsReq",
            Self::CmdRegionStopScNotify => "CmdRegionStopScNotify",
            Self::CmdSetPlayerInfoCsReq => "CmdSetPlayerInfoCsReq",
            Self::CmdRetcodeNotify => "CmdRetcodeNotify",
            Self::CmdSetRedPointStatusScNotify => "CmdSetRedPointStatusScNotify",
            Self::CmdPlayerLogoutScRsp => "CmdPlayerLogoutScRsp",
            Self::CmdSetNicknameScRsp => "CmdSetNicknameScRsp",
            Self::CmdSetAvatarPathScRsp => "CmdSetAvatarPathScRsp",
            Self::CmdSetPlayerInfoScRsp => "CmdSetPlayerInfoScRsp",
            Self::CmdPlayerLoginScRsp => "CmdPlayerLoginScRsp",
            Self::CmdGateServerScNotify => "CmdGateServerScNotify",
            Self::CmdGetGameStateServiceConfigScRsp => {
                "CmdGetGameStateServiceConfigScRsp"
            }
            Self::CmdAvatarPathChangedNotify => "CmdAvatarPathChangedNotify",
            Self::CmdGetLevelRewardScRsp => "CmdGetLevelRewardScRsp",
            Self::CmdAceAntiCheaterCsReq => "CmdAceAntiCheaterCsReq",
            Self::CmdQueryProductInfoScRsp => "CmdQueryProductInfoScRsp",
            Self::CmdPlayerKickOutScNotify => "CmdPlayerKickOutScNotify",
            Self::CmdSetGameplayBirthdayCsReq => "CmdSetGameplayBirthdayCsReq",
            Self::CmdUnlockAvatarPathCsReq => "CmdUnlockAvatarPathCsReq",
            Self::CmdPlayerLoginFinishCsReq => "CmdPlayerLoginFinishCsReq",
            Self::CmdGetBasicInfoCsReq => "CmdGetBasicInfoCsReq",
            Self::CmdUpdatePsnSettingsInfoScRsp => "CmdUpdatePsnSettingsInfoScRsp",
            Self::CmdGmTalkScRsp => "CmdGmTalkScRsp",
            Self::CmdPlayerHeartBeatCsReq => "CmdPlayerHeartBeatCsReq",
            Self::CmdStaminaInfoScNotify => "CmdStaminaInfoScNotify",
            Self::CmdDailyRefreshNotify => "CmdDailyRefreshNotify",
            Self::CmdPlayerLoginFinishScRsp => "CmdPlayerLoginFinishScRsp",
            Self::CmdGetMultiPathAvatarInfoScRsp => "CmdGetMultiPathAvatarInfoScRsp",
            Self::CmdSetGenderCsReq => "CmdSetGenderCsReq",
            Self::CmdSetGameplayBirthdayScRsp => "CmdSetGameplayBirthdayScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerTypeNone" => Some(Self::None),
            "CmdPlayerLogoutCsReq" => Some(Self::CmdPlayerLogoutCsReq),
            "CmdSetAvatarPathCsReq" => Some(Self::CmdSetAvatarPathCsReq),
            "CmdGetBasicInfoScRsp" => Some(Self::CmdGetBasicInfoScRsp),
            "CmdUpdatePsnSettingsInfoCsReq" => Some(Self::CmdUpdatePsnSettingsInfoCsReq),
            "CmdSetMultipleAvatarPathsCsReq" => {
                Some(Self::CmdSetMultipleAvatarPathsCsReq)
            }
            "CmdSetLanguageScRsp" => Some(Self::CmdSetLanguageScRsp),
            "CmdServerAnnounceNotify" => Some(Self::CmdServerAnnounceNotify),
            "CmdPlayerGetTokenScRsp" => Some(Self::CmdPlayerGetTokenScRsp),
            "CmdSetMultipleAvatarPathsScRsp" => {
                Some(Self::CmdSetMultipleAvatarPathsScRsp)
            }
            "CmdReserveStaminaExchangeCsReq" => {
                Some(Self::CmdReserveStaminaExchangeCsReq)
            }
            "CmdGetVideoVersionKeyScRsp" => Some(Self::CmdGetVideoVersionKeyScRsp),
            "CmdMonthCardRewardNotify" => Some(Self::CmdMonthCardRewardNotify),
            "CmdPlayerHeartBeatScRsp" => Some(Self::CmdPlayerHeartBeatScRsp),
            "CmdClientObjDownloadDataScNotify" => {
                Some(Self::CmdClientObjDownloadDataScNotify)
            }
            "CmdGetSecretKeyInfoScRsp" => Some(Self::CmdGetSecretKeyInfoScRsp),
            "CmdExchangeStaminaScRsp" => Some(Self::CmdExchangeStaminaScRsp),
            "CmdUpdatePlayerSettingCsReq" => Some(Self::CmdUpdatePlayerSettingCsReq),
            "CmdQueryProductInfoCsReq" => Some(Self::CmdQueryProductInfoCsReq),
            "CmdAntiAddictScNotify" => Some(Self::CmdAntiAddictScNotify),
            "CmdGmTalkScNotify" => Some(Self::CmdGmTalkScNotify),
            "CmdAceAntiCheaterScRsp" => Some(Self::CmdAceAntiCheaterScRsp),
            "CmdFeatureSwitchClosedScNotify" => {
                Some(Self::CmdFeatureSwitchClosedScNotify)
            }
            "CmdUpdatePlayerSettingScRsp" => Some(Self::CmdUpdatePlayerSettingScRsp),
            "CmdGetVideoVersionKeyCsReq" => Some(Self::CmdGetVideoVersionKeyCsReq),
            "CmdSetLanguageCsReq" => Some(Self::CmdSetLanguageCsReq),
            "CmdGetLevelRewardTakenListScRsp" => {
                Some(Self::CmdGetLevelRewardTakenListScRsp)
            }
            "CmdSetGenderScRsp" => Some(Self::CmdSetGenderScRsp),
            "CmdPlayerGetTokenCsReq" => Some(Self::CmdPlayerGetTokenCsReq),
            "CmdUnlockAvatarPathScRsp" => Some(Self::CmdUnlockAvatarPathScRsp),
            "CmdGetSecretKeyInfoCsReq" => Some(Self::CmdGetSecretKeyInfoCsReq),
            "CmdSetNicknameCsReq" => Some(Self::CmdSetNicknameCsReq),
            "CmdGetLevelRewardCsReq" => Some(Self::CmdGetLevelRewardCsReq),
            "CmdUpdateFeatureSwitchScNotify" => {
                Some(Self::CmdUpdateFeatureSwitchScNotify)
            }
            "CmdClientDownloadDataScNotify" => Some(Self::CmdClientDownloadDataScNotify),
            "CmdGetMultiPathAvatarInfoCsReq" => {
                Some(Self::CmdGetMultiPathAvatarInfoCsReq)
            }
            "CmdClientObjUploadScRsp" => Some(Self::CmdClientObjUploadScRsp),
            "CmdGetAuthkeyCsReq" => Some(Self::CmdGetAuthkeyCsReq),
            "CmdExchangeStaminaCsReq" => Some(Self::CmdExchangeStaminaCsReq),
            "CmdPlayerLoginCsReq" => Some(Self::CmdPlayerLoginCsReq),
            "CmdGetAuthkeyScRsp" => Some(Self::CmdGetAuthkeyScRsp),
            "CmdClientObjUploadCsReq" => Some(Self::CmdClientObjUploadCsReq),
            "CmdGetGameStateServiceConfigCsReq" => {
                Some(Self::CmdGetGameStateServiceConfigCsReq)
            }
            "CmdReserveStaminaExchangeScRsp" => {
                Some(Self::CmdReserveStaminaExchangeScRsp)
            }
            "CmdGmTalkCsReq" => Some(Self::CmdGmTalkCsReq),
            "CmdGetLevelRewardTakenListCsReq" => {
                Some(Self::CmdGetLevelRewardTakenListCsReq)
            }
            "CmdRegionStopScNotify" => Some(Self::CmdRegionStopScNotify),
            "CmdSetPlayerInfoCsReq" => Some(Self::CmdSetPlayerInfoCsReq),
            "CmdRetcodeNotify" => Some(Self::CmdRetcodeNotify),
            "CmdSetRedPointStatusScNotify" => Some(Self::CmdSetRedPointStatusScNotify),
            "CmdPlayerLogoutScRsp" => Some(Self::CmdPlayerLogoutScRsp),
            "CmdSetNicknameScRsp" => Some(Self::CmdSetNicknameScRsp),
            "CmdSetAvatarPathScRsp" => Some(Self::CmdSetAvatarPathScRsp),
            "CmdSetPlayerInfoScRsp" => Some(Self::CmdSetPlayerInfoScRsp),
            "CmdPlayerLoginScRsp" => Some(Self::CmdPlayerLoginScRsp),
            "CmdGateServerScNotify" => Some(Self::CmdGateServerScNotify),
            "CmdGetGameStateServiceConfigScRsp" => {
                Some(Self::CmdGetGameStateServiceConfigScRsp)
            }
            "CmdAvatarPathChangedNotify" => Some(Self::CmdAvatarPathChangedNotify),
            "CmdGetLevelRewardScRsp" => Some(Self::CmdGetLevelRewardScRsp),
            "CmdAceAntiCheaterCsReq" => Some(Self::CmdAceAntiCheaterCsReq),
            "CmdQueryProductInfoScRsp" => Some(Self::CmdQueryProductInfoScRsp),
            "CmdPlayerKickOutScNotify" => Some(Self::CmdPlayerKickOutScNotify),
            "CmdSetGameplayBirthdayCsReq" => Some(Self::CmdSetGameplayBirthdayCsReq),
            "CmdUnlockAvatarPathCsReq" => Some(Self::CmdUnlockAvatarPathCsReq),
            "CmdPlayerLoginFinishCsReq" => Some(Self::CmdPlayerLoginFinishCsReq),
            "CmdGetBasicInfoCsReq" => Some(Self::CmdGetBasicInfoCsReq),
            "CmdUpdatePsnSettingsInfoScRsp" => Some(Self::CmdUpdatePsnSettingsInfoScRsp),
            "CmdGmTalkScRsp" => Some(Self::CmdGmTalkScRsp),
            "CmdPlayerHeartBeatCsReq" => Some(Self::CmdPlayerHeartBeatCsReq),
            "CmdStaminaInfoScNotify" => Some(Self::CmdStaminaInfoScNotify),
            "CmdDailyRefreshNotify" => Some(Self::CmdDailyRefreshNotify),
            "CmdPlayerLoginFinishScRsp" => Some(Self::CmdPlayerLoginFinishScRsp),
            "CmdGetMultiPathAvatarInfoScRsp" => {
                Some(Self::CmdGetMultiPathAvatarInfoScRsp)
            }
            "CmdSetGenderCsReq" => Some(Self::CmdSetGenderCsReq),
            "CmdSetGameplayBirthdayScRsp" => Some(Self::CmdSetGameplayBirthdayScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cieaidljmdj {
    AuthkeySignTypeNone = 0,
    AuthkeySignTypeDefault = 1,
    AuthkeySignTypeRsa = 2,
}
impl Cieaidljmdj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AuthkeySignTypeNone => "AUTHKEY_SIGN_TYPE_NONE",
            Self::AuthkeySignTypeDefault => "AUTHKEY_SIGN_TYPE_DEFAULT",
            Self::AuthkeySignTypeRsa => "AUTHKEY_SIGN_TYPE_RSA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHKEY_SIGN_TYPE_NONE" => Some(Self::AuthkeySignTypeNone),
            "AUTHKEY_SIGN_TYPE_DEFAULT" => Some(Self::AuthkeySignTypeDefault),
            "AUTHKEY_SIGN_TYPE_RSA" => Some(Self::AuthkeySignTypeRsa),
            _ => None,
        }
    }
}
/// HGAFOMNPFID
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerBoardType {
    None = 0,
    CmdSetHeadIconScRsp = 2827,
    CmdGetPlayerBoardDataCsReq = 2836,
    CmdSetAssistAvatarCsReq = 2843,
    CmdGetPlayerBoardDataScRsp = 2895,
    CmdSetDisplayAvatarScRsp = 2828,
    CmdSetSignatureScRsp = 2834,
    CmdSetHeadIconCsReq = 2884,
    CmdUnlockHeadIconScNotify = 2824,
    CmdSetIsDisplayAvatarInfoCsReq = 2852,
    CmdSetAssistAvatarScRsp = 2846,
    CmdSetSignatureCsReq = 2893,
    CmdSetDisplayAvatarCsReq = 2867,
    CmdSetIsDisplayAvatarInfoScRsp = 2874,
}
impl CmdPlayerBoardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerBoardTypeNone",
            Self::CmdSetHeadIconScRsp => "CmdSetHeadIconScRsp",
            Self::CmdGetPlayerBoardDataCsReq => "CmdGetPlayerBoardDataCsReq",
            Self::CmdSetAssistAvatarCsReq => "CmdSetAssistAvatarCsReq",
            Self::CmdGetPlayerBoardDataScRsp => "CmdGetPlayerBoardDataScRsp",
            Self::CmdSetDisplayAvatarScRsp => "CmdSetDisplayAvatarScRsp",
            Self::CmdSetSignatureScRsp => "CmdSetSignatureScRsp",
            Self::CmdSetHeadIconCsReq => "CmdSetHeadIconCsReq",
            Self::CmdUnlockHeadIconScNotify => "CmdUnlockHeadIconScNotify",
            Self::CmdSetIsDisplayAvatarInfoCsReq => "CmdSetIsDisplayAvatarInfoCsReq",
            Self::CmdSetAssistAvatarScRsp => "CmdSetAssistAvatarScRsp",
            Self::CmdSetSignatureCsReq => "CmdSetSignatureCsReq",
            Self::CmdSetDisplayAvatarCsReq => "CmdSetDisplayAvatarCsReq",
            Self::CmdSetIsDisplayAvatarInfoScRsp => "CmdSetIsDisplayAvatarInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerBoardTypeNone" => Some(Self::None),
            "CmdSetHeadIconScRsp" => Some(Self::CmdSetHeadIconScRsp),
            "CmdGetPlayerBoardDataCsReq" => Some(Self::CmdGetPlayerBoardDataCsReq),
            "CmdSetAssistAvatarCsReq" => Some(Self::CmdSetAssistAvatarCsReq),
            "CmdGetPlayerBoardDataScRsp" => Some(Self::CmdGetPlayerBoardDataScRsp),
            "CmdSetDisplayAvatarScRsp" => Some(Self::CmdSetDisplayAvatarScRsp),
            "CmdSetSignatureScRsp" => Some(Self::CmdSetSignatureScRsp),
            "CmdSetHeadIconCsReq" => Some(Self::CmdSetHeadIconCsReq),
            "CmdUnlockHeadIconScNotify" => Some(Self::CmdUnlockHeadIconScNotify),
            "CmdSetIsDisplayAvatarInfoCsReq" => {
                Some(Self::CmdSetIsDisplayAvatarInfoCsReq)
            }
            "CmdSetAssistAvatarScRsp" => Some(Self::CmdSetAssistAvatarScRsp),
            "CmdSetSignatureCsReq" => Some(Self::CmdSetSignatureCsReq),
            "CmdSetDisplayAvatarCsReq" => Some(Self::CmdSetDisplayAvatarCsReq),
            "CmdSetIsDisplayAvatarInfoScRsp" => {
                Some(Self::CmdSetIsDisplayAvatarInfoScRsp)
            }
            _ => None,
        }
    }
}
/// GLCOKCILEPE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerReturnType {
    None = 0,
    CmdPlayerReturnTakeRewardCsReq = 4552,
    CmdPlayerReturnSignCsReq = 4595,
    CmdPlayerReturnStartScNotify = 4536,
    CmdPlayerReturnTakeRewardScRsp = 4574,
    CmdPlayerReturnTakePointRewardScRsp = 4528,
    CmdPlayerReturnTakePointRewardCsReq = 4567,
    CmdPlayerReturnInfoQueryCsReq = 4524,
    CmdPlayerReturnInfoQueryScRsp = 4593,
    CmdPlayerReturnPointChangeScNotify = 4527,
    CmdPlayerReturnForceFinishScNotify = 4534,
    CmdPlayerReturnSignScRsp = 4584,
}
impl CmdPlayerReturnType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerReturnTypeNone",
            Self::CmdPlayerReturnTakeRewardCsReq => "CmdPlayerReturnTakeRewardCsReq",
            Self::CmdPlayerReturnSignCsReq => "CmdPlayerReturnSignCsReq",
            Self::CmdPlayerReturnStartScNotify => "CmdPlayerReturnStartScNotify",
            Self::CmdPlayerReturnTakeRewardScRsp => "CmdPlayerReturnTakeRewardScRsp",
            Self::CmdPlayerReturnTakePointRewardScRsp => {
                "CmdPlayerReturnTakePointRewardScRsp"
            }
            Self::CmdPlayerReturnTakePointRewardCsReq => {
                "CmdPlayerReturnTakePointRewardCsReq"
            }
            Self::CmdPlayerReturnInfoQueryCsReq => "CmdPlayerReturnInfoQueryCsReq",
            Self::CmdPlayerReturnInfoQueryScRsp => "CmdPlayerReturnInfoQueryScRsp",
            Self::CmdPlayerReturnPointChangeScNotify => {
                "CmdPlayerReturnPointChangeScNotify"
            }
            Self::CmdPlayerReturnForceFinishScNotify => {
                "CmdPlayerReturnForceFinishScNotify"
            }
            Self::CmdPlayerReturnSignScRsp => "CmdPlayerReturnSignScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerReturnTypeNone" => Some(Self::None),
            "CmdPlayerReturnTakeRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakeRewardCsReq)
            }
            "CmdPlayerReturnSignCsReq" => Some(Self::CmdPlayerReturnSignCsReq),
            "CmdPlayerReturnStartScNotify" => Some(Self::CmdPlayerReturnStartScNotify),
            "CmdPlayerReturnTakeRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakeRewardScRsp)
            }
            "CmdPlayerReturnTakePointRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakePointRewardScRsp)
            }
            "CmdPlayerReturnTakePointRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakePointRewardCsReq)
            }
            "CmdPlayerReturnInfoQueryCsReq" => Some(Self::CmdPlayerReturnInfoQueryCsReq),
            "CmdPlayerReturnInfoQueryScRsp" => Some(Self::CmdPlayerReturnInfoQueryScRsp),
            "CmdPlayerReturnPointChangeScNotify" => {
                Some(Self::CmdPlayerReturnPointChangeScNotify)
            }
            "CmdPlayerReturnForceFinishScNotify" => {
                Some(Self::CmdPlayerReturnForceFinishScNotify)
            }
            "CmdPlayerReturnSignScRsp" => Some(Self::CmdPlayerReturnSignScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hjgeefngkgm {
    PlayerReturnNone = 0,
    PlayerReturnProcessing = 1,
    PlayerReturnFinish = 2,
}
impl Hjgeefngkgm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlayerReturnNone => "PLAYER_RETURN_NONE",
            Self::PlayerReturnProcessing => "PLAYER_RETURN_PROCESSING",
            Self::PlayerReturnFinish => "PLAYER_RETURN_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYER_RETURN_NONE" => Some(Self::PlayerReturnNone),
            "PLAYER_RETURN_PROCESSING" => Some(Self::PlayerReturnProcessing),
            "PLAYER_RETURN_FINISH" => Some(Self::PlayerReturnFinish),
            _ => None,
        }
    }
}
/// MDIJOECGHAP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlotType {
    None = 0,
    CmdFinishPlotScRsp = 1195,
    CmdFinishPlotCsReq = 1136,
}
impl CmdPlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlotTypeNone",
            Self::CmdFinishPlotScRsp => "CmdFinishPlotScRsp",
            Self::CmdFinishPlotCsReq => "CmdFinishPlotCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlotTypeNone" => Some(Self::None),
            "CmdFinishPlotScRsp" => Some(Self::CmdFinishPlotScRsp),
            "CmdFinishPlotCsReq" => Some(Self::CmdFinishPlotCsReq),
            _ => None,
        }
    }
}
/// MPOEAKCFPCH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPunkLordType {
    None = 0,
    CmdStartPunkLordRaidCsReq = 3284,
    CmdGetKilledPunkLordMonsterDataScRsp = 3278,
    CmdTakeKilledPunkLordMonsterScoreCsReq = 3288,
    CmdStartPunkLordRaidScRsp = 3227,
    CmdTakeKilledPunkLordMonsterScoreScRsp = 3258,
    CmdGetKilledPunkLordMonsterDataCsReq = 3212,
    CmdSharePunkLordMonsterScRsp = 3228,
    CmdTakePunkLordPointRewardCsReq = 3246,
    CmdTakePunkLordPointRewardScRsp = 3225,
    CmdPunkLordBattleResultScNotify = 3259,
    CmdSummonPunkLordMonsterCsReq = 3252,
    CmdPunkLordRaidTimeOutScNotify = 3226,
    CmdSharePunkLordMonsterCsReq = 3267,
    CmdPunkLordMonsterKilledNotify = 3248,
    CmdGetPunkLordBattleRecordCsReq = 3276,
    CmdPunkLordMonsterInfoScNotify = 3296,
    CmdGetPunkLordMonsterDataScRsp = 3295,
    CmdSummonPunkLordMonsterScRsp = 3274,
    CmdGetPunkLordMonsterDataCsReq = 3236,
    CmdGetPunkLordBattleRecordScRsp = 3235,
    CmdGetPunkLordDataCsReq = 3205,
    CmdGetPunkLordDataScRsp = 3275,
    CmdPunkLordDataChangeNotify = 3210,
}
impl CmdPunkLordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPunkLordTypeNone",
            Self::CmdStartPunkLordRaidCsReq => "CmdStartPunkLordRaidCsReq",
            Self::CmdGetKilledPunkLordMonsterDataScRsp => {
                "CmdGetKilledPunkLordMonsterDataScRsp"
            }
            Self::CmdTakeKilledPunkLordMonsterScoreCsReq => {
                "CmdTakeKilledPunkLordMonsterScoreCsReq"
            }
            Self::CmdStartPunkLordRaidScRsp => "CmdStartPunkLordRaidScRsp",
            Self::CmdTakeKilledPunkLordMonsterScoreScRsp => {
                "CmdTakeKilledPunkLordMonsterScoreScRsp"
            }
            Self::CmdGetKilledPunkLordMonsterDataCsReq => {
                "CmdGetKilledPunkLordMonsterDataCsReq"
            }
            Self::CmdSharePunkLordMonsterScRsp => "CmdSharePunkLordMonsterScRsp",
            Self::CmdTakePunkLordPointRewardCsReq => "CmdTakePunkLordPointRewardCsReq",
            Self::CmdTakePunkLordPointRewardScRsp => "CmdTakePunkLordPointRewardScRsp",
            Self::CmdPunkLordBattleResultScNotify => "CmdPunkLordBattleResultScNotify",
            Self::CmdSummonPunkLordMonsterCsReq => "CmdSummonPunkLordMonsterCsReq",
            Self::CmdPunkLordRaidTimeOutScNotify => "CmdPunkLordRaidTimeOutScNotify",
            Self::CmdSharePunkLordMonsterCsReq => "CmdSharePunkLordMonsterCsReq",
            Self::CmdPunkLordMonsterKilledNotify => "CmdPunkLordMonsterKilledNotify",
            Self::CmdGetPunkLordBattleRecordCsReq => "CmdGetPunkLordBattleRecordCsReq",
            Self::CmdPunkLordMonsterInfoScNotify => "CmdPunkLordMonsterInfoScNotify",
            Self::CmdGetPunkLordMonsterDataScRsp => "CmdGetPunkLordMonsterDataScRsp",
            Self::CmdSummonPunkLordMonsterScRsp => "CmdSummonPunkLordMonsterScRsp",
            Self::CmdGetPunkLordMonsterDataCsReq => "CmdGetPunkLordMonsterDataCsReq",
            Self::CmdGetPunkLordBattleRecordScRsp => "CmdGetPunkLordBattleRecordScRsp",
            Self::CmdGetPunkLordDataCsReq => "CmdGetPunkLordDataCsReq",
            Self::CmdGetPunkLordDataScRsp => "CmdGetPunkLordDataScRsp",
            Self::CmdPunkLordDataChangeNotify => "CmdPunkLordDataChangeNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPunkLordTypeNone" => Some(Self::None),
            "CmdStartPunkLordRaidCsReq" => Some(Self::CmdStartPunkLordRaidCsReq),
            "CmdGetKilledPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataScRsp)
            }
            "CmdTakeKilledPunkLordMonsterScoreCsReq" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreCsReq)
            }
            "CmdStartPunkLordRaidScRsp" => Some(Self::CmdStartPunkLordRaidScRsp),
            "CmdTakeKilledPunkLordMonsterScoreScRsp" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreScRsp)
            }
            "CmdGetKilledPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataCsReq)
            }
            "CmdSharePunkLordMonsterScRsp" => Some(Self::CmdSharePunkLordMonsterScRsp),
            "CmdTakePunkLordPointRewardCsReq" => {
                Some(Self::CmdTakePunkLordPointRewardCsReq)
            }
            "CmdTakePunkLordPointRewardScRsp" => {
                Some(Self::CmdTakePunkLordPointRewardScRsp)
            }
            "CmdPunkLordBattleResultScNotify" => {
                Some(Self::CmdPunkLordBattleResultScNotify)
            }
            "CmdSummonPunkLordMonsterCsReq" => Some(Self::CmdSummonPunkLordMonsterCsReq),
            "CmdPunkLordRaidTimeOutScNotify" => {
                Some(Self::CmdPunkLordRaidTimeOutScNotify)
            }
            "CmdSharePunkLordMonsterCsReq" => Some(Self::CmdSharePunkLordMonsterCsReq),
            "CmdPunkLordMonsterKilledNotify" => {
                Some(Self::CmdPunkLordMonsterKilledNotify)
            }
            "CmdGetPunkLordBattleRecordCsReq" => {
                Some(Self::CmdGetPunkLordBattleRecordCsReq)
            }
            "CmdPunkLordMonsterInfoScNotify" => {
                Some(Self::CmdPunkLordMonsterInfoScNotify)
            }
            "CmdGetPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetPunkLordMonsterDataScRsp)
            }
            "CmdSummonPunkLordMonsterScRsp" => Some(Self::CmdSummonPunkLordMonsterScRsp),
            "CmdGetPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetPunkLordMonsterDataCsReq)
            }
            "CmdGetPunkLordBattleRecordScRsp" => {
                Some(Self::CmdGetPunkLordBattleRecordScRsp)
            }
            "CmdGetPunkLordDataCsReq" => Some(Self::CmdGetPunkLordDataCsReq),
            "CmdGetPunkLordDataScRsp" => Some(Self::CmdGetPunkLordDataScRsp),
            "CmdPunkLordDataChangeNotify" => Some(Self::CmdPunkLordDataChangeNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dccjjgmkhli {
    PunkLordOperationNone = 0,
    PunkLordOperationRefresh = 1,
    PunkLordOperationShare = 2,
    PunkLordOperationStartRaid = 3,
    PunkLordOperationGetBattleRecord = 4,
}
impl Dccjjgmkhli {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PunkLordOperationNone => "PUNK_LORD_OPERATION_NONE",
            Self::PunkLordOperationRefresh => "PUNK_LORD_OPERATION_REFRESH",
            Self::PunkLordOperationShare => "PUNK_LORD_OPERATION_SHARE",
            Self::PunkLordOperationStartRaid => "PUNK_LORD_OPERATION_START_RAID",
            Self::PunkLordOperationGetBattleRecord => {
                "PUNK_LORD_OPERATION_GET_BATTLE_RECORD"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_OPERATION_NONE" => Some(Self::PunkLordOperationNone),
            "PUNK_LORD_OPERATION_REFRESH" => Some(Self::PunkLordOperationRefresh),
            "PUNK_LORD_OPERATION_SHARE" => Some(Self::PunkLordOperationShare),
            "PUNK_LORD_OPERATION_START_RAID" => Some(Self::PunkLordOperationStartRaid),
            "PUNK_LORD_OPERATION_GET_BATTLE_RECORD" => {
                Some(Self::PunkLordOperationGetBattleRecord)
            }
            _ => None,
        }
    }
}
/// EMBMFCLDLAJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdQuestType {
    None = 0,
    CmdTakeQuestOptionalRewardScRsp = 946,
    CmdQuestRecordScNotify = 924,
    CmdBatchGetQuestDataScRsp = 905,
    CmdFinishQuestScRsp = 934,
    CmdBatchGetQuestDataCsReq = 996,
    CmdGetQuestDataCsReq = 936,
    CmdGetQuestRecordScRsp = 974,
    CmdGetQuestRecordCsReq = 952,
    CmdTakeQuestOptionalRewardCsReq = 943,
    CmdTakeQuestRewardCsReq = 984,
    CmdGetQuestDataScRsp = 995,
    CmdFinishQuestCsReq = 993,
    CmdTakeQuestRewardScRsp = 927,
}
impl CmdQuestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdQuestTypeNone",
            Self::CmdTakeQuestOptionalRewardScRsp => "CmdTakeQuestOptionalRewardScRsp",
            Self::CmdQuestRecordScNotify => "CmdQuestRecordScNotify",
            Self::CmdBatchGetQuestDataScRsp => "CmdBatchGetQuestDataScRsp",
            Self::CmdFinishQuestScRsp => "CmdFinishQuestScRsp",
            Self::CmdBatchGetQuestDataCsReq => "CmdBatchGetQuestDataCsReq",
            Self::CmdGetQuestDataCsReq => "CmdGetQuestDataCsReq",
            Self::CmdGetQuestRecordScRsp => "CmdGetQuestRecordScRsp",
            Self::CmdGetQuestRecordCsReq => "CmdGetQuestRecordCsReq",
            Self::CmdTakeQuestOptionalRewardCsReq => "CmdTakeQuestOptionalRewardCsReq",
            Self::CmdTakeQuestRewardCsReq => "CmdTakeQuestRewardCsReq",
            Self::CmdGetQuestDataScRsp => "CmdGetQuestDataScRsp",
            Self::CmdFinishQuestCsReq => "CmdFinishQuestCsReq",
            Self::CmdTakeQuestRewardScRsp => "CmdTakeQuestRewardScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdQuestTypeNone" => Some(Self::None),
            "CmdTakeQuestOptionalRewardScRsp" => {
                Some(Self::CmdTakeQuestOptionalRewardScRsp)
            }
            "CmdQuestRecordScNotify" => Some(Self::CmdQuestRecordScNotify),
            "CmdBatchGetQuestDataScRsp" => Some(Self::CmdBatchGetQuestDataScRsp),
            "CmdFinishQuestScRsp" => Some(Self::CmdFinishQuestScRsp),
            "CmdBatchGetQuestDataCsReq" => Some(Self::CmdBatchGetQuestDataCsReq),
            "CmdGetQuestDataCsReq" => Some(Self::CmdGetQuestDataCsReq),
            "CmdGetQuestRecordScRsp" => Some(Self::CmdGetQuestRecordScRsp),
            "CmdGetQuestRecordCsReq" => Some(Self::CmdGetQuestRecordCsReq),
            "CmdTakeQuestOptionalRewardCsReq" => {
                Some(Self::CmdTakeQuestOptionalRewardCsReq)
            }
            "CmdTakeQuestRewardCsReq" => Some(Self::CmdTakeQuestRewardCsReq),
            "CmdGetQuestDataScRsp" => Some(Self::CmdGetQuestDataScRsp),
            "CmdFinishQuestCsReq" => Some(Self::CmdFinishQuestCsReq),
            "CmdTakeQuestRewardScRsp" => Some(Self::CmdTakeQuestRewardScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum QuestStatus {
    QuestNone = 0,
    QuestDoing = 1,
    QuestFinish = 2,
    QuestClose = 3,
    QuestDelete = 4,
}
impl QuestStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::QuestNone => "QUEST_NONE",
            Self::QuestDoing => "QUEST_DOING",
            Self::QuestFinish => "QUEST_FINISH",
            Self::QuestClose => "QUEST_CLOSE",
            Self::QuestDelete => "QUEST_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "QUEST_NONE" => Some(Self::QuestNone),
            "QUEST_DOING" => Some(Self::QuestDoing),
            "QUEST_FINISH" => Some(Self::QuestFinish),
            "QUEST_CLOSE" => Some(Self::QuestClose),
            "QUEST_DELETE" => Some(Self::QuestDelete),
            _ => None,
        }
    }
}
/// JELEGLOOHHM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidType {
    None = 0,
    CmdGetRaidInfoCsReq = 2234,
    CmdGetSaveRaidCsReq = 2296,
    CmdGetChallengeRaidInfoScRsp = 2252,
    CmdGetAllSaveRaidScRsp = 2219,
    CmdRaidInfoNotify = 2267,
    CmdDelSaveRaidScNotify = 2226,
    CmdSetClientRaidTargetCountScRsp = 2225,
    CmdSetClientRaidTargetCountCsReq = 2246,
    CmdLeaveRaidCsReq = 2284,
    CmdStartRaidScRsp = 2295,
    CmdGetRaidInfoScRsp = 2243,
    CmdLeaveRaidScRsp = 2227,
    CmdTakeChallengeRaidRewardScRsp = 2224,
    CmdRaidKickByServerScNotify = 2207,
    CmdGetAllSaveRaidCsReq = 2275,
    CmdStartRaidCsReq = 2236,
    CmdGetChallengeRaidInfoCsReq = 2228,
    CmdTakeChallengeRaidRewardCsReq = 2274,
    CmdGetSaveRaidScRsp = 2205,
    CmdChallengeRaidNotify = 2293,
}
impl CmdRaidType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRaidTypeNone",
            Self::CmdGetRaidInfoCsReq => "CmdGetRaidInfoCsReq",
            Self::CmdGetSaveRaidCsReq => "CmdGetSaveRaidCsReq",
            Self::CmdGetChallengeRaidInfoScRsp => "CmdGetChallengeRaidInfoScRsp",
            Self::CmdGetAllSaveRaidScRsp => "CmdGetAllSaveRaidScRsp",
            Self::CmdRaidInfoNotify => "CmdRaidInfoNotify",
            Self::CmdDelSaveRaidScNotify => "CmdDelSaveRaidScNotify",
            Self::CmdSetClientRaidTargetCountScRsp => "CmdSetClientRaidTargetCountScRsp",
            Self::CmdSetClientRaidTargetCountCsReq => "CmdSetClientRaidTargetCountCsReq",
            Self::CmdLeaveRaidCsReq => "CmdLeaveRaidCsReq",
            Self::CmdStartRaidScRsp => "CmdStartRaidScRsp",
            Self::CmdGetRaidInfoScRsp => "CmdGetRaidInfoScRsp",
            Self::CmdLeaveRaidScRsp => "CmdLeaveRaidScRsp",
            Self::CmdTakeChallengeRaidRewardScRsp => "CmdTakeChallengeRaidRewardScRsp",
            Self::CmdRaidKickByServerScNotify => "CmdRaidKickByServerScNotify",
            Self::CmdGetAllSaveRaidCsReq => "CmdGetAllSaveRaidCsReq",
            Self::CmdStartRaidCsReq => "CmdStartRaidCsReq",
            Self::CmdGetChallengeRaidInfoCsReq => "CmdGetChallengeRaidInfoCsReq",
            Self::CmdTakeChallengeRaidRewardCsReq => "CmdTakeChallengeRaidRewardCsReq",
            Self::CmdGetSaveRaidScRsp => "CmdGetSaveRaidScRsp",
            Self::CmdChallengeRaidNotify => "CmdChallengeRaidNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidTypeNone" => Some(Self::None),
            "CmdGetRaidInfoCsReq" => Some(Self::CmdGetRaidInfoCsReq),
            "CmdGetSaveRaidCsReq" => Some(Self::CmdGetSaveRaidCsReq),
            "CmdGetChallengeRaidInfoScRsp" => Some(Self::CmdGetChallengeRaidInfoScRsp),
            "CmdGetAllSaveRaidScRsp" => Some(Self::CmdGetAllSaveRaidScRsp),
            "CmdRaidInfoNotify" => Some(Self::CmdRaidInfoNotify),
            "CmdDelSaveRaidScNotify" => Some(Self::CmdDelSaveRaidScNotify),
            "CmdSetClientRaidTargetCountScRsp" => {
                Some(Self::CmdSetClientRaidTargetCountScRsp)
            }
            "CmdSetClientRaidTargetCountCsReq" => {
                Some(Self::CmdSetClientRaidTargetCountCsReq)
            }
            "CmdLeaveRaidCsReq" => Some(Self::CmdLeaveRaidCsReq),
            "CmdStartRaidScRsp" => Some(Self::CmdStartRaidScRsp),
            "CmdGetRaidInfoScRsp" => Some(Self::CmdGetRaidInfoScRsp),
            "CmdLeaveRaidScRsp" => Some(Self::CmdLeaveRaidScRsp),
            "CmdTakeChallengeRaidRewardScRsp" => {
                Some(Self::CmdTakeChallengeRaidRewardScRsp)
            }
            "CmdRaidKickByServerScNotify" => Some(Self::CmdRaidKickByServerScNotify),
            "CmdGetAllSaveRaidCsReq" => Some(Self::CmdGetAllSaveRaidCsReq),
            "CmdStartRaidCsReq" => Some(Self::CmdStartRaidCsReq),
            "CmdGetChallengeRaidInfoCsReq" => Some(Self::CmdGetChallengeRaidInfoCsReq),
            "CmdTakeChallengeRaidRewardCsReq" => {
                Some(Self::CmdTakeChallengeRaidRewardCsReq)
            }
            "CmdGetSaveRaidScRsp" => Some(Self::CmdGetSaveRaidScRsp),
            "CmdChallengeRaidNotify" => Some(Self::CmdChallengeRaidNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mfcknjhdigg {
    RaidStatusNone = 0,
    RaidStatusDoing = 1,
    RaidStatusFinish = 2,
    RaidStatusFailed = 3,
}
impl Mfcknjhdigg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidStatusNone => "RAID_STATUS_NONE",
            Self::RaidStatusDoing => "RAID_STATUS_DOING",
            Self::RaidStatusFinish => "RAID_STATUS_FINISH",
            Self::RaidStatusFailed => "RAID_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_STATUS_NONE" => Some(Self::RaidStatusNone),
            "RAID_STATUS_DOING" => Some(Self::RaidStatusDoing),
            "RAID_STATUS_FINISH" => Some(Self::RaidStatusFinish),
            "RAID_STATUS_FAILED" => Some(Self::RaidStatusFailed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Moklolklkgj {
    RaidTargetStatusNone = 0,
    RaidTargetStatusDoing = 1,
    RaidTargetStatusFinish = 2,
}
impl Moklolklkgj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidTargetStatusNone => "RAID_TARGET_STATUS_NONE",
            Self::RaidTargetStatusDoing => "RAID_TARGET_STATUS_DOING",
            Self::RaidTargetStatusFinish => "RAID_TARGET_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_TARGET_STATUS_NONE" => Some(Self::RaidTargetStatusNone),
            "RAID_TARGET_STATUS_DOING" => Some(Self::RaidTargetStatusDoing),
            "RAID_TARGET_STATUS_FINISH" => Some(Self::RaidTargetStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gjpnljacamn {
    RaidKickReasonNone = 0,
    RaidKickReasonActivityScheduleFinish = 1,
}
impl Gjpnljacamn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidKickReasonNone => "RAID_KICK_REASON_NONE",
            Self::RaidKickReasonActivityScheduleFinish => {
                "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_KICK_REASON_NONE" => Some(Self::RaidKickReasonNone),
            "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH" => {
                Some(Self::RaidKickReasonActivityScheduleFinish)
            }
            _ => None,
        }
    }
}
/// JGDDBJKCHOL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidCollectionType {
    None = 0,
    CmdRaidCollectionDataScRsp = 6955,
    CmdRaidCollectionDataScNotify = 6947,
    CmdRaidCollectionEnterNextRaidCsReq = 6943,
    CmdRaidCollectionEnterNextRaidScRsp = 6957,
    CmdRaidCollectionDataCsReq = 6960,
}
impl CmdRaidCollectionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRaidCollectionTypeNone",
            Self::CmdRaidCollectionDataScRsp => "CmdRaidCollectionDataScRsp",
            Self::CmdRaidCollectionDataScNotify => "CmdRaidCollectionDataScNotify",
            Self::CmdRaidCollectionEnterNextRaidCsReq => {
                "CmdRaidCollectionEnterNextRaidCsReq"
            }
            Self::CmdRaidCollectionEnterNextRaidScRsp => {
                "CmdRaidCollectionEnterNextRaidScRsp"
            }
            Self::CmdRaidCollectionDataCsReq => "CmdRaidCollectionDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidCollectionTypeNone" => Some(Self::None),
            "CmdRaidCollectionDataScRsp" => Some(Self::CmdRaidCollectionDataScRsp),
            "CmdRaidCollectionDataScNotify" => Some(Self::CmdRaidCollectionDataScNotify),
            "CmdRaidCollectionEnterNextRaidCsReq" => {
                Some(Self::CmdRaidCollectionEnterNextRaidCsReq)
            }
            "CmdRaidCollectionEnterNextRaidScRsp" => {
                Some(Self::CmdRaidCollectionEnterNextRaidScRsp)
            }
            "CmdRaidCollectionDataCsReq" => Some(Self::CmdRaidCollectionDataCsReq),
            _ => None,
        }
    }
}
/// DJANENLMJEO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRecommendType {
    None = 0,
    CmdGetBigDataRecommendScRsp = 2443,
    CmdGetChallengeRecommendLineupListScRsp = 2449,
    CmdRelicAvatarRecommendScRsp = 2423,
    CmdRelicRecommendScRsp = 2450,
    CmdGetChallengeRecommendLineupListCsReq = 2415,
    CmdRelicAvatarRecommendCsReq = 2430,
    CmdRelicRecommendCsReq = 2412,
    CmdGetBigDataRecommendCsReq = 2409,
}
impl CmdRecommendType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CMD_RECOMMEND_TYPE_NONE",
            Self::CmdGetBigDataRecommendScRsp => "CmdGetBigDataRecommendScRsp",
            Self::CmdGetChallengeRecommendLineupListScRsp => {
                "CmdGetChallengeRecommendLineupListScRsp"
            }
            Self::CmdRelicAvatarRecommendScRsp => "CmdRelicAvatarRecommendScRsp",
            Self::CmdRelicRecommendScRsp => "CmdRelicRecommendScRsp",
            Self::CmdGetChallengeRecommendLineupListCsReq => {
                "CmdGetChallengeRecommendLineupListCsReq"
            }
            Self::CmdRelicAvatarRecommendCsReq => "CmdRelicAvatarRecommendCsReq",
            Self::CmdRelicRecommendCsReq => "CmdRelicRecommendCsReq",
            Self::CmdGetBigDataRecommendCsReq => "CmdGetBigDataRecommendCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CMD_RECOMMEND_TYPE_NONE" => Some(Self::None),
            "CmdGetBigDataRecommendScRsp" => Some(Self::CmdGetBigDataRecommendScRsp),
            "CmdGetChallengeRecommendLineupListScRsp" => {
                Some(Self::CmdGetChallengeRecommendLineupListScRsp)
            }
            "CmdRelicAvatarRecommendScRsp" => Some(Self::CmdRelicAvatarRecommendScRsp),
            "CmdRelicRecommendScRsp" => Some(Self::CmdRelicRecommendScRsp),
            "CmdGetChallengeRecommendLineupListCsReq" => {
                Some(Self::CmdGetChallengeRecommendLineupListCsReq)
            }
            "CmdRelicAvatarRecommendCsReq" => Some(Self::CmdRelicAvatarRecommendCsReq),
            "CmdRelicRecommendCsReq" => Some(Self::CmdRelicRecommendCsReq),
            "CmdGetBigDataRecommendCsReq" => Some(Self::CmdGetBigDataRecommendCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jhipgpghhmg {
    BigDataRecommendTypeNone = 0,
    BigDataRecommendTypeEquipment = 1,
    BigDataRecommendTypeRelicSuit = 2,
}
impl Jhipgpghhmg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BigDataRecommendTypeNone => "BIG_DATA_RECOMMEND_TYPE_NONE",
            Self::BigDataRecommendTypeEquipment => "BIG_DATA_RECOMMEND_TYPE_EQUIPMENT",
            Self::BigDataRecommendTypeRelicSuit => "BIG_DATA_RECOMMEND_TYPE_RELIC_SUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BIG_DATA_RECOMMEND_TYPE_NONE" => Some(Self::BigDataRecommendTypeNone),
            "BIG_DATA_RECOMMEND_TYPE_EQUIPMENT" => {
                Some(Self::BigDataRecommendTypeEquipment)
            }
            "BIG_DATA_RECOMMEND_TYPE_RELIC_SUIT" => {
                Some(Self::BigDataRecommendTypeRelicSuit)
            }
            _ => None,
        }
    }
}
/// JFHPBANEDEG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRedDotType {
    None = 0,
    CmdUpdateRedDotDataCsReq = 5984,
    CmdGetSingleRedDotParamGroupScRsp = 5928,
    CmdGetAllRedDotDataCsReq = 5936,
    CmdGetAllRedDotDataScRsp = 5995,
    CmdUpdateRedDotDataScRsp = 5927,
    CmdGetSingleRedDotParamGroupCsReq = 5967,
}
impl CmdRedDotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRedDotTypeNone",
            Self::CmdUpdateRedDotDataCsReq => "CmdUpdateRedDotDataCsReq",
            Self::CmdGetSingleRedDotParamGroupScRsp => {
                "CmdGetSingleRedDotParamGroupScRsp"
            }
            Self::CmdGetAllRedDotDataCsReq => "CmdGetAllRedDotDataCsReq",
            Self::CmdGetAllRedDotDataScRsp => "CmdGetAllRedDotDataScRsp",
            Self::CmdUpdateRedDotDataScRsp => "CmdUpdateRedDotDataScRsp",
            Self::CmdGetSingleRedDotParamGroupCsReq => {
                "CmdGetSingleRedDotParamGroupCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRedDotTypeNone" => Some(Self::None),
            "CmdUpdateRedDotDataCsReq" => Some(Self::CmdUpdateRedDotDataCsReq),
            "CmdGetSingleRedDotParamGroupScRsp" => {
                Some(Self::CmdGetSingleRedDotParamGroupScRsp)
            }
            "CmdGetAllRedDotDataCsReq" => Some(Self::CmdGetAllRedDotDataCsReq),
            "CmdGetAllRedDotDataScRsp" => Some(Self::CmdGetAllRedDotDataScRsp),
            "CmdUpdateRedDotDataScRsp" => Some(Self::CmdUpdateRedDotDataScRsp),
            "CmdGetSingleRedDotParamGroupCsReq" => {
                Some(Self::CmdGetSingleRedDotParamGroupCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hcnpghigobg {
    UpdateReddotNone = 0,
    UpdateReddotAdd = 1,
    UpdateReddotReplace = 2,
}
impl Hcnpghigobg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UpdateReddotNone => "UPDATE_REDDOT_NONE",
            Self::UpdateReddotAdd => "UPDATE_REDDOT_ADD",
            Self::UpdateReddotReplace => "UPDATE_REDDOT_REPLACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UPDATE_REDDOT_NONE" => Some(Self::UpdateReddotNone),
            "UPDATE_REDDOT_ADD" => Some(Self::UpdateReddotAdd),
            "UPDATE_REDDOT_REPLACE" => Some(Self::UpdateReddotReplace),
            _ => None,
        }
    }
}
/// JINBPAPJGKK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRelicSmartWearType {
    None = 0,
    CmdRelicSmartWearGetPlanCsReq = 8270,
    CmdRelicSmartWearDeletePlanCsReq = 8255,
    CmdRelicSmartWearGetPlanScRsp = 8265,
    CmdRelicSmartWearAddPlanScRsp = 8253,
    CmdRelicSmartWearUpdatePlanScRsp = 8256,
    CmdRelicSmartWearUpdatePlanCsReq = 8267,
    CmdRelicSmartWearAddPlanCsReq = 8257,
    CmdRelicSmartWearDeletePlanScRsp = 8260,
}
impl CmdRelicSmartWearType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRelicSmartWearTypeNone",
            Self::CmdRelicSmartWearGetPlanCsReq => "CmdRelicSmartWearGetPlanCsReq",
            Self::CmdRelicSmartWearDeletePlanCsReq => "CmdRelicSmartWearDeletePlanCsReq",
            Self::CmdRelicSmartWearGetPlanScRsp => "CmdRelicSmartWearGetPlanScRsp",
            Self::CmdRelicSmartWearAddPlanScRsp => "CmdRelicSmartWearAddPlanScRsp",
            Self::CmdRelicSmartWearUpdatePlanScRsp => "CmdRelicSmartWearUpdatePlanScRsp",
            Self::CmdRelicSmartWearUpdatePlanCsReq => "CmdRelicSmartWearUpdatePlanCsReq",
            Self::CmdRelicSmartWearAddPlanCsReq => "CmdRelicSmartWearAddPlanCsReq",
            Self::CmdRelicSmartWearDeletePlanScRsp => "CmdRelicSmartWearDeletePlanScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRelicSmartWearTypeNone" => Some(Self::None),
            "CmdRelicSmartWearGetPlanCsReq" => Some(Self::CmdRelicSmartWearGetPlanCsReq),
            "CmdRelicSmartWearDeletePlanCsReq" => {
                Some(Self::CmdRelicSmartWearDeletePlanCsReq)
            }
            "CmdRelicSmartWearGetPlanScRsp" => Some(Self::CmdRelicSmartWearGetPlanScRsp),
            "CmdRelicSmartWearAddPlanScRsp" => Some(Self::CmdRelicSmartWearAddPlanScRsp),
            "CmdRelicSmartWearUpdatePlanScRsp" => {
                Some(Self::CmdRelicSmartWearUpdatePlanScRsp)
            }
            "CmdRelicSmartWearUpdatePlanCsReq" => {
                Some(Self::CmdRelicSmartWearUpdatePlanCsReq)
            }
            "CmdRelicSmartWearAddPlanCsReq" => Some(Self::CmdRelicSmartWearAddPlanCsReq),
            "CmdRelicSmartWearDeletePlanScRsp" => {
                Some(Self::CmdRelicSmartWearDeletePlanScRsp)
            }
            _ => None,
        }
    }
}
/// IPHBICDPAIO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdReplayType {
    None = 0,
    CmdGetPlayerReplayInfoScRsp = 3527,
    CmdGetReplayTokenCsReq = 3536,
    CmdGetReplayTokenScRsp = 3595,
    CmdGetPlayerReplayInfoCsReq = 3584,
}
impl CmdReplayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdReplayTypeNone",
            Self::CmdGetPlayerReplayInfoScRsp => "CmdGetPlayerReplayInfoScRsp",
            Self::CmdGetReplayTokenCsReq => "CmdGetReplayTokenCsReq",
            Self::CmdGetReplayTokenScRsp => "CmdGetReplayTokenScRsp",
            Self::CmdGetPlayerReplayInfoCsReq => "CmdGetPlayerReplayInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdReplayTypeNone" => Some(Self::None),
            "CmdGetPlayerReplayInfoScRsp" => Some(Self::CmdGetPlayerReplayInfoScRsp),
            "CmdGetReplayTokenCsReq" => Some(Self::CmdGetReplayTokenCsReq),
            "CmdGetReplayTokenScRsp" => Some(Self::CmdGetReplayTokenScRsp),
            "CmdGetPlayerReplayInfoCsReq" => Some(Self::CmdGetPlayerReplayInfoCsReq),
            _ => None,
        }
    }
}
/// FEJOCAOBGMJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRndOptionType {
    None = 0,
    CmdDailyFirstMeetPamScRsp = 3427,
    CmdGetRndOptionCsReq = 3436,
    CmdDailyFirstMeetPamCsReq = 3484,
    CmdGetRndOptionScRsp = 3495,
}
impl CmdRndOptionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRndOptionTypeNone",
            Self::CmdDailyFirstMeetPamScRsp => "CmdDailyFirstMeetPamScRsp",
            Self::CmdGetRndOptionCsReq => "CmdGetRndOptionCsReq",
            Self::CmdDailyFirstMeetPamCsReq => "CmdDailyFirstMeetPamCsReq",
            Self::CmdGetRndOptionScRsp => "CmdGetRndOptionScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRndOptionTypeNone" => Some(Self::None),
            "CmdDailyFirstMeetPamScRsp" => Some(Self::CmdDailyFirstMeetPamScRsp),
            "CmdGetRndOptionCsReq" => Some(Self::CmdGetRndOptionCsReq),
            "CmdDailyFirstMeetPamCsReq" => Some(Self::CmdDailyFirstMeetPamCsReq),
            "CmdGetRndOptionScRsp" => Some(Self::CmdGetRndOptionScRsp),
            _ => None,
        }
    }
}
/// FNOHMCEBKCC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueType {
    None = 0,
    CmdSyncRogueStatusScNotify = 1854,
    CmdGetRogueScoreRewardInfoScRsp = 1820,
    CmdGetRogueScoreRewardInfoCsReq = 1809,
    CmdReviveRogueAvatarCsReq = 1826,
    CmdStartRogueScRsp = 1827,
    CmdSyncRogueGetItemScNotify = 1870,
    CmdQuitRogueCsReq = 1876,
    CmdTakeRogueScoreRewardScRsp = 1890,
    CmdFinishAeonDialogueGroupScRsp = 1889,
    CmdExchangeRogueRewardKeyCsReq = 1899,
    CmdGetRogueInfoCsReq = 1836,
    CmdTakeRogueAeonLevelRewardCsReq = 1898,
    CmdLeaveRogueScRsp = 1874,
    CmdGetRogueTalentInfoScRsp = 1885,
    CmdEnableRogueTalentScRsp = 1802,
    CmdSyncRogueFinishScNotify = 1896,
    CmdSyncRogueAeonScNotify = 1847,
    CmdSyncRogueExploreWinScNotify = 1817,
    CmdGetRogueInitialScoreCsReq = 1837,
    CmdQuitRogueScRsp = 1835,
    CmdGetRogueBuffEnhanceInfoScRsp = 1812,
    CmdOpenRogueChestScRsp = 1872,
    CmdEnhanceRogueBuffCsReq = 1878,
    CmdEnterRogueMapRoomScRsp = 1818,
    CmdSyncRogueAeonLevelUpRewardScNotify = 1856,
    CmdExchangeRogueRewardKeyScRsp = 1803,
    CmdLeaveRogueCsReq = 1852,
    CmdPickRogueAvatarCsReq = 1805,
    CmdTakeRogueAeonLevelRewardScRsp = 1891,
    CmdStartRogueCsReq = 1884,
    CmdTakeRogueScoreRewardCsReq = 1853,
    CmdEnhanceRogueBuffScRsp = 1829,
    CmdEnterRogueCsReq = 1867,
    CmdEnterRogueScRsp = 1828,
    CmdSyncRogueReviveInfoScNotify = 1810,
    CmdGetRogueAeonInfoScRsp = 1866,
    CmdSyncRogueSeasonFinishScNotify = 1813,
    CmdOpenRogueChestCsReq = 1864,
    CmdGetRogueAeonInfoCsReq = 1886,
    CmdSyncRogueAreaUnlockScNotify = 1849,
    CmdGetRogueInfoScRsp = 1895,
    CmdEnableRogueTalentCsReq = 1862,
    CmdGetRogueBuffEnhanceInfoCsReq = 1859,
    CmdSyncRogueVirtualItemInfoScNotify = 1877,
    CmdSyncRogueRewardInfoScNotify = 1814,
    CmdFinishAeonDialogueGroupCsReq = 1863,
    CmdSyncRogueMapRoomScNotify = 1879,
    CmdSyncRoguePickAvatarInfoScNotify = 1851,
    CmdEnterRogueMapRoomCsReq = 1808,
    CmdPickRogueAvatarScRsp = 1875,
    CmdReviveRogueAvatarScRsp = 1807,
    CmdGetRogueTalentInfoCsReq = 1815,
    CmdGetRogueInitialScoreScRsp = 1811,
}
impl CmdRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueTypeNone",
            Self::CmdSyncRogueStatusScNotify => "CmdSyncRogueStatusScNotify",
            Self::CmdGetRogueScoreRewardInfoScRsp => "CmdGetRogueScoreRewardInfoScRsp",
            Self::CmdGetRogueScoreRewardInfoCsReq => "CmdGetRogueScoreRewardInfoCsReq",
            Self::CmdReviveRogueAvatarCsReq => "CmdReviveRogueAvatarCsReq",
            Self::CmdStartRogueScRsp => "CmdStartRogueScRsp",
            Self::CmdSyncRogueGetItemScNotify => "CmdSyncRogueGetItemScNotify",
            Self::CmdQuitRogueCsReq => "CmdQuitRogueCsReq",
            Self::CmdTakeRogueScoreRewardScRsp => "CmdTakeRogueScoreRewardScRsp",
            Self::CmdFinishAeonDialogueGroupScRsp => "CmdFinishAeonDialogueGroupScRsp",
            Self::CmdExchangeRogueRewardKeyCsReq => "CmdExchangeRogueRewardKeyCsReq",
            Self::CmdGetRogueInfoCsReq => "CmdGetRogueInfoCsReq",
            Self::CmdTakeRogueAeonLevelRewardCsReq => "CmdTakeRogueAeonLevelRewardCsReq",
            Self::CmdLeaveRogueScRsp => "CmdLeaveRogueScRsp",
            Self::CmdGetRogueTalentInfoScRsp => "CmdGetRogueTalentInfoScRsp",
            Self::CmdEnableRogueTalentScRsp => "CmdEnableRogueTalentScRsp",
            Self::CmdSyncRogueFinishScNotify => "CmdSyncRogueFinishScNotify",
            Self::CmdSyncRogueAeonScNotify => "CmdSyncRogueAeonScNotify",
            Self::CmdSyncRogueExploreWinScNotify => "CmdSyncRogueExploreWinScNotify",
            Self::CmdGetRogueInitialScoreCsReq => "CmdGetRogueInitialScoreCsReq",
            Self::CmdQuitRogueScRsp => "CmdQuitRogueScRsp",
            Self::CmdGetRogueBuffEnhanceInfoScRsp => "CmdGetRogueBuffEnhanceInfoScRsp",
            Self::CmdOpenRogueChestScRsp => "CmdOpenRogueChestScRsp",
            Self::CmdEnhanceRogueBuffCsReq => "CmdEnhanceRogueBuffCsReq",
            Self::CmdEnterRogueMapRoomScRsp => "CmdEnterRogueMapRoomScRsp",
            Self::CmdSyncRogueAeonLevelUpRewardScNotify => {
                "CmdSyncRogueAeonLevelUpRewardScNotify"
            }
            Self::CmdExchangeRogueRewardKeyScRsp => "CmdExchangeRogueRewardKeyScRsp",
            Self::CmdLeaveRogueCsReq => "CmdLeaveRogueCsReq",
            Self::CmdPickRogueAvatarCsReq => "CmdPickRogueAvatarCsReq",
            Self::CmdTakeRogueAeonLevelRewardScRsp => "CmdTakeRogueAeonLevelRewardScRsp",
            Self::CmdStartRogueCsReq => "CmdStartRogueCsReq",
            Self::CmdTakeRogueScoreRewardCsReq => "CmdTakeRogueScoreRewardCsReq",
            Self::CmdEnhanceRogueBuffScRsp => "CmdEnhanceRogueBuffScRsp",
            Self::CmdEnterRogueCsReq => "CmdEnterRogueCsReq",
            Self::CmdEnterRogueScRsp => "CmdEnterRogueScRsp",
            Self::CmdSyncRogueReviveInfoScNotify => "CmdSyncRogueReviveInfoScNotify",
            Self::CmdGetRogueAeonInfoScRsp => "CmdGetRogueAeonInfoScRsp",
            Self::CmdSyncRogueSeasonFinishScNotify => "CmdSyncRogueSeasonFinishScNotify",
            Self::CmdOpenRogueChestCsReq => "CmdOpenRogueChestCsReq",
            Self::CmdGetRogueAeonInfoCsReq => "CmdGetRogueAeonInfoCsReq",
            Self::CmdSyncRogueAreaUnlockScNotify => "CmdSyncRogueAreaUnlockScNotify",
            Self::CmdGetRogueInfoScRsp => "CmdGetRogueInfoScRsp",
            Self::CmdEnableRogueTalentCsReq => "CmdEnableRogueTalentCsReq",
            Self::CmdGetRogueBuffEnhanceInfoCsReq => "CmdGetRogueBuffEnhanceInfoCsReq",
            Self::CmdSyncRogueVirtualItemInfoScNotify => {
                "CmdSyncRogueVirtualItemInfoScNotify"
            }
            Self::CmdSyncRogueRewardInfoScNotify => "CmdSyncRogueRewardInfoScNotify",
            Self::CmdFinishAeonDialogueGroupCsReq => "CmdFinishAeonDialogueGroupCsReq",
            Self::CmdSyncRogueMapRoomScNotify => "CmdSyncRogueMapRoomScNotify",
            Self::CmdSyncRoguePickAvatarInfoScNotify => {
                "CmdSyncRoguePickAvatarInfoScNotify"
            }
            Self::CmdEnterRogueMapRoomCsReq => "CmdEnterRogueMapRoomCsReq",
            Self::CmdPickRogueAvatarScRsp => "CmdPickRogueAvatarScRsp",
            Self::CmdReviveRogueAvatarScRsp => "CmdReviveRogueAvatarScRsp",
            Self::CmdGetRogueTalentInfoCsReq => "CmdGetRogueTalentInfoCsReq",
            Self::CmdGetRogueInitialScoreScRsp => "CmdGetRogueInitialScoreScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTypeNone" => Some(Self::None),
            "CmdSyncRogueStatusScNotify" => Some(Self::CmdSyncRogueStatusScNotify),
            "CmdGetRogueScoreRewardInfoScRsp" => {
                Some(Self::CmdGetRogueScoreRewardInfoScRsp)
            }
            "CmdGetRogueScoreRewardInfoCsReq" => {
                Some(Self::CmdGetRogueScoreRewardInfoCsReq)
            }
            "CmdReviveRogueAvatarCsReq" => Some(Self::CmdReviveRogueAvatarCsReq),
            "CmdStartRogueScRsp" => Some(Self::CmdStartRogueScRsp),
            "CmdSyncRogueGetItemScNotify" => Some(Self::CmdSyncRogueGetItemScNotify),
            "CmdQuitRogueCsReq" => Some(Self::CmdQuitRogueCsReq),
            "CmdTakeRogueScoreRewardScRsp" => Some(Self::CmdTakeRogueScoreRewardScRsp),
            "CmdFinishAeonDialogueGroupScRsp" => {
                Some(Self::CmdFinishAeonDialogueGroupScRsp)
            }
            "CmdExchangeRogueRewardKeyCsReq" => {
                Some(Self::CmdExchangeRogueRewardKeyCsReq)
            }
            "CmdGetRogueInfoCsReq" => Some(Self::CmdGetRogueInfoCsReq),
            "CmdTakeRogueAeonLevelRewardCsReq" => {
                Some(Self::CmdTakeRogueAeonLevelRewardCsReq)
            }
            "CmdLeaveRogueScRsp" => Some(Self::CmdLeaveRogueScRsp),
            "CmdGetRogueTalentInfoScRsp" => Some(Self::CmdGetRogueTalentInfoScRsp),
            "CmdEnableRogueTalentScRsp" => Some(Self::CmdEnableRogueTalentScRsp),
            "CmdSyncRogueFinishScNotify" => Some(Self::CmdSyncRogueFinishScNotify),
            "CmdSyncRogueAeonScNotify" => Some(Self::CmdSyncRogueAeonScNotify),
            "CmdSyncRogueExploreWinScNotify" => {
                Some(Self::CmdSyncRogueExploreWinScNotify)
            }
            "CmdGetRogueInitialScoreCsReq" => Some(Self::CmdGetRogueInitialScoreCsReq),
            "CmdQuitRogueScRsp" => Some(Self::CmdQuitRogueScRsp),
            "CmdGetRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoScRsp)
            }
            "CmdOpenRogueChestScRsp" => Some(Self::CmdOpenRogueChestScRsp),
            "CmdEnhanceRogueBuffCsReq" => Some(Self::CmdEnhanceRogueBuffCsReq),
            "CmdEnterRogueMapRoomScRsp" => Some(Self::CmdEnterRogueMapRoomScRsp),
            "CmdSyncRogueAeonLevelUpRewardScNotify" => {
                Some(Self::CmdSyncRogueAeonLevelUpRewardScNotify)
            }
            "CmdExchangeRogueRewardKeyScRsp" => {
                Some(Self::CmdExchangeRogueRewardKeyScRsp)
            }
            "CmdLeaveRogueCsReq" => Some(Self::CmdLeaveRogueCsReq),
            "CmdPickRogueAvatarCsReq" => Some(Self::CmdPickRogueAvatarCsReq),
            "CmdTakeRogueAeonLevelRewardScRsp" => {
                Some(Self::CmdTakeRogueAeonLevelRewardScRsp)
            }
            "CmdStartRogueCsReq" => Some(Self::CmdStartRogueCsReq),
            "CmdTakeRogueScoreRewardCsReq" => Some(Self::CmdTakeRogueScoreRewardCsReq),
            "CmdEnhanceRogueBuffScRsp" => Some(Self::CmdEnhanceRogueBuffScRsp),
            "CmdEnterRogueCsReq" => Some(Self::CmdEnterRogueCsReq),
            "CmdEnterRogueScRsp" => Some(Self::CmdEnterRogueScRsp),
            "CmdSyncRogueReviveInfoScNotify" => {
                Some(Self::CmdSyncRogueReviveInfoScNotify)
            }
            "CmdGetRogueAeonInfoScRsp" => Some(Self::CmdGetRogueAeonInfoScRsp),
            "CmdSyncRogueSeasonFinishScNotify" => {
                Some(Self::CmdSyncRogueSeasonFinishScNotify)
            }
            "CmdOpenRogueChestCsReq" => Some(Self::CmdOpenRogueChestCsReq),
            "CmdGetRogueAeonInfoCsReq" => Some(Self::CmdGetRogueAeonInfoCsReq),
            "CmdSyncRogueAreaUnlockScNotify" => {
                Some(Self::CmdSyncRogueAreaUnlockScNotify)
            }
            "CmdGetRogueInfoScRsp" => Some(Self::CmdGetRogueInfoScRsp),
            "CmdEnableRogueTalentCsReq" => Some(Self::CmdEnableRogueTalentCsReq),
            "CmdGetRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoCsReq)
            }
            "CmdSyncRogueVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueVirtualItemInfoScNotify)
            }
            "CmdSyncRogueRewardInfoScNotify" => {
                Some(Self::CmdSyncRogueRewardInfoScNotify)
            }
            "CmdFinishAeonDialogueGroupCsReq" => {
                Some(Self::CmdFinishAeonDialogueGroupCsReq)
            }
            "CmdSyncRogueMapRoomScNotify" => Some(Self::CmdSyncRogueMapRoomScNotify),
            "CmdSyncRoguePickAvatarInfoScNotify" => {
                Some(Self::CmdSyncRoguePickAvatarInfoScNotify)
            }
            "CmdEnterRogueMapRoomCsReq" => Some(Self::CmdEnterRogueMapRoomCsReq),
            "CmdPickRogueAvatarScRsp" => Some(Self::CmdPickRogueAvatarScRsp),
            "CmdReviveRogueAvatarScRsp" => Some(Self::CmdReviveRogueAvatarScRsp),
            "CmdGetRogueTalentInfoCsReq" => Some(Self::CmdGetRogueTalentInfoCsReq),
            "CmdGetRogueInitialScoreScRsp" => Some(Self::CmdGetRogueInitialScoreScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kdgnmflkfll {
    RogueStatusNone = 0,
    RogueStatusDoing = 1,
    RogueStatusPending = 2,
    RogueStatusEndless = 3,
    RogueStatusFinish = 4,
}
impl Kdgnmflkfll {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueStatusNone => "ROGUE_STATUS_NONE",
            Self::RogueStatusDoing => "ROGUE_STATUS_DOING",
            Self::RogueStatusPending => "ROGUE_STATUS_PENDING",
            Self::RogueStatusEndless => "ROGUE_STATUS_ENDLESS",
            Self::RogueStatusFinish => "ROGUE_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_STATUS_NONE" => Some(Self::RogueStatusNone),
            "ROGUE_STATUS_DOING" => Some(Self::RogueStatusDoing),
            "ROGUE_STATUS_PENDING" => Some(Self::RogueStatusPending),
            "ROGUE_STATUS_ENDLESS" => Some(Self::RogueStatusEndless),
            "ROGUE_STATUS_FINISH" => Some(Self::RogueStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hcdehkdjbae {
    RogueRoomStatusNone = 0,
    RogueRoomStatusLock = 1,
    RogueRoomStatusUnlock = 2,
    RogueRoomStatusPlay = 3,
    RogueRoomStatusFinish = 4,
}
impl Hcdehkdjbae {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueRoomStatusNone => "ROGUE_ROOM_STATUS_NONE",
            Self::RogueRoomStatusLock => "ROGUE_ROOM_STATUS_LOCK",
            Self::RogueRoomStatusUnlock => "ROGUE_ROOM_STATUS_UNLOCK",
            Self::RogueRoomStatusPlay => "ROGUE_ROOM_STATUS_PLAY",
            Self::RogueRoomStatusFinish => "ROGUE_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ROOM_STATUS_NONE" => Some(Self::RogueRoomStatusNone),
            "ROGUE_ROOM_STATUS_LOCK" => Some(Self::RogueRoomStatusLock),
            "ROGUE_ROOM_STATUS_UNLOCK" => Some(Self::RogueRoomStatusUnlock),
            "ROGUE_ROOM_STATUS_PLAY" => Some(Self::RogueRoomStatusPlay),
            "ROGUE_ROOM_STATUS_FINISH" => Some(Self::RogueRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ehddmoaifbd {
    RogueAreaStatusLock = 0,
    RogueAreaStatusUnlock = 1,
    RogueAreaStatusFirstPass = 2,
    RogueAreaStatusClose = 3,
}
impl Ehddmoaifbd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueAreaStatusLock => "ROGUE_AREA_STATUS_LOCK",
            Self::RogueAreaStatusUnlock => "ROGUE_AREA_STATUS_UNLOCK",
            Self::RogueAreaStatusFirstPass => "ROGUE_AREA_STATUS_FIRST_PASS",
            Self::RogueAreaStatusClose => "ROGUE_AREA_STATUS_CLOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_AREA_STATUS_LOCK" => Some(Self::RogueAreaStatusLock),
            "ROGUE_AREA_STATUS_UNLOCK" => Some(Self::RogueAreaStatusUnlock),
            "ROGUE_AREA_STATUS_FIRST_PASS" => Some(Self::RogueAreaStatusFirstPass),
            "ROGUE_AREA_STATUS_CLOSE" => Some(Self::RogueAreaStatusClose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cmfljchidgc {
    RogueBuffSourceTypeNone = 0,
    RogueBuffSourceTypeSelect = 1,
    RogueBuffSourceTypeEnhance = 2,
    RogueBuffSourceTypeMiracle = 3,
    RogueBuffSourceTypeDialogue = 4,
    RogueBuffSourceTypeBonus = 5,
    RogueBuffSourceTypeMazeSkill = 6,
    RogueBuffSourceTypeShop = 7,
    RogueBuffSourceTypeLevelMechanism = 8,
    RogueBuffSourceTypeEndlessLevelStart = 9,
}
impl Cmfljchidgc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueBuffSourceTypeNone => "ROGUE_BUFF_SOURCE_TYPE_NONE",
            Self::RogueBuffSourceTypeSelect => "ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Self::RogueBuffSourceTypeEnhance => "ROGUE_BUFF_SOURCE_TYPE_ENHANCE",
            Self::RogueBuffSourceTypeMiracle => "ROGUE_BUFF_SOURCE_TYPE_MIRACLE",
            Self::RogueBuffSourceTypeDialogue => "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE",
            Self::RogueBuffSourceTypeBonus => "ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Self::RogueBuffSourceTypeMazeSkill => "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL",
            Self::RogueBuffSourceTypeShop => "ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Self::RogueBuffSourceTypeLevelMechanism => {
                "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueBuffSourceTypeEndlessLevelStart => {
                "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BUFF_SOURCE_TYPE_NONE" => Some(Self::RogueBuffSourceTypeNone),
            "ROGUE_BUFF_SOURCE_TYPE_SELECT" => Some(Self::RogueBuffSourceTypeSelect),
            "ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => Some(Self::RogueBuffSourceTypeEnhance),
            "ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => Some(Self::RogueBuffSourceTypeMiracle),
            "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => Some(Self::RogueBuffSourceTypeDialogue),
            "ROGUE_BUFF_SOURCE_TYPE_BONUS" => Some(Self::RogueBuffSourceTypeBonus),
            "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueBuffSourceTypeMazeSkill)
            }
            "ROGUE_BUFF_SOURCE_TYPE_SHOP" => Some(Self::RogueBuffSourceTypeShop),
            "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueBuffSourceTypeLevelMechanism)
            }
            "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueBuffSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ijedmndopfk {
    RogueMiracleSourceTypeNone = 0,
    RogueMiracleSourceTypeSelect = 1,
    RogueMiracleSourceTypeDialogue = 2,
    RogueMiracleSourceTypeBonus = 3,
    RogueMiracleSourceTypeUse = 4,
    RogueMiracleSourceTypeReset = 5,
    RogueMiracleSourceTypeReplace = 6,
    RogueMiracleSourceTypeTrade = 7,
    RogueMiracleSourceTypeGet = 8,
    RogueMiracleSourceTypeShop = 9,
    RogueMiracleSourceTypeMazeSkill = 10,
    RogueMiracleSourceTypeLevelMechanism = 11,
    RogueMiracleSourceTypeEndlessLevelStart = 12,
}
impl Ijedmndopfk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMiracleSourceTypeNone => "ROGUE_MIRACLE_SOURCE_TYPE_NONE",
            Self::RogueMiracleSourceTypeSelect => "ROGUE_MIRACLE_SOURCE_TYPE_SELECT",
            Self::RogueMiracleSourceTypeDialogue => "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE",
            Self::RogueMiracleSourceTypeBonus => "ROGUE_MIRACLE_SOURCE_TYPE_BONUS",
            Self::RogueMiracleSourceTypeUse => "ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Self::RogueMiracleSourceTypeReset => "ROGUE_MIRACLE_SOURCE_TYPE_RESET",
            Self::RogueMiracleSourceTypeReplace => "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE",
            Self::RogueMiracleSourceTypeTrade => "ROGUE_MIRACLE_SOURCE_TYPE_TRADE",
            Self::RogueMiracleSourceTypeGet => "ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Self::RogueMiracleSourceTypeShop => "ROGUE_MIRACLE_SOURCE_TYPE_SHOP",
            Self::RogueMiracleSourceTypeMazeSkill => {
                "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::RogueMiracleSourceTypeLevelMechanism => {
                "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueMiracleSourceTypeEndlessLevelStart => {
                "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MIRACLE_SOURCE_TYPE_NONE" => Some(Self::RogueMiracleSourceTypeNone),
            "ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueMiracleSourceTypeSelect)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueMiracleSourceTypeDialogue)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => Some(Self::RogueMiracleSourceTypeBonus),
            "ROGUE_MIRACLE_SOURCE_TYPE_USE" => Some(Self::RogueMiracleSourceTypeUse),
            "ROGUE_MIRACLE_SOURCE_TYPE_RESET" => Some(Self::RogueMiracleSourceTypeReset),
            "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::RogueMiracleSourceTypeReplace)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => Some(Self::RogueMiracleSourceTypeTrade),
            "ROGUE_MIRACLE_SOURCE_TYPE_GET" => Some(Self::RogueMiracleSourceTypeGet),
            "ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => Some(Self::RogueMiracleSourceTypeShop),
            "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueMiracleSourceTypeMazeSkill)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueMiracleSourceTypeLevelMechanism)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueMiracleSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueDialogueResult {
    Succ = 0,
    Fail = 1,
}
impl RogueDialogueResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Succ => "ROGUE_DIALOGUE_RESULT_SUCC",
            Self::Fail => "ROGUE_DIALOGUE_RESULT_FAIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DIALOGUE_RESULT_SUCC" => Some(Self::Succ),
            "ROGUE_DIALOGUE_RESULT_FAIL" => Some(Self::Fail),
            _ => None,
        }
    }
}
/// FKNFLIELBIH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueArcadeType {
    None = 0,
    CmdRogueArcadeRestartScRsp = 7699,
    CmdRogueArcadeLeaveScRsp = 7673,
    CmdRogueArcadeStartScRsp = 7700,
    CmdRogueArcadeGetInfoCsReq = 7659,
    CmdRogueArcadeLeaveCsReq = 7680,
    CmdRogueArcadeStartCsReq = 7662,
    CmdRogueArcadeGetInfoScRsp = 7693,
    CmdRogueArcadeRestartCsReq = 7665,
}
impl CmdRogueArcadeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueArcadeTypeNone",
            Self::CmdRogueArcadeRestartScRsp => "CmdRogueArcadeRestartScRsp",
            Self::CmdRogueArcadeLeaveScRsp => "CmdRogueArcadeLeaveScRsp",
            Self::CmdRogueArcadeStartScRsp => "CmdRogueArcadeStartScRsp",
            Self::CmdRogueArcadeGetInfoCsReq => "CmdRogueArcadeGetInfoCsReq",
            Self::CmdRogueArcadeLeaveCsReq => "CmdRogueArcadeLeaveCsReq",
            Self::CmdRogueArcadeStartCsReq => "CmdRogueArcadeStartCsReq",
            Self::CmdRogueArcadeGetInfoScRsp => "CmdRogueArcadeGetInfoScRsp",
            Self::CmdRogueArcadeRestartCsReq => "CmdRogueArcadeRestartCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueArcadeTypeNone" => Some(Self::None),
            "CmdRogueArcadeRestartScRsp" => Some(Self::CmdRogueArcadeRestartScRsp),
            "CmdRogueArcadeLeaveScRsp" => Some(Self::CmdRogueArcadeLeaveScRsp),
            "CmdRogueArcadeStartScRsp" => Some(Self::CmdRogueArcadeStartScRsp),
            "CmdRogueArcadeGetInfoCsReq" => Some(Self::CmdRogueArcadeGetInfoCsReq),
            "CmdRogueArcadeLeaveCsReq" => Some(Self::CmdRogueArcadeLeaveCsReq),
            "CmdRogueArcadeStartCsReq" => Some(Self::CmdRogueArcadeStartCsReq),
            "CmdRogueArcadeGetInfoScRsp" => Some(Self::CmdRogueArcadeGetInfoScRsp),
            "CmdRogueArcadeRestartCsReq" => Some(Self::CmdRogueArcadeRestartCsReq),
            _ => None,
        }
    }
}
/// BHEKMDANBNN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueCommonType {
    None = 0,
    CmdCommonRogueQueryCsReq = 5664,
    CmdTakeRogueEventHandbookRewardScRsp = 5679,
    CmdBuyRogueShopMiracleScRsp = 5624,
    CmdSyncRogueCommonPendingActionScNotify = 5639,
    CmdRogueNpcDisappearScRsp = 5646,
    CmdTakeRogueMiracleHandbookRewardCsReq = 5618,
    CmdUpdateRogueAdventureRoomScoreCsReq = 5655,
    CmdPrepareRogueAdventureRoomScRsp = 5684,
    CmdGetRogueExhibitionScRsp = 5656,
    CmdCommonRogueComponentUpdateScNotify = 5657,
    CmdSyncRogueCommonVirtualItemInfoScNotify = 5700,
    CmdSyncRogueCommonDialogueDataScNotify = 5683,
    CmdGetRogueCommonDialogueDataCsReq = 5603,
    CmdRogueWorkbenchHandleFuncScRsp = 5670,
    CmdEnhanceCommonRogueBuffCsReq = 5659,
    CmdSelectRogueCommonDialogueOptionCsReq = 5661,
    CmdRogueWorkbenchGetInfoCsReq = 5616,
    CmdRogueDebugMessageScNotify = 5615,
    CmdBuyRogueShopBuffCsReq = 5693,
    CmdUpdateRogueAdventureRoomScoreScRsp = 5622,
    CmdSetRogueExhibitionCsReq = 5609,
    CmdRogueGetGambleInfoScRsp = 5687,
    CmdGetRogueHandbookDataCsReq = 5621,
    CmdRogueWorkbenchGetInfoScRsp = 5647,
    CmdGetRogueAdventureRoomInfoCsReq = 5625,
    CmdGetRogueShopMiracleInfoScRsp = 5667,
    CmdRogueWorkbenchSelectFuncCsReq = 5663,
    CmdRogueWorkbenchHandleFuncCsReq = 5649,
    CmdHandleRogueCommonPendingActionScRsp = 5645,
    CmdGetEnhanceCommonRogueBuffInfoCsReq = 5653,
    CmdSelectRogueCommonDialogueOptionScRsp = 5630,
    CmdHandleRogueCommonPendingActionCsReq = 5660,
    CmdExchangeRogueBuffWithMiracleScRsp = 5607,
    CmdGetEnhanceCommonRogueBuffInfoScRsp = 5690,
    CmdGetRogueHandbookDataScRsp = 5665,
    CmdSyncRogueCommonDialogueOptionFinishScNotify = 5668,
    CmdRogueGetGambleInfoCsReq = 5638,
    CmdGetRogueExhibitionCsReq = 5669,
    CmdFinishRogueCommonDialogueScRsp = 5697,
    CmdSyncRogueHandbookDataUpdateScNotify = 5608,
    CmdCommonRogueQueryScRsp = 5672,
    CmdRogueNpcDisappearCsReq = 5643,
    CmdRogueDoGambleCsReq = 5686,
    CmdGetRogueAdventureRoomInfoScRsp = 5696,
    CmdBuyRogueShopBuffScRsp = 5634,
    CmdSetRogueCollectionCsReq = 5644,
    CmdSyncRogueAdventureRoomInfoScNotify = 5636,
    CmdRogueDoGambleScRsp = 5666,
    CmdSetRogueExhibitionScRsp = 5620,
    CmdPrepareRogueAdventureRoomCsReq = 5695,
    CmdStopRogueAdventureRoomScRsp = 5629,
    CmdStopRogueAdventureRoomCsReq = 5678,
    CmdEnhanceCommonRogueBuffScRsp = 5612,
    CmdBuyRogueShopMiracleCsReq = 5674,
    CmdGetRogueCollectionCsReq = 5698,
    CmdGetRogueShopBuffInfoScRsp = 5652,
    CmdGetRogueCollectionScRsp = 5691,
    CmdGetRogueCommonDialogueDataScRsp = 5640,
    CmdRogueWorkbenchSelectFuncScRsp = 5689,
    CmdSyncRogueCommonActionResultScNotify = 5681,
    CmdSetRogueCollectionScRsp = 5623,
    CmdGetRogueShopBuffInfoCsReq = 5628,
    CmdTakeRogueMiracleHandbookRewardScRsp = 5637,
    CmdFinishRogueCommonDialogueCsReq = 5633,
    CmdTakeRogueEventHandbookRewardCsReq = 5611,
    CmdExchangeRogueBuffWithMiracleCsReq = 5626,
    CmdGetRogueShopMiracleInfoCsReq = 5627,
    CmdCommonRogueUpdateScNotify = 5699,
}
impl CmdRogueCommonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueCommonTypeNone",
            Self::CmdCommonRogueQueryCsReq => "CmdCommonRogueQueryCsReq",
            Self::CmdTakeRogueEventHandbookRewardScRsp => {
                "CmdTakeRogueEventHandbookRewardScRsp"
            }
            Self::CmdBuyRogueShopMiracleScRsp => "CmdBuyRogueShopMiracleScRsp",
            Self::CmdSyncRogueCommonPendingActionScNotify => {
                "CmdSyncRogueCommonPendingActionScNotify"
            }
            Self::CmdRogueNpcDisappearScRsp => "CmdRogueNpcDisappearScRsp",
            Self::CmdTakeRogueMiracleHandbookRewardCsReq => {
                "CmdTakeRogueMiracleHandbookRewardCsReq"
            }
            Self::CmdUpdateRogueAdventureRoomScoreCsReq => {
                "CmdUpdateRogueAdventureRoomScoreCsReq"
            }
            Self::CmdPrepareRogueAdventureRoomScRsp => {
                "CmdPrepareRogueAdventureRoomScRsp"
            }
            Self::CmdGetRogueExhibitionScRsp => "CmdGetRogueExhibitionScRsp",
            Self::CmdCommonRogueComponentUpdateScNotify => {
                "CmdCommonRogueComponentUpdateScNotify"
            }
            Self::CmdSyncRogueCommonVirtualItemInfoScNotify => {
                "CmdSyncRogueCommonVirtualItemInfoScNotify"
            }
            Self::CmdSyncRogueCommonDialogueDataScNotify => {
                "CmdSyncRogueCommonDialogueDataScNotify"
            }
            Self::CmdGetRogueCommonDialogueDataCsReq => {
                "CmdGetRogueCommonDialogueDataCsReq"
            }
            Self::CmdRogueWorkbenchHandleFuncScRsp => "CmdRogueWorkbenchHandleFuncScRsp",
            Self::CmdEnhanceCommonRogueBuffCsReq => "CmdEnhanceCommonRogueBuffCsReq",
            Self::CmdSelectRogueCommonDialogueOptionCsReq => {
                "CmdSelectRogueCommonDialogueOptionCsReq"
            }
            Self::CmdRogueWorkbenchGetInfoCsReq => "CmdRogueWorkbenchGetInfoCsReq",
            Self::CmdRogueDebugMessageScNotify => "CmdRogueDebugMessageScNotify",
            Self::CmdBuyRogueShopBuffCsReq => "CmdBuyRogueShopBuffCsReq",
            Self::CmdUpdateRogueAdventureRoomScoreScRsp => {
                "CmdUpdateRogueAdventureRoomScoreScRsp"
            }
            Self::CmdSetRogueExhibitionCsReq => "CmdSetRogueExhibitionCsReq",
            Self::CmdRogueGetGambleInfoScRsp => "CmdRogueGetGambleInfoScRsp",
            Self::CmdGetRogueHandbookDataCsReq => "CmdGetRogueHandbookDataCsReq",
            Self::CmdRogueWorkbenchGetInfoScRsp => "CmdRogueWorkbenchGetInfoScRsp",
            Self::CmdGetRogueAdventureRoomInfoCsReq => {
                "CmdGetRogueAdventureRoomInfoCsReq"
            }
            Self::CmdGetRogueShopMiracleInfoScRsp => "CmdGetRogueShopMiracleInfoScRsp",
            Self::CmdRogueWorkbenchSelectFuncCsReq => "CmdRogueWorkbenchSelectFuncCsReq",
            Self::CmdRogueWorkbenchHandleFuncCsReq => "CmdRogueWorkbenchHandleFuncCsReq",
            Self::CmdHandleRogueCommonPendingActionScRsp => {
                "CmdHandleRogueCommonPendingActionScRsp"
            }
            Self::CmdGetEnhanceCommonRogueBuffInfoCsReq => {
                "CmdGetEnhanceCommonRogueBuffInfoCsReq"
            }
            Self::CmdSelectRogueCommonDialogueOptionScRsp => {
                "CmdSelectRogueCommonDialogueOptionScRsp"
            }
            Self::CmdHandleRogueCommonPendingActionCsReq => {
                "CmdHandleRogueCommonPendingActionCsReq"
            }
            Self::CmdExchangeRogueBuffWithMiracleScRsp => {
                "CmdExchangeRogueBuffWithMiracleScRsp"
            }
            Self::CmdGetEnhanceCommonRogueBuffInfoScRsp => {
                "CmdGetEnhanceCommonRogueBuffInfoScRsp"
            }
            Self::CmdGetRogueHandbookDataScRsp => "CmdGetRogueHandbookDataScRsp",
            Self::CmdSyncRogueCommonDialogueOptionFinishScNotify => {
                "CmdSyncRogueCommonDialogueOptionFinishScNotify"
            }
            Self::CmdRogueGetGambleInfoCsReq => "CmdRogueGetGambleInfoCsReq",
            Self::CmdGetRogueExhibitionCsReq => "CmdGetRogueExhibitionCsReq",
            Self::CmdFinishRogueCommonDialogueScRsp => {
                "CmdFinishRogueCommonDialogueScRsp"
            }
            Self::CmdSyncRogueHandbookDataUpdateScNotify => {
                "CmdSyncRogueHandbookDataUpdateScNotify"
            }
            Self::CmdCommonRogueQueryScRsp => "CmdCommonRogueQueryScRsp",
            Self::CmdRogueNpcDisappearCsReq => "CmdRogueNpcDisappearCsReq",
            Self::CmdRogueDoGambleCsReq => "CmdRogueDoGambleCsReq",
            Self::CmdGetRogueAdventureRoomInfoScRsp => {
                "CmdGetRogueAdventureRoomInfoScRsp"
            }
            Self::CmdBuyRogueShopBuffScRsp => "CmdBuyRogueShopBuffScRsp",
            Self::CmdSetRogueCollectionCsReq => "CmdSetRogueCollectionCsReq",
            Self::CmdSyncRogueAdventureRoomInfoScNotify => {
                "CmdSyncRogueAdventureRoomInfoScNotify"
            }
            Self::CmdRogueDoGambleScRsp => "CmdRogueDoGambleScRsp",
            Self::CmdSetRogueExhibitionScRsp => "CmdSetRogueExhibitionScRsp",
            Self::CmdPrepareRogueAdventureRoomCsReq => {
                "CmdPrepareRogueAdventureRoomCsReq"
            }
            Self::CmdStopRogueAdventureRoomScRsp => "CmdStopRogueAdventureRoomScRsp",
            Self::CmdStopRogueAdventureRoomCsReq => "CmdStopRogueAdventureRoomCsReq",
            Self::CmdEnhanceCommonRogueBuffScRsp => "CmdEnhanceCommonRogueBuffScRsp",
            Self::CmdBuyRogueShopMiracleCsReq => "CmdBuyRogueShopMiracleCsReq",
            Self::CmdGetRogueCollectionCsReq => "CmdGetRogueCollectionCsReq",
            Self::CmdGetRogueShopBuffInfoScRsp => "CmdGetRogueShopBuffInfoScRsp",
            Self::CmdGetRogueCollectionScRsp => "CmdGetRogueCollectionScRsp",
            Self::CmdGetRogueCommonDialogueDataScRsp => {
                "CmdGetRogueCommonDialogueDataScRsp"
            }
            Self::CmdRogueWorkbenchSelectFuncScRsp => "CmdRogueWorkbenchSelectFuncScRsp",
            Self::CmdSyncRogueCommonActionResultScNotify => {
                "CmdSyncRogueCommonActionResultScNotify"
            }
            Self::CmdSetRogueCollectionScRsp => "CmdSetRogueCollectionScRsp",
            Self::CmdGetRogueShopBuffInfoCsReq => "CmdGetRogueShopBuffInfoCsReq",
            Self::CmdTakeRogueMiracleHandbookRewardScRsp => {
                "CmdTakeRogueMiracleHandbookRewardScRsp"
            }
            Self::CmdFinishRogueCommonDialogueCsReq => {
                "CmdFinishRogueCommonDialogueCsReq"
            }
            Self::CmdTakeRogueEventHandbookRewardCsReq => {
                "CmdTakeRogueEventHandbookRewardCsReq"
            }
            Self::CmdExchangeRogueBuffWithMiracleCsReq => {
                "CmdExchangeRogueBuffWithMiracleCsReq"
            }
            Self::CmdGetRogueShopMiracleInfoCsReq => "CmdGetRogueShopMiracleInfoCsReq",
            Self::CmdCommonRogueUpdateScNotify => "CmdCommonRogueUpdateScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueCommonTypeNone" => Some(Self::None),
            "CmdCommonRogueQueryCsReq" => Some(Self::CmdCommonRogueQueryCsReq),
            "CmdTakeRogueEventHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueEventHandbookRewardScRsp)
            }
            "CmdBuyRogueShopMiracleScRsp" => Some(Self::CmdBuyRogueShopMiracleScRsp),
            "CmdSyncRogueCommonPendingActionScNotify" => {
                Some(Self::CmdSyncRogueCommonPendingActionScNotify)
            }
            "CmdRogueNpcDisappearScRsp" => Some(Self::CmdRogueNpcDisappearScRsp),
            "CmdTakeRogueMiracleHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardCsReq)
            }
            "CmdUpdateRogueAdventureRoomScoreCsReq" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreCsReq)
            }
            "CmdPrepareRogueAdventureRoomScRsp" => {
                Some(Self::CmdPrepareRogueAdventureRoomScRsp)
            }
            "CmdGetRogueExhibitionScRsp" => Some(Self::CmdGetRogueExhibitionScRsp),
            "CmdCommonRogueComponentUpdateScNotify" => {
                Some(Self::CmdCommonRogueComponentUpdateScNotify)
            }
            "CmdSyncRogueCommonVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueCommonVirtualItemInfoScNotify)
            }
            "CmdSyncRogueCommonDialogueDataScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueDataScNotify)
            }
            "CmdGetRogueCommonDialogueDataCsReq" => {
                Some(Self::CmdGetRogueCommonDialogueDataCsReq)
            }
            "CmdRogueWorkbenchHandleFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchHandleFuncScRsp)
            }
            "CmdEnhanceCommonRogueBuffCsReq" => {
                Some(Self::CmdEnhanceCommonRogueBuffCsReq)
            }
            "CmdSelectRogueCommonDialogueOptionCsReq" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionCsReq)
            }
            "CmdRogueWorkbenchGetInfoCsReq" => Some(Self::CmdRogueWorkbenchGetInfoCsReq),
            "CmdRogueDebugMessageScNotify" => Some(Self::CmdRogueDebugMessageScNotify),
            "CmdBuyRogueShopBuffCsReq" => Some(Self::CmdBuyRogueShopBuffCsReq),
            "CmdUpdateRogueAdventureRoomScoreScRsp" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreScRsp)
            }
            "CmdSetRogueExhibitionCsReq" => Some(Self::CmdSetRogueExhibitionCsReq),
            "CmdRogueGetGambleInfoScRsp" => Some(Self::CmdRogueGetGambleInfoScRsp),
            "CmdGetRogueHandbookDataCsReq" => Some(Self::CmdGetRogueHandbookDataCsReq),
            "CmdRogueWorkbenchGetInfoScRsp" => Some(Self::CmdRogueWorkbenchGetInfoScRsp),
            "CmdGetRogueAdventureRoomInfoCsReq" => {
                Some(Self::CmdGetRogueAdventureRoomInfoCsReq)
            }
            "CmdGetRogueShopMiracleInfoScRsp" => {
                Some(Self::CmdGetRogueShopMiracleInfoScRsp)
            }
            "CmdRogueWorkbenchSelectFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchSelectFuncCsReq)
            }
            "CmdRogueWorkbenchHandleFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchHandleFuncCsReq)
            }
            "CmdHandleRogueCommonPendingActionScRsp" => {
                Some(Self::CmdHandleRogueCommonPendingActionScRsp)
            }
            "CmdGetEnhanceCommonRogueBuffInfoCsReq" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoCsReq)
            }
            "CmdSelectRogueCommonDialogueOptionScRsp" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionScRsp)
            }
            "CmdHandleRogueCommonPendingActionCsReq" => {
                Some(Self::CmdHandleRogueCommonPendingActionCsReq)
            }
            "CmdExchangeRogueBuffWithMiracleScRsp" => {
                Some(Self::CmdExchangeRogueBuffWithMiracleScRsp)
            }
            "CmdGetEnhanceCommonRogueBuffInfoScRsp" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoScRsp)
            }
            "CmdGetRogueHandbookDataScRsp" => Some(Self::CmdGetRogueHandbookDataScRsp),
            "CmdSyncRogueCommonDialogueOptionFinishScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueOptionFinishScNotify)
            }
            "CmdRogueGetGambleInfoCsReq" => Some(Self::CmdRogueGetGambleInfoCsReq),
            "CmdGetRogueExhibitionCsReq" => Some(Self::CmdGetRogueExhibitionCsReq),
            "CmdFinishRogueCommonDialogueScRsp" => {
                Some(Self::CmdFinishRogueCommonDialogueScRsp)
            }
            "CmdSyncRogueHandbookDataUpdateScNotify" => {
                Some(Self::CmdSyncRogueHandbookDataUpdateScNotify)
            }
            "CmdCommonRogueQueryScRsp" => Some(Self::CmdCommonRogueQueryScRsp),
            "CmdRogueNpcDisappearCsReq" => Some(Self::CmdRogueNpcDisappearCsReq),
            "CmdRogueDoGambleCsReq" => Some(Self::CmdRogueDoGambleCsReq),
            "CmdGetRogueAdventureRoomInfoScRsp" => {
                Some(Self::CmdGetRogueAdventureRoomInfoScRsp)
            }
            "CmdBuyRogueShopBuffScRsp" => Some(Self::CmdBuyRogueShopBuffScRsp),
            "CmdSetRogueCollectionCsReq" => Some(Self::CmdSetRogueCollectionCsReq),
            "CmdSyncRogueAdventureRoomInfoScNotify" => {
                Some(Self::CmdSyncRogueAdventureRoomInfoScNotify)
            }
            "CmdRogueDoGambleScRsp" => Some(Self::CmdRogueDoGambleScRsp),
            "CmdSetRogueExhibitionScRsp" => Some(Self::CmdSetRogueExhibitionScRsp),
            "CmdPrepareRogueAdventureRoomCsReq" => {
                Some(Self::CmdPrepareRogueAdventureRoomCsReq)
            }
            "CmdStopRogueAdventureRoomScRsp" => {
                Some(Self::CmdStopRogueAdventureRoomScRsp)
            }
            "CmdStopRogueAdventureRoomCsReq" => {
                Some(Self::CmdStopRogueAdventureRoomCsReq)
            }
            "CmdEnhanceCommonRogueBuffScRsp" => {
                Some(Self::CmdEnhanceCommonRogueBuffScRsp)
            }
            "CmdBuyRogueShopMiracleCsReq" => Some(Self::CmdBuyRogueShopMiracleCsReq),
            "CmdGetRogueCollectionCsReq" => Some(Self::CmdGetRogueCollectionCsReq),
            "CmdGetRogueShopBuffInfoScRsp" => Some(Self::CmdGetRogueShopBuffInfoScRsp),
            "CmdGetRogueCollectionScRsp" => Some(Self::CmdGetRogueCollectionScRsp),
            "CmdGetRogueCommonDialogueDataScRsp" => {
                Some(Self::CmdGetRogueCommonDialogueDataScRsp)
            }
            "CmdRogueWorkbenchSelectFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchSelectFuncScRsp)
            }
            "CmdSyncRogueCommonActionResultScNotify" => {
                Some(Self::CmdSyncRogueCommonActionResultScNotify)
            }
            "CmdSetRogueCollectionScRsp" => Some(Self::CmdSetRogueCollectionScRsp),
            "CmdGetRogueShopBuffInfoCsReq" => Some(Self::CmdGetRogueShopBuffInfoCsReq),
            "CmdTakeRogueMiracleHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardScRsp)
            }
            "CmdFinishRogueCommonDialogueCsReq" => {
                Some(Self::CmdFinishRogueCommonDialogueCsReq)
            }
            "CmdTakeRogueEventHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueEventHandbookRewardCsReq)
            }
            "CmdExchangeRogueBuffWithMiracleCsReq" => {
                Some(Self::CmdExchangeRogueBuffWithMiracleCsReq)
            }
            "CmdGetRogueShopMiracleInfoCsReq" => {
                Some(Self::CmdGetRogueShopMiracleInfoCsReq)
            }
            "CmdCommonRogueUpdateScNotify" => Some(Self::CmdCommonRogueUpdateScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oadkappejkg {
    RogueAdventureRoomStatusNone = 0,
    RogueAdventureRoomStatusPrepare = 1,
    RogueAdventureRoomStatusStarted = 2,
    RogueAdventureRoomStatusStopped = 3,
}
impl Oadkappejkg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueAdventureRoomStatusNone => "ROGUE_ADVENTURE_ROOM_STATUS_NONE",
            Self::RogueAdventureRoomStatusPrepare => {
                "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE"
            }
            Self::RogueAdventureRoomStatusStarted => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STARTED"
            }
            Self::RogueAdventureRoomStatusStopped => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ADVENTURE_ROOM_STATUS_NONE" => {
                Some(Self::RogueAdventureRoomStatusNone)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE" => {
                Some(Self::RogueAdventureRoomStatusPrepare)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STARTED" => {
                Some(Self::RogueAdventureRoomStatusStarted)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED" => {
                Some(Self::RogueAdventureRoomStatusStopped)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Keeobdafnlj {
    RogueCommonBuffSelectSourceTypeNone = 0,
    RogueCommonBuffSelectSourceTypeDiceRoll = 1,
    RogueCommonBuffSelectSourceTypeAeon = 2,
    RogueCommonBuffSelectSourceTypeBoardEvent = 3,
    RogueCommonBuffSelectSourceTypeLevelMechanism = 4,
}
impl Keeobdafnlj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonBuffSelectSourceTypeNone => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonBuffSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Self::RogueCommonBuffSelectSourceTypeAeon => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonBuffSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonBuffSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonBuffSelectSourceTypeNone)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonBuffSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonBuffSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonBuffSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonBuffSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Picjapdoeck {
    RogueUnlockFunctionTypeMiracle = 0,
    RogueUnlockFunctionTypeShowHint = 1,
    RogueUnlockFunctionTypeCosmosBanAeon = 2,
    RogueUnlockFuntionTypeExhibition = 3,
    RogueUnlockFuntionTypeCollection = 4,
    RogueUnlockFuntionTypeTournGodMode = 5,
}
impl Picjapdoeck {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueUnlockFunctionTypeMiracle => "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE",
            Self::RogueUnlockFunctionTypeShowHint => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT"
            }
            Self::RogueUnlockFunctionTypeCosmosBanAeon => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON"
            }
            Self::RogueUnlockFuntionTypeExhibition => {
                "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION"
            }
            Self::RogueUnlockFuntionTypeCollection => {
                "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION"
            }
            Self::RogueUnlockFuntionTypeTournGodMode => {
                "ROGUE_UNLOCK_FUNTION_TYPE_TOURN_GOD_MODE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE" => {
                Some(Self::RogueUnlockFunctionTypeMiracle)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT" => {
                Some(Self::RogueUnlockFunctionTypeShowHint)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON" => {
                Some(Self::RogueUnlockFunctionTypeCosmosBanAeon)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION" => {
                Some(Self::RogueUnlockFuntionTypeExhibition)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION" => {
                Some(Self::RogueUnlockFuntionTypeCollection)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_TOURN_GOD_MODE" => {
                Some(Self::RogueUnlockFuntionTypeTournGodMode)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oijnfmcbfjc {
    RogueCommonMiracleSelectSourceTypeNone = 0,
    RogueCommonMiracleSelectSourceTypeDiceRoll = 1,
    RogueCommonMiracleSelectSourceTypeAeon = 2,
    RogueCommonMiracleSelectSourceTypeBoardEvent = 3,
    RogueCommonMiracleSelectSourceTypeLevelMechanism = 4,
}
impl Oijnfmcbfjc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonMiracleSelectSourceTypeNone => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonMiracleSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Self::RogueCommonMiracleSelectSourceTypeAeon => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonMiracleSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonMiracleSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gcmggecdioj {
    RogueCommonBuffDisplayTypeNone = 0,
    RogueCommonBuffDisplayTypeAdd = 1,
    RogueCommonBuffDisplayTypeRemove = 2,
}
impl Gcmggecdioj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonBuffDisplayTypeNone => "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE",
            Self::RogueCommonBuffDisplayTypeAdd => "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD",
            Self::RogueCommonBuffDisplayTypeRemove => {
                "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonBuffDisplayTypeNone)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonBuffDisplayTypeAdd)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonBuffDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Igohaipagpo {
    RogueCommonMiracleDisplayTypeNone = 0,
    RogueCommonMiracleDisplayTypeAdd = 1,
    RogueCommonMiracleDisplayTypeRemove = 2,
    RogueCommonMiracleDisplayTypeRepair = 3,
}
impl Igohaipagpo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonMiracleDisplayTypeNone => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE"
            }
            Self::RogueCommonMiracleDisplayTypeAdd => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD"
            }
            Self::RogueCommonMiracleDisplayTypeRemove => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE"
            }
            Self::RogueCommonMiracleDisplayTypeRepair => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleDisplayTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonMiracleDisplayTypeAdd)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonMiracleDisplayTypeRemove)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR" => {
                Some(Self::RogueCommonMiracleDisplayTypeRepair)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hpgfjnjajdg {
    RogueCommonItemDisplayTypeNone = 0,
    RogueCommonItemDisplayTypeAdd = 1,
    RogueCommonItemDisplayTypeRemove = 2,
}
impl Hpgfjnjajdg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonItemDisplayTypeNone => "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE",
            Self::RogueCommonItemDisplayTypeAdd => "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD",
            Self::RogueCommonItemDisplayTypeRemove => {
                "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonItemDisplayTypeNone)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonItemDisplayTypeAdd)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonItemDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ffpmapkbkml {
    RogueCommonActionResultDisplayTypeNone = 0,
    RogueCommonActionResultDisplayTypeSingle = 1,
    RogueCommonActionResultDisplayTypeMulti = 2,
}
impl Ffpmapkbkml {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonActionResultDisplayTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE"
            }
            Self::RogueCommonActionResultDisplayTypeSingle => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE"
            }
            Self::RogueCommonActionResultDisplayTypeMulti => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultDisplayTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE" => {
                Some(Self::RogueCommonActionResultDisplayTypeSingle)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI" => {
                Some(Self::RogueCommonActionResultDisplayTypeMulti)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Flkjifadedb {
    RogueCommonActionResultSourceTypeNone = 0,
    RogueCommonActionResultSourceTypeSelect = 1,
    RogueCommonActionResultSourceTypeEnhance = 2,
    RogueCommonActionResultSourceTypeMiracle = 3,
    RogueCommonActionResultSourceTypeDialogue = 4,
    RogueCommonActionResultSourceTypeBonus = 5,
    RogueCommonActionResultSourceTypeShop = 6,
    RogueCommonActionResultSourceTypeDice = 7,
    RogueCommonActionResultSourceTypeAeon = 8,
    RogueCommonActionResultSourceTypeBoardEvent = 9,
    RogueCommonActionResultSourceTypeMazeSkill = 10,
    RogueCommonActionResultSourceTypeLevelMechanism = 11,
    RogueCommonActionResultSourceTypeBuff = 12,
    RogueCommonActionResultSourceTypeReforge = 13,
    RogueCommonActionResultSourceTypeMagicUnitCompose = 14,
    RogueCommonActionResultSourceTypeMagicUnitReforge = 15,
}
impl Flkjifadedb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonActionResultSourceTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonActionResultSourceTypeSelect => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT"
            }
            Self::RogueCommonActionResultSourceTypeEnhance => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE"
            }
            Self::RogueCommonActionResultSourceTypeMiracle => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE"
            }
            Self::RogueCommonActionResultSourceTypeDialogue => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE"
            }
            Self::RogueCommonActionResultSourceTypeBonus => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS"
            }
            Self::RogueCommonActionResultSourceTypeShop => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP"
            }
            Self::RogueCommonActionResultSourceTypeDice => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE"
            }
            Self::RogueCommonActionResultSourceTypeAeon => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonActionResultSourceTypeBoardEvent => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonActionResultSourceTypeMazeSkill => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::RogueCommonActionResultSourceTypeLevelMechanism => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueCommonActionResultSourceTypeBuff => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF"
            }
            Self::RogueCommonActionResultSourceTypeReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE"
            }
            Self::RogueCommonActionResultSourceTypeMagicUnitCompose => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE"
            }
            Self::RogueCommonActionResultSourceTypeMagicUnitReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultSourceTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueCommonActionResultSourceTypeSelect)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE" => {
                Some(Self::RogueCommonActionResultSourceTypeEnhance)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE" => {
                Some(Self::RogueCommonActionResultSourceTypeMiracle)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueCommonActionResultSourceTypeDialogue)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS" => {
                Some(Self::RogueCommonActionResultSourceTypeBonus)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP" => {
                Some(Self::RogueCommonActionResultSourceTypeShop)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE" => {
                Some(Self::RogueCommonActionResultSourceTypeDice)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonActionResultSourceTypeAeon)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonActionResultSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueCommonActionResultSourceTypeMazeSkill)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonActionResultSourceTypeLevelMechanism)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF" => {
                Some(Self::RogueCommonActionResultSourceTypeBuff)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeReforge)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE" => {
                Some(Self::RogueCommonActionResultSourceTypeMagicUnitCompose)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeMagicUnitReforge)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Heaehfoiegk {
    RogueTalentStatusLock = 0,
    RogueTalentStatusUnlock = 1,
    RogueTalentStatusEnable = 2,
}
impl Heaehfoiegk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTalentStatusLock => "ROGUE_TALENT_STATUS_LOCK",
            Self::RogueTalentStatusUnlock => "ROGUE_TALENT_STATUS_UNLOCK",
            Self::RogueTalentStatusEnable => "ROGUE_TALENT_STATUS_ENABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TALENT_STATUS_LOCK" => Some(Self::RogueTalentStatusLock),
            "ROGUE_TALENT_STATUS_UNLOCK" => Some(Self::RogueTalentStatusUnlock),
            "ROGUE_TALENT_STATUS_ENABLE" => Some(Self::RogueTalentStatusEnable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nmjipipdbln {
    RogueCollectionOperateNone = 0,
    RogueCollectionOperateSet = 1,
    RogueCollectionOperateUnset = 2,
}
impl Nmjipipdbln {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCollectionOperateNone => "ROGUE_COLLECTION_OPERATE_NONE",
            Self::RogueCollectionOperateSet => "ROGUE_COLLECTION_OPERATE_SET",
            Self::RogueCollectionOperateUnset => "ROGUE_COLLECTION_OPERATE_UNSET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_OPERATE_NONE" => Some(Self::RogueCollectionOperateNone),
            "ROGUE_COLLECTION_OPERATE_SET" => Some(Self::RogueCollectionOperateSet),
            "ROGUE_COLLECTION_OPERATE_UNSET" => Some(Self::RogueCollectionOperateUnset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mknffjfabcn {
    RogueBoothNone = 0,
    RogueBoothEmpty = 1,
    RogueBoothDisplay = 2,
}
impl Mknffjfabcn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueBoothNone => "ROGUE_BOOTH_NONE",
            Self::RogueBoothEmpty => "ROGUE_BOOTH_EMPTY",
            Self::RogueBoothDisplay => "ROGUE_BOOTH_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BOOTH_NONE" => Some(Self::RogueBoothNone),
            "ROGUE_BOOTH_EMPTY" => Some(Self::RogueBoothEmpty),
            "ROGUE_BOOTH_DISPLAY" => Some(Self::RogueBoothDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pfjjmidebeh {
    RogueCollectionNone = 0,
    RogueCollectionUnlocked = 1,
    RogueCollectionDisplay = 2,
}
impl Pfjjmidebeh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCollectionNone => "ROGUE_COLLECTION_NONE",
            Self::RogueCollectionUnlocked => "ROGUE_COLLECTION_UNLOCKED",
            Self::RogueCollectionDisplay => "ROGUE_COLLECTION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_NONE" => Some(Self::RogueCollectionNone),
            "ROGUE_COLLECTION_UNLOCKED" => Some(Self::RogueCollectionUnlocked),
            "ROGUE_COLLECTION_DISPLAY" => Some(Self::RogueCollectionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cbcjbgjakgj {
    RogueExhibitionNone = 0,
    RogueExhibitionUnlocked = 1,
    RogueExhibitionDisplay = 2,
}
impl Cbcjbgjakgj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueExhibitionNone => "ROGUE_EXHIBITION_NONE",
            Self::RogueExhibitionUnlocked => "ROGUE_EXHIBITION_UNLOCKED",
            Self::RogueExhibitionDisplay => "ROGUE_EXHIBITION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_EXHIBITION_NONE" => Some(Self::RogueExhibitionNone),
            "ROGUE_EXHIBITION_UNLOCKED" => Some(Self::RogueExhibitionUnlocked),
            "ROGUE_EXHIBITION_DISPLAY" => Some(Self::RogueExhibitionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Amjckjdmhmg {
    RogueDebugMessageTypeNone = 0,
    RogueDebugMessageTypeDebug = 1,
    RogueDebugMessageTypeInfo = 2,
    RogueDebugMessageTypeWarn = 3,
    RogueDebugMessageTypeError = 4,
}
impl Amjckjdmhmg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueDebugMessageTypeNone => "ROGUE_DEBUG_MESSAGE_TYPE_NONE",
            Self::RogueDebugMessageTypeDebug => "ROGUE_DEBUG_MESSAGE_TYPE_DEBUG",
            Self::RogueDebugMessageTypeInfo => "ROGUE_DEBUG_MESSAGE_TYPE_INFO",
            Self::RogueDebugMessageTypeWarn => "ROGUE_DEBUG_MESSAGE_TYPE_WARN",
            Self::RogueDebugMessageTypeError => "ROGUE_DEBUG_MESSAGE_TYPE_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DEBUG_MESSAGE_TYPE_NONE" => Some(Self::RogueDebugMessageTypeNone),
            "ROGUE_DEBUG_MESSAGE_TYPE_DEBUG" => Some(Self::RogueDebugMessageTypeDebug),
            "ROGUE_DEBUG_MESSAGE_TYPE_INFO" => Some(Self::RogueDebugMessageTypeInfo),
            "ROGUE_DEBUG_MESSAGE_TYPE_WARN" => Some(Self::RogueDebugMessageTypeWarn),
            "ROGUE_DEBUG_MESSAGE_TYPE_ERROR" => Some(Self::RogueDebugMessageTypeError),
            _ => None,
        }
    }
}
/// OJNIPFHNOFN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueEndless {
    None = 0,
    CmdTakeRogueEndlessActivityPointRewardScRsp = 6004,
    CmdTakeRogueEndlessActivityAllBonusRewardScRsp = 6007,
    ActivityBattleEndScNotify = 6001,
    CmdGetRogueEndlessActivityDataCsReq = 6009,
    CmdEnterRogueEndlessActivityStageScRsp = 6008,
    CmdGetRogueEndlessActivityDataScRsp = 6010,
    CmdTakeRogueEndlessActivityAllBonusRewardCsReq = 6002,
    CmdEnterRogueEndlessActivityStageCsReq = 6003,
    CmdTakeRogueEndlessActivityPointRewardCsReq = 6005,
}
impl CmdRogueEndless {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueEndlessNone",
            Self::CmdTakeRogueEndlessActivityPointRewardScRsp => {
                "CmdTakeRogueEndlessActivityPointRewardScRsp"
            }
            Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp => {
                "CmdTakeRogueEndlessActivityAllBonusRewardScRsp"
            }
            Self::ActivityBattleEndScNotify => "CmdRogueEndlessActivityBattleEndScNotify",
            Self::CmdGetRogueEndlessActivityDataCsReq => {
                "CmdGetRogueEndlessActivityDataCsReq"
            }
            Self::CmdEnterRogueEndlessActivityStageScRsp => {
                "CmdEnterRogueEndlessActivityStageScRsp"
            }
            Self::CmdGetRogueEndlessActivityDataScRsp => {
                "CmdGetRogueEndlessActivityDataScRsp"
            }
            Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq => {
                "CmdTakeRogueEndlessActivityAllBonusRewardCsReq"
            }
            Self::CmdEnterRogueEndlessActivityStageCsReq => {
                "CmdEnterRogueEndlessActivityStageCsReq"
            }
            Self::CmdTakeRogueEndlessActivityPointRewardCsReq => {
                "CmdTakeRogueEndlessActivityPointRewardCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueEndlessNone" => Some(Self::None),
            "CmdTakeRogueEndlessActivityPointRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardScRsp)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp)
            }
            "CmdRogueEndlessActivityBattleEndScNotify" => {
                Some(Self::ActivityBattleEndScNotify)
            }
            "CmdGetRogueEndlessActivityDataCsReq" => {
                Some(Self::CmdGetRogueEndlessActivityDataCsReq)
            }
            "CmdEnterRogueEndlessActivityStageScRsp" => {
                Some(Self::CmdEnterRogueEndlessActivityStageScRsp)
            }
            "CmdGetRogueEndlessActivityDataScRsp" => {
                Some(Self::CmdGetRogueEndlessActivityDataScRsp)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq)
            }
            "CmdEnterRogueEndlessActivityStageCsReq" => {
                Some(Self::CmdEnterRogueEndlessActivityStageCsReq)
            }
            "CmdTakeRogueEndlessActivityPointRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardCsReq)
            }
            _ => None,
        }
    }
}
/// GMOBINAGJIH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueMagic {
    None = 0,
    UnitReforgeCsReq = 7710,
    LeaveCsReq = 7767,
    SetAutoDressInMagicUnitScRsp = 7765,
    UnitReforgeScRsp = 7776,
    EnterRoomScRsp = 7793,
    LevelInfoUpdateScNotify = 7746,
    UnitComposeCsReq = 7788,
    ReviveAvatarCsReq = 7707,
    SetAutoDressInMagicUnitCsReq = 7721,
    QueryScRsp = 7759,
    EnableTalentCsReq = 7717,
    EnterCsReq = 7784,
    GetTalentInfoCsReq = 7735,
    StartScRsp = 7795,
    GetTalentInfoScRsp = 7773,
    ScepterTakeOffUnitCsReq = 7750,
    ScepterDressInUnitCsReq = 7778,
    ScepterDressInUnitScRsp = 7729,
    AreaUpdateScNotify = 7725,
    AutoDressInMagicUnitChangeScNotify = 7781,
    SettleCsReq = 7752,
    ScepterTakeOffUnitScRsp = 7748,
    QueryCsReq = 7790,
    EnterLayerCsReq = 7734,
    EnterLayerScRsp = 7743,
    EnterRoomCsReq = 7724,
    AutoDressInUnitCsReq = 7737,
    EnterScRsp = 7727,
    UnitComposeScRsp = 7758,
    EnableTalentScRsp = 7713,
    StartCsReq = 7736,
    GetMiscRealTimeDataCsReq = 7708,
    ReviveCostUpdateScNotify = 7726,
    StoryInfoUpdateScNotify = 7779,
    LeaveScRsp = 7728,
    BattleFailSettleInfoScNotify = 7719,
    SettleScRsp = 7774,
    GetMiscRealTimeDataScRsp = 7718,
    AutoDressInUnitScRsp = 7711,
    ReviveAvatarScRsp = 7753,
}
impl CmdRogueMagic {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueMagicNone",
            Self::UnitReforgeCsReq => "CmdRogueMagicUnitReforgeCsReq",
            Self::LeaveCsReq => "CmdRogueMagicLeaveCsReq",
            Self::SetAutoDressInMagicUnitScRsp => {
                "CmdRogueMagicSetAutoDressInMagicUnitScRsp"
            }
            Self::UnitReforgeScRsp => "CmdRogueMagicUnitReforgeScRsp",
            Self::EnterRoomScRsp => "CmdRogueMagicEnterRoomScRsp",
            Self::LevelInfoUpdateScNotify => "CmdRogueMagicLevelInfoUpdateScNotify",
            Self::UnitComposeCsReq => "CmdRogueMagicUnitComposeCsReq",
            Self::ReviveAvatarCsReq => "CmdRogueMagicReviveAvatarCsReq",
            Self::SetAutoDressInMagicUnitCsReq => {
                "CmdRogueMagicSetAutoDressInMagicUnitCsReq"
            }
            Self::QueryScRsp => "CmdRogueMagicQueryScRsp",
            Self::EnableTalentCsReq => "CmdRogueMagicEnableTalentCsReq",
            Self::EnterCsReq => "CmdRogueMagicEnterCsReq",
            Self::GetTalentInfoCsReq => "CmdRogueMagicGetTalentInfoCsReq",
            Self::StartScRsp => "CmdRogueMagicStartScRsp",
            Self::GetTalentInfoScRsp => "CmdRogueMagicGetTalentInfoScRsp",
            Self::ScepterTakeOffUnitCsReq => "CmdRogueMagicScepterTakeOffUnitCsReq",
            Self::ScepterDressInUnitCsReq => "CmdRogueMagicScepterDressInUnitCsReq",
            Self::ScepterDressInUnitScRsp => "CmdRogueMagicScepterDressInUnitScRsp",
            Self::AreaUpdateScNotify => "CmdRogueMagicAreaUpdateScNotify",
            Self::AutoDressInMagicUnitChangeScNotify => {
                "CmdRogueMagicAutoDressInMagicUnitChangeScNotify"
            }
            Self::SettleCsReq => "CmdRogueMagicSettleCsReq",
            Self::ScepterTakeOffUnitScRsp => "CmdRogueMagicScepterTakeOffUnitScRsp",
            Self::QueryCsReq => "CmdRogueMagicQueryCsReq",
            Self::EnterLayerCsReq => "CmdRogueMagicEnterLayerCsReq",
            Self::EnterLayerScRsp => "CmdRogueMagicEnterLayerScRsp",
            Self::EnterRoomCsReq => "CmdRogueMagicEnterRoomCsReq",
            Self::AutoDressInUnitCsReq => "CmdRogueMagicAutoDressInUnitCsReq",
            Self::EnterScRsp => "CmdRogueMagicEnterScRsp",
            Self::UnitComposeScRsp => "CmdRogueMagicUnitComposeScRsp",
            Self::EnableTalentScRsp => "CmdRogueMagicEnableTalentScRsp",
            Self::StartCsReq => "CmdRogueMagicStartCsReq",
            Self::GetMiscRealTimeDataCsReq => "CmdRogueMagicGetMiscRealTimeDataCsReq",
            Self::ReviveCostUpdateScNotify => "CmdRogueMagicReviveCostUpdateScNotify",
            Self::StoryInfoUpdateScNotify => "CmdRogueMagicStoryInfoUpdateScNotify",
            Self::LeaveScRsp => "CmdRogueMagicLeaveScRsp",
            Self::BattleFailSettleInfoScNotify => {
                "CmdRogueMagicBattleFailSettleInfoScNotify"
            }
            Self::SettleScRsp => "CmdRogueMagicSettleScRsp",
            Self::GetMiscRealTimeDataScRsp => "CmdRogueMagicGetMiscRealTimeDataScRsp",
            Self::AutoDressInUnitScRsp => "CmdRogueMagicAutoDressInUnitScRsp",
            Self::ReviveAvatarScRsp => "CmdRogueMagicReviveAvatarScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueMagicNone" => Some(Self::None),
            "CmdRogueMagicUnitReforgeCsReq" => Some(Self::UnitReforgeCsReq),
            "CmdRogueMagicLeaveCsReq" => Some(Self::LeaveCsReq),
            "CmdRogueMagicSetAutoDressInMagicUnitScRsp" => {
                Some(Self::SetAutoDressInMagicUnitScRsp)
            }
            "CmdRogueMagicUnitReforgeScRsp" => Some(Self::UnitReforgeScRsp),
            "CmdRogueMagicEnterRoomScRsp" => Some(Self::EnterRoomScRsp),
            "CmdRogueMagicLevelInfoUpdateScNotify" => Some(Self::LevelInfoUpdateScNotify),
            "CmdRogueMagicUnitComposeCsReq" => Some(Self::UnitComposeCsReq),
            "CmdRogueMagicReviveAvatarCsReq" => Some(Self::ReviveAvatarCsReq),
            "CmdRogueMagicSetAutoDressInMagicUnitCsReq" => {
                Some(Self::SetAutoDressInMagicUnitCsReq)
            }
            "CmdRogueMagicQueryScRsp" => Some(Self::QueryScRsp),
            "CmdRogueMagicEnableTalentCsReq" => Some(Self::EnableTalentCsReq),
            "CmdRogueMagicEnterCsReq" => Some(Self::EnterCsReq),
            "CmdRogueMagicGetTalentInfoCsReq" => Some(Self::GetTalentInfoCsReq),
            "CmdRogueMagicStartScRsp" => Some(Self::StartScRsp),
            "CmdRogueMagicGetTalentInfoScRsp" => Some(Self::GetTalentInfoScRsp),
            "CmdRogueMagicScepterTakeOffUnitCsReq" => Some(Self::ScepterTakeOffUnitCsReq),
            "CmdRogueMagicScepterDressInUnitCsReq" => Some(Self::ScepterDressInUnitCsReq),
            "CmdRogueMagicScepterDressInUnitScRsp" => Some(Self::ScepterDressInUnitScRsp),
            "CmdRogueMagicAreaUpdateScNotify" => Some(Self::AreaUpdateScNotify),
            "CmdRogueMagicAutoDressInMagicUnitChangeScNotify" => {
                Some(Self::AutoDressInMagicUnitChangeScNotify)
            }
            "CmdRogueMagicSettleCsReq" => Some(Self::SettleCsReq),
            "CmdRogueMagicScepterTakeOffUnitScRsp" => Some(Self::ScepterTakeOffUnitScRsp),
            "CmdRogueMagicQueryCsReq" => Some(Self::QueryCsReq),
            "CmdRogueMagicEnterLayerCsReq" => Some(Self::EnterLayerCsReq),
            "CmdRogueMagicEnterLayerScRsp" => Some(Self::EnterLayerScRsp),
            "CmdRogueMagicEnterRoomCsReq" => Some(Self::EnterRoomCsReq),
            "CmdRogueMagicAutoDressInUnitCsReq" => Some(Self::AutoDressInUnitCsReq),
            "CmdRogueMagicEnterScRsp" => Some(Self::EnterScRsp),
            "CmdRogueMagicUnitComposeScRsp" => Some(Self::UnitComposeScRsp),
            "CmdRogueMagicEnableTalentScRsp" => Some(Self::EnableTalentScRsp),
            "CmdRogueMagicStartCsReq" => Some(Self::StartCsReq),
            "CmdRogueMagicGetMiscRealTimeDataCsReq" => {
                Some(Self::GetMiscRealTimeDataCsReq)
            }
            "CmdRogueMagicReviveCostUpdateScNotify" => {
                Some(Self::ReviveCostUpdateScNotify)
            }
            "CmdRogueMagicStoryInfoUpdateScNotify" => Some(Self::StoryInfoUpdateScNotify),
            "CmdRogueMagicLeaveScRsp" => Some(Self::LeaveScRsp),
            "CmdRogueMagicBattleFailSettleInfoScNotify" => {
                Some(Self::BattleFailSettleInfoScNotify)
            }
            "CmdRogueMagicSettleScRsp" => Some(Self::SettleScRsp),
            "CmdRogueMagicGetMiscRealTimeDataScRsp" => {
                Some(Self::GetMiscRealTimeDataScRsp)
            }
            "CmdRogueMagicAutoDressInUnitScRsp" => Some(Self::AutoDressInUnitScRsp),
            "CmdRogueMagicReviveAvatarScRsp" => Some(Self::ReviveAvatarScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oemkhnbecfc {
    RogueMagicLevelStatusNone = 0,
    RogueMagicLevelStatusProcessing = 1,
    RogueMagicLevelStatusFinished = 2,
    RogueMagicLevelStatusSettled = 3,
}
impl Oemkhnbecfc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicLevelStatusNone => "ROGUE_MAGIC_LEVEL_STATUS_NONE",
            Self::RogueMagicLevelStatusProcessing => {
                "ROGUE_MAGIC_LEVEL_STATUS_PROCESSING"
            }
            Self::RogueMagicLevelStatusFinished => "ROGUE_MAGIC_LEVEL_STATUS_FINISHED",
            Self::RogueMagicLevelStatusSettled => "ROGUE_MAGIC_LEVEL_STATUS_SETTLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_LEVEL_STATUS_NONE" => Some(Self::RogueMagicLevelStatusNone),
            "ROGUE_MAGIC_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueMagicLevelStatusProcessing)
            }
            "ROGUE_MAGIC_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueMagicLevelStatusFinished)
            }
            "ROGUE_MAGIC_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueMagicLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Abmepgcaplf {
    RogueMagicLayerStatusNone = 0,
    RogueMagicLayerStatusProcessing = 1,
    RogueMagicLayerStatusFinish = 2,
}
impl Abmepgcaplf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicLayerStatusNone => "ROGUE_MAGIC_LAYER_STATUS_NONE",
            Self::RogueMagicLayerStatusProcessing => {
                "ROGUE_MAGIC_LAYER_STATUS_PROCESSING"
            }
            Self::RogueMagicLayerStatusFinish => "ROGUE_MAGIC_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_LAYER_STATUS_NONE" => Some(Self::RogueMagicLayerStatusNone),
            "ROGUE_MAGIC_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueMagicLayerStatusProcessing)
            }
            "ROGUE_MAGIC_LAYER_STATUS_FINISH" => Some(Self::RogueMagicLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ekcmogegakp {
    RogueMagicRoomStatusNone = 0,
    RogueMagicRoomStatusInited = 1,
    RogueMagicRoomStatusProcessing = 2,
    RogueMagicRoomStatusFinish = 3,
}
impl Ekcmogegakp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicRoomStatusNone => "ROGUE_MAGIC_ROOM_STATUS_NONE",
            Self::RogueMagicRoomStatusInited => "ROGUE_MAGIC_ROOM_STATUS_INITED",
            Self::RogueMagicRoomStatusProcessing => "ROGUE_MAGIC_ROOM_STATUS_PROCESSING",
            Self::RogueMagicRoomStatusFinish => "ROGUE_MAGIC_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_ROOM_STATUS_NONE" => Some(Self::RogueMagicRoomStatusNone),
            "ROGUE_MAGIC_ROOM_STATUS_INITED" => Some(Self::RogueMagicRoomStatusInited),
            "ROGUE_MAGIC_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueMagicRoomStatusProcessing)
            }
            "ROGUE_MAGIC_ROOM_STATUS_FINISH" => Some(Self::RogueMagicRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Opieiimenkf {
    RogueMagicSettleReasonNone = 0,
    RogueMagicSettleReasonWin = 1,
    RogueMagicSettleReasonFail = 2,
    RogueMagicSettleReasonInterrupt = 3,
}
impl Opieiimenkf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicSettleReasonNone => "ROGUE_MAGIC_SETTLE_REASON_NONE",
            Self::RogueMagicSettleReasonWin => "ROGUE_MAGIC_SETTLE_REASON_WIN",
            Self::RogueMagicSettleReasonFail => "ROGUE_MAGIC_SETTLE_REASON_FAIL",
            Self::RogueMagicSettleReasonInterrupt => {
                "ROGUE_MAGIC_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_SETTLE_REASON_NONE" => Some(Self::RogueMagicSettleReasonNone),
            "ROGUE_MAGIC_SETTLE_REASON_WIN" => Some(Self::RogueMagicSettleReasonWin),
            "ROGUE_MAGIC_SETTLE_REASON_FAIL" => Some(Self::RogueMagicSettleReasonFail),
            "ROGUE_MAGIC_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueMagicSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
/// AIABJKPDKPN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueModifierType {
    None = 0,
    CmdRogueModifierAddNotify = 5384,
    CmdRogueModifierUpdateNotify = 5374,
    CmdRogueModifierSelectCellScRsp = 5367,
    CmdRogueModifierStageStartNotify = 5393,
    CmdRogueModifierDelNotify = 5324,
    CmdRogueModifierSelectCellCsReq = 5327,
}
impl CmdRogueModifierType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueModifierTypeNone",
            Self::CmdRogueModifierAddNotify => "CmdRogueModifierAddNotify",
            Self::CmdRogueModifierUpdateNotify => "CmdRogueModifierUpdateNotify",
            Self::CmdRogueModifierSelectCellScRsp => "CmdRogueModifierSelectCellScRsp",
            Self::CmdRogueModifierStageStartNotify => "CmdRogueModifierStageStartNotify",
            Self::CmdRogueModifierDelNotify => "CmdRogueModifierDelNotify",
            Self::CmdRogueModifierSelectCellCsReq => "CmdRogueModifierSelectCellCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueModifierTypeNone" => Some(Self::None),
            "CmdRogueModifierAddNotify" => Some(Self::CmdRogueModifierAddNotify),
            "CmdRogueModifierUpdateNotify" => Some(Self::CmdRogueModifierUpdateNotify),
            "CmdRogueModifierSelectCellScRsp" => {
                Some(Self::CmdRogueModifierSelectCellScRsp)
            }
            "CmdRogueModifierStageStartNotify" => {
                Some(Self::CmdRogueModifierStageStartNotify)
            }
            "CmdRogueModifierDelNotify" => Some(Self::CmdRogueModifierDelNotify),
            "CmdRogueModifierSelectCellCsReq" => {
                Some(Self::CmdRogueModifierSelectCellCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pjdemlinngf {
    RogueModifierSourceNone = 0,
    RogueModifierSourceDiceRoll = 1,
    RogueModifierSourceAeon = 2,
    RogueModifierSourceBoardEvent = 3,
    RogueModifierSourceDialogEvent = 4,
    RogueModifierSourceMiracle = 5,
    RogueModifierSourceCellMark = 6,
    RogueModifierSourceAeonTalent = 7,
    RogueModifierSourceBossDecay = 8,
    RogueModifierSourceDiceBranch = 9,
}
impl Pjdemlinngf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueModifierSourceNone => "ROGUE_MODIFIER_SOURCE_NONE",
            Self::RogueModifierSourceDiceRoll => "ROGUE_MODIFIER_SOURCE_DICE_ROLL",
            Self::RogueModifierSourceAeon => "ROGUE_MODIFIER_SOURCE_AEON",
            Self::RogueModifierSourceBoardEvent => "ROGUE_MODIFIER_SOURCE_BOARD_EVENT",
            Self::RogueModifierSourceDialogEvent => "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT",
            Self::RogueModifierSourceMiracle => "ROGUE_MODIFIER_SOURCE_MIRACLE",
            Self::RogueModifierSourceCellMark => "ROGUE_MODIFIER_SOURCE_CELL_MARK",
            Self::RogueModifierSourceAeonTalent => "ROGUE_MODIFIER_SOURCE_AEON_TALENT",
            Self::RogueModifierSourceBossDecay => "ROGUE_MODIFIER_SOURCE_BOSS_DECAY",
            Self::RogueModifierSourceDiceBranch => "ROGUE_MODIFIER_SOURCE_DICE_BRANCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_SOURCE_NONE" => Some(Self::RogueModifierSourceNone),
            "ROGUE_MODIFIER_SOURCE_DICE_ROLL" => Some(Self::RogueModifierSourceDiceRoll),
            "ROGUE_MODIFIER_SOURCE_AEON" => Some(Self::RogueModifierSourceAeon),
            "ROGUE_MODIFIER_SOURCE_BOARD_EVENT" => {
                Some(Self::RogueModifierSourceBoardEvent)
            }
            "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT" => {
                Some(Self::RogueModifierSourceDialogEvent)
            }
            "ROGUE_MODIFIER_SOURCE_MIRACLE" => Some(Self::RogueModifierSourceMiracle),
            "ROGUE_MODIFIER_SOURCE_CELL_MARK" => Some(Self::RogueModifierSourceCellMark),
            "ROGUE_MODIFIER_SOURCE_AEON_TALENT" => {
                Some(Self::RogueModifierSourceAeonTalent)
            }
            "ROGUE_MODIFIER_SOURCE_BOSS_DECAY" => {
                Some(Self::RogueModifierSourceBossDecay)
            }
            "ROGUE_MODIFIER_SOURCE_DICE_BRANCH" => {
                Some(Self::RogueModifierSourceDiceBranch)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oolllbpbiel {
    RogueModifierContentDefinite = 0,
    RogueModifierContentRandom = 1,
}
impl Oolllbpbiel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueModifierContentDefinite => "ROGUE_MODIFIER_CONTENT_DEFINITE",
            Self::RogueModifierContentRandom => "ROGUE_MODIFIER_CONTENT_RANDOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_CONTENT_DEFINITE" => Some(Self::RogueModifierContentDefinite),
            "ROGUE_MODIFIER_CONTENT_RANDOM" => Some(Self::RogueModifierContentRandom),
            _ => None,
        }
    }
}
/// KOBMPNNJHPL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueTournType {
    None = 0,
    CmdRogueTournDeleteArchiveScRsp = 6077,
    CmdRogueTournEnterRoomCsReq = 6044,
    CmdRogueTournStartScRsp = 6027,
    CmdRogueTournEnablePermanentTalentScRsp = 6045,
    CmdRogueTournGetArchiveRepositoryCsReq = 6043,
    CmdRogueTournReEnterRogueCocoonStageCsReq = 6082,
    CmdRogueTournResetPermanentTalentCsReq = 6020,
    CmdRogueTournGetSettleInfoScRsp = 6055,
    CmdRogueTournClearArchiveNameScNotify = 6068,
    CmdRogueTournGetAllArchiveScRsp = 6022,
    CmdRogueTournLeaveRogueCocoonSceneCsReq = 6028,
    CmdRogueTournEnterRogueCocoonSceneCsReq = 6057,
    CmdRogueTournQueryCsReq = 6053,
    CmdRogueTournDifficultyCompNotify = 6086,
    CmdRogueTournTakeExpRewardCsReq = 6023,
    CmdRogueTournResetPermanentTalentScRsp = 6015,
    CmdRogueTournGetArchiveRepositoryScRsp = 6026,
    CmdRogueTournEnterScRsp = 6069,
    CmdRogueTournTakeExpRewardScRsp = 6078,
    CmdRogueTournGetCurRogueCocoonInfoScRsp = 6092,
    CmdRogueTournGetSettleInfoCsReq = 6060,
    CmdRogueTournHandBookNotify = 6032,
    CmdRogueTournLeaveScRsp = 6097,
    CmdRogueTournWeekChallengeUpdateScNotify = 6050,
    CmdRogueTournReEnterRogueCocoonStageScRsp = 6083,
    CmdRogueTournBattleFailSettleInfoScNotify = 6018,
    CmdRogueTournGetMiscRealTimeDataCsReq = 6099,
    CmdRogueTournGetAllArchiveCsReq = 6037,
    CmdRogueTournEnterRoomScRsp = 6036,
    CmdRogueTournGetMiscRealTimeDataScRsp = 6040,
    CmdRogueTournSettleScRsp = 6074,
    CmdRogueTournEnterCsReq = 6100,
    CmdRogueTournLevelInfoUpdateScNotify = 6029,
    CmdRogueTournEnablePermanentTalentCsReq = 6089,
    CmdRogueTournSettleCsReq = 6075,
    CmdRogueTournGetCurRogueCocoonInfoCsReq = 6094,
    CmdRogueTournGetPermanentTalentInfoCsReq = 6058,
    CmdRogueTournGetPermanentTalentInfoScRsp = 6046,
    CmdRogueTournExpNotify = 6051,
    CmdRogueTournReviveAvatarScRsp = 6079,
    CmdRogueTournConfirmSettleScRsp = 6013,
    CmdRogueTournConfirmSettleCsReq = 6085,
    CmdRogueTournDeleteArchiveCsReq = 6070,
    CmdRogueTournLeaveRogueCocoonSceneScRsp = 6021,
    CmdRogueTournEnterRogueCocoonSceneScRsp = 6065,
    CmdRogueTournQueryScRsp = 6093,
    CmdRogueTournLeaveCsReq = 6047,
    CmdRogueTournRenameArchiveScRsp = 6031,
    CmdRogueTournEnterLayerScRsp = 6038,
    CmdRogueTournStartCsReq = 6059,
    CmdRogueTournReviveAvatarCsReq = 6063,
    CmdRogueTournRenameArchiveCsReq = 6090,
    CmdRogueTournAreaUpdateScNotify = 6080,
    CmdRogueTournReviveCostUpdateScNotify = 6039,
    CmdRogueTournEnterLayerCsReq = 6095,
}
impl CmdRogueTournType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueTournTypeNone",
            Self::CmdRogueTournDeleteArchiveScRsp => "CmdRogueTournDeleteArchiveScRsp",
            Self::CmdRogueTournEnterRoomCsReq => "CmdRogueTournEnterRoomCsReq",
            Self::CmdRogueTournStartScRsp => "CmdRogueTournStartScRsp",
            Self::CmdRogueTournEnablePermanentTalentScRsp => {
                "CmdRogueTournEnablePermanentTalentScRsp"
            }
            Self::CmdRogueTournGetArchiveRepositoryCsReq => {
                "CmdRogueTournGetArchiveRepositoryCsReq"
            }
            Self::CmdRogueTournReEnterRogueCocoonStageCsReq => {
                "CmdRogueTournReEnterRogueCocoonStageCsReq"
            }
            Self::CmdRogueTournResetPermanentTalentCsReq => {
                "CmdRogueTournResetPermanentTalentCsReq"
            }
            Self::CmdRogueTournGetSettleInfoScRsp => "CmdRogueTournGetSettleInfoScRsp",
            Self::CmdRogueTournClearArchiveNameScNotify => {
                "CmdRogueTournClearArchiveNameScNotify"
            }
            Self::CmdRogueTournGetAllArchiveScRsp => "CmdRogueTournGetAllArchiveScRsp",
            Self::CmdRogueTournLeaveRogueCocoonSceneCsReq => {
                "CmdRogueTournLeaveRogueCocoonSceneCsReq"
            }
            Self::CmdRogueTournEnterRogueCocoonSceneCsReq => {
                "CmdRogueTournEnterRogueCocoonSceneCsReq"
            }
            Self::CmdRogueTournQueryCsReq => "CmdRogueTournQueryCsReq",
            Self::CmdRogueTournDifficultyCompNotify => {
                "CmdRogueTournDifficultyCompNotify"
            }
            Self::CmdRogueTournTakeExpRewardCsReq => "CmdRogueTournTakeExpRewardCsReq",
            Self::CmdRogueTournResetPermanentTalentScRsp => {
                "CmdRogueTournResetPermanentTalentScRsp"
            }
            Self::CmdRogueTournGetArchiveRepositoryScRsp => {
                "CmdRogueTournGetArchiveRepositoryScRsp"
            }
            Self::CmdRogueTournEnterScRsp => "CmdRogueTournEnterScRsp",
            Self::CmdRogueTournTakeExpRewardScRsp => "CmdRogueTournTakeExpRewardScRsp",
            Self::CmdRogueTournGetCurRogueCocoonInfoScRsp => {
                "CmdRogueTournGetCurRogueCocoonInfoScRsp"
            }
            Self::CmdRogueTournGetSettleInfoCsReq => "CmdRogueTournGetSettleInfoCsReq",
            Self::CmdRogueTournHandBookNotify => "CmdRogueTournHandBookNotify",
            Self::CmdRogueTournLeaveScRsp => "CmdRogueTournLeaveScRsp",
            Self::CmdRogueTournWeekChallengeUpdateScNotify => {
                "CmdRogueTournWeekChallengeUpdateScNotify"
            }
            Self::CmdRogueTournReEnterRogueCocoonStageScRsp => {
                "CmdRogueTournReEnterRogueCocoonStageScRsp"
            }
            Self::CmdRogueTournBattleFailSettleInfoScNotify => {
                "CmdRogueTournBattleFailSettleInfoScNotify"
            }
            Self::CmdRogueTournGetMiscRealTimeDataCsReq => {
                "CmdRogueTournGetMiscRealTimeDataCsReq"
            }
            Self::CmdRogueTournGetAllArchiveCsReq => "CmdRogueTournGetAllArchiveCsReq",
            Self::CmdRogueTournEnterRoomScRsp => "CmdRogueTournEnterRoomScRsp",
            Self::CmdRogueTournGetMiscRealTimeDataScRsp => {
                "CmdRogueTournGetMiscRealTimeDataScRsp"
            }
            Self::CmdRogueTournSettleScRsp => "CmdRogueTournSettleScRsp",
            Self::CmdRogueTournEnterCsReq => "CmdRogueTournEnterCsReq",
            Self::CmdRogueTournLevelInfoUpdateScNotify => {
                "CmdRogueTournLevelInfoUpdateScNotify"
            }
            Self::CmdRogueTournEnablePermanentTalentCsReq => {
                "CmdRogueTournEnablePermanentTalentCsReq"
            }
            Self::CmdRogueTournSettleCsReq => "CmdRogueTournSettleCsReq",
            Self::CmdRogueTournGetCurRogueCocoonInfoCsReq => {
                "CmdRogueTournGetCurRogueCocoonInfoCsReq"
            }
            Self::CmdRogueTournGetPermanentTalentInfoCsReq => {
                "CmdRogueTournGetPermanentTalentInfoCsReq"
            }
            Self::CmdRogueTournGetPermanentTalentInfoScRsp => {
                "CmdRogueTournGetPermanentTalentInfoScRsp"
            }
            Self::CmdRogueTournExpNotify => "CmdRogueTournExpNotify",
            Self::CmdRogueTournReviveAvatarScRsp => "CmdRogueTournReviveAvatarScRsp",
            Self::CmdRogueTournConfirmSettleScRsp => "CmdRogueTournConfirmSettleScRsp",
            Self::CmdRogueTournConfirmSettleCsReq => "CmdRogueTournConfirmSettleCsReq",
            Self::CmdRogueTournDeleteArchiveCsReq => "CmdRogueTournDeleteArchiveCsReq",
            Self::CmdRogueTournLeaveRogueCocoonSceneScRsp => {
                "CmdRogueTournLeaveRogueCocoonSceneScRsp"
            }
            Self::CmdRogueTournEnterRogueCocoonSceneScRsp => {
                "CmdRogueTournEnterRogueCocoonSceneScRsp"
            }
            Self::CmdRogueTournQueryScRsp => "CmdRogueTournQueryScRsp",
            Self::CmdRogueTournLeaveCsReq => "CmdRogueTournLeaveCsReq",
            Self::CmdRogueTournRenameArchiveScRsp => "CmdRogueTournRenameArchiveScRsp",
            Self::CmdRogueTournEnterLayerScRsp => "CmdRogueTournEnterLayerScRsp",
            Self::CmdRogueTournStartCsReq => "CmdRogueTournStartCsReq",
            Self::CmdRogueTournReviveAvatarCsReq => "CmdRogueTournReviveAvatarCsReq",
            Self::CmdRogueTournRenameArchiveCsReq => "CmdRogueTournRenameArchiveCsReq",
            Self::CmdRogueTournAreaUpdateScNotify => "CmdRogueTournAreaUpdateScNotify",
            Self::CmdRogueTournReviveCostUpdateScNotify => {
                "CmdRogueTournReviveCostUpdateScNotify"
            }
            Self::CmdRogueTournEnterLayerCsReq => "CmdRogueTournEnterLayerCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTournTypeNone" => Some(Self::None),
            "CmdRogueTournDeleteArchiveScRsp" => {
                Some(Self::CmdRogueTournDeleteArchiveScRsp)
            }
            "CmdRogueTournEnterRoomCsReq" => Some(Self::CmdRogueTournEnterRoomCsReq),
            "CmdRogueTournStartScRsp" => Some(Self::CmdRogueTournStartScRsp),
            "CmdRogueTournEnablePermanentTalentScRsp" => {
                Some(Self::CmdRogueTournEnablePermanentTalentScRsp)
            }
            "CmdRogueTournGetArchiveRepositoryCsReq" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryCsReq)
            }
            "CmdRogueTournReEnterRogueCocoonStageCsReq" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageCsReq)
            }
            "CmdRogueTournResetPermanentTalentCsReq" => {
                Some(Self::CmdRogueTournResetPermanentTalentCsReq)
            }
            "CmdRogueTournGetSettleInfoScRsp" => {
                Some(Self::CmdRogueTournGetSettleInfoScRsp)
            }
            "CmdRogueTournClearArchiveNameScNotify" => {
                Some(Self::CmdRogueTournClearArchiveNameScNotify)
            }
            "CmdRogueTournGetAllArchiveScRsp" => {
                Some(Self::CmdRogueTournGetAllArchiveScRsp)
            }
            "CmdRogueTournLeaveRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneCsReq)
            }
            "CmdRogueTournEnterRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneCsReq)
            }
            "CmdRogueTournQueryCsReq" => Some(Self::CmdRogueTournQueryCsReq),
            "CmdRogueTournDifficultyCompNotify" => {
                Some(Self::CmdRogueTournDifficultyCompNotify)
            }
            "CmdRogueTournTakeExpRewardCsReq" => {
                Some(Self::CmdRogueTournTakeExpRewardCsReq)
            }
            "CmdRogueTournResetPermanentTalentScRsp" => {
                Some(Self::CmdRogueTournResetPermanentTalentScRsp)
            }
            "CmdRogueTournGetArchiveRepositoryScRsp" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryScRsp)
            }
            "CmdRogueTournEnterScRsp" => Some(Self::CmdRogueTournEnterScRsp),
            "CmdRogueTournTakeExpRewardScRsp" => {
                Some(Self::CmdRogueTournTakeExpRewardScRsp)
            }
            "CmdRogueTournGetCurRogueCocoonInfoScRsp" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoScRsp)
            }
            "CmdRogueTournGetSettleInfoCsReq" => {
                Some(Self::CmdRogueTournGetSettleInfoCsReq)
            }
            "CmdRogueTournHandBookNotify" => Some(Self::CmdRogueTournHandBookNotify),
            "CmdRogueTournLeaveScRsp" => Some(Self::CmdRogueTournLeaveScRsp),
            "CmdRogueTournWeekChallengeUpdateScNotify" => {
                Some(Self::CmdRogueTournWeekChallengeUpdateScNotify)
            }
            "CmdRogueTournReEnterRogueCocoonStageScRsp" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageScRsp)
            }
            "CmdRogueTournBattleFailSettleInfoScNotify" => {
                Some(Self::CmdRogueTournBattleFailSettleInfoScNotify)
            }
            "CmdRogueTournGetMiscRealTimeDataCsReq" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataCsReq)
            }
            "CmdRogueTournGetAllArchiveCsReq" => {
                Some(Self::CmdRogueTournGetAllArchiveCsReq)
            }
            "CmdRogueTournEnterRoomScRsp" => Some(Self::CmdRogueTournEnterRoomScRsp),
            "CmdRogueTournGetMiscRealTimeDataScRsp" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataScRsp)
            }
            "CmdRogueTournSettleScRsp" => Some(Self::CmdRogueTournSettleScRsp),
            "CmdRogueTournEnterCsReq" => Some(Self::CmdRogueTournEnterCsReq),
            "CmdRogueTournLevelInfoUpdateScNotify" => {
                Some(Self::CmdRogueTournLevelInfoUpdateScNotify)
            }
            "CmdRogueTournEnablePermanentTalentCsReq" => {
                Some(Self::CmdRogueTournEnablePermanentTalentCsReq)
            }
            "CmdRogueTournSettleCsReq" => Some(Self::CmdRogueTournSettleCsReq),
            "CmdRogueTournGetCurRogueCocoonInfoCsReq" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoCsReq)
            }
            "CmdRogueTournGetPermanentTalentInfoCsReq" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoCsReq)
            }
            "CmdRogueTournGetPermanentTalentInfoScRsp" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoScRsp)
            }
            "CmdRogueTournExpNotify" => Some(Self::CmdRogueTournExpNotify),
            "CmdRogueTournReviveAvatarScRsp" => {
                Some(Self::CmdRogueTournReviveAvatarScRsp)
            }
            "CmdRogueTournConfirmSettleScRsp" => {
                Some(Self::CmdRogueTournConfirmSettleScRsp)
            }
            "CmdRogueTournConfirmSettleCsReq" => {
                Some(Self::CmdRogueTournConfirmSettleCsReq)
            }
            "CmdRogueTournDeleteArchiveCsReq" => {
                Some(Self::CmdRogueTournDeleteArchiveCsReq)
            }
            "CmdRogueTournLeaveRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneScRsp)
            }
            "CmdRogueTournEnterRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneScRsp)
            }
            "CmdRogueTournQueryScRsp" => Some(Self::CmdRogueTournQueryScRsp),
            "CmdRogueTournLeaveCsReq" => Some(Self::CmdRogueTournLeaveCsReq),
            "CmdRogueTournRenameArchiveScRsp" => {
                Some(Self::CmdRogueTournRenameArchiveScRsp)
            }
            "CmdRogueTournEnterLayerScRsp" => Some(Self::CmdRogueTournEnterLayerScRsp),
            "CmdRogueTournStartCsReq" => Some(Self::CmdRogueTournStartCsReq),
            "CmdRogueTournReviveAvatarCsReq" => {
                Some(Self::CmdRogueTournReviveAvatarCsReq)
            }
            "CmdRogueTournRenameArchiveCsReq" => {
                Some(Self::CmdRogueTournRenameArchiveCsReq)
            }
            "CmdRogueTournAreaUpdateScNotify" => {
                Some(Self::CmdRogueTournAreaUpdateScNotify)
            }
            "CmdRogueTournReviveCostUpdateScNotify" => {
                Some(Self::CmdRogueTournReviveCostUpdateScNotify)
            }
            "CmdRogueTournEnterLayerCsReq" => Some(Self::CmdRogueTournEnterLayerCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kkadggcjbhn {
    RogueTournLevelStatusNone = 0,
    RogueTournLevelStatusProcessing = 1,
    RogueTournLevelStatusFinished = 2,
    RogueTournLevelStatusSettled = 3,
}
impl Kkadggcjbhn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournLevelStatusNone => "ROGUE_TOURN_LEVEL_STATUS_NONE",
            Self::RogueTournLevelStatusProcessing => {
                "ROGUE_TOURN_LEVEL_STATUS_PROCESSING"
            }
            Self::RogueTournLevelStatusFinished => "ROGUE_TOURN_LEVEL_STATUS_FINISHED",
            Self::RogueTournLevelStatusSettled => "ROGUE_TOURN_LEVEL_STATUS_SETTLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LEVEL_STATUS_NONE" => Some(Self::RogueTournLevelStatusNone),
            "ROGUE_TOURN_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueTournLevelStatusProcessing)
            }
            "ROGUE_TOURN_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueTournLevelStatusFinished)
            }
            "ROGUE_TOURN_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueTournLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ecjmdmnmjmf {
    RogueTournLayerStatusNone = 0,
    RogueTournLayerStatusProcessing = 1,
    RogueTournLayerStatusFinish = 2,
}
impl Ecjmdmnmjmf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournLayerStatusNone => "ROGUE_TOURN_LAYER_STATUS_NONE",
            Self::RogueTournLayerStatusProcessing => {
                "ROGUE_TOURN_LAYER_STATUS_PROCESSING"
            }
            Self::RogueTournLayerStatusFinish => "ROGUE_TOURN_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LAYER_STATUS_NONE" => Some(Self::RogueTournLayerStatusNone),
            "ROGUE_TOURN_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueTournLayerStatusProcessing)
            }
            "ROGUE_TOURN_LAYER_STATUS_FINISH" => Some(Self::RogueTournLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pdbdhhciaam {
    RogueTournRoomStatusNone = 0,
    RogueTournRoomStatusInited = 1,
    RogueTournRoomStatusProcessing = 2,
    RogueTournRoomStatusFinish = 3,
}
impl Pdbdhhciaam {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournRoomStatusNone => "ROGUE_TOURN_ROOM_STATUS_NONE",
            Self::RogueTournRoomStatusInited => "ROGUE_TOURN_ROOM_STATUS_INITED",
            Self::RogueTournRoomStatusProcessing => "ROGUE_TOURN_ROOM_STATUS_PROCESSING",
            Self::RogueTournRoomStatusFinish => "ROGUE_TOURN_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_ROOM_STATUS_NONE" => Some(Self::RogueTournRoomStatusNone),
            "ROGUE_TOURN_ROOM_STATUS_INITED" => Some(Self::RogueTournRoomStatusInited),
            "ROGUE_TOURN_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueTournRoomStatusProcessing)
            }
            "ROGUE_TOURN_ROOM_STATUS_FINISH" => Some(Self::RogueTournRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lkoilbgbkem {
    RogueTournSettleReasonNone = 0,
    RogueTournSettleReasonWin = 1,
    RogueTournSettleReasonFail = 2,
    RogueTournSettleReasonInterrupt = 3,
}
impl Lkoilbgbkem {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournSettleReasonNone => "ROGUE_TOURN_SETTLE_REASON_NONE",
            Self::RogueTournSettleReasonWin => "ROGUE_TOURN_SETTLE_REASON_WIN",
            Self::RogueTournSettleReasonFail => "ROGUE_TOURN_SETTLE_REASON_FAIL",
            Self::RogueTournSettleReasonInterrupt => {
                "ROGUE_TOURN_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_SETTLE_REASON_NONE" => Some(Self::RogueTournSettleReasonNone),
            "ROGUE_TOURN_SETTLE_REASON_WIN" => Some(Self::RogueTournSettleReasonWin),
            "ROGUE_TOURN_SETTLE_REASON_FAIL" => Some(Self::RogueTournSettleReasonFail),
            "ROGUE_TOURN_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueTournSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mdlbadpphih {
    RogueTournHandbookNone = 0,
    RogueTournHandbookSimpleMiracle = 1,
    RogueTournHandbookHexMiracle = 2,
    RogueTournHandbookBuff = 3,
    RogueTournHandbookEvent = 4,
    RogueTournHandbookFormula = 5,
}
impl Mdlbadpphih {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournHandbookNone => "ROGUE_TOURN_HANDBOOK_NONE",
            Self::RogueTournHandbookSimpleMiracle => {
                "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE"
            }
            Self::RogueTournHandbookHexMiracle => "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE",
            Self::RogueTournHandbookBuff => "ROGUE_TOURN_HANDBOOK_BUFF",
            Self::RogueTournHandbookEvent => "ROGUE_TOURN_HANDBOOK_EVENT",
            Self::RogueTournHandbookFormula => "ROGUE_TOURN_HANDBOOK_FORMULA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_HANDBOOK_NONE" => Some(Self::RogueTournHandbookNone),
            "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE" => {
                Some(Self::RogueTournHandbookSimpleMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE" => {
                Some(Self::RogueTournHandbookHexMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_BUFF" => Some(Self::RogueTournHandbookBuff),
            "ROGUE_TOURN_HANDBOOK_EVENT" => Some(Self::RogueTournHandbookEvent),
            "ROGUE_TOURN_HANDBOOK_FORMULA" => Some(Self::RogueTournHandbookFormula),
            _ => None,
        }
    }
}
/// HAONOMALKLK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRollShopType {
    None = 0,
    CmdTakeRollShopRewardCsReq = 6917,
    CmdDoGachaInRollShopScRsp = 6903,
    CmdDoGachaInRollShopCsReq = 6907,
    CmdTakeRollShopRewardScRsp = 6906,
    CmdGetRollShopInfoScRsp = 6915,
    CmdGetRollShopInfoCsReq = 6920,
}
impl CmdRollShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRollShopTypeNone",
            Self::CmdTakeRollShopRewardCsReq => "CmdTakeRollShopRewardCsReq",
            Self::CmdDoGachaInRollShopScRsp => "CmdDoGachaInRollShopScRsp",
            Self::CmdDoGachaInRollShopCsReq => "CmdDoGachaInRollShopCsReq",
            Self::CmdTakeRollShopRewardScRsp => "CmdTakeRollShopRewardScRsp",
            Self::CmdGetRollShopInfoScRsp => "CmdGetRollShopInfoScRsp",
            Self::CmdGetRollShopInfoCsReq => "CmdGetRollShopInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRollShopTypeNone" => Some(Self::None),
            "CmdTakeRollShopRewardCsReq" => Some(Self::CmdTakeRollShopRewardCsReq),
            "CmdDoGachaInRollShopScRsp" => Some(Self::CmdDoGachaInRollShopScRsp),
            "CmdDoGachaInRollShopCsReq" => Some(Self::CmdDoGachaInRollShopCsReq),
            "CmdTakeRollShopRewardScRsp" => Some(Self::CmdTakeRollShopRewardScRsp),
            "CmdGetRollShopInfoScRsp" => Some(Self::CmdGetRollShopInfoScRsp),
            "CmdGetRollShopInfoCsReq" => Some(Self::CmdGetRollShopInfoCsReq),
            _ => None,
        }
    }
}
/// JIFMMOBPHOE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSceneType {
    None = 0,
    CmdEnterSectionScRsp = 1448,
    CmdGameplayCounterRecoverCsReq = 1482,
    CmdStartCocoonStageCsReq = 1413,
    CmdGameplayCounterCountDownCsReq = 1409,
    CmdSceneEntityTeleportCsReq = 1483,
    CmdRefreshTriggerByClientCsReq = 1415,
    CmdRefreshTriggerByClientScNotify = 1462,
    CmdSceneEntityMoveCsReq = 1436,
    CmdGetCurSceneInfoScRsp = 1474,
    CmdChangePropTimelineInfoCsReq = 1424,
    CmdGameplayCounterCountDownScRsp = 1420,
    CmdInteractPropCsReq = 1484,
    CmdGetUnlockTeleportScRsp = 1423,
    CmdGetSceneMapInfoScRsp = 1498,
    CmdRecoverAllLineupScRsp = 1473,
    CmdUnlockTeleportNotify = 1414,
    CmdSceneCastSkillCostMpCsReq = 1425,
    CmdSceneCastSkillMpUpdateScNotify = 1405,
    CmdScenePlaneEventScNotify = 1449,
    CmdSetCurInteractEntityCsReq = 1410,
    CmdSceneEntityMoveScRsp = 1495,
    CmdSetClientPausedCsReq = 1418,
    CmdSceneCastSkillScRsp = 1428,
    CmdSceneGroupRefreshScNotify = 1432,
    CmdActivateFarmElementScRsp = 1455,
    CmdSceneCastSkillCsReq = 1467,
    CmdDeleteSummonUnitScRsp = 1406,
    CmdSceneEntityMoveScNotify = 1434,
    CmdUpdateFloorSavedValueNotify = 1456,
    CmdUnlockedAreaMapScNotify = 1471,
    CmdGameplayCounterUpdateScNotify = 1401,
    CmdReEnterLastElementStageScRsp = 1497,
    CmdSavePointsInfoNotify = 1417,
    CmdEnterSectionCsReq = 1450,
    CmdSceneEntityTeleportScRsp = 1468,
    CmdSceneEnterStageScRsp = 1412,
    CmdSetGroupCustomSaveDataScRsp = 1440,
    CmdUpdateMechanismBarScNotify = 1499,
    CmdReturnLastTownScRsp = 1490,
    CmdSetClientPausedScRsp = 1437,
    CmdReturnLastTownCsReq = 1453,
    CmdGroupStateChangeCsReq = 1438,
    CmdReEnterLastElementStageCsReq = 1433,
    CmdStartCocoonStageScRsp = 1421,
    CmdEntityBindPropScRsp = 1408,
    CmdEnterSceneScRsp = 1416,
    CmdGetSceneMapInfoCsReq = 1470,
    CmdInteractPropScRsp = 1427,
    CmdSyncEntityBuffChangeListScNotify = 1446,
    CmdUpdateGroupPropertyScRsp = 1442,
    CmdSpringRefreshCsReq = 1419,
    CmdSceneReviveAfterRebattleCsReq = 1478,
    CmdSetCurInteractEntityScRsp = 1476,
    CmdSetGroupCustomSaveDataCsReq = 1403,
    CmdUpdateGroupPropertyCsReq = 1451,
    CmdSyncServerSceneChangeNotify = 1491,
    CmdRecoverAllLineupCsReq = 1435,
    CmdGroupStateChangeScNotify = 1486,
    CmdSceneReviveAfterRebattleScRsp = 1429,
    CmdDeleteSummonUnitCsReq = 1402,
    CmdEnterSceneByServerScNotify = 1447,
    CmdGroupStateChangeScRsp = 1487,
    CmdSceneCastSkillCostMpScRsp = 1496,
    CmdSpringRefreshScRsp = 1426,
    CmdSceneEnterStageCsReq = 1459,
    CmdOpenChestScNotify = 1469,
    CmdGetCurSceneInfoCsReq = 1452,
    CmdDeactivateFarmElementCsReq = 1479,
    CmdRefreshTriggerByClientScRsp = 1485,
    CmdGetEnteredSceneCsReq = 1466,
    CmdDeactivateFarmElementScRsp = 1481,
    CmdActivateFarmElementCsReq = 1439,
    CmdEnterSceneCsReq = 1457,
    CmdGetUnlockTeleportCsReq = 1444,
    CmdChangePropTimelineInfoScRsp = 1493,
    CmdEnteredSceneChangeScNotify = 1489,
    CmdLastSpringRefreshTimeNotify = 1407,
    CmdGameplayCounterRecoverScRsp = 1480,
    CmdEntityBindPropCsReq = 1465,
    CmdSceneUpdatePositionVersionNotify = 1443,
    CmdGetEnteredSceneScRsp = 1463,
}
impl CmdSceneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSceneTypeNone",
            Self::CmdEnterSectionScRsp => "CmdEnterSectionScRsp",
            Self::CmdGameplayCounterRecoverCsReq => "CmdGameplayCounterRecoverCsReq",
            Self::CmdStartCocoonStageCsReq => "CmdStartCocoonStageCsReq",
            Self::CmdGameplayCounterCountDownCsReq => "CmdGameplayCounterCountDownCsReq",
            Self::CmdSceneEntityTeleportCsReq => "CmdSceneEntityTeleportCsReq",
            Self::CmdRefreshTriggerByClientCsReq => "CmdRefreshTriggerByClientCsReq",
            Self::CmdRefreshTriggerByClientScNotify => {
                "CmdRefreshTriggerByClientScNotify"
            }
            Self::CmdSceneEntityMoveCsReq => "CmdSceneEntityMoveCsReq",
            Self::CmdGetCurSceneInfoScRsp => "CmdGetCurSceneInfoScRsp",
            Self::CmdChangePropTimelineInfoCsReq => "CmdChangePropTimelineInfoCsReq",
            Self::CmdGameplayCounterCountDownScRsp => "CmdGameplayCounterCountDownScRsp",
            Self::CmdInteractPropCsReq => "CmdInteractPropCsReq",
            Self::CmdGetUnlockTeleportScRsp => "CmdGetUnlockTeleportScRsp",
            Self::CmdGetSceneMapInfoScRsp => "CmdGetSceneMapInfoScRsp",
            Self::CmdRecoverAllLineupScRsp => "CmdRecoverAllLineupScRsp",
            Self::CmdUnlockTeleportNotify => "CmdUnlockTeleportNotify",
            Self::CmdSceneCastSkillCostMpCsReq => "CmdSceneCastSkillCostMpCsReq",
            Self::CmdSceneCastSkillMpUpdateScNotify => {
                "CmdSceneCastSkillMpUpdateScNotify"
            }
            Self::CmdScenePlaneEventScNotify => "CmdScenePlaneEventScNotify",
            Self::CmdSetCurInteractEntityCsReq => "CmdSetCurInteractEntityCsReq",
            Self::CmdSceneEntityMoveScRsp => "CmdSceneEntityMoveScRsp",
            Self::CmdSetClientPausedCsReq => "CmdSetClientPausedCsReq",
            Self::CmdSceneCastSkillScRsp => "CmdSceneCastSkillScRsp",
            Self::CmdSceneGroupRefreshScNotify => "CmdSceneGroupRefreshScNotify",
            Self::CmdActivateFarmElementScRsp => "CmdActivateFarmElementScRsp",
            Self::CmdSceneCastSkillCsReq => "CmdSceneCastSkillCsReq",
            Self::CmdDeleteSummonUnitScRsp => "CmdDeleteSummonUnitScRsp",
            Self::CmdSceneEntityMoveScNotify => "CmdSceneEntityMoveScNotify",
            Self::CmdUpdateFloorSavedValueNotify => "CmdUpdateFloorSavedValueNotify",
            Self::CmdUnlockedAreaMapScNotify => "CmdUnlockedAreaMapScNotify",
            Self::CmdGameplayCounterUpdateScNotify => "CmdGameplayCounterUpdateScNotify",
            Self::CmdReEnterLastElementStageScRsp => "CmdReEnterLastElementStageScRsp",
            Self::CmdSavePointsInfoNotify => "CmdSavePointsInfoNotify",
            Self::CmdEnterSectionCsReq => "CmdEnterSectionCsReq",
            Self::CmdSceneEntityTeleportScRsp => "CmdSceneEntityTeleportScRsp",
            Self::CmdSceneEnterStageScRsp => "CmdSceneEnterStageScRsp",
            Self::CmdSetGroupCustomSaveDataScRsp => "CmdSetGroupCustomSaveDataScRsp",
            Self::CmdUpdateMechanismBarScNotify => "CmdUpdateMechanismBarScNotify",
            Self::CmdReturnLastTownScRsp => "CmdReturnLastTownScRsp",
            Self::CmdSetClientPausedScRsp => "CmdSetClientPausedScRsp",
            Self::CmdReturnLastTownCsReq => "CmdReturnLastTownCsReq",
            Self::CmdGroupStateChangeCsReq => "CmdGroupStateChangeCsReq",
            Self::CmdReEnterLastElementStageCsReq => "CmdReEnterLastElementStageCsReq",
            Self::CmdStartCocoonStageScRsp => "CmdStartCocoonStageScRsp",
            Self::CmdEntityBindPropScRsp => "CmdEntityBindPropScRsp",
            Self::CmdEnterSceneScRsp => "CmdEnterSceneScRsp",
            Self::CmdGetSceneMapInfoCsReq => "CmdGetSceneMapInfoCsReq",
            Self::CmdInteractPropScRsp => "CmdInteractPropScRsp",
            Self::CmdSyncEntityBuffChangeListScNotify => {
                "CmdSyncEntityBuffChangeListScNotify"
            }
            Self::CmdUpdateGroupPropertyScRsp => "CmdUpdateGroupPropertyScRsp",
            Self::CmdSpringRefreshCsReq => "CmdSpringRefreshCsReq",
            Self::CmdSceneReviveAfterRebattleCsReq => "CmdSceneReviveAfterRebattleCsReq",
            Self::CmdSetCurInteractEntityScRsp => "CmdSetCurInteractEntityScRsp",
            Self::CmdSetGroupCustomSaveDataCsReq => "CmdSetGroupCustomSaveDataCsReq",
            Self::CmdUpdateGroupPropertyCsReq => "CmdUpdateGroupPropertyCsReq",
            Self::CmdSyncServerSceneChangeNotify => "CmdSyncServerSceneChangeNotify",
            Self::CmdRecoverAllLineupCsReq => "CmdRecoverAllLineupCsReq",
            Self::CmdGroupStateChangeScNotify => "CmdGroupStateChangeScNotify",
            Self::CmdSceneReviveAfterRebattleScRsp => "CmdSceneReviveAfterRebattleScRsp",
            Self::CmdDeleteSummonUnitCsReq => "CmdDeleteSummonUnitCsReq",
            Self::CmdEnterSceneByServerScNotify => "CmdEnterSceneByServerScNotify",
            Self::CmdGroupStateChangeScRsp => "CmdGroupStateChangeScRsp",
            Self::CmdSceneCastSkillCostMpScRsp => "CmdSceneCastSkillCostMpScRsp",
            Self::CmdSpringRefreshScRsp => "CmdSpringRefreshScRsp",
            Self::CmdSceneEnterStageCsReq => "CmdSceneEnterStageCsReq",
            Self::CmdOpenChestScNotify => "CmdOpenChestScNotify",
            Self::CmdGetCurSceneInfoCsReq => "CmdGetCurSceneInfoCsReq",
            Self::CmdDeactivateFarmElementCsReq => "CmdDeactivateFarmElementCsReq",
            Self::CmdRefreshTriggerByClientScRsp => "CmdRefreshTriggerByClientScRsp",
            Self::CmdGetEnteredSceneCsReq => "CmdGetEnteredSceneCsReq",
            Self::CmdDeactivateFarmElementScRsp => "CmdDeactivateFarmElementScRsp",
            Self::CmdActivateFarmElementCsReq => "CmdActivateFarmElementCsReq",
            Self::CmdEnterSceneCsReq => "CmdEnterSceneCsReq",
            Self::CmdGetUnlockTeleportCsReq => "CmdGetUnlockTeleportCsReq",
            Self::CmdChangePropTimelineInfoScRsp => "CmdChangePropTimelineInfoScRsp",
            Self::CmdEnteredSceneChangeScNotify => "CmdEnteredSceneChangeScNotify",
            Self::CmdLastSpringRefreshTimeNotify => "CmdLastSpringRefreshTimeNotify",
            Self::CmdGameplayCounterRecoverScRsp => "CmdGameplayCounterRecoverScRsp",
            Self::CmdEntityBindPropCsReq => "CmdEntityBindPropCsReq",
            Self::CmdSceneUpdatePositionVersionNotify => {
                "CmdSceneUpdatePositionVersionNotify"
            }
            Self::CmdGetEnteredSceneScRsp => "CmdGetEnteredSceneScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSceneTypeNone" => Some(Self::None),
            "CmdEnterSectionScRsp" => Some(Self::CmdEnterSectionScRsp),
            "CmdGameplayCounterRecoverCsReq" => {
                Some(Self::CmdGameplayCounterRecoverCsReq)
            }
            "CmdStartCocoonStageCsReq" => Some(Self::CmdStartCocoonStageCsReq),
            "CmdGameplayCounterCountDownCsReq" => {
                Some(Self::CmdGameplayCounterCountDownCsReq)
            }
            "CmdSceneEntityTeleportCsReq" => Some(Self::CmdSceneEntityTeleportCsReq),
            "CmdRefreshTriggerByClientCsReq" => {
                Some(Self::CmdRefreshTriggerByClientCsReq)
            }
            "CmdRefreshTriggerByClientScNotify" => {
                Some(Self::CmdRefreshTriggerByClientScNotify)
            }
            "CmdSceneEntityMoveCsReq" => Some(Self::CmdSceneEntityMoveCsReq),
            "CmdGetCurSceneInfoScRsp" => Some(Self::CmdGetCurSceneInfoScRsp),
            "CmdChangePropTimelineInfoCsReq" => {
                Some(Self::CmdChangePropTimelineInfoCsReq)
            }
            "CmdGameplayCounterCountDownScRsp" => {
                Some(Self::CmdGameplayCounterCountDownScRsp)
            }
            "CmdInteractPropCsReq" => Some(Self::CmdInteractPropCsReq),
            "CmdGetUnlockTeleportScRsp" => Some(Self::CmdGetUnlockTeleportScRsp),
            "CmdGetSceneMapInfoScRsp" => Some(Self::CmdGetSceneMapInfoScRsp),
            "CmdRecoverAllLineupScRsp" => Some(Self::CmdRecoverAllLineupScRsp),
            "CmdUnlockTeleportNotify" => Some(Self::CmdUnlockTeleportNotify),
            "CmdSceneCastSkillCostMpCsReq" => Some(Self::CmdSceneCastSkillCostMpCsReq),
            "CmdSceneCastSkillMpUpdateScNotify" => {
                Some(Self::CmdSceneCastSkillMpUpdateScNotify)
            }
            "CmdScenePlaneEventScNotify" => Some(Self::CmdScenePlaneEventScNotify),
            "CmdSetCurInteractEntityCsReq" => Some(Self::CmdSetCurInteractEntityCsReq),
            "CmdSceneEntityMoveScRsp" => Some(Self::CmdSceneEntityMoveScRsp),
            "CmdSetClientPausedCsReq" => Some(Self::CmdSetClientPausedCsReq),
            "CmdSceneCastSkillScRsp" => Some(Self::CmdSceneCastSkillScRsp),
            "CmdSceneGroupRefreshScNotify" => Some(Self::CmdSceneGroupRefreshScNotify),
            "CmdActivateFarmElementScRsp" => Some(Self::CmdActivateFarmElementScRsp),
            "CmdSceneCastSkillCsReq" => Some(Self::CmdSceneCastSkillCsReq),
            "CmdDeleteSummonUnitScRsp" => Some(Self::CmdDeleteSummonUnitScRsp),
            "CmdSceneEntityMoveScNotify" => Some(Self::CmdSceneEntityMoveScNotify),
            "CmdUpdateFloorSavedValueNotify" => {
                Some(Self::CmdUpdateFloorSavedValueNotify)
            }
            "CmdUnlockedAreaMapScNotify" => Some(Self::CmdUnlockedAreaMapScNotify),
            "CmdGameplayCounterUpdateScNotify" => {
                Some(Self::CmdGameplayCounterUpdateScNotify)
            }
            "CmdReEnterLastElementStageScRsp" => {
                Some(Self::CmdReEnterLastElementStageScRsp)
            }
            "CmdSavePointsInfoNotify" => Some(Self::CmdSavePointsInfoNotify),
            "CmdEnterSectionCsReq" => Some(Self::CmdEnterSectionCsReq),
            "CmdSceneEntityTeleportScRsp" => Some(Self::CmdSceneEntityTeleportScRsp),
            "CmdSceneEnterStageScRsp" => Some(Self::CmdSceneEnterStageScRsp),
            "CmdSetGroupCustomSaveDataScRsp" => {
                Some(Self::CmdSetGroupCustomSaveDataScRsp)
            }
            "CmdUpdateMechanismBarScNotify" => Some(Self::CmdUpdateMechanismBarScNotify),
            "CmdReturnLastTownScRsp" => Some(Self::CmdReturnLastTownScRsp),
            "CmdSetClientPausedScRsp" => Some(Self::CmdSetClientPausedScRsp),
            "CmdReturnLastTownCsReq" => Some(Self::CmdReturnLastTownCsReq),
            "CmdGroupStateChangeCsReq" => Some(Self::CmdGroupStateChangeCsReq),
            "CmdReEnterLastElementStageCsReq" => {
                Some(Self::CmdReEnterLastElementStageCsReq)
            }
            "CmdStartCocoonStageScRsp" => Some(Self::CmdStartCocoonStageScRsp),
            "CmdEntityBindPropScRsp" => Some(Self::CmdEntityBindPropScRsp),
            "CmdEnterSceneScRsp" => Some(Self::CmdEnterSceneScRsp),
            "CmdGetSceneMapInfoCsReq" => Some(Self::CmdGetSceneMapInfoCsReq),
            "CmdInteractPropScRsp" => Some(Self::CmdInteractPropScRsp),
            "CmdSyncEntityBuffChangeListScNotify" => {
                Some(Self::CmdSyncEntityBuffChangeListScNotify)
            }
            "CmdUpdateGroupPropertyScRsp" => Some(Self::CmdUpdateGroupPropertyScRsp),
            "CmdSpringRefreshCsReq" => Some(Self::CmdSpringRefreshCsReq),
            "CmdSceneReviveAfterRebattleCsReq" => {
                Some(Self::CmdSceneReviveAfterRebattleCsReq)
            }
            "CmdSetCurInteractEntityScRsp" => Some(Self::CmdSetCurInteractEntityScRsp),
            "CmdSetGroupCustomSaveDataCsReq" => {
                Some(Self::CmdSetGroupCustomSaveDataCsReq)
            }
            "CmdUpdateGroupPropertyCsReq" => Some(Self::CmdUpdateGroupPropertyCsReq),
            "CmdSyncServerSceneChangeNotify" => {
                Some(Self::CmdSyncServerSceneChangeNotify)
            }
            "CmdRecoverAllLineupCsReq" => Some(Self::CmdRecoverAllLineupCsReq),
            "CmdGroupStateChangeScNotify" => Some(Self::CmdGroupStateChangeScNotify),
            "CmdSceneReviveAfterRebattleScRsp" => {
                Some(Self::CmdSceneReviveAfterRebattleScRsp)
            }
            "CmdDeleteSummonUnitCsReq" => Some(Self::CmdDeleteSummonUnitCsReq),
            "CmdEnterSceneByServerScNotify" => Some(Self::CmdEnterSceneByServerScNotify),
            "CmdGroupStateChangeScRsp" => Some(Self::CmdGroupStateChangeScRsp),
            "CmdSceneCastSkillCostMpScRsp" => Some(Self::CmdSceneCastSkillCostMpScRsp),
            "CmdSpringRefreshScRsp" => Some(Self::CmdSpringRefreshScRsp),
            "CmdSceneEnterStageCsReq" => Some(Self::CmdSceneEnterStageCsReq),
            "CmdOpenChestScNotify" => Some(Self::CmdOpenChestScNotify),
            "CmdGetCurSceneInfoCsReq" => Some(Self::CmdGetCurSceneInfoCsReq),
            "CmdDeactivateFarmElementCsReq" => Some(Self::CmdDeactivateFarmElementCsReq),
            "CmdRefreshTriggerByClientScRsp" => {
                Some(Self::CmdRefreshTriggerByClientScRsp)
            }
            "CmdGetEnteredSceneCsReq" => Some(Self::CmdGetEnteredSceneCsReq),
            "CmdDeactivateFarmElementScRsp" => Some(Self::CmdDeactivateFarmElementScRsp),
            "CmdActivateFarmElementCsReq" => Some(Self::CmdActivateFarmElementCsReq),
            "CmdEnterSceneCsReq" => Some(Self::CmdEnterSceneCsReq),
            "CmdGetUnlockTeleportCsReq" => Some(Self::CmdGetUnlockTeleportCsReq),
            "CmdChangePropTimelineInfoScRsp" => {
                Some(Self::CmdChangePropTimelineInfoScRsp)
            }
            "CmdEnteredSceneChangeScNotify" => Some(Self::CmdEnteredSceneChangeScNotify),
            "CmdLastSpringRefreshTimeNotify" => {
                Some(Self::CmdLastSpringRefreshTimeNotify)
            }
            "CmdGameplayCounterRecoverScRsp" => {
                Some(Self::CmdGameplayCounterRecoverScRsp)
            }
            "CmdEntityBindPropCsReq" => Some(Self::CmdEntityBindPropCsReq),
            "CmdSceneUpdatePositionVersionNotify" => {
                Some(Self::CmdSceneUpdatePositionVersionNotify)
            }
            "CmdGetEnteredSceneScRsp" => Some(Self::CmdGetEnteredSceneScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SkillExtraTag {
    SceneCastSkillNone = 0,
    SceneCastSkillProjectileHit = 1,
    SceneCastSkillProjectileLifetimeFinish = 2,
}
impl SkillExtraTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SceneCastSkillNone => "SCENE_CAST_SKILL_NONE",
            Self::SceneCastSkillProjectileHit => "SCENE_CAST_SKILL_PROJECTILE_HIT",
            Self::SceneCastSkillProjectileLifetimeFinish => {
                "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_CAST_SKILL_NONE" => Some(Self::SceneCastSkillNone),
            "SCENE_CAST_SKILL_PROJECTILE_HIT" => Some(Self::SceneCastSkillProjectileHit),
            "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH" => {
                Some(Self::SceneCastSkillProjectileLifetimeFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MonsterBattleType {
    None = 0,
    TriggerBattle = 1,
    DirectDieSimulateBattle = 2,
    DirectDieSkipBattle = 3,
    NoBattle = 4,
}
impl MonsterBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MONSTER_BATTLE_TYPE_NONE",
            Self::TriggerBattle => "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE",
            Self::DirectDieSimulateBattle => {
                "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE"
            }
            Self::DirectDieSkipBattle => "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE",
            Self::NoBattle => "MONSTER_BATTLE_TYPE_NO_BATTLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONSTER_BATTLE_TYPE_NONE" => Some(Self::None),
            "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE" => Some(Self::TriggerBattle),
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE" => {
                Some(Self::DirectDieSimulateBattle)
            }
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE" => {
                Some(Self::DirectDieSkipBattle)
            }
            "MONSTER_BATTLE_TYPE_NO_BATTLE" => Some(Self::NoBattle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneEntityBuffChangeType {
    Default = 0,
    AddMazebuff = 1,
    AddAdvModifier = 2,
}
impl SceneEntityBuffChangeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT",
            Self::AddMazebuff => "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF",
            Self::AddAdvModifier => "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT" => Some(Self::Default),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF" => Some(Self::AddMazebuff),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER" => {
                Some(Self::AddAdvModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnterSceneReason {
    None = 0,
    ChallengeTimeout = 1,
    RogueTimeout = 2,
    ChangeStoryline = 3,
    DimensionMerge = 4,
}
impl EnterSceneReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ENTER_SCENE_REASON_NONE",
            Self::ChallengeTimeout => "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT",
            Self::RogueTimeout => "ENTER_SCENE_REASON_ROGUE_TIMEOUT",
            Self::ChangeStoryline => "ENTER_SCENE_REASON_CHANGE_STORYLINE",
            Self::DimensionMerge => "ENTER_SCENE_REASON_DIMENSION_MERGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTER_SCENE_REASON_NONE" => Some(Self::None),
            "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT" => Some(Self::ChallengeTimeout),
            "ENTER_SCENE_REASON_ROGUE_TIMEOUT" => Some(Self::RogueTimeout),
            "ENTER_SCENE_REASON_CHANGE_STORYLINE" => Some(Self::ChangeStoryline),
            "ENTER_SCENE_REASON_DIMENSION_MERGE" => Some(Self::DimensionMerge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChestType {
    MapInfoChestTypeNone = 0,
    MapInfoChestTypeNormal = 101,
    MapInfoChestTypeChallenge = 102,
    MapInfoChestTypePuzzle = 104,
}
impl ChestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MapInfoChestTypeNone => "MAP_INFO_CHEST_TYPE_NONE",
            Self::MapInfoChestTypeNormal => "MAP_INFO_CHEST_TYPE_NORMAL",
            Self::MapInfoChestTypeChallenge => "MAP_INFO_CHEST_TYPE_CHALLENGE",
            Self::MapInfoChestTypePuzzle => "MAP_INFO_CHEST_TYPE_PUZZLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAP_INFO_CHEST_TYPE_NONE" => Some(Self::MapInfoChestTypeNone),
            "MAP_INFO_CHEST_TYPE_NORMAL" => Some(Self::MapInfoChestTypeNormal),
            "MAP_INFO_CHEST_TYPE_CHALLENGE" => Some(Self::MapInfoChestTypeChallenge),
            "MAP_INFO_CHEST_TYPE_PUZZLE" => Some(Self::MapInfoChestTypePuzzle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GameplayCounterUpdateReason {
    None = 0,
    Activate = 1,
    Deactivate = 2,
    Change = 3,
}
impl GameplayCounterUpdateReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "GAMEPLAY_COUNTER_UPDATE_REASON_NONE",
            Self::Activate => "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE",
            Self::Deactivate => "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE",
            Self::Change => "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_UPDATE_REASON_NONE" => Some(Self::None),
            "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE" => Some(Self::Activate),
            "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE" => Some(Self::Deactivate),
            "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE" => Some(Self::Change),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneGroupRefreshType {
    None = 0,
    Loaded = 1,
    Unload = 2,
}
impl SceneGroupRefreshType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SCENE_GROUP_REFRESH_TYPE_NONE",
            Self::Loaded => "SCENE_GROUP_REFRESH_TYPE_LOADED",
            Self::Unload => "SCENE_GROUP_REFRESH_TYPE_UNLOAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_GROUP_REFRESH_TYPE_NONE" => Some(Self::None),
            "SCENE_GROUP_REFRESH_TYPE_LOADED" => Some(Self::Loaded),
            "SCENE_GROUP_REFRESH_TYPE_UNLOAD" => Some(Self::Unload),
            _ => None,
        }
    }
}
/// NMGLEBDEAEM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdServerPrefsType {
    None = 0,
    CmdGetAllServerPrefsDataCsReq = 6136,
    CmdGetAllServerPrefsDataScRsp = 6195,
    CmdGetServerPrefsDataScRsp = 6127,
    CmdUpdateServerPrefsDataCsReq = 6167,
    CmdUpdateServerPrefsDataScRsp = 6128,
    CmdGetServerPrefsDataCsReq = 6184,
}
impl CmdServerPrefsType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdServerPrefsTypeNone",
            Self::CmdGetAllServerPrefsDataCsReq => "CmdGetAllServerPrefsDataCsReq",
            Self::CmdGetAllServerPrefsDataScRsp => "CmdGetAllServerPrefsDataScRsp",
            Self::CmdGetServerPrefsDataScRsp => "CmdGetServerPrefsDataScRsp",
            Self::CmdUpdateServerPrefsDataCsReq => "CmdUpdateServerPrefsDataCsReq",
            Self::CmdUpdateServerPrefsDataScRsp => "CmdUpdateServerPrefsDataScRsp",
            Self::CmdGetServerPrefsDataCsReq => "CmdGetServerPrefsDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdServerPrefsTypeNone" => Some(Self::None),
            "CmdGetAllServerPrefsDataCsReq" => Some(Self::CmdGetAllServerPrefsDataCsReq),
            "CmdGetAllServerPrefsDataScRsp" => Some(Self::CmdGetAllServerPrefsDataScRsp),
            "CmdGetServerPrefsDataScRsp" => Some(Self::CmdGetServerPrefsDataScRsp),
            "CmdUpdateServerPrefsDataCsReq" => Some(Self::CmdUpdateServerPrefsDataCsReq),
            "CmdUpdateServerPrefsDataScRsp" => Some(Self::CmdUpdateServerPrefsDataScRsp),
            "CmdGetServerPrefsDataCsReq" => Some(Self::CmdGetServerPrefsDataCsReq),
            _ => None,
        }
    }
}
/// CPCJAHAJGCA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdShopType {
    None = 0,
    CmdGetShopListCsReq = 1536,
    CmdTakeCityShopRewardCsReq = 1567,
    CmdTakeCityShopRewardScRsp = 1528,
    CmdCityShopInfoScNotify = 1552,
    CmdBuyGoodsCsReq = 1584,
    CmdBuyGoodsScRsp = 1527,
    CmdGetShopListScRsp = 1595,
}
impl CmdShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdShopTypeNone",
            Self::CmdGetShopListCsReq => "CmdGetShopListCsReq",
            Self::CmdTakeCityShopRewardCsReq => "CmdTakeCityShopRewardCsReq",
            Self::CmdTakeCityShopRewardScRsp => "CmdTakeCityShopRewardScRsp",
            Self::CmdCityShopInfoScNotify => "CmdCityShopInfoScNotify",
            Self::CmdBuyGoodsCsReq => "CmdBuyGoodsCsReq",
            Self::CmdBuyGoodsScRsp => "CmdBuyGoodsScRsp",
            Self::CmdGetShopListScRsp => "CmdGetShopListScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdShopTypeNone" => Some(Self::None),
            "CmdGetShopListCsReq" => Some(Self::CmdGetShopListCsReq),
            "CmdTakeCityShopRewardCsReq" => Some(Self::CmdTakeCityShopRewardCsReq),
            "CmdTakeCityShopRewardScRsp" => Some(Self::CmdTakeCityShopRewardScRsp),
            "CmdCityShopInfoScNotify" => Some(Self::CmdCityShopInfoScNotify),
            "CmdBuyGoodsCsReq" => Some(Self::CmdBuyGoodsCsReq),
            "CmdBuyGoodsScRsp" => Some(Self::CmdBuyGoodsScRsp),
            "CmdGetShopListScRsp" => Some(Self::CmdGetShopListScRsp),
            _ => None,
        }
    }
}
/// NCCBHADAKND
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSpaceZooType {
    None = 0,
    CmdSpaceZooExchangeItemCsReq = 6743,
    CmdSpaceZooDeleteCatCsReq = 6724,
    CmdSpaceZooExchangeItemScRsp = 6746,
    CmdSpaceZooOpCatteryScRsp = 6774,
    CmdSpaceZooOpCatteryCsReq = 6752,
    CmdSpaceZooMutateScRsp = 6728,
    CmdSpaceZooDeleteCatScRsp = 6793,
    CmdSpaceZooCatUpdateNotify = 6734,
    CmdSpaceZooBornScRsp = 6727,
    CmdSpaceZooTakeCsReq = 6725,
    CmdSpaceZooDataScRsp = 6795,
    CmdSpaceZooBornCsReq = 6784,
    CmdSpaceZooDataCsReq = 6736,
    CmdSpaceZooMutateCsReq = 6767,
    CmdSpaceZooTakeScRsp = 6796,
}
impl CmdSpaceZooType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSpaceZooTypeNone",
            Self::CmdSpaceZooExchangeItemCsReq => "CmdSpaceZooExchangeItemCsReq",
            Self::CmdSpaceZooDeleteCatCsReq => "CmdSpaceZooDeleteCatCsReq",
            Self::CmdSpaceZooExchangeItemScRsp => "CmdSpaceZooExchangeItemScRsp",
            Self::CmdSpaceZooOpCatteryScRsp => "CmdSpaceZooOpCatteryScRsp",
            Self::CmdSpaceZooOpCatteryCsReq => "CmdSpaceZooOpCatteryCsReq",
            Self::CmdSpaceZooMutateScRsp => "CmdSpaceZooMutateScRsp",
            Self::CmdSpaceZooDeleteCatScRsp => "CmdSpaceZooDeleteCatScRsp",
            Self::CmdSpaceZooCatUpdateNotify => "CmdSpaceZooCatUpdateNotify",
            Self::CmdSpaceZooBornScRsp => "CmdSpaceZooBornScRsp",
            Self::CmdSpaceZooTakeCsReq => "CmdSpaceZooTakeCsReq",
            Self::CmdSpaceZooDataScRsp => "CmdSpaceZooDataScRsp",
            Self::CmdSpaceZooBornCsReq => "CmdSpaceZooBornCsReq",
            Self::CmdSpaceZooDataCsReq => "CmdSpaceZooDataCsReq",
            Self::CmdSpaceZooMutateCsReq => "CmdSpaceZooMutateCsReq",
            Self::CmdSpaceZooTakeScRsp => "CmdSpaceZooTakeScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSpaceZooTypeNone" => Some(Self::None),
            "CmdSpaceZooExchangeItemCsReq" => Some(Self::CmdSpaceZooExchangeItemCsReq),
            "CmdSpaceZooDeleteCatCsReq" => Some(Self::CmdSpaceZooDeleteCatCsReq),
            "CmdSpaceZooExchangeItemScRsp" => Some(Self::CmdSpaceZooExchangeItemScRsp),
            "CmdSpaceZooOpCatteryScRsp" => Some(Self::CmdSpaceZooOpCatteryScRsp),
            "CmdSpaceZooOpCatteryCsReq" => Some(Self::CmdSpaceZooOpCatteryCsReq),
            "CmdSpaceZooMutateScRsp" => Some(Self::CmdSpaceZooMutateScRsp),
            "CmdSpaceZooDeleteCatScRsp" => Some(Self::CmdSpaceZooDeleteCatScRsp),
            "CmdSpaceZooCatUpdateNotify" => Some(Self::CmdSpaceZooCatUpdateNotify),
            "CmdSpaceZooBornScRsp" => Some(Self::CmdSpaceZooBornScRsp),
            "CmdSpaceZooTakeCsReq" => Some(Self::CmdSpaceZooTakeCsReq),
            "CmdSpaceZooDataScRsp" => Some(Self::CmdSpaceZooDataScRsp),
            "CmdSpaceZooBornCsReq" => Some(Self::CmdSpaceZooBornCsReq),
            "CmdSpaceZooDataCsReq" => Some(Self::CmdSpaceZooDataCsReq),
            "CmdSpaceZooMutateCsReq" => Some(Self::CmdSpaceZooMutateCsReq),
            "CmdSpaceZooTakeScRsp" => Some(Self::CmdSpaceZooTakeScRsp),
            _ => None,
        }
    }
}
/// NJIKDINOEBG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStarFightType {
    None = 0,
    CmdGetStarFightDataCsReq = 7169,
    CmdStarFightDataChangeNotify = 7161,
    CmdStartStarFightLevelCsReq = 7163,
    CmdGetStarFightDataScRsp = 7170,
    CmdStartStarFightLevelScRsp = 7168,
}
impl CmdStarFightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStarFightTypeNone",
            Self::CmdGetStarFightDataCsReq => "CmdGetStarFightDataCsReq",
            Self::CmdStarFightDataChangeNotify => "CmdStarFightDataChangeNotify",
            Self::CmdStartStarFightLevelCsReq => "CmdStartStarFightLevelCsReq",
            Self::CmdGetStarFightDataScRsp => "CmdGetStarFightDataScRsp",
            Self::CmdStartStarFightLevelScRsp => "CmdStartStarFightLevelScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStarFightTypeNone" => Some(Self::None),
            "CmdGetStarFightDataCsReq" => Some(Self::CmdGetStarFightDataCsReq),
            "CmdStarFightDataChangeNotify" => Some(Self::CmdStarFightDataChangeNotify),
            "CmdStartStarFightLevelCsReq" => Some(Self::CmdStartStarFightLevelCsReq),
            "CmdGetStarFightDataScRsp" => Some(Self::CmdGetStarFightDataScRsp),
            "CmdStartStarFightLevelScRsp" => Some(Self::CmdStartStarFightLevelScRsp),
            _ => None,
        }
    }
}
/// MFBOEBJDJCF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStoryLineType {
    None = 0,
    CmdGetStoryLineInfoCsReq = 6236,
    CmdStoryLineTrialAvatarChangeScNotify = 6252,
    CmdChangeStoryLineFinishScNotify = 6228,
    CmdStoryLineInfoScNotify = 6284,
    CmdGetStoryLineInfoScRsp = 6295,
}
impl CmdStoryLineType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStoryLineTypeNone",
            Self::CmdGetStoryLineInfoCsReq => "CmdGetStoryLineInfoCsReq",
            Self::CmdStoryLineTrialAvatarChangeScNotify => {
                "CmdStoryLineTrialAvatarChangeScNotify"
            }
            Self::CmdChangeStoryLineFinishScNotify => "CmdChangeStoryLineFinishScNotify",
            Self::CmdStoryLineInfoScNotify => "CmdStoryLineInfoScNotify",
            Self::CmdGetStoryLineInfoScRsp => "CmdGetStoryLineInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStoryLineTypeNone" => Some(Self::None),
            "CmdGetStoryLineInfoCsReq" => Some(Self::CmdGetStoryLineInfoCsReq),
            "CmdStoryLineTrialAvatarChangeScNotify" => {
                Some(Self::CmdStoryLineTrialAvatarChangeScNotify)
            }
            "CmdChangeStoryLineFinishScNotify" => {
                Some(Self::CmdChangeStoryLineFinishScNotify)
            }
            "CmdStoryLineInfoScNotify" => Some(Self::CmdStoryLineInfoScNotify),
            "CmdGetStoryLineInfoScRsp" => Some(Self::CmdGetStoryLineInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Enfbndemakd {
    ChangeStoryLineActionNone = 0,
    ChangeStoryLineActionFinishAction = 1,
    ChangeStoryLineActionClient = 2,
    ChangeStoryLineActionCustomOp = 3,
}
impl Enfbndemakd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChangeStoryLineActionNone => "ChangeStoryLineAction_None",
            Self::ChangeStoryLineActionFinishAction => {
                "ChangeStoryLineAction_FinishAction"
            }
            Self::ChangeStoryLineActionClient => "ChangeStoryLineAction_Client",
            Self::ChangeStoryLineActionCustomOp => "ChangeStoryLineAction_CustomOP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ChangeStoryLineAction_None" => Some(Self::ChangeStoryLineActionNone),
            "ChangeStoryLineAction_FinishAction" => {
                Some(Self::ChangeStoryLineActionFinishAction)
            }
            "ChangeStoryLineAction_Client" => Some(Self::ChangeStoryLineActionClient),
            "ChangeStoryLineAction_CustomOP" => Some(Self::ChangeStoryLineActionCustomOp),
            _ => None,
        }
    }
}
/// FMFKLMHHLGN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStrongChallengeActivityType {
    None = 0,
    CmdGetStrongChallengeActivityDataCsReq = 6636,
    CmdEnterStrongChallengeActivityStageScRsp = 6627,
    CmdStrongChallengeActivityBattleEndScNotify = 6667,
    CmdGetStrongChallengeActivityDataScRsp = 6695,
    CmdEnterStrongChallengeActivityStageCsReq = 6684,
}
impl CmdStrongChallengeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStrongChallengeActivityTypeNone",
            Self::CmdGetStrongChallengeActivityDataCsReq => {
                "CmdGetStrongChallengeActivityDataCsReq"
            }
            Self::CmdEnterStrongChallengeActivityStageScRsp => {
                "CmdEnterStrongChallengeActivityStageScRsp"
            }
            Self::CmdStrongChallengeActivityBattleEndScNotify => {
                "CmdStrongChallengeActivityBattleEndScNotify"
            }
            Self::CmdGetStrongChallengeActivityDataScRsp => {
                "CmdGetStrongChallengeActivityDataScRsp"
            }
            Self::CmdEnterStrongChallengeActivityStageCsReq => {
                "CmdEnterStrongChallengeActivityStageCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStrongChallengeActivityTypeNone" => Some(Self::None),
            "CmdGetStrongChallengeActivityDataCsReq" => {
                Some(Self::CmdGetStrongChallengeActivityDataCsReq)
            }
            "CmdEnterStrongChallengeActivityStageScRsp" => {
                Some(Self::CmdEnterStrongChallengeActivityStageScRsp)
            }
            "CmdStrongChallengeActivityBattleEndScNotify" => {
                Some(Self::CmdStrongChallengeActivityBattleEndScNotify)
            }
            "CmdGetStrongChallengeActivityDataScRsp" => {
                Some(Self::CmdGetStrongChallengeActivityDataScRsp)
            }
            "CmdEnterStrongChallengeActivityStageCsReq" => {
                Some(Self::CmdEnterStrongChallengeActivityStageCsReq)
            }
            _ => None,
        }
    }
}
/// IJNLGMIKEEC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSummonActivityType {
    None = 0,
    CmdGetSummonActivityDataCsReq = 7569,
    CmdEnterSummonActivityStageCsReq = 7563,
    CmdSummonActivityBattleEndScNotify = 7561,
    CmdGetSummonActivityDataScRsp = 7570,
    CmdEnterSummonActivityStageScRsp = 7568,
}
impl CmdSummonActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSummonActivityTypeNone",
            Self::CmdGetSummonActivityDataCsReq => "CmdGetSummonActivityDataCsReq",
            Self::CmdEnterSummonActivityStageCsReq => "CmdEnterSummonActivityStageCsReq",
            Self::CmdSummonActivityBattleEndScNotify => {
                "CmdSummonActivityBattleEndScNotify"
            }
            Self::CmdGetSummonActivityDataScRsp => "CmdGetSummonActivityDataScRsp",
            Self::CmdEnterSummonActivityStageScRsp => "CmdEnterSummonActivityStageScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSummonActivityTypeNone" => Some(Self::None),
            "CmdGetSummonActivityDataCsReq" => Some(Self::CmdGetSummonActivityDataCsReq),
            "CmdEnterSummonActivityStageCsReq" => {
                Some(Self::CmdEnterSummonActivityStageCsReq)
            }
            "CmdSummonActivityBattleEndScNotify" => {
                Some(Self::CmdSummonActivityBattleEndScNotify)
            }
            "CmdGetSummonActivityDataScRsp" => Some(Self::CmdGetSummonActivityDataScRsp),
            "CmdEnterSummonActivityStageScRsp" => {
                Some(Self::CmdEnterSummonActivityStageScRsp)
            }
            _ => None,
        }
    }
}
/// ICGODKOHNJC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSwitchHandType {
    None = 0,
    CmdSwitchHandDataCsReq = 8120,
    CmdSwitchHandFinishScRsp = 8106,
    CmdSwitchHandCoinUpdateCsReq = 8102,
    CmdSwitchHandDataScRsp = 8115,
    CmdSwitchHandFinishCsReq = 8117,
    CmdSwitchHandUpdateScRsp = 8110,
    CmdSwitchHandStartScRsp = 8103,
    CmdSwitchHandStartCsReq = 8107,
    CmdSwitchHandUpdateCsReq = 8105,
    CmdSwitchHandCoinUpdateScRsp = 8108,
}
impl CmdSwitchHandType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSwitchHandTypeNone",
            Self::CmdSwitchHandDataCsReq => "CmdSwitchHandDataCsReq",
            Self::CmdSwitchHandFinishScRsp => "CmdSwitchHandFinishScRsp",
            Self::CmdSwitchHandCoinUpdateCsReq => "CmdSwitchHandCoinUpdateCsReq",
            Self::CmdSwitchHandDataScRsp => "CmdSwitchHandDataScRsp",
            Self::CmdSwitchHandFinishCsReq => "CmdSwitchHandFinishCsReq",
            Self::CmdSwitchHandUpdateScRsp => "CmdSwitchHandUpdateScRsp",
            Self::CmdSwitchHandStartScRsp => "CmdSwitchHandStartScRsp",
            Self::CmdSwitchHandStartCsReq => "CmdSwitchHandStartCsReq",
            Self::CmdSwitchHandUpdateCsReq => "CmdSwitchHandUpdateCsReq",
            Self::CmdSwitchHandCoinUpdateScRsp => "CmdSwitchHandCoinUpdateScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSwitchHandTypeNone" => Some(Self::None),
            "CmdSwitchHandDataCsReq" => Some(Self::CmdSwitchHandDataCsReq),
            "CmdSwitchHandFinishScRsp" => Some(Self::CmdSwitchHandFinishScRsp),
            "CmdSwitchHandCoinUpdateCsReq" => Some(Self::CmdSwitchHandCoinUpdateCsReq),
            "CmdSwitchHandDataScRsp" => Some(Self::CmdSwitchHandDataScRsp),
            "CmdSwitchHandFinishCsReq" => Some(Self::CmdSwitchHandFinishCsReq),
            "CmdSwitchHandUpdateScRsp" => Some(Self::CmdSwitchHandUpdateScRsp),
            "CmdSwitchHandStartScRsp" => Some(Self::CmdSwitchHandStartScRsp),
            "CmdSwitchHandStartCsReq" => Some(Self::CmdSwitchHandStartCsReq),
            "CmdSwitchHandUpdateCsReq" => Some(Self::CmdSwitchHandUpdateCsReq),
            "CmdSwitchHandCoinUpdateScRsp" => Some(Self::CmdSwitchHandCoinUpdateScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bmaiekajjnh {
    SwitchHandOpPropTypeNone = 0,
    SwitchHandOpPropTypeCatch = 1,
    SwitchHandOpPropTypeLift = 2,
}
impl Bmaiekajjnh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwitchHandOpPropTypeNone => "SWITCH_HAND_OP_PROP_TYPE_NONE",
            Self::SwitchHandOpPropTypeCatch => "SWITCH_HAND_OP_PROP_TYPE_CATCH",
            Self::SwitchHandOpPropTypeLift => "SWITCH_HAND_OP_PROP_TYPE_LIFT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWITCH_HAND_OP_PROP_TYPE_NONE" => Some(Self::SwitchHandOpPropTypeNone),
            "SWITCH_HAND_OP_PROP_TYPE_CATCH" => Some(Self::SwitchHandOpPropTypeCatch),
            "SWITCH_HAND_OP_PROP_TYPE_LIFT" => Some(Self::SwitchHandOpPropTypeLift),
            _ => None,
        }
    }
}
/// LIBMCDICKCI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSwordTrainingType {
    None = 0,
    CmdSwordTrainingGiveUpGameScRsp = 7472,
    CmdEnterSwordTrainingExamScRsp = 7463,
    CmdSwordTrainingGiveUpGameCsReq = 7468,
    CmdSwordTrainingResumeGameScRsp = 7486,
    CmdSwordTrainingSelectEndingCsReq = 7479,
    CmdSwordTrainingGameSyncChangeScNotify = 7462,
    CmdSwordTrainingDialogueSelectOptionScRsp = 7497,
    CmdSwordTrainingStoryBattleScRsp = 7451,
    CmdSwordTrainingStoryConfirmCsReq = 7456,
    CmdSwordTrainingGameSettleScNotify = 7492,
    CmdSwordTrainingDailyPhaseConfirmScRsp = 7459,
    CmdSwordTrainingDailyPhaseConfirmCsReq = 7499,
    CmdSwordTrainingExamResultConfirmCsReq = 7488,
    CmdSwordTrainingTurnActionCsReq = 7473,
    CmdSwordTrainingMarkEndingViewedCsReq = 7457,
    CmdSwordTrainingStoryBattleCsReq = 7481,
    CmdSwordTrainingStartGameScRsp = 7461,
    CmdSwordTrainingRestoreGameCsReq = 7484,
    CmdSwordTrainingExamResultConfirmScRsp = 7483,
    CmdSwordTrainingSetSkillTraceCsReq = 7489,
    CmdEnterSwordTrainingExamCsReq = 7498,
    CmdSwordTrainingActionTurnSettleScNotify = 7487,
    CmdGetSwordTrainingDataCsReq = 7500,
    CmdGetSwordTrainingDataScRsp = 7480,
    CmdSwordTrainingLearnSkillCsReq = 7467,
    CmdSwordTrainingTurnActionScRsp = 7465,
    CmdSwordTrainingLearnSkillScRsp = 7454,
    CmdSwordTrainingStartGameCsReq = 7490,
    CmdSwordTrainingDialogueSelectOptionCsReq = 7493,
    CmdSwordTrainingSelectEndingScRsp = 7475,
    CmdSwordTrainingUnlockSyncScNotify = 7455,
    CmdSwordTrainingStoryConfirmScRsp = 7485,
    CmdSwordTrainingMarkEndingViewedScRsp = 7476,
    CmdSwordTrainingSetSkillTraceScRsp = 7477,
    CmdSwordTrainingResumeGameCsReq = 7453,
    CmdSwordTrainingRestoreGameScRsp = 7469,
}
impl CmdSwordTrainingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSwordTrainingTypeNone",
            Self::CmdSwordTrainingGiveUpGameScRsp => "CmdSwordTrainingGiveUpGameScRsp",
            Self::CmdEnterSwordTrainingExamScRsp => "CmdEnterSwordTrainingExamScRsp",
            Self::CmdSwordTrainingGiveUpGameCsReq => "CmdSwordTrainingGiveUpGameCsReq",
            Self::CmdSwordTrainingResumeGameScRsp => "CmdSwordTrainingResumeGameScRsp",
            Self::CmdSwordTrainingSelectEndingCsReq => {
                "CmdSwordTrainingSelectEndingCsReq"
            }
            Self::CmdSwordTrainingGameSyncChangeScNotify => {
                "CmdSwordTrainingGameSyncChangeScNotify"
            }
            Self::CmdSwordTrainingDialogueSelectOptionScRsp => {
                "CmdSwordTrainingDialogueSelectOptionScRsp"
            }
            Self::CmdSwordTrainingStoryBattleScRsp => "CmdSwordTrainingStoryBattleScRsp",
            Self::CmdSwordTrainingStoryConfirmCsReq => {
                "CmdSwordTrainingStoryConfirmCsReq"
            }
            Self::CmdSwordTrainingGameSettleScNotify => {
                "CmdSwordTrainingGameSettleScNotify"
            }
            Self::CmdSwordTrainingDailyPhaseConfirmScRsp => {
                "CmdSwordTrainingDailyPhaseConfirmScRsp"
            }
            Self::CmdSwordTrainingDailyPhaseConfirmCsReq => {
                "CmdSwordTrainingDailyPhaseConfirmCsReq"
            }
            Self::CmdSwordTrainingExamResultConfirmCsReq => {
                "CmdSwordTrainingExamResultConfirmCsReq"
            }
            Self::CmdSwordTrainingTurnActionCsReq => "CmdSwordTrainingTurnActionCsReq",
            Self::CmdSwordTrainingMarkEndingViewedCsReq => {
                "CmdSwordTrainingMarkEndingViewedCsReq"
            }
            Self::CmdSwordTrainingStoryBattleCsReq => "CmdSwordTrainingStoryBattleCsReq",
            Self::CmdSwordTrainingStartGameScRsp => "CmdSwordTrainingStartGameScRsp",
            Self::CmdSwordTrainingRestoreGameCsReq => "CmdSwordTrainingRestoreGameCsReq",
            Self::CmdSwordTrainingExamResultConfirmScRsp => {
                "CmdSwordTrainingExamResultConfirmScRsp"
            }
            Self::CmdSwordTrainingSetSkillTraceCsReq => {
                "CmdSwordTrainingSetSkillTraceCsReq"
            }
            Self::CmdEnterSwordTrainingExamCsReq => "CmdEnterSwordTrainingExamCsReq",
            Self::CmdSwordTrainingActionTurnSettleScNotify => {
                "CmdSwordTrainingActionTurnSettleScNotify"
            }
            Self::CmdGetSwordTrainingDataCsReq => "CmdGetSwordTrainingDataCsReq",
            Self::CmdGetSwordTrainingDataScRsp => "CmdGetSwordTrainingDataScRsp",
            Self::CmdSwordTrainingLearnSkillCsReq => "CmdSwordTrainingLearnSkillCsReq",
            Self::CmdSwordTrainingTurnActionScRsp => "CmdSwordTrainingTurnActionScRsp",
            Self::CmdSwordTrainingLearnSkillScRsp => "CmdSwordTrainingLearnSkillScRsp",
            Self::CmdSwordTrainingStartGameCsReq => "CmdSwordTrainingStartGameCsReq",
            Self::CmdSwordTrainingDialogueSelectOptionCsReq => {
                "CmdSwordTrainingDialogueSelectOptionCsReq"
            }
            Self::CmdSwordTrainingSelectEndingScRsp => {
                "CmdSwordTrainingSelectEndingScRsp"
            }
            Self::CmdSwordTrainingUnlockSyncScNotify => {
                "CmdSwordTrainingUnlockSyncScNotify"
            }
            Self::CmdSwordTrainingStoryConfirmScRsp => {
                "CmdSwordTrainingStoryConfirmScRsp"
            }
            Self::CmdSwordTrainingMarkEndingViewedScRsp => {
                "CmdSwordTrainingMarkEndingViewedScRsp"
            }
            Self::CmdSwordTrainingSetSkillTraceScRsp => {
                "CmdSwordTrainingSetSkillTraceScRsp"
            }
            Self::CmdSwordTrainingResumeGameCsReq => "CmdSwordTrainingResumeGameCsReq",
            Self::CmdSwordTrainingRestoreGameScRsp => "CmdSwordTrainingRestoreGameScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSwordTrainingTypeNone" => Some(Self::None),
            "CmdSwordTrainingGiveUpGameScRsp" => {
                Some(Self::CmdSwordTrainingGiveUpGameScRsp)
            }
            "CmdEnterSwordTrainingExamScRsp" => {
                Some(Self::CmdEnterSwordTrainingExamScRsp)
            }
            "CmdSwordTrainingGiveUpGameCsReq" => {
                Some(Self::CmdSwordTrainingGiveUpGameCsReq)
            }
            "CmdSwordTrainingResumeGameScRsp" => {
                Some(Self::CmdSwordTrainingResumeGameScRsp)
            }
            "CmdSwordTrainingSelectEndingCsReq" => {
                Some(Self::CmdSwordTrainingSelectEndingCsReq)
            }
            "CmdSwordTrainingGameSyncChangeScNotify" => {
                Some(Self::CmdSwordTrainingGameSyncChangeScNotify)
            }
            "CmdSwordTrainingDialogueSelectOptionScRsp" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionScRsp)
            }
            "CmdSwordTrainingStoryBattleScRsp" => {
                Some(Self::CmdSwordTrainingStoryBattleScRsp)
            }
            "CmdSwordTrainingStoryConfirmCsReq" => {
                Some(Self::CmdSwordTrainingStoryConfirmCsReq)
            }
            "CmdSwordTrainingGameSettleScNotify" => {
                Some(Self::CmdSwordTrainingGameSettleScNotify)
            }
            "CmdSwordTrainingDailyPhaseConfirmScRsp" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmScRsp)
            }
            "CmdSwordTrainingDailyPhaseConfirmCsReq" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmCsReq)
            }
            "CmdSwordTrainingExamResultConfirmCsReq" => {
                Some(Self::CmdSwordTrainingExamResultConfirmCsReq)
            }
            "CmdSwordTrainingTurnActionCsReq" => {
                Some(Self::CmdSwordTrainingTurnActionCsReq)
            }
            "CmdSwordTrainingMarkEndingViewedCsReq" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedCsReq)
            }
            "CmdSwordTrainingStoryBattleCsReq" => {
                Some(Self::CmdSwordTrainingStoryBattleCsReq)
            }
            "CmdSwordTrainingStartGameScRsp" => {
                Some(Self::CmdSwordTrainingStartGameScRsp)
            }
            "CmdSwordTrainingRestoreGameCsReq" => {
                Some(Self::CmdSwordTrainingRestoreGameCsReq)
            }
            "CmdSwordTrainingExamResultConfirmScRsp" => {
                Some(Self::CmdSwordTrainingExamResultConfirmScRsp)
            }
            "CmdSwordTrainingSetSkillTraceCsReq" => {
                Some(Self::CmdSwordTrainingSetSkillTraceCsReq)
            }
            "CmdEnterSwordTrainingExamCsReq" => {
                Some(Self::CmdEnterSwordTrainingExamCsReq)
            }
            "CmdSwordTrainingActionTurnSettleScNotify" => {
                Some(Self::CmdSwordTrainingActionTurnSettleScNotify)
            }
            "CmdGetSwordTrainingDataCsReq" => Some(Self::CmdGetSwordTrainingDataCsReq),
            "CmdGetSwordTrainingDataScRsp" => Some(Self::CmdGetSwordTrainingDataScRsp),
            "CmdSwordTrainingLearnSkillCsReq" => {
                Some(Self::CmdSwordTrainingLearnSkillCsReq)
            }
            "CmdSwordTrainingTurnActionScRsp" => {
                Some(Self::CmdSwordTrainingTurnActionScRsp)
            }
            "CmdSwordTrainingLearnSkillScRsp" => {
                Some(Self::CmdSwordTrainingLearnSkillScRsp)
            }
            "CmdSwordTrainingStartGameCsReq" => {
                Some(Self::CmdSwordTrainingStartGameCsReq)
            }
            "CmdSwordTrainingDialogueSelectOptionCsReq" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionCsReq)
            }
            "CmdSwordTrainingSelectEndingScRsp" => {
                Some(Self::CmdSwordTrainingSelectEndingScRsp)
            }
            "CmdSwordTrainingUnlockSyncScNotify" => {
                Some(Self::CmdSwordTrainingUnlockSyncScNotify)
            }
            "CmdSwordTrainingStoryConfirmScRsp" => {
                Some(Self::CmdSwordTrainingStoryConfirmScRsp)
            }
            "CmdSwordTrainingMarkEndingViewedScRsp" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedScRsp)
            }
            "CmdSwordTrainingSetSkillTraceScRsp" => {
                Some(Self::CmdSwordTrainingSetSkillTraceScRsp)
            }
            "CmdSwordTrainingResumeGameCsReq" => {
                Some(Self::CmdSwordTrainingResumeGameCsReq)
            }
            "CmdSwordTrainingRestoreGameScRsp" => {
                Some(Self::CmdSwordTrainingRestoreGameScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Diadjinagga {
    SwordTrainGameSourceTypeNone = 0,
    SwordTrainGameSourceTypeTurnSettle = 1,
    SwordTrainGameSourceTypeStatusUpgrade = 2,
    SwordTrainGameSourceTypeAction = 3,
    SwordTrainGameSourceTypeActionHint = 4,
    SwordTrainGameSourceTypeStory = 5,
    SwordTrainGameSourceTypeExamBonus = 6,
    SwordTrainGameSourceTypeDialogue = 7,
}
impl Diadjinagga {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainGameSourceTypeNone => "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE",
            Self::SwordTrainGameSourceTypeTurnSettle => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE"
            }
            Self::SwordTrainGameSourceTypeStatusUpgrade => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE"
            }
            Self::SwordTrainGameSourceTypeAction => "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION",
            Self::SwordTrainGameSourceTypeActionHint => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT"
            }
            Self::SwordTrainGameSourceTypeStory => "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY",
            Self::SwordTrainGameSourceTypeExamBonus => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS"
            }
            Self::SwordTrainGameSourceTypeDialogue => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE" => {
                Some(Self::SwordTrainGameSourceTypeNone)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE" => {
                Some(Self::SwordTrainGameSourceTypeTurnSettle)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE" => {
                Some(Self::SwordTrainGameSourceTypeStatusUpgrade)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION" => {
                Some(Self::SwordTrainGameSourceTypeAction)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT" => {
                Some(Self::SwordTrainGameSourceTypeActionHint)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY" => {
                Some(Self::SwordTrainGameSourceTypeStory)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS" => {
                Some(Self::SwordTrainGameSourceTypeExamBonus)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::SwordTrainGameSourceTypeDialogue)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Glhfkndlmmf {
    SwordTrainingDailyPhaseTypeNone = 0,
    SwordTrainingDailyPhaseTypeMorning = 1,
    SwordTrainingDailyPhaseTypeNoon = 2,
    SwordTrainingDailyPhaseTypeAfternoon = 3,
    SwordTrainingDailyPhaseTypeEvening = 4,
}
impl Glhfkndlmmf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingDailyPhaseTypeNone => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE"
            }
            Self::SwordTrainingDailyPhaseTypeMorning => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING"
            }
            Self::SwordTrainingDailyPhaseTypeNoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON"
            }
            Self::SwordTrainingDailyPhaseTypeAfternoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON"
            }
            Self::SwordTrainingDailyPhaseTypeEvening => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE" => {
                Some(Self::SwordTrainingDailyPhaseTypeNone)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING" => {
                Some(Self::SwordTrainingDailyPhaseTypeMorning)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeNoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeAfternoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING" => {
                Some(Self::SwordTrainingDailyPhaseTypeEvening)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Idhkdddcmca {
    SwordTrainingStatusTypeNone = 0,
    SwordTrainingStatusTypePower = 1,
    SwordTrainingStatusTypeAgility = 2,
    SwordTrainingStatusTypeToughness = 3,
    SwordTrainingStatusTypePerception = 4,
    SwordTrainingStatusTypeMax = 5,
}
impl Idhkdddcmca {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingStatusTypeNone => "SWORD_TRAINING_STATUS_TYPE_NONE",
            Self::SwordTrainingStatusTypePower => "SWORD_TRAINING_STATUS_TYPE_POWER",
            Self::SwordTrainingStatusTypeAgility => "SWORD_TRAINING_STATUS_TYPE_AGILITY",
            Self::SwordTrainingStatusTypeToughness => {
                "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS"
            }
            Self::SwordTrainingStatusTypePerception => {
                "SWORD_TRAINING_STATUS_TYPE_PERCEPTION"
            }
            Self::SwordTrainingStatusTypeMax => "_SWORD_TRAINING_STATUS_TYPE_MAX",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_STATUS_TYPE_NONE" => Some(Self::SwordTrainingStatusTypeNone),
            "SWORD_TRAINING_STATUS_TYPE_POWER" => {
                Some(Self::SwordTrainingStatusTypePower)
            }
            "SWORD_TRAINING_STATUS_TYPE_AGILITY" => {
                Some(Self::SwordTrainingStatusTypeAgility)
            }
            "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS" => {
                Some(Self::SwordTrainingStatusTypeToughness)
            }
            "SWORD_TRAINING_STATUS_TYPE_PERCEPTION" => {
                Some(Self::SwordTrainingStatusTypePerception)
            }
            "_SWORD_TRAINING_STATUS_TYPE_MAX" => Some(Self::SwordTrainingStatusTypeMax),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Boehdkfadah {
    SwordTrainingGameSettleNone = 0,
    SwordTrainingGameSettleFinish = 1,
    SwordTrainingGameSettleGiveUp = 2,
    SwordTrainingGameSettleBattleFailed = 3,
    SwordTrainingGameSettleForce = 4,
    SwordTrainingGameSettleByRestore = 5,
}
impl Boehdkfadah {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingGameSettleNone => "SWORD_TRAINING_GAME_SETTLE_NONE",
            Self::SwordTrainingGameSettleFinish => "SWORD_TRAINING_GAME_SETTLE_FINISH",
            Self::SwordTrainingGameSettleGiveUp => "SWORD_TRAINING_GAME_SETTLE_GIVE_UP",
            Self::SwordTrainingGameSettleBattleFailed => {
                "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED"
            }
            Self::SwordTrainingGameSettleForce => "SWORD_TRAINING_GAME_SETTLE_FORCE",
            Self::SwordTrainingGameSettleByRestore => {
                "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_GAME_SETTLE_NONE" => Some(Self::SwordTrainingGameSettleNone),
            "SWORD_TRAINING_GAME_SETTLE_FINISH" => {
                Some(Self::SwordTrainingGameSettleFinish)
            }
            "SWORD_TRAINING_GAME_SETTLE_GIVE_UP" => {
                Some(Self::SwordTrainingGameSettleGiveUp)
            }
            "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED" => {
                Some(Self::SwordTrainingGameSettleBattleFailed)
            }
            "SWORD_TRAINING_GAME_SETTLE_FORCE" => {
                Some(Self::SwordTrainingGameSettleForce)
            }
            "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE" => {
                Some(Self::SwordTrainingGameSettleByRestore)
            }
            _ => None,
        }
    }
}
/// DNEGDBKLKOL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerSync {
    None = 0,
    ScNotify = 636,
}
impl CmdPlayerSync {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerSyncNone",
            Self::ScNotify => "CmdPlayerSyncScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerSyncNone" => Some(Self::None),
            "CmdPlayerSyncScNotify" => Some(Self::ScNotify),
            _ => None,
        }
    }
}
/// LJBBLEAFJFI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTalkRewardType {
    None = 0,
    CmdTakeTalkRewardScRsp = 2127,
    CmdFinishFirstTalkNpcScRsp = 2174,
    CmdGetNpcTakenRewardScRsp = 2195,
    CmdSelectInclinationTextScRsp = 2193,
    CmdTakeTalkRewardCsReq = 2184,
    CmdGetFirstTalkNpcScRsp = 2128,
    CmdGetFirstTalkByPerformanceNpcScRsp = 2143,
    CmdGetFirstTalkByPerformanceNpcCsReq = 2134,
    CmdFinishFirstTalkByPerformanceNpcScRsp = 2125,
    CmdGetFirstTalkNpcCsReq = 2167,
    CmdSelectInclinationTextCsReq = 2124,
    CmdFinishFirstTalkNpcCsReq = 2152,
    CmdFinishFirstTalkByPerformanceNpcCsReq = 2146,
    CmdGetNpcTakenRewardCsReq = 2136,
}
impl CmdTalkRewardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTalkRewardTypeNone",
            Self::CmdTakeTalkRewardScRsp => "CmdTakeTalkRewardScRsp",
            Self::CmdFinishFirstTalkNpcScRsp => "CmdFinishFirstTalkNpcScRsp",
            Self::CmdGetNpcTakenRewardScRsp => "CmdGetNpcTakenRewardScRsp",
            Self::CmdSelectInclinationTextScRsp => "CmdSelectInclinationTextScRsp",
            Self::CmdTakeTalkRewardCsReq => "CmdTakeTalkRewardCsReq",
            Self::CmdGetFirstTalkNpcScRsp => "CmdGetFirstTalkNpcScRsp",
            Self::CmdGetFirstTalkByPerformanceNpcScRsp => {
                "CmdGetFirstTalkByPerformanceNpcScRsp"
            }
            Self::CmdGetFirstTalkByPerformanceNpcCsReq => {
                "CmdGetFirstTalkByPerformanceNpcCsReq"
            }
            Self::CmdFinishFirstTalkByPerformanceNpcScRsp => {
                "CmdFinishFirstTalkByPerformanceNpcScRsp"
            }
            Self::CmdGetFirstTalkNpcCsReq => "CmdGetFirstTalkNpcCsReq",
            Self::CmdSelectInclinationTextCsReq => "CmdSelectInclinationTextCsReq",
            Self::CmdFinishFirstTalkNpcCsReq => "CmdFinishFirstTalkNpcCsReq",
            Self::CmdFinishFirstTalkByPerformanceNpcCsReq => {
                "CmdFinishFirstTalkByPerformanceNpcCsReq"
            }
            Self::CmdGetNpcTakenRewardCsReq => "CmdGetNpcTakenRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTalkRewardTypeNone" => Some(Self::None),
            "CmdTakeTalkRewardScRsp" => Some(Self::CmdTakeTalkRewardScRsp),
            "CmdFinishFirstTalkNpcScRsp" => Some(Self::CmdFinishFirstTalkNpcScRsp),
            "CmdGetNpcTakenRewardScRsp" => Some(Self::CmdGetNpcTakenRewardScRsp),
            "CmdSelectInclinationTextScRsp" => Some(Self::CmdSelectInclinationTextScRsp),
            "CmdTakeTalkRewardCsReq" => Some(Self::CmdTakeTalkRewardCsReq),
            "CmdGetFirstTalkNpcScRsp" => Some(Self::CmdGetFirstTalkNpcScRsp),
            "CmdGetFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcScRsp)
            }
            "CmdGetFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcCsReq)
            }
            "CmdFinishFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcScRsp)
            }
            "CmdGetFirstTalkNpcCsReq" => Some(Self::CmdGetFirstTalkNpcCsReq),
            "CmdSelectInclinationTextCsReq" => Some(Self::CmdSelectInclinationTextCsReq),
            "CmdFinishFirstTalkNpcCsReq" => Some(Self::CmdFinishFirstTalkNpcCsReq),
            "CmdFinishFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcCsReq)
            }
            "CmdGetNpcTakenRewardCsReq" => Some(Self::CmdGetNpcTakenRewardCsReq),
            _ => None,
        }
    }
}
/// GONFIIKDJLL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTarotBookType {
    None = 0,
    CmdTarotBookModifyEnergyScNotify = 8142,
    CmdTarotBookFinishInteractionCsReq = 8148,
    CmdTarotBookFinishInteractionScRsp = 8152,
    CmdTarotBookGetDataScRsp = 8155,
    CmdTarotBookOpenPackScRsp = 8143,
    CmdTarotBookGetDataCsReq = 8160,
    CmdTarotBookUnlockStoryCsReq = 8157,
    CmdTarotBookFinishStoryCsReq = 8145,
    CmdTarotBookOpenPackCsReq = 8147,
    CmdTarotBookUnlockStoryScRsp = 8146,
    CmdTarotBookFinishStoryScRsp = 8150,
}
impl CmdTarotBookType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTarotBookTypeNone",
            Self::CmdTarotBookModifyEnergyScNotify => "CmdTarotBookModifyEnergyScNotify",
            Self::CmdTarotBookFinishInteractionCsReq => {
                "CmdTarotBookFinishInteractionCsReq"
            }
            Self::CmdTarotBookFinishInteractionScRsp => {
                "CmdTarotBookFinishInteractionScRsp"
            }
            Self::CmdTarotBookGetDataScRsp => "CmdTarotBookGetDataScRsp",
            Self::CmdTarotBookOpenPackScRsp => "CmdTarotBookOpenPackScRsp",
            Self::CmdTarotBookGetDataCsReq => "CmdTarotBookGetDataCsReq",
            Self::CmdTarotBookUnlockStoryCsReq => "CmdTarotBookUnlockStoryCsReq",
            Self::CmdTarotBookFinishStoryCsReq => "CmdTarotBookFinishStoryCsReq",
            Self::CmdTarotBookOpenPackCsReq => "CmdTarotBookOpenPackCsReq",
            Self::CmdTarotBookUnlockStoryScRsp => "CmdTarotBookUnlockStoryScRsp",
            Self::CmdTarotBookFinishStoryScRsp => "CmdTarotBookFinishStoryScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTarotBookTypeNone" => Some(Self::None),
            "CmdTarotBookModifyEnergyScNotify" => {
                Some(Self::CmdTarotBookModifyEnergyScNotify)
            }
            "CmdTarotBookFinishInteractionCsReq" => {
                Some(Self::CmdTarotBookFinishInteractionCsReq)
            }
            "CmdTarotBookFinishInteractionScRsp" => {
                Some(Self::CmdTarotBookFinishInteractionScRsp)
            }
            "CmdTarotBookGetDataScRsp" => Some(Self::CmdTarotBookGetDataScRsp),
            "CmdTarotBookOpenPackScRsp" => Some(Self::CmdTarotBookOpenPackScRsp),
            "CmdTarotBookGetDataCsReq" => Some(Self::CmdTarotBookGetDataCsReq),
            "CmdTarotBookUnlockStoryCsReq" => Some(Self::CmdTarotBookUnlockStoryCsReq),
            "CmdTarotBookFinishStoryCsReq" => Some(Self::CmdTarotBookFinishStoryCsReq),
            "CmdTarotBookOpenPackCsReq" => Some(Self::CmdTarotBookOpenPackCsReq),
            "CmdTarotBookUnlockStoryScRsp" => Some(Self::CmdTarotBookUnlockStoryScRsp),
            "CmdTarotBookFinishStoryScRsp" => Some(Self::CmdTarotBookFinishStoryScRsp),
            _ => None,
        }
    }
}
/// NIDIJMIFHNM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTelevisionActivityType {
    None = 0,
    CmdTelevisionActivityBattleEndScNotify = 6966,
    CmdGetTelevisionActivityDataCsReq = 6980,
    CmdGetTelevisionActivityDataScRsp = 6975,
    CmdTelevisionActivityDataChangeScNotify = 6967,
    CmdEnterTelevisionActivityStageScRsp = 6977,
    CmdEnterTelevisionActivityStageCsReq = 6963,
}
impl CmdTelevisionActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTelevisionActivityTypeNone",
            Self::CmdTelevisionActivityBattleEndScNotify => {
                "CmdTelevisionActivityBattleEndScNotify"
            }
            Self::CmdGetTelevisionActivityDataCsReq => {
                "CmdGetTelevisionActivityDataCsReq"
            }
            Self::CmdGetTelevisionActivityDataScRsp => {
                "CmdGetTelevisionActivityDataScRsp"
            }
            Self::CmdTelevisionActivityDataChangeScNotify => {
                "CmdTelevisionActivityDataChangeScNotify"
            }
            Self::CmdEnterTelevisionActivityStageScRsp => {
                "CmdEnterTelevisionActivityStageScRsp"
            }
            Self::CmdEnterTelevisionActivityStageCsReq => {
                "CmdEnterTelevisionActivityStageCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTelevisionActivityTypeNone" => Some(Self::None),
            "CmdTelevisionActivityBattleEndScNotify" => {
                Some(Self::CmdTelevisionActivityBattleEndScNotify)
            }
            "CmdGetTelevisionActivityDataCsReq" => {
                Some(Self::CmdGetTelevisionActivityDataCsReq)
            }
            "CmdGetTelevisionActivityDataScRsp" => {
                Some(Self::CmdGetTelevisionActivityDataScRsp)
            }
            "CmdTelevisionActivityDataChangeScNotify" => {
                Some(Self::CmdTelevisionActivityDataChangeScNotify)
            }
            "CmdEnterTelevisionActivityStageScRsp" => {
                Some(Self::CmdEnterTelevisionActivityStageScRsp)
            }
            "CmdEnterTelevisionActivityStageCsReq" => {
                Some(Self::CmdEnterTelevisionActivityStageCsReq)
            }
            _ => None,
        }
    }
}
/// DPAGHHBGNKB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTextJoinType {
    None = 0,
    CmdTextJoinBatchSaveCsReq = 3867,
    CmdTextJoinQueryScRsp = 3827,
    CmdTextJoinSaveCsReq = 3836,
    CmdTextJoinSaveScRsp = 3895,
    CmdTextJoinBatchSaveScRsp = 3828,
    CmdTextJoinQueryCsReq = 3884,
}
impl CmdTextJoinType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTextJoinTypeNone",
            Self::CmdTextJoinBatchSaveCsReq => "CmdTextJoinBatchSaveCsReq",
            Self::CmdTextJoinQueryScRsp => "CmdTextJoinQueryScRsp",
            Self::CmdTextJoinSaveCsReq => "CmdTextJoinSaveCsReq",
            Self::CmdTextJoinSaveScRsp => "CmdTextJoinSaveScRsp",
            Self::CmdTextJoinBatchSaveScRsp => "CmdTextJoinBatchSaveScRsp",
            Self::CmdTextJoinQueryCsReq => "CmdTextJoinQueryCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTextJoinTypeNone" => Some(Self::None),
            "CmdTextJoinBatchSaveCsReq" => Some(Self::CmdTextJoinBatchSaveCsReq),
            "CmdTextJoinQueryScRsp" => Some(Self::CmdTextJoinQueryScRsp),
            "CmdTextJoinSaveCsReq" => Some(Self::CmdTextJoinSaveCsReq),
            "CmdTextJoinSaveScRsp" => Some(Self::CmdTextJoinSaveScRsp),
            "CmdTextJoinBatchSaveScRsp" => Some(Self::CmdTextJoinBatchSaveScRsp),
            "CmdTextJoinQueryCsReq" => Some(Self::CmdTextJoinQueryCsReq),
            _ => None,
        }
    }
}
/// JNBFDANEPBG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrackPhotoActivityType {
    None = 0,
    CmdGetTrackPhotoActivityDataCsReq = 7559,
    CmdGetTrackPhotoActivityDataScRsp = 7560,
    CmdQuitTrackPhotoStageScRsp = 7552,
    CmdStartTrackPhotoStageCsReq = 7551,
    CmdSettleTrackPhotoStageCsReq = 7553,
    CmdSettleTrackPhotoStageScRsp = 7558,
    CmdQuitTrackPhotoStageCsReq = 7554,
    CmdStartTrackPhotoStageScRsp = 7555,
}
impl CmdTrackPhotoActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrackPhotoActivityTypeNone",
            Self::CmdGetTrackPhotoActivityDataCsReq => {
                "CmdGetTrackPhotoActivityDataCsReq"
            }
            Self::CmdGetTrackPhotoActivityDataScRsp => {
                "CmdGetTrackPhotoActivityDataScRsp"
            }
            Self::CmdQuitTrackPhotoStageScRsp => "CmdQuitTrackPhotoStageScRsp",
            Self::CmdStartTrackPhotoStageCsReq => "CmdStartTrackPhotoStageCsReq",
            Self::CmdSettleTrackPhotoStageCsReq => "CmdSettleTrackPhotoStageCsReq",
            Self::CmdSettleTrackPhotoStageScRsp => "CmdSettleTrackPhotoStageScRsp",
            Self::CmdQuitTrackPhotoStageCsReq => "CmdQuitTrackPhotoStageCsReq",
            Self::CmdStartTrackPhotoStageScRsp => "CmdStartTrackPhotoStageScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrackPhotoActivityTypeNone" => Some(Self::None),
            "CmdGetTrackPhotoActivityDataCsReq" => {
                Some(Self::CmdGetTrackPhotoActivityDataCsReq)
            }
            "CmdGetTrackPhotoActivityDataScRsp" => {
                Some(Self::CmdGetTrackPhotoActivityDataScRsp)
            }
            "CmdQuitTrackPhotoStageScRsp" => Some(Self::CmdQuitTrackPhotoStageScRsp),
            "CmdStartTrackPhotoStageCsReq" => Some(Self::CmdStartTrackPhotoStageCsReq),
            "CmdSettleTrackPhotoStageCsReq" => Some(Self::CmdSettleTrackPhotoStageCsReq),
            "CmdSettleTrackPhotoStageScRsp" => Some(Self::CmdSettleTrackPhotoStageScRsp),
            "CmdQuitTrackPhotoStageCsReq" => Some(Self::CmdQuitTrackPhotoStageCsReq),
            "CmdStartTrackPhotoStageScRsp" => Some(Self::CmdStartTrackPhotoStageScRsp),
            _ => None,
        }
    }
}
/// HPDEMOKOFNG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrainPartyType {
    None = 0,
    CmdTrainPartyBuildStartStepScRsp = 8025,
    CmdTrainPartyGamePlayStartCsReq = 8050,
    CmdTrainPartyAddBuildDynamicBuffScRsp = 8013,
    CmdTrainPartyTakeBuildLevelAwardScRsp = 8073,
    CmdTrainPartyBuildStartStepCsReq = 8046,
    CmdTrainPartyUpdatePosEnvCsReq = 8010,
    CmdTrainPartyGetDataCsReq = 8036,
    CmdTrainPartyBuildingUpdateNotify = 8075,
    CmdTrainPartyBuildDiyScRsp = 8005,
    CmdTrainPartyEnterCsReq = 8026,
    CmdTrainPartyUseCardCsReq = 8084,
    CmdTrainPartyMoveScNotify = 8067,
    CmdTrainPartySettleNotify = 8052,
    CmdTrainPartyEnterScRsp = 8007,
    CmdTrainPartyTakeBuildLevelAwardCsReq = 8035,
    CmdTrainPartySyncUpdateScNotify = 8024,
    CmdTrainPartyLeaveCsReq = 8053,
    CmdTrainPartyGamePlayStartScRsp = 8048,
    CmdTrainPartyBuildDiyCsReq = 8096,
    CmdTrainPartyUseCardScRsp = 8027,
    CmdTrainPartyHandlePendingActionScRsp = 8043,
    CmdTrainPartyGamePlaySettleNotify = 8088,
    CmdTrainPartyUpdatePosEnvScRsp = 8076,
    CmdTrainPartyHandlePendingActionCsReq = 8034,
    CmdTrainPartyAddBuildDynamicBuffCsReq = 8017,
    CmdTrainPartyLeaveScRsp = 8090,
    CmdTrainPartyGetDataScRsp = 8095,
}
impl CmdTrainPartyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrainPartyTypeNone",
            Self::CmdTrainPartyBuildStartStepScRsp => "CmdTrainPartyBuildStartStepScRsp",
            Self::CmdTrainPartyGamePlayStartCsReq => "CmdTrainPartyGamePlayStartCsReq",
            Self::CmdTrainPartyAddBuildDynamicBuffScRsp => {
                "CmdTrainPartyAddBuildDynamicBuffScRsp"
            }
            Self::CmdTrainPartyTakeBuildLevelAwardScRsp => {
                "CmdTrainPartyTakeBuildLevelAwardScRsp"
            }
            Self::CmdTrainPartyBuildStartStepCsReq => "CmdTrainPartyBuildStartStepCsReq",
            Self::CmdTrainPartyUpdatePosEnvCsReq => "CmdTrainPartyUpdatePosEnvCsReq",
            Self::CmdTrainPartyGetDataCsReq => "CmdTrainPartyGetDataCsReq",
            Self::CmdTrainPartyBuildingUpdateNotify => {
                "CmdTrainPartyBuildingUpdateNotify"
            }
            Self::CmdTrainPartyBuildDiyScRsp => "CmdTrainPartyBuildDiyScRsp",
            Self::CmdTrainPartyEnterCsReq => "CmdTrainPartyEnterCsReq",
            Self::CmdTrainPartyUseCardCsReq => "CmdTrainPartyUseCardCsReq",
            Self::CmdTrainPartyMoveScNotify => "CmdTrainPartyMoveScNotify",
            Self::CmdTrainPartySettleNotify => "CmdTrainPartySettleNotify",
            Self::CmdTrainPartyEnterScRsp => "CmdTrainPartyEnterScRsp",
            Self::CmdTrainPartyTakeBuildLevelAwardCsReq => {
                "CmdTrainPartyTakeBuildLevelAwardCsReq"
            }
            Self::CmdTrainPartySyncUpdateScNotify => "CmdTrainPartySyncUpdateScNotify",
            Self::CmdTrainPartyLeaveCsReq => "CmdTrainPartyLeaveCsReq",
            Self::CmdTrainPartyGamePlayStartScRsp => "CmdTrainPartyGamePlayStartScRsp",
            Self::CmdTrainPartyBuildDiyCsReq => "CmdTrainPartyBuildDiyCsReq",
            Self::CmdTrainPartyUseCardScRsp => "CmdTrainPartyUseCardScRsp",
            Self::CmdTrainPartyHandlePendingActionScRsp => {
                "CmdTrainPartyHandlePendingActionScRsp"
            }
            Self::CmdTrainPartyGamePlaySettleNotify => {
                "CmdTrainPartyGamePlaySettleNotify"
            }
            Self::CmdTrainPartyUpdatePosEnvScRsp => "CmdTrainPartyUpdatePosEnvScRsp",
            Self::CmdTrainPartyHandlePendingActionCsReq => {
                "CmdTrainPartyHandlePendingActionCsReq"
            }
            Self::CmdTrainPartyAddBuildDynamicBuffCsReq => {
                "CmdTrainPartyAddBuildDynamicBuffCsReq"
            }
            Self::CmdTrainPartyLeaveScRsp => "CmdTrainPartyLeaveScRsp",
            Self::CmdTrainPartyGetDataScRsp => "CmdTrainPartyGetDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainPartyTypeNone" => Some(Self::None),
            "CmdTrainPartyBuildStartStepScRsp" => {
                Some(Self::CmdTrainPartyBuildStartStepScRsp)
            }
            "CmdTrainPartyGamePlayStartCsReq" => {
                Some(Self::CmdTrainPartyGamePlayStartCsReq)
            }
            "CmdTrainPartyAddBuildDynamicBuffScRsp" => {
                Some(Self::CmdTrainPartyAddBuildDynamicBuffScRsp)
            }
            "CmdTrainPartyTakeBuildLevelAwardScRsp" => {
                Some(Self::CmdTrainPartyTakeBuildLevelAwardScRsp)
            }
            "CmdTrainPartyBuildStartStepCsReq" => {
                Some(Self::CmdTrainPartyBuildStartStepCsReq)
            }
            "CmdTrainPartyUpdatePosEnvCsReq" => {
                Some(Self::CmdTrainPartyUpdatePosEnvCsReq)
            }
            "CmdTrainPartyGetDataCsReq" => Some(Self::CmdTrainPartyGetDataCsReq),
            "CmdTrainPartyBuildingUpdateNotify" => {
                Some(Self::CmdTrainPartyBuildingUpdateNotify)
            }
            "CmdTrainPartyBuildDiyScRsp" => Some(Self::CmdTrainPartyBuildDiyScRsp),
            "CmdTrainPartyEnterCsReq" => Some(Self::CmdTrainPartyEnterCsReq),
            "CmdTrainPartyUseCardCsReq" => Some(Self::CmdTrainPartyUseCardCsReq),
            "CmdTrainPartyMoveScNotify" => Some(Self::CmdTrainPartyMoveScNotify),
            "CmdTrainPartySettleNotify" => Some(Self::CmdTrainPartySettleNotify),
            "CmdTrainPartyEnterScRsp" => Some(Self::CmdTrainPartyEnterScRsp),
            "CmdTrainPartyTakeBuildLevelAwardCsReq" => {
                Some(Self::CmdTrainPartyTakeBuildLevelAwardCsReq)
            }
            "CmdTrainPartySyncUpdateScNotify" => {
                Some(Self::CmdTrainPartySyncUpdateScNotify)
            }
            "CmdTrainPartyLeaveCsReq" => Some(Self::CmdTrainPartyLeaveCsReq),
            "CmdTrainPartyGamePlayStartScRsp" => {
                Some(Self::CmdTrainPartyGamePlayStartScRsp)
            }
            "CmdTrainPartyBuildDiyCsReq" => Some(Self::CmdTrainPartyBuildDiyCsReq),
            "CmdTrainPartyUseCardScRsp" => Some(Self::CmdTrainPartyUseCardScRsp),
            "CmdTrainPartyHandlePendingActionScRsp" => {
                Some(Self::CmdTrainPartyHandlePendingActionScRsp)
            }
            "CmdTrainPartyGamePlaySettleNotify" => {
                Some(Self::CmdTrainPartyGamePlaySettleNotify)
            }
            "CmdTrainPartyUpdatePosEnvScRsp" => {
                Some(Self::CmdTrainPartyUpdatePosEnvScRsp)
            }
            "CmdTrainPartyHandlePendingActionCsReq" => {
                Some(Self::CmdTrainPartyHandlePendingActionCsReq)
            }
            "CmdTrainPartyAddBuildDynamicBuffCsReq" => {
                Some(Self::CmdTrainPartyAddBuildDynamicBuffCsReq)
            }
            "CmdTrainPartyLeaveScRsp" => Some(Self::CmdTrainPartyLeaveScRsp),
            "CmdTrainPartyGetDataScRsp" => Some(Self::CmdTrainPartyGetDataScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BuildGoalStep {
    None = 0,
    Idle = 1,
    Start = 2,
    Finish = 3,
}
impl BuildGoalStep {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BuildGoalStepNone",
            Self::Idle => "BuildGoalStepIdle",
            Self::Start => "BuildGoalStepStart",
            Self::Finish => "BuildGoalStepFinish",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BuildGoalStepNone" => Some(Self::None),
            "BuildGoalStepIdle" => Some(Self::Idle),
            "BuildGoalStepStart" => Some(Self::Start),
            "BuildGoalStepFinish" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrainPartySrc {
    KTrainPartySrcNone = 0,
    KTrainPartySrcCard = 1,
    KTrainPartySrcGrid = 2,
    KTrainPartySrcPam = 3,
    KTrainPartySrcPassenger = 4,
    KTrainPartySrcBuilding = 5,
}
impl TrainPartySrc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KTrainPartySrcNone => "kTrainPartySrcNone",
            Self::KTrainPartySrcCard => "kTrainPartySrcCard",
            Self::KTrainPartySrcGrid => "kTrainPartySrcGrid",
            Self::KTrainPartySrcPam => "kTrainPartySrcPam",
            Self::KTrainPartySrcPassenger => "kTrainPartySrcPassenger",
            Self::KTrainPartySrcBuilding => "kTrainPartySrcBuilding",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kTrainPartySrcNone" => Some(Self::KTrainPartySrcNone),
            "kTrainPartySrcCard" => Some(Self::KTrainPartySrcCard),
            "kTrainPartySrcGrid" => Some(Self::KTrainPartySrcGrid),
            "kTrainPartySrcPam" => Some(Self::KTrainPartySrcPam),
            "kTrainPartySrcPassenger" => Some(Self::KTrainPartySrcPassenger),
            "kTrainPartySrcBuilding" => Some(Self::KTrainPartySrcBuilding),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrainPartyEventType {
    KDialogueEventNone = 0,
    KGamePlayStartDialogueEvent = 1,
    KGridDialogueEvent = 2,
    KAfterMeetingDialogueEvent = 3,
}
impl TrainPartyEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KDialogueEventNone => "kDialogueEventNone",
            Self::KGamePlayStartDialogueEvent => "kGamePlayStartDialogueEvent",
            Self::KGridDialogueEvent => "kGridDialogueEvent",
            Self::KAfterMeetingDialogueEvent => "kAfterMeetingDialogueEvent",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kDialogueEventNone" => Some(Self::KDialogueEventNone),
            "kGamePlayStartDialogueEvent" => Some(Self::KGamePlayStartDialogueEvent),
            "kGridDialogueEvent" => Some(Self::KGridDialogueEvent),
            "kAfterMeetingDialogueEvent" => Some(Self::KAfterMeetingDialogueEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrainPartyMtSkillBriefType {
    KMtSkillNone = 0,
    KMtSkillModifyBase = 1,
    KMtSkillModifyRatio = 2,
    KMtSkillMultiplyRatio = 3,
    KMtSkillSelfDestroy = 4,
}
impl TrainPartyMtSkillBriefType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KMtSkillNone => "kMtSkillNone",
            Self::KMtSkillModifyBase => "kMtSkillModifyBase",
            Self::KMtSkillModifyRatio => "kMtSkillModifyRatio",
            Self::KMtSkillMultiplyRatio => "kMtSkillMultiplyRatio",
            Self::KMtSkillSelfDestroy => "kMtSkillSelfDestroy",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kMtSkillNone" => Some(Self::KMtSkillNone),
            "kMtSkillModifyBase" => Some(Self::KMtSkillModifyBase),
            "kMtSkillModifyRatio" => Some(Self::KMtSkillModifyRatio),
            "kMtSkillMultiplyRatio" => Some(Self::KMtSkillMultiplyRatio),
            "kMtSkillSelfDestroy" => Some(Self::KMtSkillSelfDestroy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Omnikcccopn {
    TrainPartyMtCategoryNone = 0,
    TrainPartyMtCategoryS = 1,
    TrainPartyMtCategoryA = 2,
    TrainPartyMtCategoryB = 3,
    TrainPartyMtCategoryC = 4,
    TrainPartyMtCategoryD = 5,
    TrainPartyMtCategoryE = 6,
    TrainPartyMtCategoryF = 7,
    TrainPartyMtCategoryG = 8,
}
impl Omnikcccopn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainPartyMtCategoryNone => "TRAIN_PARTY_MT_CATEGORY_NONE",
            Self::TrainPartyMtCategoryS => "TRAIN_PARTY_MT_CATEGORY_S",
            Self::TrainPartyMtCategoryA => "TRAIN_PARTY_MT_CATEGORY_A",
            Self::TrainPartyMtCategoryB => "TRAIN_PARTY_MT_CATEGORY_B",
            Self::TrainPartyMtCategoryC => "TRAIN_PARTY_MT_CATEGORY_C",
            Self::TrainPartyMtCategoryD => "TRAIN_PARTY_MT_CATEGORY_D",
            Self::TrainPartyMtCategoryE => "TRAIN_PARTY_MT_CATEGORY_E",
            Self::TrainPartyMtCategoryF => "TRAIN_PARTY_MT_CATEGORY_F",
            Self::TrainPartyMtCategoryG => "TRAIN_PARTY_MT_CATEGORY_G",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_PARTY_MT_CATEGORY_NONE" => Some(Self::TrainPartyMtCategoryNone),
            "TRAIN_PARTY_MT_CATEGORY_S" => Some(Self::TrainPartyMtCategoryS),
            "TRAIN_PARTY_MT_CATEGORY_A" => Some(Self::TrainPartyMtCategoryA),
            "TRAIN_PARTY_MT_CATEGORY_B" => Some(Self::TrainPartyMtCategoryB),
            "TRAIN_PARTY_MT_CATEGORY_C" => Some(Self::TrainPartyMtCategoryC),
            "TRAIN_PARTY_MT_CATEGORY_D" => Some(Self::TrainPartyMtCategoryD),
            "TRAIN_PARTY_MT_CATEGORY_E" => Some(Self::TrainPartyMtCategoryE),
            "TRAIN_PARTY_MT_CATEGORY_F" => Some(Self::TrainPartyMtCategoryF),
            "TRAIN_PARTY_MT_CATEGORY_G" => Some(Self::TrainPartyMtCategoryG),
            _ => None,
        }
    }
}
/// DGNBPIDKIML
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrainVisitorType {
    None = 0,
    CmdTrainVisitorRewardSendNotify = 3728,
    CmdTrainVisitorBehaviorFinishCsReq = 3736,
    CmdShowNewSupplementVisitorCsReq = 3734,
    CmdGetTrainVisitorRegisterScRsp = 3774,
    CmdTrainVisitorBehaviorFinishScRsp = 3795,
    CmdGetTrainVisitorRegisterCsReq = 3752,
    CmdTrainRefreshTimeNotify = 3767,
    CmdGetTrainVisitorBehaviorCsReq = 3784,
    CmdGetTrainVisitorBehaviorScRsp = 3727,
    CmdShowNewSupplementVisitorScRsp = 3743,
    CmdTakeTrainVisitorUntakenBehaviorRewardCsReq = 3724,
    CmdTakeTrainVisitorUntakenBehaviorRewardScRsp = 3793,
}
impl CmdTrainVisitorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrainVisitorTypeNone",
            Self::CmdTrainVisitorRewardSendNotify => "CmdTrainVisitorRewardSendNotify",
            Self::CmdTrainVisitorBehaviorFinishCsReq => {
                "CmdTrainVisitorBehaviorFinishCsReq"
            }
            Self::CmdShowNewSupplementVisitorCsReq => "CmdShowNewSupplementVisitorCsReq",
            Self::CmdGetTrainVisitorRegisterScRsp => "CmdGetTrainVisitorRegisterScRsp",
            Self::CmdTrainVisitorBehaviorFinishScRsp => {
                "CmdTrainVisitorBehaviorFinishScRsp"
            }
            Self::CmdGetTrainVisitorRegisterCsReq => "CmdGetTrainVisitorRegisterCsReq",
            Self::CmdTrainRefreshTimeNotify => "CmdTrainRefreshTimeNotify",
            Self::CmdGetTrainVisitorBehaviorCsReq => "CmdGetTrainVisitorBehaviorCsReq",
            Self::CmdGetTrainVisitorBehaviorScRsp => "CmdGetTrainVisitorBehaviorScRsp",
            Self::CmdShowNewSupplementVisitorScRsp => "CmdShowNewSupplementVisitorScRsp",
            Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq"
            }
            Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainVisitorTypeNone" => Some(Self::None),
            "CmdTrainVisitorRewardSendNotify" => {
                Some(Self::CmdTrainVisitorRewardSendNotify)
            }
            "CmdTrainVisitorBehaviorFinishCsReq" => {
                Some(Self::CmdTrainVisitorBehaviorFinishCsReq)
            }
            "CmdShowNewSupplementVisitorCsReq" => {
                Some(Self::CmdShowNewSupplementVisitorCsReq)
            }
            "CmdGetTrainVisitorRegisterScRsp" => {
                Some(Self::CmdGetTrainVisitorRegisterScRsp)
            }
            "CmdTrainVisitorBehaviorFinishScRsp" => {
                Some(Self::CmdTrainVisitorBehaviorFinishScRsp)
            }
            "CmdGetTrainVisitorRegisterCsReq" => {
                Some(Self::CmdGetTrainVisitorRegisterCsReq)
            }
            "CmdTrainRefreshTimeNotify" => Some(Self::CmdTrainRefreshTimeNotify),
            "CmdGetTrainVisitorBehaviorCsReq" => {
                Some(Self::CmdGetTrainVisitorBehaviorCsReq)
            }
            "CmdGetTrainVisitorBehaviorScRsp" => {
                Some(Self::CmdGetTrainVisitorBehaviorScRsp)
            }
            "CmdShowNewSupplementVisitorScRsp" => {
                Some(Self::CmdShowNewSupplementVisitorScRsp)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cjmpojoijcb {
    TrainVisitorRewardSendNone = 0,
    TrainVisitorRewardSendRegister = 1,
    TrainVisitorRewardSendMission = 2,
}
impl Cjmpojoijcb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorRewardSendNone => "TRAIN_VISITOR_REWARD_SEND_NONE",
            Self::TrainVisitorRewardSendRegister => "TRAIN_VISITOR_REWARD_SEND_REGISTER",
            Self::TrainVisitorRewardSendMission => "TRAIN_VISITOR_REWARD_SEND_MISSION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REWARD_SEND_NONE" => Some(Self::TrainVisitorRewardSendNone),
            "TRAIN_VISITOR_REWARD_SEND_REGISTER" => {
                Some(Self::TrainVisitorRewardSendRegister)
            }
            "TRAIN_VISITOR_REWARD_SEND_MISSION" => {
                Some(Self::TrainVisitorRewardSendMission)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojgolpcjijb {
    TrainVisitorStatusNone = 0,
    TrainVisitorStatusInit = 1,
    TrainVisitorStatusGetOn = 2,
    TrainVisitorStatusGetOff = 3,
    TrainVisitorStatusBeTrainMember = 4,
}
impl Ojgolpcjijb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorStatusNone => "TRAIN_VISITOR_STATUS_NONE",
            Self::TrainVisitorStatusInit => "TRAIN_VISITOR_STATUS_INIT",
            Self::TrainVisitorStatusGetOn => "TRAIN_VISITOR_STATUS_GET_ON",
            Self::TrainVisitorStatusGetOff => "TRAIN_VISITOR_STATUS_GET_OFF",
            Self::TrainVisitorStatusBeTrainMember => {
                "TRAIN_VISITOR_STATUS_BE_TRAIN_MEMBER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_STATUS_NONE" => Some(Self::TrainVisitorStatusNone),
            "TRAIN_VISITOR_STATUS_INIT" => Some(Self::TrainVisitorStatusInit),
            "TRAIN_VISITOR_STATUS_GET_ON" => Some(Self::TrainVisitorStatusGetOn),
            "TRAIN_VISITOR_STATUS_GET_OFF" => Some(Self::TrainVisitorStatusGetOff),
            "TRAIN_VISITOR_STATUS_BE_TRAIN_MEMBER" => {
                Some(Self::TrainVisitorStatusBeTrainMember)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ipagopieejp {
    TrainVisitorRegisterGetTypeNone = 0,
    TrainVisitorRegisterGetTypeAuto = 1,
    TrainVisitorRegisterGetTypeManual = 2,
}
impl Ipagopieejp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorRegisterGetTypeNone => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE"
            }
            Self::TrainVisitorRegisterGetTypeAuto => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO"
            }
            Self::TrainVisitorRegisterGetTypeManual => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE" => {
                Some(Self::TrainVisitorRegisterGetTypeNone)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO" => {
                Some(Self::TrainVisitorRegisterGetTypeAuto)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL" => {
                Some(Self::TrainVisitorRegisterGetTypeManual)
            }
            _ => None,
        }
    }
}
/// OMNAGABAIOJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTravelBrochureType {
    CmdTravelBrochureNone = 0,
    CmdTravelBrochureSetPageDescStatusCsReq = 6475,
    CmdTravelBrochureSetCustomValueCsReq = 6496,
    CmdTravelBrochureGetDataCsReq = 6436,
    CmdTravelBrochurePageResetScRsp = 6407,
    CmdTravelBrochureApplyPasterScRsp = 6474,
    CmdTravelBrochureSetPageDescStatusScRsp = 6419,
    CmdTravelBrochureApplyPasterListScRsp = 6490,
    CmdTravelBrochurePageResetCsReq = 6426,
    CmdTravelBrochurePageUnlockScNotify = 6484,
    CmdTravelBrochureApplyPasterListCsReq = 6453,
    CmdTravelBrochureSelectMessageCsReq = 6467,
    CmdTravelBrochureUpdatePasterPosCsReq = 6434,
    CmdTravelBrochureSelectMessageScRsp = 6428,
    CmdTravelBrochureSetCustomValueScRsp = 6405,
    CmdTravelBrochureRemovePasterCsReq = 6424,
    CmdTravelBrochureGetPasterScNotify = 6446,
    CmdTravelBrochureUpdatePasterPosScRsp = 6443,
    CmdTravelBrochureGetDataScRsp = 6495,
    CmdTravelBrochureApplyPasterCsReq = 6452,
    CmdTravelBrochureRemovePasterScRsp = 6493,
}
impl CmdTravelBrochureType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CmdTravelBrochureNone => "CmdTravelBrochureNone",
            Self::CmdTravelBrochureSetPageDescStatusCsReq => {
                "CmdTravelBrochureSetPageDescStatusCsReq"
            }
            Self::CmdTravelBrochureSetCustomValueCsReq => {
                "CmdTravelBrochureSetCustomValueCsReq"
            }
            Self::CmdTravelBrochureGetDataCsReq => "CmdTravelBrochureGetDataCsReq",
            Self::CmdTravelBrochurePageResetScRsp => "CmdTravelBrochurePageResetScRsp",
            Self::CmdTravelBrochureApplyPasterScRsp => {
                "CmdTravelBrochureApplyPasterScRsp"
            }
            Self::CmdTravelBrochureSetPageDescStatusScRsp => {
                "CmdTravelBrochureSetPageDescStatusScRsp"
            }
            Self::CmdTravelBrochureApplyPasterListScRsp => {
                "CmdTravelBrochureApplyPasterListScRsp"
            }
            Self::CmdTravelBrochurePageResetCsReq => "CmdTravelBrochurePageResetCsReq",
            Self::CmdTravelBrochurePageUnlockScNotify => {
                "CmdTravelBrochurePageUnlockScNotify"
            }
            Self::CmdTravelBrochureApplyPasterListCsReq => {
                "CmdTravelBrochureApplyPasterListCsReq"
            }
            Self::CmdTravelBrochureSelectMessageCsReq => {
                "CmdTravelBrochureSelectMessageCsReq"
            }
            Self::CmdTravelBrochureUpdatePasterPosCsReq => {
                "CmdTravelBrochureUpdatePasterPosCsReq"
            }
            Self::CmdTravelBrochureSelectMessageScRsp => {
                "CmdTravelBrochureSelectMessageScRsp"
            }
            Self::CmdTravelBrochureSetCustomValueScRsp => {
                "CmdTravelBrochureSetCustomValueScRsp"
            }
            Self::CmdTravelBrochureRemovePasterCsReq => {
                "CmdTravelBrochureRemovePasterCsReq"
            }
            Self::CmdTravelBrochureGetPasterScNotify => {
                "CmdTravelBrochureGetPasterScNotify"
            }
            Self::CmdTravelBrochureUpdatePasterPosScRsp => {
                "CmdTravelBrochureUpdatePasterPosScRsp"
            }
            Self::CmdTravelBrochureGetDataScRsp => "CmdTravelBrochureGetDataScRsp",
            Self::CmdTravelBrochureApplyPasterCsReq => {
                "CmdTravelBrochureApplyPasterCsReq"
            }
            Self::CmdTravelBrochureRemovePasterScRsp => {
                "CmdTravelBrochureRemovePasterScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTravelBrochureNone" => Some(Self::CmdTravelBrochureNone),
            "CmdTravelBrochureSetPageDescStatusCsReq" => {
                Some(Self::CmdTravelBrochureSetPageDescStatusCsReq)
            }
            "CmdTravelBrochureSetCustomValueCsReq" => {
                Some(Self::CmdTravelBrochureSetCustomValueCsReq)
            }
            "CmdTravelBrochureGetDataCsReq" => Some(Self::CmdTravelBrochureGetDataCsReq),
            "CmdTravelBrochurePageResetScRsp" => {
                Some(Self::CmdTravelBrochurePageResetScRsp)
            }
            "CmdTravelBrochureApplyPasterScRsp" => {
                Some(Self::CmdTravelBrochureApplyPasterScRsp)
            }
            "CmdTravelBrochureSetPageDescStatusScRsp" => {
                Some(Self::CmdTravelBrochureSetPageDescStatusScRsp)
            }
            "CmdTravelBrochureApplyPasterListScRsp" => {
                Some(Self::CmdTravelBrochureApplyPasterListScRsp)
            }
            "CmdTravelBrochurePageResetCsReq" => {
                Some(Self::CmdTravelBrochurePageResetCsReq)
            }
            "CmdTravelBrochurePageUnlockScNotify" => {
                Some(Self::CmdTravelBrochurePageUnlockScNotify)
            }
            "CmdTravelBrochureApplyPasterListCsReq" => {
                Some(Self::CmdTravelBrochureApplyPasterListCsReq)
            }
            "CmdTravelBrochureSelectMessageCsReq" => {
                Some(Self::CmdTravelBrochureSelectMessageCsReq)
            }
            "CmdTravelBrochureUpdatePasterPosCsReq" => {
                Some(Self::CmdTravelBrochureUpdatePasterPosCsReq)
            }
            "CmdTravelBrochureSelectMessageScRsp" => {
                Some(Self::CmdTravelBrochureSelectMessageScRsp)
            }
            "CmdTravelBrochureSetCustomValueScRsp" => {
                Some(Self::CmdTravelBrochureSetCustomValueScRsp)
            }
            "CmdTravelBrochureRemovePasterCsReq" => {
                Some(Self::CmdTravelBrochureRemovePasterCsReq)
            }
            "CmdTravelBrochureGetPasterScNotify" => {
                Some(Self::CmdTravelBrochureGetPasterScNotify)
            }
            "CmdTravelBrochureUpdatePasterPosScRsp" => {
                Some(Self::CmdTravelBrochureUpdatePasterPosScRsp)
            }
            "CmdTravelBrochureGetDataScRsp" => Some(Self::CmdTravelBrochureGetDataScRsp),
            "CmdTravelBrochureApplyPasterCsReq" => {
                Some(Self::CmdTravelBrochureApplyPasterCsReq)
            }
            "CmdTravelBrochureRemovePasterScRsp" => {
                Some(Self::CmdTravelBrochureRemovePasterScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lhcnbphnphc {
    PageNone = 0,
    PageUnlocked = 1,
    PageInteracted = 2,
}
impl Lhcnbphnphc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PageNone => "PAGE_NONE",
            Self::PageUnlocked => "PAGE_UNLOCKED",
            Self::PageInteracted => "PAGE_INTERACTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_NONE" => Some(Self::PageNone),
            "PAGE_UNLOCKED" => Some(Self::PageUnlocked),
            "PAGE_INTERACTED" => Some(Self::PageInteracted),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dideiodaemb {
    PageDescNone = 0,
    PageDescShowDetail = 1,
    PageDescCollapse = 2,
}
impl Dideiodaemb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PageDescNone => "PAGE_DESC_NONE",
            Self::PageDescShowDetail => "PAGE_DESC_SHOW_DETAIL",
            Self::PageDescCollapse => "PAGE_DESC_COLLAPSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_DESC_NONE" => Some(Self::PageDescNone),
            "PAGE_DESC_SHOW_DETAIL" => Some(Self::PageDescShowDetail),
            "PAGE_DESC_COLLAPSE" => Some(Self::PageDescCollapse),
            _ => None,
        }
    }
}
/// GPEFHIDELCP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTreasureDungeonType {
    None = 0,
    CmdGetTreasureDungeonActivityDataCsReq = 4434,
    CmdUseTreasureDungeonItemScRsp = 4490,
    CmdEnterTreasureDungeonScRsp = 4425,
    CmdFightTreasureDungeonMonsterCsReq = 4475,
    CmdUseTreasureDungeonItemCsReq = 4453,
    CmdQuitTreasureDungeonScRsp = 4412,
    CmdQuitTreasureDungeonCsReq = 4459,
    CmdOpenTreasureDungeonGridCsReq = 4496,
    CmdGetTreasureDungeonActivityDataScRsp = 4443,
    CmdInteractTreasureDungeonGridScRsp = 4407,
    CmdFightTreasureDungeonMonsterScRsp = 4419,
    CmdTreasureDungeonFinishScNotify = 4495,
    CmdOpenTreasureDungeonGridScRsp = 4405,
    CmdInteractTreasureDungeonGridCsReq = 4426,
    CmdTreasureDungeonDataScNotify = 4436,
    CmdEnterTreasureDungeonCsReq = 4446,
}
impl CmdTreasureDungeonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTreasureDungeonTypeNone",
            Self::CmdGetTreasureDungeonActivityDataCsReq => {
                "CmdGetTreasureDungeonActivityDataCsReq"
            }
            Self::CmdUseTreasureDungeonItemScRsp => "CmdUseTreasureDungeonItemScRsp",
            Self::CmdEnterTreasureDungeonScRsp => "CmdEnterTreasureDungeonScRsp",
            Self::CmdFightTreasureDungeonMonsterCsReq => {
                "CmdFightTreasureDungeonMonsterCsReq"
            }
            Self::CmdUseTreasureDungeonItemCsReq => "CmdUseTreasureDungeonItemCsReq",
            Self::CmdQuitTreasureDungeonScRsp => "CmdQuitTreasureDungeonScRsp",
            Self::CmdQuitTreasureDungeonCsReq => "CmdQuitTreasureDungeonCsReq",
            Self::CmdOpenTreasureDungeonGridCsReq => "CmdOpenTreasureDungeonGridCsReq",
            Self::CmdGetTreasureDungeonActivityDataScRsp => {
                "CmdGetTreasureDungeonActivityDataScRsp"
            }
            Self::CmdInteractTreasureDungeonGridScRsp => {
                "CmdInteractTreasureDungeonGridScRsp"
            }
            Self::CmdFightTreasureDungeonMonsterScRsp => {
                "CmdFightTreasureDungeonMonsterScRsp"
            }
            Self::CmdTreasureDungeonFinishScNotify => "CmdTreasureDungeonFinishScNotify",
            Self::CmdOpenTreasureDungeonGridScRsp => "CmdOpenTreasureDungeonGridScRsp",
            Self::CmdInteractTreasureDungeonGridCsReq => {
                "CmdInteractTreasureDungeonGridCsReq"
            }
            Self::CmdTreasureDungeonDataScNotify => "CmdTreasureDungeonDataScNotify",
            Self::CmdEnterTreasureDungeonCsReq => "CmdEnterTreasureDungeonCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTreasureDungeonTypeNone" => Some(Self::None),
            "CmdGetTreasureDungeonActivityDataCsReq" => {
                Some(Self::CmdGetTreasureDungeonActivityDataCsReq)
            }
            "CmdUseTreasureDungeonItemScRsp" => {
                Some(Self::CmdUseTreasureDungeonItemScRsp)
            }
            "CmdEnterTreasureDungeonScRsp" => Some(Self::CmdEnterTreasureDungeonScRsp),
            "CmdFightTreasureDungeonMonsterCsReq" => {
                Some(Self::CmdFightTreasureDungeonMonsterCsReq)
            }
            "CmdUseTreasureDungeonItemCsReq" => {
                Some(Self::CmdUseTreasureDungeonItemCsReq)
            }
            "CmdQuitTreasureDungeonScRsp" => Some(Self::CmdQuitTreasureDungeonScRsp),
            "CmdQuitTreasureDungeonCsReq" => Some(Self::CmdQuitTreasureDungeonCsReq),
            "CmdOpenTreasureDungeonGridCsReq" => {
                Some(Self::CmdOpenTreasureDungeonGridCsReq)
            }
            "CmdGetTreasureDungeonActivityDataScRsp" => {
                Some(Self::CmdGetTreasureDungeonActivityDataScRsp)
            }
            "CmdInteractTreasureDungeonGridScRsp" => {
                Some(Self::CmdInteractTreasureDungeonGridScRsp)
            }
            "CmdFightTreasureDungeonMonsterScRsp" => {
                Some(Self::CmdFightTreasureDungeonMonsterScRsp)
            }
            "CmdTreasureDungeonFinishScNotify" => {
                Some(Self::CmdTreasureDungeonFinishScNotify)
            }
            "CmdOpenTreasureDungeonGridScRsp" => {
                Some(Self::CmdOpenTreasureDungeonGridScRsp)
            }
            "CmdInteractTreasureDungeonGridCsReq" => {
                Some(Self::CmdInteractTreasureDungeonGridCsReq)
            }
            "CmdTreasureDungeonDataScNotify" => {
                Some(Self::CmdTreasureDungeonDataScNotify)
            }
            "CmdEnterTreasureDungeonCsReq" => Some(Self::CmdEnterTreasureDungeonCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mggemnjkhcf {
    TreasureDungeonRecordNone = 0,
    TreasureDungeonRecordAddHp = 1,
    TreasureDungeonRecordSubHp = 2,
    TreasureDungeonRecordSubHpNoExplore = 3,
    TreasureDungeonRecordAddAttack = 5,
    TreasureDungeonRecordAddDefence = 6,
    TreasureDungeonRecordAddExplore = 9,
    TreasureDungeonRecordSubExplore = 10,
    TreasureDungeonRecordAddExploreOverflow = 11,
    TreasureDungeonRecordSummon = 15,
    TreasureDungeonRecordKill = 16,
    TreasureDungeonRecordAddTrialAvatar = 20,
    TreasureDungeonRecordAddBuff = 24,
    TreasureDungeonRecordUnlockDoor = 25,
    TreasureDungeonRecordEnemyEnhance = 27,
    TreasureDungeonRecordEnemyWeaken = 28,
    TreasureDungeonRecordEnemyAuraRemove = 29,
    TreasureDungeonRecordSpecialMonsterRun = 30,
    TreasureDungeonRecordSpecialMonsterKill = 31,
    TreasureDungeonRecordBattleBuffTriggerSuccess = 33,
    TreasureDungeonRecordBattleBuffTriggerFail = 34,
    TreasureDungeonRecordBattleBuffAddExplore = 35,
    TreasureDungeonRecordBattleBuffOpenGrid = 36,
    TreasureDungeonRecordBattleBuffAddItem = 37,
    TreasureDungeonRecordAvatarDead = 40,
    TreasureDungeonRecordTrialAvatarDead = 41,
    TreasureDungeonRecordAllAvatarDead = 42,
    TreasureDungeonRecordOpenItemChest = 43,
}
impl Mggemnjkhcf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TreasureDungeonRecordNone => "TREASURE_DUNGEON_RECORD_NONE",
            Self::TreasureDungeonRecordAddHp => "TREASURE_DUNGEON_RECORD_ADD_HP",
            Self::TreasureDungeonRecordSubHp => "TREASURE_DUNGEON_RECORD_SUB_HP",
            Self::TreasureDungeonRecordSubHpNoExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE"
            }
            Self::TreasureDungeonRecordAddAttack => "TREASURE_DUNGEON_RECORD_ADD_ATTACK",
            Self::TreasureDungeonRecordAddDefence => {
                "TREASURE_DUNGEON_RECORD_ADD_DEFENCE"
            }
            Self::TreasureDungeonRecordAddExplore => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE"
            }
            Self::TreasureDungeonRecordSubExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_EXPLORE"
            }
            Self::TreasureDungeonRecordAddExploreOverflow => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW"
            }
            Self::TreasureDungeonRecordSummon => "TREASURE_DUNGEON_RECORD_SUMMON",
            Self::TreasureDungeonRecordKill => "TREASURE_DUNGEON_RECORD_KILL",
            Self::TreasureDungeonRecordAddTrialAvatar => {
                "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR"
            }
            Self::TreasureDungeonRecordAddBuff => "TREASURE_DUNGEON_RECORD_ADD_BUFF",
            Self::TreasureDungeonRecordUnlockDoor => {
                "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR"
            }
            Self::TreasureDungeonRecordEnemyEnhance => {
                "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE"
            }
            Self::TreasureDungeonRecordEnemyWeaken => {
                "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN"
            }
            Self::TreasureDungeonRecordEnemyAuraRemove => {
                "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE"
            }
            Self::TreasureDungeonRecordSpecialMonsterRun => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN"
            }
            Self::TreasureDungeonRecordSpecialMonsterKill => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL"
            }
            Self::TreasureDungeonRecordBattleBuffTriggerSuccess => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS"
            }
            Self::TreasureDungeonRecordBattleBuffTriggerFail => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL"
            }
            Self::TreasureDungeonRecordBattleBuffAddExplore => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE"
            }
            Self::TreasureDungeonRecordBattleBuffOpenGrid => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID"
            }
            Self::TreasureDungeonRecordBattleBuffAddItem => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM"
            }
            Self::TreasureDungeonRecordAvatarDead => {
                "TREASURE_DUNGEON_RECORD_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordTrialAvatarDead => {
                "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordAllAvatarDead => {
                "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordOpenItemChest => {
                "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TREASURE_DUNGEON_RECORD_NONE" => Some(Self::TreasureDungeonRecordNone),
            "TREASURE_DUNGEON_RECORD_ADD_HP" => Some(Self::TreasureDungeonRecordAddHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP" => Some(Self::TreasureDungeonRecordSubHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubHpNoExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_ATTACK" => {
                Some(Self::TreasureDungeonRecordAddAttack)
            }
            "TREASURE_DUNGEON_RECORD_ADD_DEFENCE" => {
                Some(Self::TreasureDungeonRecordAddDefence)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_SUB_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW" => {
                Some(Self::TreasureDungeonRecordAddExploreOverflow)
            }
            "TREASURE_DUNGEON_RECORD_SUMMON" => Some(Self::TreasureDungeonRecordSummon),
            "TREASURE_DUNGEON_RECORD_KILL" => Some(Self::TreasureDungeonRecordKill),
            "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR" => {
                Some(Self::TreasureDungeonRecordAddTrialAvatar)
            }
            "TREASURE_DUNGEON_RECORD_ADD_BUFF" => {
                Some(Self::TreasureDungeonRecordAddBuff)
            }
            "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR" => {
                Some(Self::TreasureDungeonRecordUnlockDoor)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE" => {
                Some(Self::TreasureDungeonRecordEnemyEnhance)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN" => {
                Some(Self::TreasureDungeonRecordEnemyWeaken)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE" => {
                Some(Self::TreasureDungeonRecordEnemyAuraRemove)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterRun)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterKill)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerSuccess)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerFail)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID" => {
                Some(Self::TreasureDungeonRecordBattleBuffOpenGrid)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddItem)
            }
            "TREASURE_DUNGEON_RECORD_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordTrialAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAllAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST" => {
                Some(Self::TreasureDungeonRecordOpenItemChest)
            }
            _ => None,
        }
    }
}
/// MJDBCBMABGP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTutorialType {
    None = 0,
    CmdUnlockTutorialGuideScRsp = 1674,
    CmdUnlockTutorialCsReq = 1667,
    CmdFinishTutorialCsReq = 1624,
    CmdUnlockTutorialGuideCsReq = 1652,
    CmdGetTutorialCsReq = 1636,
    CmdGetTutorialGuideScRsp = 1627,
    CmdGetTutorialGuideCsReq = 1684,
    CmdFinishTutorialScRsp = 1693,
    CmdFinishTutorialGuideCsReq = 1634,
    CmdUnlockTutorialScRsp = 1628,
    CmdGetTutorialScRsp = 1695,
    CmdFinishTutorialGuideScRsp = 1643,
}
impl CmdTutorialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTutorialTypeNone",
            Self::CmdUnlockTutorialGuideScRsp => "CmdUnlockTutorialGuideScRsp",
            Self::CmdUnlockTutorialCsReq => "CmdUnlockTutorialCsReq",
            Self::CmdFinishTutorialCsReq => "CmdFinishTutorialCsReq",
            Self::CmdUnlockTutorialGuideCsReq => "CmdUnlockTutorialGuideCsReq",
            Self::CmdGetTutorialCsReq => "CmdGetTutorialCsReq",
            Self::CmdGetTutorialGuideScRsp => "CmdGetTutorialGuideScRsp",
            Self::CmdGetTutorialGuideCsReq => "CmdGetTutorialGuideCsReq",
            Self::CmdFinishTutorialScRsp => "CmdFinishTutorialScRsp",
            Self::CmdFinishTutorialGuideCsReq => "CmdFinishTutorialGuideCsReq",
            Self::CmdUnlockTutorialScRsp => "CmdUnlockTutorialScRsp",
            Self::CmdGetTutorialScRsp => "CmdGetTutorialScRsp",
            Self::CmdFinishTutorialGuideScRsp => "CmdFinishTutorialGuideScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTutorialTypeNone" => Some(Self::None),
            "CmdUnlockTutorialGuideScRsp" => Some(Self::CmdUnlockTutorialGuideScRsp),
            "CmdUnlockTutorialCsReq" => Some(Self::CmdUnlockTutorialCsReq),
            "CmdFinishTutorialCsReq" => Some(Self::CmdFinishTutorialCsReq),
            "CmdUnlockTutorialGuideCsReq" => Some(Self::CmdUnlockTutorialGuideCsReq),
            "CmdGetTutorialCsReq" => Some(Self::CmdGetTutorialCsReq),
            "CmdGetTutorialGuideScRsp" => Some(Self::CmdGetTutorialGuideScRsp),
            "CmdGetTutorialGuideCsReq" => Some(Self::CmdGetTutorialGuideCsReq),
            "CmdFinishTutorialScRsp" => Some(Self::CmdFinishTutorialScRsp),
            "CmdFinishTutorialGuideCsReq" => Some(Self::CmdFinishTutorialGuideCsReq),
            "CmdUnlockTutorialScRsp" => Some(Self::CmdUnlockTutorialScRsp),
            "CmdGetTutorialScRsp" => Some(Self::CmdGetTutorialScRsp),
            "CmdFinishTutorialGuideScRsp" => Some(Self::CmdFinishTutorialGuideScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TutorialStatus {
    TutorialNone = 0,
    TutorialUnlock = 1,
    TutorialFinish = 2,
}
impl TutorialStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TutorialNone => "TUTORIAL_NONE",
            Self::TutorialUnlock => "TUTORIAL_UNLOCK",
            Self::TutorialFinish => "TUTORIAL_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TUTORIAL_NONE" => Some(Self::TutorialNone),
            "TUTORIAL_UNLOCK" => Some(Self::TutorialUnlock),
            "TUTORIAL_FINISH" => Some(Self::TutorialFinish),
            _ => None,
        }
    }
}
/// LCEPODNFIKC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWaypointType {
    None = 0,
    CmdTakeChapterRewardScRsp = 424,
    CmdGetChapterScRsp = 428,
    CmdSetCurWaypointCsReq = 484,
    CmdGetWaypointCsReq = 436,
    CmdGetWaypointScRsp = 495,
    CmdTakeChapterRewardCsReq = 474,
    CmdWaypointShowNewCsNotify = 452,
    CmdSetCurWaypointScRsp = 427,
    CmdGetChapterCsReq = 467,
}
impl CmdWaypointType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWaypointTypeNone",
            Self::CmdTakeChapterRewardScRsp => "CmdTakeChapterRewardScRsp",
            Self::CmdGetChapterScRsp => "CmdGetChapterScRsp",
            Self::CmdSetCurWaypointCsReq => "CmdSetCurWaypointCsReq",
            Self::CmdGetWaypointCsReq => "CmdGetWaypointCsReq",
            Self::CmdGetWaypointScRsp => "CmdGetWaypointScRsp",
            Self::CmdTakeChapterRewardCsReq => "CmdTakeChapterRewardCsReq",
            Self::CmdWaypointShowNewCsNotify => "CmdWaypointShowNewCsNotify",
            Self::CmdSetCurWaypointScRsp => "CmdSetCurWaypointScRsp",
            Self::CmdGetChapterCsReq => "CmdGetChapterCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWaypointTypeNone" => Some(Self::None),
            "CmdTakeChapterRewardScRsp" => Some(Self::CmdTakeChapterRewardScRsp),
            "CmdGetChapterScRsp" => Some(Self::CmdGetChapterScRsp),
            "CmdSetCurWaypointCsReq" => Some(Self::CmdSetCurWaypointCsReq),
            "CmdGetWaypointCsReq" => Some(Self::CmdGetWaypointCsReq),
            "CmdGetWaypointScRsp" => Some(Self::CmdGetWaypointScRsp),
            "CmdTakeChapterRewardCsReq" => Some(Self::CmdTakeChapterRewardCsReq),
            "CmdWaypointShowNewCsNotify" => Some(Self::CmdWaypointShowNewCsNotify),
            "CmdSetCurWaypointScRsp" => Some(Self::CmdSetCurWaypointScRsp),
            "CmdGetChapterCsReq" => Some(Self::CmdGetChapterCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nhfldkbopla {
    WaypointTypeNone = 0,
    WaypointTypeStage = 1,
    WaypointTypePlot = 2,
}
impl Nhfldkbopla {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WaypointTypeNone => "WAYPOINT_TYPE_NONE",
            Self::WaypointTypeStage => "WAYPOINT_TYPE_STAGE",
            Self::WaypointTypePlot => "WAYPOINT_TYPE_PLOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_TYPE_NONE" => Some(Self::WaypointTypeNone),
            "WAYPOINT_TYPE_STAGE" => Some(Self::WaypointTypeStage),
            "WAYPOINT_TYPE_PLOT" => Some(Self::WaypointTypePlot),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Labckccjbga {
    WaypointUnlockNone = 0,
    WaypointUnlockPre = 1,
    WaypointUnlockLevel = 2,
}
impl Labckccjbga {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WaypointUnlockNone => "WAYPOINT_UNLOCK_NONE",
            Self::WaypointUnlockPre => "WAYPOINT_UNLOCK_PRE",
            Self::WaypointUnlockLevel => "WAYPOINT_UNLOCK_LEVEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_UNLOCK_NONE" => Some(Self::WaypointUnlockNone),
            "WAYPOINT_UNLOCK_PRE" => Some(Self::WaypointUnlockPre),
            "WAYPOINT_UNLOCK_LEVEL" => Some(Self::WaypointUnlockLevel),
            _ => None,
        }
    }
}
/// BGEEFCHMBCD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWolfBroType {
    None = 0,
    CmdGetWolfBroGameDataScRsp = 6546,
    CmdWolfBroGameUseBulletCsReq = 6528,
    CmdWolfBroGameActivateBulletScRsp = 6504,
    CmdQuitWolfBroGameScRsp = 6543,
    CmdStartWolfBroGameScRsp = 6550,
    CmdWolfBroGamePickupBulletScRsp = 6513,
    CmdWolfBroGameUseBulletScRsp = 6510,
    CmdArchiveWolfBroGameScRsp = 6523,
    CmdWolfBroGameActivateBulletCsReq = 6517,
    CmdWolfBroGameExplodeMonsterCsReq = 6540,
    CmdWolfBroGameDataChangeScNotify = 6545,
    CmdWolfBroGameExplodeMonsterScRsp = 6511,
    CmdArchiveWolfBroGameCsReq = 6530,
    CmdStartWolfBroGameCsReq = 6512,
    CmdGetWolfBroGameDataCsReq = 6547,
    CmdRestoreWolfBroGameArchiveScRsp = 6549,
    CmdWolfBroGamePickupBulletCsReq = 6548,
    CmdRestoreWolfBroGameArchiveCsReq = 6515,
    CmdQuitWolfBroGameCsReq = 6509,
}
impl CmdWolfBroType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWolfBroTypeNone",
            Self::CmdGetWolfBroGameDataScRsp => "CmdGetWolfBroGameDataScRsp",
            Self::CmdWolfBroGameUseBulletCsReq => "CmdWolfBroGameUseBulletCsReq",
            Self::CmdWolfBroGameActivateBulletScRsp => {
                "CmdWolfBroGameActivateBulletScRsp"
            }
            Self::CmdQuitWolfBroGameScRsp => "CmdQuitWolfBroGameScRsp",
            Self::CmdStartWolfBroGameScRsp => "CmdStartWolfBroGameScRsp",
            Self::CmdWolfBroGamePickupBulletScRsp => "CmdWolfBroGamePickupBulletScRsp",
            Self::CmdWolfBroGameUseBulletScRsp => "CmdWolfBroGameUseBulletScRsp",
            Self::CmdArchiveWolfBroGameScRsp => "CmdArchiveWolfBroGameScRsp",
            Self::CmdWolfBroGameActivateBulletCsReq => {
                "CmdWolfBroGameActivateBulletCsReq"
            }
            Self::CmdWolfBroGameExplodeMonsterCsReq => {
                "CmdWolfBroGameExplodeMonsterCsReq"
            }
            Self::CmdWolfBroGameDataChangeScNotify => "CmdWolfBroGameDataChangeScNotify",
            Self::CmdWolfBroGameExplodeMonsterScRsp => {
                "CmdWolfBroGameExplodeMonsterScRsp"
            }
            Self::CmdArchiveWolfBroGameCsReq => "CmdArchiveWolfBroGameCsReq",
            Self::CmdStartWolfBroGameCsReq => "CmdStartWolfBroGameCsReq",
            Self::CmdGetWolfBroGameDataCsReq => "CmdGetWolfBroGameDataCsReq",
            Self::CmdRestoreWolfBroGameArchiveScRsp => {
                "CmdRestoreWolfBroGameArchiveScRsp"
            }
            Self::CmdWolfBroGamePickupBulletCsReq => "CmdWolfBroGamePickupBulletCsReq",
            Self::CmdRestoreWolfBroGameArchiveCsReq => {
                "CmdRestoreWolfBroGameArchiveCsReq"
            }
            Self::CmdQuitWolfBroGameCsReq => "CmdQuitWolfBroGameCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWolfBroTypeNone" => Some(Self::None),
            "CmdGetWolfBroGameDataScRsp" => Some(Self::CmdGetWolfBroGameDataScRsp),
            "CmdWolfBroGameUseBulletCsReq" => Some(Self::CmdWolfBroGameUseBulletCsReq),
            "CmdWolfBroGameActivateBulletScRsp" => {
                Some(Self::CmdWolfBroGameActivateBulletScRsp)
            }
            "CmdQuitWolfBroGameScRsp" => Some(Self::CmdQuitWolfBroGameScRsp),
            "CmdStartWolfBroGameScRsp" => Some(Self::CmdStartWolfBroGameScRsp),
            "CmdWolfBroGamePickupBulletScRsp" => {
                Some(Self::CmdWolfBroGamePickupBulletScRsp)
            }
            "CmdWolfBroGameUseBulletScRsp" => Some(Self::CmdWolfBroGameUseBulletScRsp),
            "CmdArchiveWolfBroGameScRsp" => Some(Self::CmdArchiveWolfBroGameScRsp),
            "CmdWolfBroGameActivateBulletCsReq" => {
                Some(Self::CmdWolfBroGameActivateBulletCsReq)
            }
            "CmdWolfBroGameExplodeMonsterCsReq" => {
                Some(Self::CmdWolfBroGameExplodeMonsterCsReq)
            }
            "CmdWolfBroGameDataChangeScNotify" => {
                Some(Self::CmdWolfBroGameDataChangeScNotify)
            }
            "CmdWolfBroGameExplodeMonsterScRsp" => {
                Some(Self::CmdWolfBroGameExplodeMonsterScRsp)
            }
            "CmdArchiveWolfBroGameCsReq" => Some(Self::CmdArchiveWolfBroGameCsReq),
            "CmdStartWolfBroGameCsReq" => Some(Self::CmdStartWolfBroGameCsReq),
            "CmdGetWolfBroGameDataCsReq" => Some(Self::CmdGetWolfBroGameDataCsReq),
            "CmdRestoreWolfBroGameArchiveScRsp" => {
                Some(Self::CmdRestoreWolfBroGameArchiveScRsp)
            }
            "CmdWolfBroGamePickupBulletCsReq" => {
                Some(Self::CmdWolfBroGamePickupBulletCsReq)
            }
            "CmdRestoreWolfBroGameArchiveCsReq" => {
                Some(Self::CmdRestoreWolfBroGameArchiveCsReq)
            }
            "CmdQuitWolfBroGameCsReq" => Some(Self::CmdQuitWolfBroGameCsReq),
            _ => None,
        }
    }
}
/// AJAALFIABEN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWorldUnlockType {
    None = 0,
    CmdWorldUnlockScRsp = 7627,
    CmdWorldUnlockCsReq = 7626,
}
impl CmdWorldUnlockType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWorldUnlockTypeNone",
            Self::CmdWorldUnlockScRsp => "CmdWorldUnlockScRsp",
            Self::CmdWorldUnlockCsReq => "CmdWorldUnlockCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWorldUnlockTypeNone" => Some(Self::None),
            "CmdWorldUnlockScRsp" => Some(Self::CmdWorldUnlockScRsp),
            "CmdWorldUnlockCsReq" => Some(Self::CmdWorldUnlockCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aanmkonagpg {
    DispatchTypeNone = 0,
    DispatchTypeByAddr = 1,
    DispatchTypeByMod = 2,
    DispatchTypeByRand = 3,
    DispatchTypeByChash = 4,
    DispatchTypeByStickySession = 5,
    DispatchTypeByObject = 6,
}
impl Aanmkonagpg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DispatchTypeNone => "DISPATCH_TYPE_NONE",
            Self::DispatchTypeByAddr => "DISPATCH_TYPE_BY_ADDR",
            Self::DispatchTypeByMod => "DISPATCH_TYPE_BY_MOD",
            Self::DispatchTypeByRand => "DISPATCH_TYPE_BY_RAND",
            Self::DispatchTypeByChash => "DISPATCH_TYPE_BY_CHASH",
            Self::DispatchTypeByStickySession => "DISPATCH_TYPE_BY_STICKY_SESSION",
            Self::DispatchTypeByObject => "DISPATCH_TYPE_BY_OBJECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DISPATCH_TYPE_NONE" => Some(Self::DispatchTypeNone),
            "DISPATCH_TYPE_BY_ADDR" => Some(Self::DispatchTypeByAddr),
            "DISPATCH_TYPE_BY_MOD" => Some(Self::DispatchTypeByMod),
            "DISPATCH_TYPE_BY_RAND" => Some(Self::DispatchTypeByRand),
            "DISPATCH_TYPE_BY_CHASH" => Some(Self::DispatchTypeByChash),
            "DISPATCH_TYPE_BY_STICKY_SESSION" => Some(Self::DispatchTypeByStickySession),
            "DISPATCH_TYPE_BY_OBJECT" => Some(Self::DispatchTypeByObject),
            _ => None,
        }
    }
}
